; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20180.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20180.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i64, i32* }

@RoboVikiXploiting_ways = common dso_local global %struct.TYPE_2__* null, align 8
@.str = private unnamed_addr constant [79 x i8] c"\0ARobotex Viking Server 1.0.6 Build 355 and prior by wildcoyote@coders-pt.org\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [68 x i8] c"Sintaxe: %s <host> <type number> <bind shell port> [port (server)]\0A\00", align 1
@.str.2 = private unnamed_addr constant [38 x i8] c"\0AFlamez to wildcoyote@coders-pt.org\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"Invalid Server Port... [(port_number <= 0)]\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"Try again...heh\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"Invalid Server/Bind Shell Port... [(port_number <= 0)]\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"Invalid type value (max type=%d)\0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  br label %7

7:                                                ; preds = %17, %2
  %8 = load %struct.TYPE_2__*, %struct.TYPE_2__** @RoboVikiXploiting_ways, align 8
  %9 = load i32, i32* %6, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %8, i64 %10
  %12 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %11, i32 0, i32 1
  %13 = load i32*, i32** %12, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %16

15:                                               ; preds = %7
  br label %20

16:                                               ; preds = %7
  br label %17

17:                                               ; preds = %16
  %18 = load i32, i32* %6, align 4
  %19 = add nsw i32 %18, 1
  store i32 %19, i32* %6, align 4
  br label %7

20:                                               ; preds = %15
  %21 = load i32, i32* %6, align 4
  %22 = add nsw i32 %21, -1
  store i32 %22, i32* %6, align 4
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str, i64 0, i64 0))
  %24 = load i32, i32* %4, align 4
  %25 = icmp slt i32 %24, 4
  br i1 %25, label %26, label %33

26:                                               ; preds = %20
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.1, i64 0, i64 0), i8* %29)
  %31 = call i32 (...) @show_types()
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  br label %114

33:                                               ; preds = %20
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  %37 = call i64 @atoi(i8* %36)
  %38 = load i32, i32* %6, align 4
  %39 = sext i32 %38 to i64
  %40 = icmp ule i64 %37, %39
  br i1 %40, label %41, label %108

41:                                               ; preds = %33
  %42 = load i32, i32* %4, align 4
  %43 = icmp eq i32 %42, 4
  br i1 %43, label %44, label %67

44:                                               ; preds = %41
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 3
  %47 = load i8*, i8** %46, align 8
  %48 = call i64 @atoi(i8* %47)
  %49 = icmp ugt i64 %48, 0
  br i1 %49, label %50, label %63

50:                                               ; preds = %44
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 2
  %56 = load i8*, i8** %55, align 8
  %57 = call i64 @atoi(i8* %56)
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 3
  %60 = load i8*, i8** %59, align 8
  %61 = call i64 @atoi(i8* %60)
  %62 = call i32 @VikingXown(i8* %53, i64 %57, i64 %61)
  br label %66

63:                                               ; preds = %44
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0))
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
  br label %66

66:                                               ; preds = %63, %50
  br label %107

67:                                               ; preds = %41
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 3
  %70 = load i8*, i8** %69, align 8
  %71 = call i64 @atoi(i8* %70)
  %72 = icmp ugt i64 %71, 0
  br i1 %72, label %73, label %103

73:                                               ; preds = %67
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 4
  %76 = load i8*, i8** %75, align 8
  %77 = call i64 @atoi(i8* %76)
  %78 = icmp ugt i64 %77, 0
  br i1 %78, label %79, label %103

79:                                               ; preds = %73
  %80 = load i8**, i8*** %5, align 8
  %81 = getelementptr inbounds i8*, i8** %80, i64 4
  %82 = load i8*, i8** %81, align 8
  %83 = call i64 @atoi(i8* %82)
  %84 = load %struct.TYPE_2__*, %struct.TYPE_2__** @RoboVikiXploiting_ways, align 8
  %85 = load i8**, i8*** %5, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 2
  %87 = load i8*, i8** %86, align 8
  %88 = call i64 @atoi(i8* %87)
  %89 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %84, i64 %88
  %90 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %89, i32 0, i32 0
  store i64 %83, i64* %90, align 8
  %91 = load i8**, i8*** %5, align 8
  %92 = getelementptr inbounds i8*, i8** %91, i64 1
  %93 = load i8*, i8** %92, align 8
  %94 = load i8**, i8*** %5, align 8
  %95 = getelementptr inbounds i8*, i8** %94, i64 2
  %96 = load i8*, i8** %95, align 8
  %97 = call i64 @atoi(i8* %96)
  %98 = load i8**, i8*** %5, align 8
  %99 = getelementptr inbounds i8*, i8** %98, i64 3
  %100 = load i8*, i8** %99, align 8
  %101 = call i64 @atoi(i8* %100)
  %102 = call i32 @VikingXown(i8* %93, i64 %97, i64 %101)
  br label %106

103:                                              ; preds = %73, %67
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0))
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0))
  br label %106

106:                                              ; preds = %103, %79
  br label %107

107:                                              ; preds = %106, %66
  br label %113

108:                                              ; preds = %33
  %109 = load i32, i32* %6, align 4
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), i32 %109)
  %111 = call i32 (...) @show_types()
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0))
  br label %113

113:                                              ; preds = %108, %107
  br label %114

114:                                              ; preds = %113, %26
  %115 = load i32, i32* %3, align 4
  ret i32 %115
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @show_types(...) #1

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @VikingXown(i8*, i64, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
