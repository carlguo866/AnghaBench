; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_130.c_cmdshell2.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_130.c_cmdshell2.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i64, i32 }

@RECVTIMEOUT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [24 x i8] c"[x] Connection closed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cmdshell2(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca [1000 x i8], align 16
  %5 = alloca %struct.timeval, align 8
  %6 = alloca [2 x i64], align 16
  store i32 %0, i32* %2, align 4
  %7 = load i32, i32* @RECVTIMEOUT, align 4
  %8 = getelementptr inbounds %struct.timeval, %struct.timeval* %5, i32 0, i32 1
  store i32 %7, i32* %8, align 8
  %9 = getelementptr inbounds %struct.timeval, %struct.timeval* %5, i32 0, i32 0
  store i64 0, i64* %9, align 8
  br label %10

10:                                               ; preds = %1, %53
  %11 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 0
  store i64 1, i64* %11, align 16
  %12 = load i32, i32* %2, align 4
  %13 = sext i32 %12 to i64
  %14 = getelementptr inbounds [2 x i64], [2 x i64]* %6, i64 0, i64 1
  store i64 %13, i64* %14, align 8
  %15 = bitcast [2 x i64]* %6 to i32*
  %16 = call i32 @select(i32 0, i32* %15, i32* null, i32* null, %struct.timeval* %5)
  store i32 %16, i32* %3, align 4
  %17 = load i32, i32* %3, align 4
  %18 = icmp eq i32 %17, 1
  br i1 %18, label %19, label %36

19:                                               ; preds = %10
  %20 = load i32, i32* %2, align 4
  %21 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %22 = call i32 @recv(i32 %20, i8* %21, i32 1000, i32 0)
  store i32 %22, i32* %3, align 4
  %23 = load i32, i32* %3, align 4
  %24 = icmp sle i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  br label %54

27:                                               ; preds = %19
  %28 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %29 = load i32, i32* %3, align 4
  %30 = call i32 @write(i32 1, i8* %28, i32 %29)
  store i32 %30, i32* %3, align 4
  %31 = load i32, i32* %3, align 4
  %32 = icmp sle i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %27
  %34 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  br label %54

35:                                               ; preds = %27
  br label %53

36:                                               ; preds = %10
  %37 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %38 = call i32 @read(i32 0, i8* %37, i32 1000)
  store i32 %38, i32* %3, align 4
  %39 = load i32, i32* %3, align 4
  %40 = icmp sle i32 %39, 0
  br i1 %40, label %41, label %43

41:                                               ; preds = %36
  %42 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  br label %54

43:                                               ; preds = %36
  %44 = load i32, i32* %2, align 4
  %45 = getelementptr inbounds [1000 x i8], [1000 x i8]* %4, i64 0, i64 0
  %46 = load i32, i32* %3, align 4
  %47 = call i32 @send(i32 %44, i8* %45, i32 %46, i32 0)
  store i32 %47, i32* %3, align 4
  %48 = load i32, i32* %3, align 4
  %49 = icmp sle i32 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %43
  %51 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  br label %54

52:                                               ; preds = %43
  br label %53

53:                                               ; preds = %52, %35
  br label %10

54:                                               ; preds = %50, %41, %33, %25
  ret void
}

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
