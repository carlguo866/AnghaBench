; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_11857.c_send_recv.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_11857.c_send_recv.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"\0AError: socket timeout, no reply received\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @send_recv(i32 %0, i8* %1, i32 %2, i8* %3, i32 %4, %struct.sockaddr_in* %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 %0, i32* %9, align 4
  store i8* %1, i8** %10, align 8
  store i32 %2, i32* %11, align 4
  store i8* %3, i8** %12, align 8
  store i32 %4, i32* %13, align 4
  store %struct.sockaddr_in* %5, %struct.sockaddr_in** %14, align 8
  store i32 %6, i32* %15, align 4
  %18 = load i8*, i8** %10, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %20, label %36

20:                                               ; preds = %7
  %21 = load i8*, i8** %12, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %36, label %23

23:                                               ; preds = %20
  %24 = load i32, i32* @stdout, align 4
  %25 = call i32 @fputc(i8 signext 46, i32 %24)
  %26 = load i32, i32* %9, align 4
  %27 = load i8*, i8** %10, align 8
  %28 = load i32, i32* %11, align 4
  %29 = load %struct.sockaddr_in*, %struct.sockaddr_in** %14, align 8
  %30 = bitcast %struct.sockaddr_in* %29 to %struct.sockaddr*
  %31 = call i64 @sendto(i32 %26, i8* %27, i32 %28, i32 0, %struct.sockaddr* %30, i32 4)
  %32 = icmp slt i64 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %23
  %34 = call i32 (...) @std_err()
  br label %35

35:                                               ; preds = %33, %23
  store i32 0, i32* %8, align 4
  br label %97

36:                                               ; preds = %20, %7
  %37 = load i8*, i8** %10, align 8
  %38 = icmp ne i8* %37, null
  br i1 %38, label %39, label %75

39:                                               ; preds = %36
  store i32 2, i32* %16, align 4
  br label %40

40:                                               ; preds = %61, %39
  %41 = load i32, i32* %16, align 4
  %42 = icmp ne i32 %41, 0
  br i1 %42, label %43, label %64

43:                                               ; preds = %40
  %44 = load i32, i32* @stdout, align 4
  %45 = call i32 @fputc(i8 signext 46, i32 %44)
  %46 = load i32, i32* %9, align 4
  %47 = load i8*, i8** %10, align 8
  %48 = load i32, i32* %11, align 4
  %49 = load %struct.sockaddr_in*, %struct.sockaddr_in** %14, align 8
  %50 = bitcast %struct.sockaddr_in* %49 to %struct.sockaddr*
  %51 = call i64 @sendto(i32 %46, i8* %47, i32 %48, i32 0, %struct.sockaddr* %50, i32 4)
  %52 = icmp slt i64 %51, 0
  br i1 %52, label %53, label %55

53:                                               ; preds = %43
  %54 = call i32 (...) @std_err()
  br label %55

55:                                               ; preds = %53, %43
  %56 = load i32, i32* %9, align 4
  %57 = call i64 @timeout(i32 %56, i32 1)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %60, label %59

59:                                               ; preds = %55
  br label %64

60:                                               ; preds = %55
  br label %61

61:                                               ; preds = %60
  %62 = load i32, i32* %16, align 4
  %63 = add nsw i32 %62, -1
  store i32 %63, i32* %16, align 4
  br label %40

64:                                               ; preds = %59, %40
  %65 = load i32, i32* %16, align 4
  %66 = icmp ne i32 %65, 0
  br i1 %66, label %74, label %67

67:                                               ; preds = %64
  %68 = load i32, i32* %15, align 4
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %71, label %70

70:                                               ; preds = %67
  store i32 -1, i32* %8, align 4
  br label %97

71:                                               ; preds = %67
  %72 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %73 = call i32 @exit(i32 1) #3
  unreachable

74:                                               ; preds = %64
  br label %81

75:                                               ; preds = %36
  %76 = load i32, i32* %9, align 4
  %77 = call i64 @timeout(i32 %76, i32 3)
  %78 = icmp slt i64 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %75
  store i32 -1, i32* %8, align 4
  br label %97

80:                                               ; preds = %75
  br label %81

81:                                               ; preds = %80, %74
  %82 = load i32, i32* @stdout, align 4
  %83 = call i32 @fputc(i8 signext 46, i32 %82)
  %84 = load i32, i32* %9, align 4
  %85 = load i8*, i8** %12, align 8
  %86 = load i32, i32* %13, align 4
  %87 = call i32 @recvfrom(i32 %84, i8* %85, i32 %86, i32 0, i32* null, i32* null)
  store i32 %87, i32* %17, align 4
  %88 = load i32, i32* %17, align 4
  %89 = icmp slt i32 %88, 0
  br i1 %89, label %90, label %95

90:                                               ; preds = %81
  %91 = load i32, i32* %15, align 4
  %92 = icmp ne i32 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = call i32 (...) @std_err()
  br label %95

95:                                               ; preds = %93, %90, %81
  %96 = load i32, i32* %17, align 4
  store i32 %96, i32* %8, align 4
  br label %97

97:                                               ; preds = %95, %79, %70, %35
  %98 = load i32, i32* %8, align 4
  ret i32 %98
}

declare dso_local i32 @fputc(i8 signext, i32) #1

declare dso_local i64 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @std_err(...) #1

declare dso_local i64 @timeout(i32, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @recvfrom(i32, i8*, i32, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
