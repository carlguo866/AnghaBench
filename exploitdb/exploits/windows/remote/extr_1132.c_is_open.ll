; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1132.c_is_open.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1132.c_is_open.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.timeval = type { i32, i64 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"socket failed!\0A\00", align 1
@F_GETFL = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@EINPROGRESS = common dso_local global i32 0, align 4
@ETIMEDOUT = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_ERROR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"select failed!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @is_open(i8* %0, i16 zeroext %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i16, align 2
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca %struct.timeval, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i16 %1, i16* %5, align 2
  store i32 0, i32* %10, align 4
  store i64 10000, i64* %11, align 8
  %17 = call i32 @memset(%struct.sockaddr_in* %12, i32 0, i32 12)
  %18 = load i32, i32* @AF_INET, align 4
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %18, i32* %19, align 4
  %20 = load i16, i16* %5, align 2
  %21 = call i32 @htons(i16 zeroext %20)
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* @AF_INET, align 4
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %26 = call i32 @inet_pton(i32 %23, i8* %24, i32* %25)
  %27 = load i32, i32* @AF_INET, align 4
  %28 = load i32, i32* @SOCK_STREAM, align 4
  %29 = call i32 @socket(i32 %27, i32 %28, i32 0)
  store i32 %29, i32* %6, align 4
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %34

31:                                               ; preds = %2
  %32 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  %33 = call i32 @exit(i32 -1) #3
  unreachable

34:                                               ; preds = %2
  %35 = load i32, i32* %6, align 4
  %36 = load i32, i32* @F_GETFL, align 4
  %37 = call i64 @fcntl(i32 %35, i32 %36, i32 0)
  %38 = trunc i64 %37 to i32
  store i32 %38, i32* %9, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %34
  %41 = load i32, i32* %6, align 4
  %42 = call i32 @close(i32 %41)
  store i32 -1, i32* %3, align 4
  br label %125

43:                                               ; preds = %34
  %44 = load i32, i32* %6, align 4
  %45 = load i32, i32* @F_SETFL, align 4
  %46 = load i32, i32* %9, align 4
  %47 = load i32, i32* @O_NONBLOCK, align 4
  %48 = or i32 %46, %47
  %49 = call i64 @fcntl(i32 %44, i32 %45, i32 %48)
  %50 = icmp slt i64 %49, 0
  br i1 %50, label %51, label %54

51:                                               ; preds = %43
  %52 = load i32, i32* %6, align 4
  %53 = call i32 @close(i32 %52)
  store i32 -1, i32* %3, align 4
  br label %125

54:                                               ; preds = %43
  %55 = load i32, i32* %6, align 4
  %56 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %57 = call i32 @connect(i32 %55, %struct.sockaddr* %56, i32 4)
  store i32 %57, i32* %7, align 4
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %67

59:                                               ; preds = %54
  %60 = load i32, i32* @errno, align 4
  %61 = load i32, i32* @EINPROGRESS, align 4
  %62 = icmp ne i32 %60, %61
  br i1 %62, label %63, label %66

63:                                               ; preds = %59
  %64 = load i32, i32* %6, align 4
  %65 = call i32 @close(i32 %64)
  store i32 -1, i32* %3, align 4
  br label %125

66:                                               ; preds = %59
  br label %67

67:                                               ; preds = %66, %54
  %68 = load i32, i32* %7, align 4
  %69 = icmp eq i32 %68, 0
  br i1 %69, label %70, label %71

70:                                               ; preds = %67
  br label %108

71:                                               ; preds = %67
  %72 = call i32 @FD_ZERO(i32* %14)
  %73 = load i32, i32* %6, align 4
  %74 = call i32 @FD_SET(i32 %73, i32* %14)
  %75 = load i32, i32* %14, align 4
  store i32 %75, i32* %15, align 4
  %76 = load i32, i32* %10, align 4
  %77 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 0
  store i32 %76, i32* %77, align 8
  %78 = load i64, i64* %11, align 8
  %79 = getelementptr inbounds %struct.timeval, %struct.timeval* %13, i32 0, i32 1
  store i64 %78, i64* %79, align 8
  %80 = load i32, i32* %6, align 4
  %81 = add nsw i32 %80, 1
  %82 = call i32 @select(i32 %81, i32* %14, i32* %15, i32* null, %struct.timeval* %13)
  store i32 %82, i32* %7, align 4
  %83 = icmp eq i32 %82, 0
  br i1 %83, label %84, label %88

84:                                               ; preds = %71
  %85 = load i32, i32* %6, align 4
  %86 = call i32 @close(i32 %85)
  %87 = load i32, i32* @ETIMEDOUT, align 4
  store i32 %87, i32* @errno, align 4
  store i32 1, i32* %3, align 4
  br label %125

88:                                               ; preds = %71
  %89 = load i32, i32* %6, align 4
  %90 = call i64 @FD_ISSET(i32 %89, i32* %14)
  %91 = icmp ne i64 %90, 0
  br i1 %91, label %96, label %92

92:                                               ; preds = %88
  %93 = load i32, i32* %6, align 4
  %94 = call i64 @FD_ISSET(i32 %93, i32* %15)
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %104

96:                                               ; preds = %92, %88
  store i32 4, i32* %16, align 4
  %97 = load i32, i32* %6, align 4
  %98 = load i32, i32* @SOL_SOCKET, align 4
  %99 = load i32, i32* @SO_ERROR, align 4
  %100 = call i64 @getsockopt(i32 %97, i32 %98, i32 %99, i32* %8, i32* %16)
  %101 = icmp slt i64 %100, 0
  br i1 %101, label %102, label %103

102:                                              ; preds = %96
  store i32 -1, i32* %3, align 4
  br label %125

103:                                              ; preds = %96
  br label %107

104:                                              ; preds = %92
  %105 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %106 = call i32 @exit(i32 1) #3
  unreachable

107:                                              ; preds = %103
  br label %108

108:                                              ; preds = %107, %70
  %109 = load i32, i32* %6, align 4
  %110 = load i32, i32* @F_SETFL, align 4
  %111 = load i32, i32* %9, align 4
  %112 = call i64 @fcntl(i32 %109, i32 %110, i32 %111)
  %113 = icmp slt i64 %112, 0
  br i1 %113, label %114, label %117

114:                                              ; preds = %108
  %115 = load i32, i32* %6, align 4
  %116 = call i32 @close(i32 %115)
  store i32 -1, i32* %3, align 4
  br label %125

117:                                              ; preds = %108
  %118 = load i32, i32* %8, align 4
  %119 = icmp ne i32 %118, 0
  br i1 %119, label %120, label %124

120:                                              ; preds = %117
  %121 = load i32, i32* %6, align 4
  %122 = call i32 @close(i32 %121)
  %123 = load i32, i32* %8, align 4
  store i32 %123, i32* @errno, align 4
  store i32 -1, i32* %3, align 4
  br label %125

124:                                              ; preds = %117
  store i32 0, i32* %3, align 4
  br label %125

125:                                              ; preds = %124, %120, %114, %102, %84, %63, %51, %40
  %126 = load i32, i32* %3, align 4
  ret i32 %126
}

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @inet_pton(i32, i8*, i32*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @fcntl(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i64 @getsockopt(i32, i32, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
