; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20950.c_runshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20950.c_runshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [34 x i8] c"\0APress CTRL_C to exit the shell!\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"Connection closed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @runshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %6 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  br label %7

7:                                                ; preds = %49, %1
  %8 = call i32 @FD_ZERO(i32* %5)
  %9 = call i32 @FD_SET(i32 0, i32* %5)
  %10 = load i32, i32* %2, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %5)
  %12 = load i32, i32* %2, align 4
  %13 = add nsw i32 %12, 1
  %14 = call i64 @select(i32 %13, i32* %5, i32* null, i32* null, i32* null)
  %15 = icmp slt i64 %14, 0
  br i1 %15, label %16, label %18

16:                                               ; preds = %7
  %17 = call i32 @exit(i32 -1) #3
  unreachable

18:                                               ; preds = %7
  %19 = load i32, i32* %2, align 4
  %20 = call i64 @FD_ISSET(i32 %19, i32* %5)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %37

22:                                               ; preds = %18
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %24 = call i32 @bzero(i8* %23, i32 1024)
  %25 = load i32, i32* %2, align 4
  %26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %27 = call i32 @read(i32 %25, i8* %26, i32 1024)
  store i32 %27, i32* %4, align 4
  %28 = icmp slt i32 %27, 1
  br i1 %28, label %29, label %33

29:                                               ; preds = %22
  %30 = load i32, i32* @stderr, align 4
  %31 = call i32 @fprintf(i32 %30, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 @exit(i32 -1) #3
  unreachable

33:                                               ; preds = %22
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %35 = load i32, i32* %4, align 4
  %36 = call i32 @write(i32 1, i8* %34, i32 %35)
  br label %37

37:                                               ; preds = %33, %18
  %38 = call i64 @FD_ISSET(i32 0, i32* %5)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %49

40:                                               ; preds = %37
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %42 = call i32 @bzero(i8* %41, i32 1024)
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %44 = call i32 @read(i32 0, i8* %43, i32 1024)
  store i32 %44, i32* %4, align 4
  %45 = load i32, i32* %2, align 4
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %47 = load i32, i32* %4, align 4
  %48 = call i32 @write(i32 %45, i8* %46, i32 %47)
  br label %49

49:                                               ; preds = %40, %37
  br label %7
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i64 @select(i32, i32*, i32*, i32*, i32*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
