; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_165.c_xaut_encrypt.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_165.c_xaut_encrypt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [41 x i8] c"[-] xaut_encrypt: Too long input buffer\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xaut_encrypt(i8* %0, i8* %1, i32 %2, i64 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca [512 x i8], align 16
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i8* %1, i8** %7, align 8
  store i32 %2, i32* %8, align 4
  store i64 %3, i64* %9, align 8
  store i32 0, i32* %11, align 4
  br label %13

13:                                               ; preds = %49, %4
  %14 = load i32, i32* %11, align 4
  %15 = sext i32 %14 to i64
  %16 = icmp ult i64 %15, 128
  br i1 %16, label %17, label %52

17:                                               ; preds = %13
  %18 = load i64, i64* %9, align 8
  %19 = trunc i64 %18 to i8
  %20 = load i32, i32* %11, align 4
  %21 = mul nsw i32 %20, 4
  %22 = add nsw i32 %21, 0
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 %23
  store i8 %19, i8* %24, align 1
  %25 = load i64, i64* %9, align 8
  %26 = lshr i64 %25, 8
  %27 = trunc i64 %26 to i8
  %28 = load i32, i32* %11, align 4
  %29 = mul nsw i32 %28, 4
  %30 = add nsw i32 %29, 1
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 %31
  store i8 %27, i8* %32, align 1
  %33 = load i64, i64* %9, align 8
  %34 = lshr i64 %33, 16
  %35 = trunc i64 %34 to i8
  %36 = load i32, i32* %11, align 4
  %37 = mul nsw i32 %36, 4
  %38 = add nsw i32 %37, 2
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 %39
  store i8 %35, i8* %40, align 1
  %41 = load i64, i64* %9, align 8
  %42 = lshr i64 %41, 24
  %43 = trunc i64 %42 to i8
  %44 = load i32, i32* %11, align 4
  %45 = mul nsw i32 %44, 4
  %46 = add nsw i32 %45, 3
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 %47
  store i8 %43, i8* %48, align 1
  br label %49

49:                                               ; preds = %17
  %50 = load i32, i32* %11, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %11, align 4
  br label %13

52:                                               ; preds = %13
  store i32 0, i32* %12, align 4
  br label %53

53:                                               ; preds = %77, %52
  %54 = load i32, i32* %12, align 4
  %55 = load i32, i32* %8, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %80

57:                                               ; preds = %53
  %58 = load i32, i32* %12, align 4
  %59 = sext i32 %58 to i64
  %60 = icmp uge i64 %59, 512
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  %62 = call i32 @msg(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %81

63:                                               ; preds = %57
  %64 = load i8*, i8** %7, align 8
  %65 = getelementptr inbounds i8, i8* %64, i32 1
  store i8* %65, i8** %7, align 8
  %66 = load i8, i8* %64, align 1
  %67 = sext i8 %66 to i32
  %68 = load i32, i32* %12, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 %69
  %71 = load i8, i8* %70, align 1
  %72 = zext i8 %71 to i32
  %73 = xor i32 %67, %72
  %74 = trunc i32 %73 to i8
  %75 = load i8*, i8** %6, align 8
  %76 = getelementptr inbounds i8, i8* %75, i32 1
  store i8* %76, i8** %6, align 8
  store i8 %74, i8* %75, align 1
  br label %77

77:                                               ; preds = %63
  %78 = load i32, i32* %12, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %12, align 4
  br label %53

80:                                               ; preds = %53
  store i32 1, i32* %5, align 4
  br label %81

81:                                               ; preds = %80, %61
  %82 = load i32, i32* %5, align 4
  ret i32 %82
}

declare dso_local i32 @msg(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
