; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_421.c_tcpListen.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_421.c_tcpListen.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32, %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i64 0, align 8
@INADDR_ANY = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [18 x i8] c"Error in bind().n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @tcpListen(i32 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca %struct.TYPE_4__, align 4
  store i32 %0, i32* %3, align 4
  %6 = load i32, i32* @AF_INET, align 4
  %7 = load i32, i32* @SOCK_STREAM, align 4
  %8 = call i64 @socket(i32 %6, i32 %7, i32 0)
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* %4, align 8
  %10 = load i64, i64* @INVALID_SOCKET, align 8
  %11 = icmp eq i64 %9, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %1
  %13 = load i64, i64* %4, align 8
  store i64 %13, i64* %2, align 8
  br label %46

14:                                               ; preds = %1
  %15 = load i32, i32* @INADDR_ANY, align 4
  %16 = call i32 @htonl(i32 %15)
  %17 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 2
  %18 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %17, i32 0, i32 0
  store i32 %16, i32* %18, align 4
  %19 = load i32, i32* @AF_INET, align 4
  %20 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 1
  store i32 %19, i32* %20, align 4
  %21 = load i32, i32* %3, align 4
  %22 = call i32 @htons(i32 %21)
  %23 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 0
  store i32 %22, i32* %23, align 4
  %24 = load i64, i64* %4, align 8
  %25 = bitcast %struct.TYPE_4__* %5 to i32*
  %26 = call i64 @bind(i64 %24, i32* %25, i32 12)
  %27 = load i64, i64* @SOCKET_ERROR, align 8
  %28 = icmp eq i64 %26, %27
  br i1 %28, label %29, label %34

29:                                               ; preds = %14
  %30 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  %31 = load i64, i64* %4, align 8
  %32 = call i32 @closesocket(i64 %31)
  %33 = load i64, i64* @INVALID_SOCKET, align 8
  store i64 %33, i64* %2, align 8
  br label %46

34:                                               ; preds = %14
  %35 = load i64, i64* %4, align 8
  %36 = call i64 @listen(i64 %35, i32 5)
  %37 = load i64, i64* @SOCKET_ERROR, align 8
  %38 = icmp eq i64 %36, %37
  br i1 %38, label %39, label %44

39:                                               ; preds = %34
  %40 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  %41 = load i64, i64* %4, align 8
  %42 = call i32 @closesocket(i64 %41)
  %43 = load i64, i64* @INVALID_SOCKET, align 8
  store i64 %43, i64* %2, align 8
  br label %46

44:                                               ; preds = %34
  %45 = load i64, i64* %4, align 8
  store i64 %45, i64* %2, align 8
  br label %46

46:                                               ; preds = %44, %39, %29, %12
  %47 = load i64, i64* %2, align 8
  ret i64 %47
}

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @bind(i64, i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @closesocket(i64) #1

declare dso_local i64 @listen(i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
