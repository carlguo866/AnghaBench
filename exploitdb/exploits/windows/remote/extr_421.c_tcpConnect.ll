; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_421.c_tcpConnect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_421.c_tcpConnect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32, %struct.TYPE_3__ }
%struct.TYPE_3__ = type { i64 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i64 0, align 8
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [17 x i8] c"Connect failed.n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @tcpConnect(i8* %0, i32 %1) #0 {
  %3 = alloca i64, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca %struct.TYPE_4__, align 8
  %8 = alloca i64, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %9 = load i32, i32* @AF_INET, align 4
  %10 = load i32, i32* @SOCK_STREAM, align 4
  %11 = call i64 @socket(i32 %9, i32 %10, i32 0)
  store i64 %11, i64* %6, align 8
  %12 = load i64, i64* %6, align 8
  %13 = load i64, i64* @INVALID_SOCKET, align 8
  %14 = icmp eq i64 %12, %13
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = load i64, i64* %6, align 8
  store i64 %16, i64* %3, align 8
  br label %46

17:                                               ; preds = %2
  %18 = load i8*, i8** %4, align 8
  %19 = call i64 @resolveIP(i8* %18)
  store i64 %19, i64* %8, align 8
  %20 = load i64, i64* %8, align 8
  %21 = icmp eq i64 %20, 0
  br i1 %21, label %22, label %25

22:                                               ; preds = %17
  %23 = load i8*, i8** %4, align 8
  %24 = call i64 @inet_addr(i8* %23)
  store i64 %24, i64* %8, align 8
  br label %25

25:                                               ; preds = %22, %17
  %26 = load i64, i64* %8, align 8
  %27 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 2
  %28 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %27, i32 0, i32 0
  store i64 %26, i64* %28, align 8
  %29 = load i32, i32* @AF_INET, align 4
  %30 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 1
  store i32 %29, i32* %30, align 4
  %31 = load i32, i32* %5, align 4
  %32 = call i32 @htons(i32 %31)
  %33 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 0
  store i32 %32, i32* %33, align 8
  %34 = load i64, i64* %6, align 8
  %35 = bitcast %struct.TYPE_4__* %7 to i32*
  %36 = call i64 @connect(i64 %34, i32* %35, i32 16)
  %37 = load i64, i64* @SOCKET_ERROR, align 8
  %38 = icmp eq i64 %36, %37
  br i1 %38, label %39, label %44

39:                                               ; preds = %25
  %40 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %41 = load i64, i64* %6, align 8
  %42 = call i32 @closesocket(i64 %41)
  %43 = load i64, i64* @INVALID_SOCKET, align 8
  store i64 %43, i64* %3, align 8
  br label %46

44:                                               ; preds = %25
  %45 = load i64, i64* %6, align 8
  store i64 %45, i64* %3, align 8
  br label %46

46:                                               ; preds = %44, %39, %15
  %47 = load i64, i64* %3, align 8
  ret i64 %47
}

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i64 @resolveIP(i8*) #1

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @connect(i64, i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @closesocket(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
