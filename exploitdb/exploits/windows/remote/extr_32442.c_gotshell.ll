; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_32442.c_gotshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_32442.c_gotshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@.str = private unnamed_addr constant [24 x i8] c"[-] Connection closed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @gotshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.timeval, align 8
  %4 = alloca i32, align 4
  %5 = alloca [2 x i64], align 16
  %6 = alloca [1000 x i8], align 16
  store i32 %0, i32* %2, align 4
  %7 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 0
  store i32 1, i32* %7, align 8
  %8 = getelementptr inbounds %struct.timeval, %struct.timeval* %3, i32 0, i32 1
  store i64 0, i64* %8, align 8
  br label %9

9:                                                ; preds = %1, %56
  %10 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 0
  store i64 1, i64* %10, align 16
  %11 = load i32, i32* %2, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds [2 x i64], [2 x i64]* %5, i64 0, i64 1
  store i64 %12, i64* %13, align 8
  %14 = bitcast [2 x i64]* %5 to i32*
  %15 = call i32 @select(i32 0, i32* %14, i32* null, i32* null, %struct.timeval* %3)
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp eq i32 %16, 1
  br i1 %17, label %18, label %37

18:                                               ; preds = %9
  %19 = load i32, i32* %2, align 4
  %20 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %21 = call i32 @recv(i32 %19, i8* %20, i32 1000, i32 0)
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %4, align 4
  %23 = icmp sle i32 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %18
  %25 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %26 = call i32 (...) @WSACleanup()
  br label %57

27:                                               ; preds = %18
  %28 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %29 = load i32, i32* %4, align 4
  %30 = call i32 @write(i32 1, i8* %28, i32 %29)
  store i32 %30, i32* %4, align 4
  %31 = load i32, i32* %4, align 4
  %32 = icmp sle i32 %31, 0
  br i1 %32, label %33, label %36

33:                                               ; preds = %27
  %34 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %35 = call i32 (...) @WSACleanup()
  br label %57

36:                                               ; preds = %27
  br label %56

37:                                               ; preds = %9
  %38 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %39 = call i32 @read(i32 0, i8* %38, i32 1000)
  store i32 %39, i32* %4, align 4
  %40 = load i32, i32* %4, align 4
  %41 = icmp sle i32 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %37
  %43 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %44 = call i32 (...) @WSACleanup()
  br label %57

45:                                               ; preds = %37
  %46 = load i32, i32* %2, align 4
  %47 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %48 = load i32, i32* %4, align 4
  %49 = call i32 @send(i32 %46, i8* %47, i32 %48, i32 0)
  store i32 %49, i32* %4, align 4
  %50 = load i32, i32* %4, align 4
  %51 = icmp sle i32 %50, 0
  br i1 %51, label %52, label %55

52:                                               ; preds = %45
  %53 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %54 = call i32 (...) @WSACleanup()
  br label %57

55:                                               ; preds = %45
  br label %56

56:                                               ; preds = %55, %36
  br label %9

57:                                               ; preds = %52, %42, %33, %24
  ret void
}

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
