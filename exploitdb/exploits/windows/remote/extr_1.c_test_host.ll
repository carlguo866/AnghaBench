; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1.c_test_host.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1.c_test_host.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [31 x i8] c"error: victim host too long.\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"error: can't resolve '%s'\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"SEARCH / HTTP/1.1\0D\0AHost: %s\0D\0A\0D\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c"error: can't create socket\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"Checking WebDav on '%s' ... \00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"CONNECTING_ERROR\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"NOT FOUND\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @test_host(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca [100 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca [100 x i8], align 16
  store i8* %0, i8** %3, align 8
  %9 = bitcast [100 x i8]* %4 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %9, i8 0, i64 100, i1 false)
  %10 = bitcast [100 x i8]* %8 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %10, i8 0, i64 100, i1 false)
  %11 = load i8*, i8** %3, align 8
  %12 = call i32 @strlen(i8* %11)
  %13 = icmp sgt i32 %12, 60
  br i1 %13, label %14, label %16

14:                                               ; preds = %1
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %79

16:                                               ; preds = %1
  %17 = load i8*, i8** %3, align 8
  %18 = call %struct.hostent* @gethostbyname(i8* %17)
  store %struct.hostent* %18, %struct.hostent** %6, align 8
  %19 = icmp eq %struct.hostent* %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = load i8*, i8** %3, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  store i32 1, i32* %2, align 4
  br label %79

23:                                               ; preds = %16
  %24 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 0
  %25 = load i8*, i8** %3, align 8
  %26 = call i32 @sprintf(i8* %24, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* %25)
  %27 = call i32 @htons(i32 80)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* @AF_INET, align 4
  %30 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %29, i32* %30, align 4
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %32 = load %struct.hostent*, %struct.hostent** %6, align 8
  %33 = getelementptr inbounds %struct.hostent, %struct.hostent* %32, i32 0, i32 0
  %34 = load i64, i64* %33, align 8
  %35 = inttoptr i64 %34 to %struct.in_addr*
  %36 = bitcast %struct.in_addr* %31 to i8*
  %37 = bitcast %struct.in_addr* %35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 4, i1 false)
  %38 = load i32, i32* @AF_INET, align 4
  %39 = load i32, i32* @SOCK_STREAM, align 4
  %40 = call i32 @socket(i32 %38, i32 %39, i32 0)
  store i32 %40, i32* %5, align 4
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %44

42:                                               ; preds = %23
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %79

44:                                               ; preds = %23
  %45 = load i8*, i8** %3, align 8
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %45)
  %47 = load i32, i32* %5, align 4
  %48 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %49 = call i32 @connect(i32 %47, %struct.sockaddr* %48, i32 12)
  %50 = icmp eq i32 %49, -1
  br i1 %50, label %51, label %53

51:                                               ; preds = %44
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %79

53:                                               ; preds = %44
  %54 = load i32, i32* %5, align 4
  %55 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 0
  %56 = getelementptr inbounds [100 x i8], [100 x i8]* %4, i64 0, i64 0
  %57 = call i32 @strlen(i8* %56)
  %58 = call i32 @send(i32 %54, i8* %55, i32 %57, i32 0)
  %59 = load i32, i32* %5, align 4
  %60 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %61 = call i32 @recv(i32 %59, i8* %60, i32 100, i32 0)
  %62 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 9
  %63 = load i8, i8* %62, align 1
  %64 = sext i8 %63 to i32
  %65 = icmp eq i32 %64, 52
  br i1 %65, label %66, label %77

66:                                               ; preds = %53
  %67 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 10
  %68 = load i8, i8* %67, align 2
  %69 = sext i8 %68 to i32
  %70 = icmp eq i32 %69, 49
  br i1 %70, label %71, label %77

71:                                               ; preds = %66
  %72 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 11
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = icmp eq i32 %74, 49
  br i1 %75, label %76, label %77

76:                                               ; preds = %71
  store i32 0, i32* %2, align 4
  br label %79

77:                                               ; preds = %71, %66, %53
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %79

79:                                               ; preds = %77, %76, %51, %42, %20, %14
  %80 = load i32, i32* %2, align 4
  ret i32 %80
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @htons(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
