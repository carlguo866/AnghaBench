; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_97.c_exchange_packets.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_97.c_exchange_packets.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@verbose = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [19 x i8] c"Sending packet %d\0A\00", align 1
@dcomsockfd = common dso_local global i32 0, align 4
@timed_out = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [41 x i8] c"timed out while sending packet %d to %s\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [31 x i8] c"error sending packet %d to %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [45 x i8] c"timed out while receiving packet %d from %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"error receiving packet %d from %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exchange_packets(i32 %0, i32 %1, i32 %2, i8* %3, i32 %4, i8* %5, i32 %6) #0 {
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 %0, i32* %9, align 4
  store i32 %1, i32* %10, align 4
  store i32 %2, i32* %11, align 4
  store i8* %3, i8** %12, align 8
  store i32 %4, i32* %13, align 4
  store i8* %5, i8** %14, align 8
  store i32 %6, i32* %15, align 4
  %17 = load i32, i32* @verbose, align 4
  %18 = icmp sgt i32 %17, 1
  br i1 %18, label %19, label %22

19:                                               ; preds = %7
  %20 = load i32, i32* %9, align 4
  %21 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i32 %20)
  br label %22

22:                                               ; preds = %19, %7
  %23 = load i32, i32* @dcomsockfd, align 4
  %24 = load i8*, i8** %12, align 8
  %25 = load i32, i32* %13, align 4
  %26 = call i64 @send(i32 %23, i8* %24, i32 %25, i32 0)
  %27 = icmp slt i64 %26, 0
  br i1 %27, label %28, label %46

28:                                               ; preds = %22
  %29 = load i32, i32* @dcomsockfd, align 4
  %30 = call i32 @close(i32 %29)
  %31 = call i32 @alarm(i32 0)
  %32 = load i64, i64* @timed_out, align 8
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %39

34:                                               ; preds = %28
  %35 = load i32, i32* %9, align 4
  %36 = load i32, i32* %10, align 4
  %37 = call i8* @my_inet_ntoa(i32 %36)
  %38 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0), i32 %35, i8* %37)
  br label %45

39:                                               ; preds = %28
  %40 = load i32, i32* @stderr, align 4
  %41 = load i32, i32* %9, align 4
  %42 = load i32, i32* %10, align 4
  %43 = call i8* @my_inet_ntoa(i32 %42)
  %44 = call i32 @fprintf(i32 %40, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i32 %41, i8* %43)
  br label %45

45:                                               ; preds = %39, %34
  store i32 -1, i32* %8, align 4
  br label %72

46:                                               ; preds = %22
  %47 = load i32, i32* @dcomsockfd, align 4
  %48 = load i8*, i8** %14, align 8
  %49 = load i32, i32* %15, align 4
  %50 = call i32 @recv(i32 %47, i8* %48, i32 %49, i32 0)
  store i32 %50, i32* %16, align 4
  %51 = icmp slt i32 %50, 0
  br i1 %51, label %52, label %70

52:                                               ; preds = %46
  %53 = load i32, i32* @dcomsockfd, align 4
  %54 = call i32 @close(i32 %53)
  %55 = call i32 @alarm(i32 0)
  %56 = load i64, i64* @timed_out, align 8
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %63

58:                                               ; preds = %52
  %59 = load i32, i32* %9, align 4
  %60 = load i32, i32* %10, align 4
  %61 = call i8* @my_inet_ntoa(i32 %60)
  %62 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.3, i64 0, i64 0), i32 %59, i8* %61)
  br label %69

63:                                               ; preds = %52
  %64 = load i32, i32* @stderr, align 4
  %65 = load i32, i32* %9, align 4
  %66 = load i32, i32* %10, align 4
  %67 = call i8* @my_inet_ntoa(i32 %66)
  %68 = call i32 @fprintf(i32 %64, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0), i32 %65, i8* %67)
  br label %69

69:                                               ; preds = %63, %58
  store i32 -1, i32* %8, align 4
  br label %72

70:                                               ; preds = %46
  %71 = load i32, i32* %16, align 4
  store i32 %71, i32* %8, align 4
  br label %72

72:                                               ; preds = %70, %69, %45
  %73 = load i32, i32* %8, align 4
  ret i32 %73
}

declare dso_local i32 @printf(i8*, i32, ...) #1

declare dso_local i64 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @alarm(i32) #1

declare dso_local i8* @my_inet_ntoa(i32) #1

declare dso_local i32 @fprintf(i32, i8*, i32, i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
