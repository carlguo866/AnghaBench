; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_30278.c_do_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_30278.c_do_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, i32, %struct.in_addr }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@do_connect.host = internal global %struct.hostent* null, align 8
@do_connect.addr = internal global %struct.sockaddr_in zeroinitializer, align 4
@.str = private unnamed_addr constant [27 x i8] c"[-] gethostbyname() failed\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [16 x i8] c"socket() failed\00", align 1
@AF_INET = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @do_connect(i8* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %7 = load i8*, i8** %4, align 8
  %8 = call %struct.hostent* @gethostbyname(i8* %7)
  store %struct.hostent* %8, %struct.hostent** @do_connect.host, align 8
  %9 = load %struct.hostent*, %struct.hostent** @do_connect.host, align 8
  %10 = icmp ne %struct.hostent* %9, null
  br i1 %10, label %13, label %11

11:                                               ; preds = %2
  %12 = call i32 @perror(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %40

13:                                               ; preds = %2
  %14 = load %struct.hostent*, %struct.hostent** @do_connect.host, align 8
  %15 = getelementptr inbounds %struct.hostent, %struct.hostent* %14, i32 0, i32 0
  %16 = load i64, i64* %15, align 8
  %17 = inttoptr i64 %16 to %struct.in_addr*
  %18 = bitcast %struct.in_addr* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.in_addr* getelementptr inbounds (%struct.sockaddr_in, %struct.sockaddr_in* @do_connect.addr, i32 0, i32 2) to i8*), i8* align 4 %18, i64 4, i1 false)
  %19 = load i32, i32* @PF_INET, align 4
  %20 = load i32, i32* @SOCK_STREAM, align 4
  %21 = call i32 @socket(i32 %19, i32 %20, i32 0)
  store i32 %21, i32* %6, align 4
  %22 = load i32, i32* %6, align 4
  %23 = icmp eq i32 %22, -1
  br i1 %23, label %24, label %28

24:                                               ; preds = %13
  %25 = load i32, i32* %6, align 4
  %26 = call i32 @closesocket(i32 %25)
  %27 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %40

28:                                               ; preds = %13
  %29 = load i32, i32* %5, align 4
  %30 = call i32 @htons(i32 %29)
  store i32 %30, i32* getelementptr inbounds (%struct.sockaddr_in, %struct.sockaddr_in* @do_connect.addr, i32 0, i32 1), align 4
  %31 = load i32, i32* @AF_INET, align 4
  store i32 %31, i32* getelementptr inbounds (%struct.sockaddr_in, %struct.sockaddr_in* @do_connect.addr, i32 0, i32 0), align 4
  %32 = load i32, i32* %6, align 4
  %33 = call i32 @connect(i32 %32, %struct.sockaddr* bitcast (%struct.sockaddr_in* @do_connect.addr to %struct.sockaddr*), i32 12)
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %38

35:                                               ; preds = %28
  %36 = load i32, i32* %6, align 4
  %37 = call i32 @closesocket(i32 %36)
  store i32 -1, i32* %3, align 4
  br label %40

38:                                               ; preds = %28
  %39 = load i32, i32* %6, align 4
  store i32 %39, i32* %3, align 4
  br label %40

40:                                               ; preds = %38, %35, %24, %11
  %41 = load i32, i32* %3, align 4
  ret i32 %41
}

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
