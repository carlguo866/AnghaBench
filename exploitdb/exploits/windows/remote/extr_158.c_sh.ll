; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_158.c_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_158.c_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @sh(i32 %0, i32 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca [128 x i8], align 16
  %8 = alloca [128 x i8], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  store i32 0, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  %17 = load i32, i32* %4, align 4
  %18 = load i32, i32* %5, align 4
  %19 = icmp sgt i32 %17, %18
  br i1 %19, label %20, label %22

20:                                               ; preds = %3
  %21 = load i32, i32* %4, align 4
  br label %24

22:                                               ; preds = %3
  %23 = load i32, i32* %5, align 4
  br label %24

24:                                               ; preds = %22, %20
  %25 = phi i32 [ %21, %20 ], [ %23, %22 ]
  store i32 %25, i32* %11, align 4
  %26 = load i32, i32* %6, align 4
  %27 = load i32, i32* %11, align 4
  %28 = icmp sgt i32 %26, %27
  br i1 %28, label %29, label %31

29:                                               ; preds = %24
  %30 = load i32, i32* %6, align 4
  br label %33

31:                                               ; preds = %24
  %32 = load i32, i32* %11, align 4
  br label %33

33:                                               ; preds = %31, %29
  %34 = phi i32 [ %30, %29 ], [ %32, %31 ]
  store i32 %34, i32* %11, align 4
  %35 = load i32, i32* %11, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %11, align 4
  br label %37

37:                                               ; preds = %188, %158, %132, %99, %33
  %38 = call i32 @FD_ZERO(i32* %15)
  %39 = load i32, i32* %14, align 4
  %40 = sext i32 %39 to i64
  %41 = icmp ult i64 %40, 128
  br i1 %41, label %42, label %45

42:                                               ; preds = %37
  %43 = load i32, i32* %6, align 4
  %44 = call i32 @FD_SET(i32 %43, i32* %15)
  br label %45

45:                                               ; preds = %42, %37
  %46 = load i32, i32* %13, align 4
  %47 = sext i32 %46 to i64
  %48 = icmp ult i64 %47, 128
  br i1 %48, label %49, label %52

49:                                               ; preds = %45
  %50 = load i32, i32* %4, align 4
  %51 = call i32 @FD_SET(i32 %50, i32* %15)
  br label %52

52:                                               ; preds = %49, %45
  %53 = call i32 @FD_ZERO(i32* %16)
  %54 = load i32, i32* %13, align 4
  %55 = icmp ne i32 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %52
  %57 = load i32, i32* %6, align 4
  %58 = call i32 @FD_SET(i32 %57, i32* %16)
  br label %59

59:                                               ; preds = %56, %52
  %60 = load i32, i32* %14, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %65

62:                                               ; preds = %59
  %63 = load i32, i32* %5, align 4
  %64 = call i32 @FD_SET(i32 %63, i32* %16)
  br label %65

65:                                               ; preds = %62, %59
  %66 = load i32, i32* %11, align 4
  %67 = call i32 @select(i32 %66, i32* %15, i32* %16, i32 0, i32 0)
  store i32 %67, i32* %10, align 4
  %68 = icmp eq i32 %67, -1
  br i1 %68, label %69, label %70

69:                                               ; preds = %65
  br label %189

70:                                               ; preds = %65
  %71 = load i32, i32* %4, align 4
  %72 = call i64 @FD_ISSET(i32 %71, i32* %15)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %101

74:                                               ; preds = %70
  %75 = load i32, i32* %4, align 4
  %76 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %77 = load i32, i32* %13, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = load i32, i32* %13, align 4
  %81 = sext i32 %80 to i64
  %82 = sub i64 128, %81
  %83 = trunc i64 %82 to i32
  %84 = call i32 @read(i32 %75, i8* %79, i32 %83)
  store i32 %84, i32* %9, align 4
  %85 = icmp eq i32 %84, -1
  br i1 %85, label %86, label %87

86:                                               ; preds = %74
  store i32 -2, i32* %12, align 4
  br label %189

87:                                               ; preds = %74
  %88 = load i32, i32* %9, align 4
  %89 = icmp eq i32 %88, 0
  br i1 %89, label %90, label %91

90:                                               ; preds = %87
  store i32 -3, i32* %12, align 4
  br label %189

91:                                               ; preds = %87
  br label %92

92:                                               ; preds = %91
  %93 = load i32, i32* %9, align 4
  %94 = load i32, i32* %13, align 4
  %95 = add nsw i32 %94, %93
  store i32 %95, i32* %13, align 4
  %96 = load i32, i32* %10, align 4
  %97 = add nsw i32 %96, -1
  store i32 %97, i32* %10, align 4
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %100, label %99

99:                                               ; preds = %92
  br label %37

100:                                              ; preds = %92
  br label %101

101:                                              ; preds = %100, %70
  %102 = load i32, i32* %6, align 4
  %103 = call i64 @FD_ISSET(i32 %102, i32* %16)
  %104 = icmp ne i64 %103, 0
  br i1 %104, label %105, label %134

105:                                              ; preds = %101
  %106 = load i32, i32* %6, align 4
  %107 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %108 = load i32, i32* %13, align 4
  %109 = call i32 @write(i32 %106, i8* %107, i32 %108)
  store i32 %109, i32* %9, align 4
  %110 = icmp eq i32 %109, -1
  br i1 %110, label %111, label %112

111:                                              ; preds = %105
  br label %189

112:                                              ; preds = %105
  %113 = load i32, i32* %9, align 4
  %114 = load i32, i32* %13, align 4
  %115 = icmp eq i32 %113, %114
  br i1 %115, label %116, label %117

116:                                              ; preds = %112
  store i32 0, i32* %13, align 4
  br label %128

117:                                              ; preds = %112
  %118 = load i32, i32* %9, align 4
  %119 = load i32, i32* %13, align 4
  %120 = sub nsw i32 %119, %118
  store i32 %120, i32* %13, align 4
  %121 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %122 = getelementptr inbounds [128 x i8], [128 x i8]* %7, i64 0, i64 0
  %123 = load i32, i32* %9, align 4
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i8, i8* %122, i64 %124
  %126 = load i32, i32* %13, align 4
  %127 = call i32 @memmove(i8* %121, i8* %125, i32 %126)
  br label %128

128:                                              ; preds = %117, %116
  %129 = load i32, i32* %10, align 4
  %130 = add nsw i32 %129, -1
  store i32 %130, i32* %10, align 4
  %131 = icmp ne i32 %130, 0
  br i1 %131, label %133, label %132

132:                                              ; preds = %128
  br label %37

133:                                              ; preds = %128
  br label %134

134:                                              ; preds = %133, %101
  %135 = load i32, i32* %6, align 4
  %136 = call i64 @FD_ISSET(i32 %135, i32* %15)
  %137 = icmp ne i64 %136, 0
  br i1 %137, label %138, label %160

138:                                              ; preds = %134
  %139 = load i32, i32* %6, align 4
  %140 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  %141 = load i32, i32* %14, align 4
  %142 = sext i32 %141 to i64
  %143 = getelementptr inbounds i8, i8* %140, i64 %142
  %144 = load i32, i32* %14, align 4
  %145 = sext i32 %144 to i64
  %146 = sub i64 128, %145
  %147 = trunc i64 %146 to i32
  %148 = call i32 @read(i32 %139, i8* %143, i32 %147)
  store i32 %148, i32* %9, align 4
  %149 = icmp sle i32 %148, 0
  br i1 %149, label %150, label %151

150:                                              ; preds = %138
  br label %189

151:                                              ; preds = %138
  %152 = load i32, i32* %9, align 4
  %153 = load i32, i32* %14, align 4
  %154 = add nsw i32 %153, %152
  store i32 %154, i32* %14, align 4
  %155 = load i32, i32* %10, align 4
  %156 = add nsw i32 %155, -1
  store i32 %156, i32* %10, align 4
  %157 = icmp ne i32 %156, 0
  br i1 %157, label %159, label %158

158:                                              ; preds = %151
  br label %37

159:                                              ; preds = %151
  br label %160

160:                                              ; preds = %159, %134
  %161 = load i32, i32* %5, align 4
  %162 = call i64 @FD_ISSET(i32 %161, i32* %16)
  %163 = icmp ne i64 %162, 0
  br i1 %163, label %164, label %188

164:                                              ; preds = %160
  %165 = load i32, i32* %5, align 4
  %166 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  %167 = load i32, i32* %14, align 4
  %168 = call i32 @write(i32 %165, i8* %166, i32 %167)
  store i32 %168, i32* %9, align 4
  %169 = icmp eq i32 %168, -1
  br i1 %169, label %170, label %171

170:                                              ; preds = %164
  br label %189

171:                                              ; preds = %164
  %172 = load i32, i32* %9, align 4
  %173 = load i32, i32* %14, align 4
  %174 = icmp eq i32 %172, %173
  br i1 %174, label %175, label %176

175:                                              ; preds = %171
  store i32 0, i32* %14, align 4
  br label %187

176:                                              ; preds = %171
  %177 = load i32, i32* %9, align 4
  %178 = load i32, i32* %14, align 4
  %179 = sub nsw i32 %178, %177
  store i32 %179, i32* %14, align 4
  %180 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  %181 = getelementptr inbounds [128 x i8], [128 x i8]* %8, i64 0, i64 0
  %182 = load i32, i32* %9, align 4
  %183 = sext i32 %182 to i64
  %184 = getelementptr inbounds i8, i8* %181, i64 %183
  %185 = load i32, i32* %14, align 4
  %186 = call i32 @memmove(i8* %180, i8* %184, i32 %185)
  br label %187

187:                                              ; preds = %176, %175
  br label %188

188:                                              ; preds = %187, %160
  br label %37

189:                                              ; preds = %170, %150, %111, %90, %86, %69
  %190 = load i32, i32* %12, align 4
  ret i32 %190
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32, i32) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @memmove(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
