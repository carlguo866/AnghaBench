; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1183.c_show_bfcc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_1183.c_show_bfcc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@DEL = common dso_local global i64 0, align 8
@END = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [4 x i8] c"|;|\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"\0A  \00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @show_bfcc(i64* %0, i32 %1) #0 {
  %3 = alloca i64*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64*, align 8
  %6 = alloca i64*, align 8
  %7 = alloca i64*, align 8
  store i64* %0, i64** %3, align 8
  store i32 %1, i32* %4, align 4
  %8 = load i64*, i64** %3, align 8
  %9 = load i32, i32* %4, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds i64, i64* %8, i64 %10
  store i64* %11, i64** %7, align 8
  %12 = load i64*, i64** %3, align 8
  store i64* %12, i64** %5, align 8
  br label %13

13:                                               ; preds = %53, %2
  %14 = load i64*, i64** %5, align 8
  %15 = load i64*, i64** %7, align 8
  %16 = icmp ult i64* %14, %15
  br i1 %16, label %17, label %56

17:                                               ; preds = %13
  %18 = load i64*, i64** %5, align 8
  store i64* %18, i64** %6, align 8
  br label %19

19:                                               ; preds = %46, %17
  %20 = load i64*, i64** %6, align 8
  %21 = load i64, i64* %20, align 8
  %22 = load i64, i64* @DEL, align 8
  %23 = icmp ne i64 %21, %22
  br i1 %23, label %24, label %49

24:                                               ; preds = %19
  %25 = load i64*, i64** %6, align 8
  %26 = load i8*, i8** @END, align 8
  %27 = call i32 @memcmp(i64* %25, i8* %26, i32 4)
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %30, label %29

29:                                               ; preds = %24
  br label %56

30:                                               ; preds = %24
  %31 = load i64*, i64** %6, align 8
  %32 = call i32 @memcmp(i64* %31, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 3)
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %45, label %34

34:                                               ; preds = %30
  %35 = load i64*, i64** %6, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 -1
  %37 = load i64, i64* %36, align 8
  %38 = icmp eq i64 %37, 9
  br i1 %38, label %39, label %42

39:                                               ; preds = %34
  %40 = load i64*, i64** %6, align 8
  %41 = getelementptr inbounds i64, i64* %40, i64 -1
  store i64 32, i64* %41, align 8
  br label %42

42:                                               ; preds = %39, %34
  %43 = load i64*, i64** %6, align 8
  %44 = call i32 @memcpy(i64* %43, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0), i32 3)
  br label %45

45:                                               ; preds = %42, %30
  br label %46

46:                                               ; preds = %45
  %47 = load i64*, i64** %6, align 8
  %48 = getelementptr inbounds i64, i64* %47, i32 1
  store i64* %48, i64** %6, align 8
  br label %19

49:                                               ; preds = %19
  %50 = load i64*, i64** %6, align 8
  store i64 0, i64* %50, align 8
  %51 = load i64*, i64** %5, align 8
  %52 = call i32 @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i64* %51)
  br label %53

53:                                               ; preds = %49
  %54 = load i64*, i64** %6, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 1
  store i64* %55, i64** %5, align 8
  br label %13

56:                                               ; preds = %29, %13
  ret void
}

declare dso_local i32 @memcmp(i64*, i8*, i32) #1

declare dso_local i32 @memcpy(i64*, i8*, i32) #1

declare dso_local i32 @printf(i8*, i64*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
