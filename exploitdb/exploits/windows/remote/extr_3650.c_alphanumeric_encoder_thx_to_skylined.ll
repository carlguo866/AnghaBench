; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3650.c_alphanumeric_encoder_thx_to_skylined.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_3650.c_alphanumeric_encoder_thx_to_skylined.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [62 x i8] c"0123456789BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%c%c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @alphanumeric_encoder_thx_to_skylined(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i8*, align 8
  %16 = alloca [10 x i8], align 1
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  store i32 0, i32* %6, align 4
  %17 = load i8*, i8** %3, align 8
  %18 = call i64 @strlen(i8* %17)
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %14, align 4
  store i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i8** %15, align 8
  %20 = getelementptr inbounds [10 x i8], [10 x i8]* %16, i64 0, i64 0
  %21 = call i32 @memset(i8* %20, i32 0, i32 10)
  %22 = load i8*, i8** %4, align 8
  %23 = call i32 @memset(i8* %22, i32 0, i32 1000)
  %24 = call i64 (...) @clock()
  %25 = trunc i64 %24 to i32
  %26 = call i32 @srand(i32 %25)
  br label %27

27:                                               ; preds = %98, %2
  %28 = load i8*, i8** %3, align 8
  %29 = load i32, i32* %6, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %6, align 4
  %31 = sext i32 %29 to i64
  %32 = getelementptr inbounds i8, i8* %28, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = sext i8 %33 to i32
  store i32 %34, i32* %7, align 4
  %35 = icmp ne i32 %34, 0
  br i1 %35, label %36, label %128

36:                                               ; preds = %27
  %37 = load i32, i32* %7, align 4
  %38 = and i32 %37, 240
  %39 = ashr i32 %38, 4
  store i32 %39, i32* %8, align 4
  %40 = load i32, i32* %7, align 4
  %41 = and i32 %40, 15
  store i32 %41, i32* %9, align 4
  %42 = load i32, i32* %9, align 4
  store i32 %42, i32* %13, align 4
  %43 = call i32 (...) @rand()
  %44 = load i8*, i8** %15, align 8
  %45 = call i64 @strlen(i8* %44)
  %46 = trunc i64 %45 to i32
  %47 = srem i32 %43, %46
  store i32 %47, i32* %5, align 4
  br label %48

48:                                               ; preds = %58, %36
  %49 = load i8*, i8** %15, align 8
  %50 = load i32, i32* %5, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %49, i64 %51
  %53 = load i8, i8* %52, align 1
  %54 = sext i8 %53 to i32
  %55 = and i32 %54, 15
  %56 = load i32, i32* %13, align 4
  %57 = icmp ne i32 %55, %56
  br i1 %57, label %58, label %65

58:                                               ; preds = %48
  %59 = load i32, i32* %5, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %5, align 4
  %61 = load i8*, i8** %15, align 8
  %62 = call i64 @strlen(i8* %61)
  %63 = trunc i64 %62 to i32
  %64 = srem i32 %60, %63
  store i32 %64, i32* %5, align 4
  br label %48

65:                                               ; preds = %48
  %66 = load i8*, i8** %15, align 8
  %67 = load i32, i32* %5, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = load i8, i8* %69, align 1
  %71 = sext i8 %70 to i32
  %72 = ashr i32 %71, 4
  store i32 %72, i32* %12, align 4
  %73 = load i32, i32* %8, align 4
  %74 = load i32, i32* %12, align 4
  %75 = xor i32 %73, %74
  store i32 %75, i32* %11, align 4
  %76 = call i32 (...) @rand()
  %77 = load i8*, i8** %15, align 8
  %78 = call i64 @strlen(i8* %77)
  %79 = trunc i64 %78 to i32
  %80 = srem i32 %76, %79
  store i32 %80, i32* %5, align 4
  br label %81

81:                                               ; preds = %91, %65
  %82 = load i8*, i8** %15, align 8
  %83 = load i32, i32* %5, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %82, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = sext i8 %86 to i32
  %88 = and i32 %87, 15
  %89 = load i32, i32* %11, align 4
  %90 = icmp ne i32 %88, %89
  br i1 %90, label %91, label %98

91:                                               ; preds = %81
  %92 = load i32, i32* %5, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %5, align 4
  %94 = load i8*, i8** %15, align 8
  %95 = call i64 @strlen(i8* %94)
  %96 = trunc i64 %95 to i32
  %97 = srem i32 %93, %96
  store i32 %97, i32* %5, align 4
  br label %81

98:                                               ; preds = %81
  %99 = load i8*, i8** %15, align 8
  %100 = load i32, i32* %5, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %99, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = sext i8 %103 to i32
  %105 = ashr i32 %104, 4
  store i32 %105, i32* %10, align 4
  %106 = getelementptr inbounds [10 x i8], [10 x i8]* %16, i64 0, i64 0
  %107 = load i32, i32* %10, align 4
  %108 = shl i32 %107, 4
  %109 = load i32, i32* %11, align 4
  %110 = add nsw i32 %108, %109
  %111 = load i32, i32* %12, align 4
  %112 = shl i32 %111, 4
  %113 = load i32, i32* %13, align 4
  %114 = add nsw i32 %112, %113
  %115 = call i32 @sprintf(i8* %106, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %110, i32 %114)
  %116 = getelementptr inbounds [10 x i8], [10 x i8]* %16, i64 0, i64 0
  %117 = load i8, i8* %116, align 1
  %118 = load i8*, i8** %4, align 8
  %119 = load i8*, i8** %4, align 8
  %120 = call i64 @strlen(i8* %119)
  %121 = getelementptr inbounds i8, i8* %118, i64 %120
  store i8 %117, i8* %121, align 1
  %122 = getelementptr inbounds [10 x i8], [10 x i8]* %16, i64 0, i64 1
  %123 = load i8, i8* %122, align 1
  %124 = load i8*, i8** %4, align 8
  %125 = load i8*, i8** %4, align 8
  %126 = call i64 @strlen(i8* %125)
  %127 = getelementptr inbounds i8, i8* %124, i64 %126
  store i8 %123, i8* %127, align 1
  br label %27

128:                                              ; preds = %27
  %129 = load i8*, i8** %4, align 8
  %130 = load i8*, i8** %4, align 8
  %131 = call i64 @strlen(i8* %130)
  %132 = getelementptr inbounds i8, i8* %129, i64 %131
  store i8 65, i8* %132, align 1
  ret i32 0
}

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i64 @clock(...) #1

declare dso_local i32 @rand(...) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
