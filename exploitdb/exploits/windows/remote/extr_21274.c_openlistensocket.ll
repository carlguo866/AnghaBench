; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21274.c_openlistensocket.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_21274.c_openlistensocket.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"0.0.0.0\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"2: Starting\0A\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"Failed to open, %u\0A\00", align 1
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [43 x i8] c"Failed to open listen socket (listen, %u)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @openlistensocket() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.sockaddr_in, align 4
  %4 = load i32, i32* @AF_INET, align 4
  %5 = load i32, i32* @SOCK_STREAM, align 4
  %6 = load i32, i32* @IPPROTO_TCP, align 4
  %7 = call i32 @socket(i32 %4, i32 %5, i32 %6)
  store i32 %7, i32* %2, align 4
  %8 = call i32 @memset(%struct.sockaddr_in* %3, i32 0, i32 12)
  %9 = call i32 @inet_addr(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %10 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  %11 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %10, i32 0, i32 0
  store i32 %9, i32* %11, align 4
  %12 = load i32, i32* @AF_INET, align 4
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i32 %12, i32* %13, align 4
  %14 = call i32 @htons(i32 2680)
  %15 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  store i32 %14, i32* %15, align 4
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
  %17 = load i32, i32* %2, align 4
  %18 = ptrtoint %struct.sockaddr_in* %3 to i32
  %19 = call i64 @bind(i32 %17, i32 %18, i32 12)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %26

21:                                               ; preds = %0
  %22 = call i32 (...) @WSAGetLastError()
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %22)
  %24 = load i32, i32* %2, align 4
  %25 = call i32 @closesocket(i32 %24)
  store i32 -1, i32* %1, align 4
  br label %38

26:                                               ; preds = %0
  %27 = load i32, i32* %2, align 4
  %28 = call i64 @listen(i32 %27, i32 10)
  %29 = load i64, i64* @SOCKET_ERROR, align 8
  %30 = icmp ne i64 %28, %29
  br i1 %30, label %31, label %33

31:                                               ; preds = %26
  %32 = load i32, i32* %2, align 4
  store i32 %32, i32* %1, align 4
  br label %38

33:                                               ; preds = %26
  %34 = call i32 (...) @WSAGetLastError()
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0), i32 %34)
  %36 = load i32, i32* %2, align 4
  %37 = call i32 @closesocket(i32 %36)
  store i32 -1, i32* %1, align 4
  br label %38

38:                                               ; preds = %33, %31, %21
  %39 = load i32, i32* %1, align 4
  ret i32 %39
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @bind(i32, i32, i32) #1

declare dso_local i32 @WSAGetLastError(...) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i64 @listen(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
