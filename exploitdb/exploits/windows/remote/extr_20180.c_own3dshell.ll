; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20180.c_own3dshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20180.c_own3dshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@STDIN_FILENO = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"The connection was closed!\0A\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"Exiting...\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @own3dshell(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca [1024 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  br label %6

6:                                                ; preds = %1, %53
  %7 = call i32 @FD_ZERO(i32* %4)
  %8 = load i32, i32* %2, align 4
  %9 = call i32 @FD_SET(i32 %8, i32* %4)
  %10 = load i32, i32* @STDIN_FILENO, align 4
  %11 = call i32 @FD_SET(i32 %10, i32* %4)
  %12 = load i32, i32* %2, align 4
  %13 = add nsw i32 %12, 1
  %14 = call i32 @select(i32 %13, i32* %4, i32* null, i32* null, i32* null)
  %15 = load i32, i32* %2, align 4
  %16 = call i64 @FD_ISSET(i32 %15, i32* %4)
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %34

18:                                               ; preds = %6
  %19 = load i32, i32* %2, align 4
  %20 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %21 = call i32 @read(i32 %19, i8* %20, i32 1024)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = icmp sle i32 %22, 0
  br i1 %23, label %24, label %28

24:                                               ; preds = %18
  %25 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %26 = call i32 @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
  %27 = call i32 @exit(i32 0) #3
  unreachable

28:                                               ; preds = %18
  %29 = load i32, i32* %5, align 4
  %30 = sext i32 %29 to i64
  %31 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 %30
  store i8 0, i8* %31, align 1
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %33 = call i32 @puts(i8* %32)
  br label %34

34:                                               ; preds = %28, %6
  %35 = load i32, i32* @STDIN_FILENO, align 4
  %36 = call i64 @FD_ISSET(i32 %35, i32* %4)
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %53

38:                                               ; preds = %34
  %39 = load i32, i32* @STDIN_FILENO, align 4
  %40 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %41 = call i32 @read(i32 %39, i8* %40, i32 1024)
  store i32 %41, i32* %5, align 4
  %42 = load i32, i32* %5, align 4
  %43 = icmp sgt i32 %42, 0
  br i1 %43, label %44, label %52

44:                                               ; preds = %38
  %45 = load i32, i32* %5, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 %46
  store i8 0, i8* %47, align 1
  %48 = load i32, i32* %2, align 4
  %49 = getelementptr inbounds [1024 x i8], [1024 x i8]* %3, i64 0, i64 0
  %50 = load i32, i32* %5, align 4
  %51 = call i32 @write(i32 %48, i8* %49, i32 %50)
  br label %52

52:                                               ; preds = %44, %38
  br label %53

53:                                               ; preds = %52, %34
  br label %6
}

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
