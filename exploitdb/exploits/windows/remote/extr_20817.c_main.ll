; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20817.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20817.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.tm = type { i32 }

@.str = private unnamed_addr constant [61 x i8] c"+-------------------------------------------------------+\0A\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"\0A\0AUse: %s <initial_ip> <final_ip> <log_file>\0A\00", align 1
@.str.2 = private unnamed_addr constant [45 x i8] c"\0AExample.\0A%s 127.0.0.1 127.0.0.4 scan.log\0A\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@f = common dso_local global i32* null, align 8
@.str.4 = private unnamed_addr constant [42 x i8] c"Error occured when I try to open file %s\0A\00", align 1
@z = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [81 x i8] c"\0ANow the checker will write the result of scan in %s in your local directory..\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [61 x i8] c"+-------------------------------------------------------+\0A| \00", align 1
@.str.7 = private unnamed_addr constant [61 x i8] c"+-------------------------------------------------------+\0A|\0A\00", align 1
@.str.8 = private unnamed_addr constant [12 x i8] c"%d.%d.%d.%d\00", align 1
@a = common dso_local global i32 0, align 4
@b = common dso_local global i32 0, align 4
@c = common dso_local global i32 0, align 4
@d = common dso_local global i32 0, align 4
@i = common dso_local global i32 0, align 4
@j = common dso_local global i32 0, align 4
@k = common dso_local global i32 0, align 4
@l = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [26 x i8] c"\0A\0A\0AI'm connecting to: %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"|\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"\0A*************************\0A\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"\0ASCAN FINISHED! in %d sec\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [59 x i8] c"You can view the file %s to see quietly scan's results..\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [5 x i8] c"\0A%s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [16 x i8], align 16
  %7 = alloca [16 x i8], align 16
  %8 = alloca %struct.tm*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0), i8** %9, align 8
  %13 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %14 = call i32 @memset(i8* %13, i32 0, i32 16)
  %15 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %16 = call i32 @memset(i8* %15, i32 0, i32 16)
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 4
  br i1 %18, label %19, label %30

19:                                               ; preds = %2
  %20 = call i32 (...) @author()
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 0
  %23 = load i8*, i8** %22, align 8
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0), i8* %23)
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.2, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 0) #3
  unreachable

30:                                               ; preds = %2
  %31 = call i32 @time(i32* %11)
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 3
  %34 = load i8*, i8** %33, align 8
  %35 = call i32* @fopen(i8* %34, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  store i32* %35, i32** @f, align 8
  %36 = icmp eq i32* %35, null
  br i1 %36, label %37, label %42

37:                                               ; preds = %30
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 3
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.4, i64 0, i64 0), i8* %40)
  br label %42

42:                                               ; preds = %37, %30
  %43 = load i64, i64* @z, align 8
  %44 = add nsw i64 %43, 1
  store i64 %44, i64* @z, align 8
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 3
  %47 = load i8*, i8** %46, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.5, i64 0, i64 0), i8* %47)
  %49 = call i32 @write_file(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.6, i64 0, i64 0))
  %50 = call i32 @time(i32* null)
  store i32 %50, i32* %10, align 4
  %51 = call i32 @localtime(i32* %10)
  %52 = call i8* @asctime(i32 %51)
  %53 = call i32 @write_file(i8* %52)
  %54 = call i32 @write_file(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.7, i64 0, i64 0))
  %55 = call i32 @sleep(i32 1)
  %56 = call i32 (...) @author()
  %57 = call i32 @sleep(i32 2)
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 1
  %60 = load i8*, i8** %59, align 8
  %61 = load i8**, i8*** %5, align 8
  %62 = getelementptr inbounds i8*, i8** %61, i64 2
  %63 = load i8*, i8** %62, align 8
  %64 = call i32 @separe(i8* %60, i8* %63)
  %65 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %66 = load i32, i32* @a, align 4
  %67 = load i32, i32* @b, align 4
  %68 = load i32, i32* @c, align 4
  %69 = load i32, i32* @d, align 4
  %70 = call i32 @sprintf(i8* %65, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i32 %66, i32 %67, i32 %68, i32 %69)
  br label %71

71:                                               ; preds = %42, %108
  %72 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %73 = load i32, i32* @i, align 4
  %74 = load i32, i32* @j, align 4
  %75 = load i32, i32* @k, align 4
  %76 = load i32, i32* @l, align 4
  %77 = call i32 @sprintf(i8* %72, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.8, i64 0, i64 0), i32 %73, i32 %74, i32 %75, i32 %76)
  %78 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0), i8* %78)
  %80 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %81 = call i32 @scan(i8* %80)
  %82 = getelementptr inbounds [16 x i8], [16 x i8]* %6, i64 0, i64 0
  %83 = getelementptr inbounds [16 x i8], [16 x i8]* %7, i64 0, i64 0
  %84 = call i64 @strcmp(i8* %82, i8* %83)
  %85 = icmp eq i64 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %71
  %87 = call i32 @write_file(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  br label %109

88:                                               ; preds = %71
  %89 = load i32, i32* @l, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* @l, align 4
  %91 = load i32, i32* @l, align 4
  %92 = icmp eq i32 %91, 256
  br i1 %92, label %93, label %108

93:                                               ; preds = %88
  store i32 0, i32* @l, align 4
  %94 = load i32, i32* @k, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* @k, align 4
  %96 = load i32, i32* @k, align 4
  %97 = icmp eq i32 %96, 256
  br i1 %97, label %98, label %107

98:                                               ; preds = %93
  store i32 0, i32* @k, align 4
  %99 = load i32, i32* @j, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* @j, align 4
  %101 = load i32, i32* @j, align 4
  %102 = icmp eq i32 %101, 256
  br i1 %102, label %103, label %106

103:                                              ; preds = %98
  store i32 0, i32* @j, align 4
  %104 = load i32, i32* @i, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* @i, align 4
  br label %106

106:                                              ; preds = %103, %98
  br label %107

107:                                              ; preds = %106, %93
  br label %108

108:                                              ; preds = %107, %88
  br label %71

109:                                              ; preds = %86
  %110 = call i32 @time(i32* %12)
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0))
  %112 = load i32, i32* %12, align 4
  %113 = load i32, i32* %11, align 4
  %114 = sub nsw i32 %112, %113
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.12, i64 0, i64 0), i32 %114)
  %116 = load i64, i64* @z, align 8
  %117 = icmp sgt i64 %116, 0
  br i1 %117, label %118, label %126

118:                                              ; preds = %109
  %119 = load i8**, i8*** %5, align 8
  %120 = getelementptr inbounds i8*, i8** %119, i64 3
  %121 = load i8*, i8** %120, align 8
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.13, i64 0, i64 0), i8* %121)
  %123 = load i32*, i32** @f, align 8
  %124 = load i8*, i8** %9, align 8
  %125 = call i32 @fprintf(i32* %123, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.14, i64 0, i64 0), i8* %124)
  br label %126

126:                                              ; preds = %118, %109
  ret i32 0
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @author(...) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @time(i32*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @write_file(i8*) #1

declare dso_local i8* @asctime(i32) #1

declare dso_local i32 @localtime(i32*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @separe(i8*, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32, i32, i32) #1

declare dso_local i32 @scan(i8*) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
