; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_2649.c_encode_alphanum.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_2649.c_encode_alphanum.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32 }

@MAX_ENCODED_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [62 x i8] c"0123456789BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%c%c\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @encode_alphanum(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca [2 x i8], align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca %struct.timeval, align 8
  %19 = alloca %struct.timezone, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %20 = load i8*, i8** %4, align 8
  %21 = load i32, i32* @MAX_ENCODED_LEN, align 4
  %22 = call i32 @memset(i8* %20, i32 0, i32 %21)
  %23 = call i32 @gettimeofday(%struct.timeval* %18, %struct.timezone* %19)
  %24 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = mul nsw i32 %26, 1000
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = add nsw i64 %28, %30
  %32 = call i32 @srand(i64 %31)
  store i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0), i8** %17, align 8
  store i32 0, i32* %9, align 4
  br label %33

33:                                               ; preds = %123, %3
  %34 = load i32, i32* %9, align 4
  %35 = load i32, i32* %6, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %126

37:                                               ; preds = %33
  %38 = load i8*, i8** %5, align 8
  %39 = load i32, i32* %9, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = load i8, i8* %41, align 1
  %43 = zext i8 %42 to i32
  store i32 %43, i32* %10, align 4
  %44 = load i32, i32* %10, align 4
  %45 = and i32 %44, 240
  %46 = ashr i32 %45, 4
  store i32 %46, i32* %11, align 4
  %47 = load i32, i32* %10, align 4
  %48 = and i32 %47, 15
  store i32 %48, i32* %12, align 4
  %49 = load i32, i32* %12, align 4
  store i32 %49, i32* %16, align 4
  %50 = call i32 (...) @rand()
  %51 = load i8*, i8** %17, align 8
  %52 = call i32 @strlen(i8* %51)
  %53 = srem i32 %50, %52
  store i32 %53, i32* %8, align 4
  br label %54

54:                                               ; preds = %64, %37
  %55 = load i8*, i8** %17, align 8
  %56 = load i32, i32* %8, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds i8, i8* %55, i64 %57
  %59 = load i8, i8* %58, align 1
  %60 = sext i8 %59 to i32
  %61 = and i32 %60, 15
  %62 = load i32, i32* %16, align 4
  %63 = icmp ne i32 %61, %62
  br i1 %63, label %64, label %70

64:                                               ; preds = %54
  %65 = load i32, i32* %8, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %8, align 4
  %67 = load i8*, i8** %17, align 8
  %68 = call i32 @strlen(i8* %67)
  %69 = srem i32 %66, %68
  store i32 %69, i32* %8, align 4
  br label %54

70:                                               ; preds = %54
  %71 = load i8*, i8** %17, align 8
  %72 = load i32, i32* %8, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %71, i64 %73
  %75 = load i8, i8* %74, align 1
  %76 = sext i8 %75 to i32
  %77 = ashr i32 %76, 4
  store i32 %77, i32* %15, align 4
  %78 = load i32, i32* %11, align 4
  %79 = load i32, i32* %15, align 4
  %80 = sub nsw i32 %78, %79
  %81 = and i32 %80, 15
  store i32 %81, i32* %14, align 4
  %82 = call i32 (...) @rand()
  %83 = load i8*, i8** %17, align 8
  %84 = call i32 @strlen(i8* %83)
  %85 = srem i32 %82, %84
  store i32 %85, i32* %8, align 4
  br label %86

86:                                               ; preds = %96, %70
  %87 = load i8*, i8** %17, align 8
  %88 = load i32, i32* %8, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = and i32 %92, 15
  %94 = load i32, i32* %14, align 4
  %95 = icmp ne i32 %93, %94
  br i1 %95, label %96, label %102

96:                                               ; preds = %86
  %97 = load i32, i32* %8, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %8, align 4
  %99 = load i8*, i8** %17, align 8
  %100 = call i32 @strlen(i8* %99)
  %101 = srem i32 %98, %100
  store i32 %101, i32* %8, align 4
  br label %86

102:                                              ; preds = %86
  %103 = load i8*, i8** %17, align 8
  %104 = load i32, i32* %8, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = load i8, i8* %106, align 1
  %108 = sext i8 %107 to i32
  %109 = ashr i32 %108, 4
  store i32 %109, i32* %13, align 4
  %110 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  %111 = load i32, i32* %13, align 4
  %112 = shl i32 %111, 4
  %113 = load i32, i32* %14, align 4
  %114 = add nsw i32 %112, %113
  %115 = load i32, i32* %15, align 4
  %116 = shl i32 %115, 4
  %117 = load i32, i32* %16, align 4
  %118 = add nsw i32 %116, %117
  %119 = call i32 @sprintf(i8* %110, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %114, i32 %118)
  %120 = load i8*, i8** %4, align 8
  %121 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  %122 = call i32 @strcat(i8* %120, i8* %121)
  br label %123

123:                                              ; preds = %102
  %124 = load i32, i32* %9, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %9, align 4
  br label %33

126:                                              ; preds = %33
  ret i32 0
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #1

declare dso_local i32 @srand(i64) #1

declare dso_local i32 @rand(...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
