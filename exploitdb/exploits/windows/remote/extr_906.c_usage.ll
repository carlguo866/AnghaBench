; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_906.c_usage.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_906.c_usage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c" \0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"[+] . 101_netvault.exe Target VulnIP (bind mode) \0A\00", align 1
@.str.2 = private unnamed_addr constant [60 x i8] c"[+] . 101_netvault.exe Target VulnIP VulnPORT (bind mode) \0A\00", align 1
@.str.3 = private unnamed_addr constant [76 x i8] c"[+] . 101_netvault.exe Target VulnIP VulnPORT GayIP GayPORT reverse mode) \0A\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"TARGETS: \0A\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"[+] 1. Win2k SP4 Server English (*) - v5.0.2195 \0A\00", align 1
@.str.6 = private unnamed_addr constant [47 x i8] c"[+] 1. Win2k SP4 Pro English (*) - v5.0.2195 \0A\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"[+] 2. WinXP SP0 Pro. English - v5.1.2600 \0A\00", align 1
@.str.8 = private unnamed_addr constant [48 x i8] c"[+] 2. WinXP SP1 Pro. English (*) - v5.1.2600 \0A\00", align 1
@.str.9 = private unnamed_addr constant [49 x i8] c"[+] 2. WinXP SP1a Pro. English (*) - v5.1.2600 \0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"NOTE: \0A\00", align 1
@.str.11 = private unnamed_addr constant [42 x i8] c"The exploit bind a cmdshell port 101 or \0A\00", align 1
@.str.12 = private unnamed_addr constant [39 x i8] c"reverse a cmdshell on your listener. \0A\00", align 1
@.str.13 = private unnamed_addr constant [62 x i8] c"A wildcard (*) mean tested working, else, supposed working. \0A\00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"A symbol (-) mean all. \0A\00", align 1
@.str.15 = private unnamed_addr constant [37 x i8] c" Compilation msvc6, cygwin, Linux. \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @usage(i8* %0) #0 {
  %2 = alloca i8*, align 8
  store i8* %0, i8** %2, align 8
  %3 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  %4 = call i32 @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0))
  %5 = call i32 @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.2, i64 0, i64 0))
  %6 = call i32 @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.3, i64 0, i64 0))
  %7 = call i32 @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %8 = call i32 @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0))
  %9 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.6, i64 0, i64 0))
  %10 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0))
  %11 = call i32 @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.8, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.9, i64 0, i64 0))
  %13 = call i32 @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0))
  %15 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.12, i64 0, i64 0))
  %16 = call i32 @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.13, i64 0, i64 0))
  %17 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.15, i64 0, i64 0))
  %19 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
