; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_734.c_netbios_encode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_734.c_netbios_encode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c" \00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @netbios_encode(i8* %0, i8 signext %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8, align 1
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8 %1, i8* %4, align 1
  %13 = call i64 @calloc(i32 17, i32 1)
  %14 = inttoptr i64 %13 to i8*
  store i8* %14, i8** %6, align 8
  %15 = load i8*, i8** %6, align 8
  %16 = load i8*, i8** %3, align 8
  %17 = load i8*, i8** %3, align 8
  %18 = call i32 @strlen(i8* %17)
  %19 = call i32 @memcpy(i8* %15, i8* %16, i32 %18)
  %20 = load i8*, i8** %6, align 8
  %21 = call i32 @strlen(i8* %20)
  %22 = sext i32 %21 to i64
  store i64 %22, i64* %8, align 8
  br label %23

23:                                               ; preds = %26, %2
  %24 = load i64, i64* %8, align 8
  %25 = icmp ult i64 %24, 15
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = load i8*, i8** %6, align 8
  %28 = call i32 @strcat(i8* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %29 = load i64, i64* %8, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %8, align 8
  br label %23

31:                                               ; preds = %23
  %32 = load i8*, i8** %6, align 8
  %33 = load i8*, i8** %6, align 8
  %34 = call i32 @strlen(i8* %33)
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  %37 = call i32 @memcpy(i8* %36, i8* %4, i32 1)
  %38 = load i8*, i8** %6, align 8
  %39 = call i32 @strlen(i8* %38)
  %40 = mul nsw i32 %39, 2
  %41 = add nsw i32 %40, 1
  %42 = call i64 @calloc(i32 %41, i32 1)
  %43 = inttoptr i64 %42 to i8*
  store i8* %43, i8** %7, align 8
  %44 = load i8*, i8** %7, align 8
  store i8* %44, i8** %5, align 8
  store i32 0, i32* %12, align 4
  br label %45

45:                                               ; preds = %76, %31
  %46 = load i32, i32* %12, align 4
  %47 = icmp slt i32 %46, 16
  br i1 %47, label %48, label %79

48:                                               ; preds = %45
  %49 = load i8*, i8** %6, align 8
  %50 = load i32, i32* %12, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds i8, i8* %49, i64 %51
  %53 = load i8, i8* %52, align 1
  store i8 %53, i8* %11, align 1
  %54 = load i8, i8* %11, align 1
  %55 = sext i8 %54 to i32
  %56 = sdiv i32 %55, 16
  %57 = trunc i32 %56 to i8
  store i8 %57, i8* %9, align 1
  %58 = load i8, i8* %9, align 1
  %59 = sext i8 %58 to i32
  %60 = add nsw i32 %59, 65
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %9, align 1
  %62 = load i8, i8* %11, align 1
  %63 = sext i8 %62 to i32
  %64 = srem i32 %63, 16
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %10, align 1
  %66 = load i8, i8* %10, align 1
  %67 = sext i8 %66 to i32
  %68 = add nsw i32 %67, 65
  %69 = trunc i32 %68 to i8
  store i8 %69, i8* %10, align 1
  %70 = load i8, i8* %9, align 1
  %71 = load i8*, i8** %5, align 8
  %72 = getelementptr inbounds i8, i8* %71, i32 1
  store i8* %72, i8** %5, align 8
  store i8 %70, i8* %71, align 1
  %73 = load i8, i8* %10, align 1
  %74 = load i8*, i8** %5, align 8
  %75 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %75, i8** %5, align 8
  store i8 %73, i8* %74, align 1
  br label %76

76:                                               ; preds = %48
  %77 = load i32, i32* %12, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %12, align 4
  br label %45

79:                                               ; preds = %45
  %80 = load i8*, i8** %6, align 8
  %81 = call i32 @free(i8* %80)
  %82 = load i8*, i8** %7, align 8
  ret i8* %82
}

declare dso_local i64 @calloc(i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
