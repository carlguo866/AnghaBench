; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23038.c_socket_listen.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_23038.c_socket_listen.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.addrinfo = type { i32, i32, i64, i32, i32, %struct.addrinfo*, i32 }

@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@AI_PASSIVE = common dso_local global i32 0, align 4
@gai_errno = common dso_local global i32 0, align 4
@SOL_SOCKET = common dso_local global i32 0, align 4
@SO_REUSEADDR = common dso_local global i32 0, align 4
@INT_MAX = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @socket_listen(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca %struct.addrinfo, align 8
  %7 = alloca %struct.addrinfo*, align 8
  %8 = alloca %struct.addrinfo*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %11 = load i32, i32* @PF_INET, align 4
  %12 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 4
  store i32 %11, i32* %12, align 4
  %13 = load i32, i32* @SOCK_STREAM, align 4
  %14 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 3
  store i32 %13, i32* %14, align 8
  %15 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 2
  store i64 0, i64* %15, align 8
  %16 = load i32, i32* @AI_PASSIVE, align 4
  %17 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %6, i32 0, i32 6
  store i32 %16, i32* %17, align 8
  %18 = load i8*, i8** %4, align 8
  %19 = load i8*, i8** %5, align 8
  %20 = call i32 @getaddrinfo(i8* %18, i8* %19, %struct.addrinfo* %6, %struct.addrinfo** %7)
  store i32 %20, i32* @gai_errno, align 4
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %75

22:                                               ; preds = %2
  %23 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  store %struct.addrinfo* %23, %struct.addrinfo** %8, align 8
  br label %24

24:                                               ; preds = %68, %22
  %25 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %26 = icmp ne %struct.addrinfo* %25, null
  br i1 %26, label %27, label %72

27:                                               ; preds = %24
  %28 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %29 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %28, i32 0, i32 4
  %30 = load i32, i32* %29, align 4
  %31 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %32 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %31, i32 0, i32 3
  %33 = load i32, i32* %32, align 8
  %34 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %35 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %34, i32 0, i32 2
  %36 = load i64, i64* %35, align 8
  %37 = call i32 @socket(i32 %30, i32 %33, i64 %36)
  store i32 %37, i32* %9, align 4
  %38 = load i32, i32* %9, align 4
  %39 = icmp ne i32 %38, -1
  br i1 %39, label %40, label %67

40:                                               ; preds = %27
  store i32 1, i32* %10, align 4
  %41 = load i32, i32* %9, align 4
  %42 = load i32, i32* @SOL_SOCKET, align 4
  %43 = load i32, i32* @SO_REUSEADDR, align 4
  %44 = call i32 @setsockopt(i32 %41, i32 %42, i32 %43, i32* %10, i32 4)
  %45 = load i32, i32* %9, align 4
  %46 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %47 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %46, i32 0, i32 1
  %48 = load i32, i32* %47, align 4
  %49 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %50 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %49, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = call i64 @bind(i32 %45, i32 %48, i32 %51)
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %59, label %54

54:                                               ; preds = %40
  %55 = load i32, i32* %9, align 4
  %56 = load i32, i32* @INT_MAX, align 4
  %57 = call i64 @listen(i32 %55, i32 %56)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %59, label %62

59:                                               ; preds = %54, %40
  %60 = load i32, i32* %9, align 4
  %61 = call i32 @close(i32 %60)
  br label %66

62:                                               ; preds = %54
  %63 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %64 = call i32 @freeaddrinfo(%struct.addrinfo* %63)
  %65 = load i32, i32* %9, align 4
  store i32 %65, i32* %3, align 4
  br label %76

66:                                               ; preds = %59
  br label %67

67:                                               ; preds = %66, %27
  br label %68

68:                                               ; preds = %67
  %69 = load %struct.addrinfo*, %struct.addrinfo** %8, align 8
  %70 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %69, i32 0, i32 5
  %71 = load %struct.addrinfo*, %struct.addrinfo** %70, align 8
  store %struct.addrinfo* %71, %struct.addrinfo** %8, align 8
  br label %24

72:                                               ; preds = %24
  %73 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %74 = call i32 @freeaddrinfo(%struct.addrinfo* %73)
  br label %75

75:                                               ; preds = %72, %2
  store i32 -1, i32* %3, align 4
  br label %76

76:                                               ; preds = %75, %62
  %77 = load i32, i32* %3, align 4
  ret i32 %77
}

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #1

declare dso_local i32 @socket(i32, i32, i64) #1

declare dso_local i32 @setsockopt(i32, i32, i32, i32*, i32) #1

declare dso_local i64 @bind(i32, i32, i32) #1

declare dso_local i64 @listen(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @freeaddrinfo(%struct.addrinfo*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
