; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_21781.c_extractAcctounts.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_21781.c_extractAcctounts.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.account = type { i8*, i8* }

@.str = private unnamed_addr constant [6 x i8] c"name=\00", align 1
@pAccounts = common dso_local global %struct.account** null, align 8
@nAccounts = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [19 x i8] c"Failed to malloc()\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"password=\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @extractAcctounts(i32* %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca [256 x i8], align 16
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  store i32* %0, i32** %2, align 8
  br label %6

6:                                                ; preds = %112, %1
  %7 = load i32*, i32** %2, align 8
  %8 = call i32 @feof(i32* %7)
  %9 = icmp ne i32 %8, 0
  %10 = xor i1 %9, true
  br i1 %10, label %11, label %113

11:                                               ; preds = %6
  %12 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %13 = load i32*, i32** %2, align 8
  %14 = call i32 @fgets(i8* %12, i32 255, i32* %13)
  %15 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %16 = call i64 @strBeginsWith(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %15)
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %71

18:                                               ; preds = %11
  %19 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %20 = call i32 @strlen(i8* %19)
  %21 = sub nsw i32 %20, 1
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %22
  store i8 0, i8* %23, align 1
  %24 = call i64 @malloc(i32 16)
  %25 = inttoptr i64 %24 to %struct.account*
  %26 = load %struct.account**, %struct.account*** @pAccounts, align 8
  %27 = load i64, i64* @nAccounts, align 8
  %28 = getelementptr inbounds %struct.account*, %struct.account** %26, i64 %27
  store %struct.account* %25, %struct.account** %28, align 8
  %29 = load %struct.account**, %struct.account*** @pAccounts, align 8
  %30 = load i64, i64* @nAccounts, align 8
  %31 = getelementptr inbounds %struct.account*, %struct.account** %29, i64 %30
  %32 = load %struct.account*, %struct.account** %31, align 8
  %33 = icmp eq %struct.account* %32, null
  br i1 %33, label %34, label %38

34:                                               ; preds = %18
  %35 = call i32 @perror(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %36 = load i32, i32* @errno, align 4
  %37 = call i32 @exit(i32 %36) #3
  unreachable

38:                                               ; preds = %18
  %39 = load %struct.account**, %struct.account*** @pAccounts, align 8
  %40 = load i64, i64* @nAccounts, align 8
  %41 = getelementptr inbounds %struct.account*, %struct.account** %39, i64 %40
  %42 = load %struct.account*, %struct.account** %41, align 8
  %43 = getelementptr inbounds %struct.account, %struct.account* %42, i32 0, i32 0
  %44 = load i8*, i8** %43, align 8
  store i8* %44, i8** %4, align 8
  store i32 5, i32* %5, align 4
  br label %45

45:                                               ; preds = %60, %38
  %46 = load i32, i32* %5, align 4
  %47 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %48 = call i32 @strlen(i8* %47)
  %49 = icmp slt i32 %46, %48
  br i1 %49, label %50, label %63

50:                                               ; preds = %45
  %51 = load i32, i32* %5, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %52
  %54 = load i8, i8* %53, align 1
  %55 = load i8*, i8** %4, align 8
  %56 = load i32, i32* %5, align 4
  %57 = sub nsw i32 %56, 5
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %55, i64 %58
  store i8 %54, i8* %59, align 1
  br label %60

60:                                               ; preds = %50
  %61 = load i32, i32* %5, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %5, align 4
  br label %45

63:                                               ; preds = %45
  %64 = load i8*, i8** %4, align 8
  %65 = load i32, i32* %5, align 4
  %66 = sub nsw i32 %65, 5
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %64, i64 %67
  store i8 0, i8* %68, align 1
  %69 = load i64, i64* @nAccounts, align 8
  %70 = add i64 %69, 1
  store i64 %70, i64* @nAccounts, align 8
  br label %71

71:                                               ; preds = %63, %11
  %72 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %73 = call i64 @strBeginsWith(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* %72)
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %112

75:                                               ; preds = %71
  %76 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %77 = call i32 @strlen(i8* %76)
  %78 = sub nsw i32 %77, 1
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %79
  store i8 0, i8* %80, align 1
  %81 = load %struct.account**, %struct.account*** @pAccounts, align 8
  %82 = load i64, i64* @nAccounts, align 8
  %83 = sub i64 %82, 1
  %84 = getelementptr inbounds %struct.account*, %struct.account** %81, i64 %83
  %85 = load %struct.account*, %struct.account** %84, align 8
  %86 = getelementptr inbounds %struct.account, %struct.account* %85, i32 0, i32 1
  %87 = load i8*, i8** %86, align 8
  store i8* %87, i8** %4, align 8
  store i32 9, i32* %5, align 4
  br label %88

88:                                               ; preds = %103, %75
  %89 = load i32, i32* %5, align 4
  %90 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %91 = call i32 @strlen(i8* %90)
  %92 = icmp slt i32 %89, %91
  br i1 %92, label %93, label %106

93:                                               ; preds = %88
  %94 = load i32, i32* %5, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = load i8*, i8** %4, align 8
  %99 = load i32, i32* %5, align 4
  %100 = sub nsw i32 %99, 9
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %98, i64 %101
  store i8 %97, i8* %102, align 1
  br label %103

103:                                              ; preds = %93
  %104 = load i32, i32* %5, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %5, align 4
  br label %88

106:                                              ; preds = %88
  %107 = load i8*, i8** %4, align 8
  %108 = load i32, i32* %5, align 4
  %109 = sub nsw i32 %108, 9
  %110 = sext i32 %109 to i64
  %111 = getelementptr inbounds i8, i8* %107, i64 %110
  store i8 0, i8* %111, align 1
  br label %112

112:                                              ; preds = %106, %71
  br label %6

113:                                              ; preds = %6
  ret void
}

declare dso_local i32 @feof(i32*) #1

declare dso_local i32 @fgets(i8*, i32, i32*) #1

declare dso_local i64 @strBeginsWith(i8*, i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
