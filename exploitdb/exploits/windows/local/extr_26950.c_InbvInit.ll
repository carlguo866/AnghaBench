; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_26950.c_InbvInit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_26950.c_InbvInit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@FALSE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"InbvAcquireDisplayOwnership\00", align 1
@InbvAcquireDisplayOwnership = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [17 x i8] c"InbvResetDisplay\00", align 1
@InbvResetDisplay = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [19 x i8] c"InbvSolidColorFill\00", align 1
@InbvSolidColorFill = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [17 x i8] c"InbvSetTextColor\00", align 1
@InbvSetTextColor = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [31 x i8] c"InbvInstallDisplayStringFilter\00", align 1
@InbvInstallDisplayStringFilter = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [24 x i8] c"InbvEnableDisplayString\00", align 1
@InbvEnableDisplayString = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [20 x i8] c"InbvSetScrollRegion\00", align 1
@InbvSetScrollRegion = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [18 x i8] c"InbvDisplayString\00", align 1
@InbvDisplayString = common dso_local global i64 0, align 8
@TRUE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @InbvInit(i64 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  store i64 %0, i64* %4, align 8
  store i32 %1, i32* %5, align 4
  %7 = load i32, i32* %5, align 4
  %8 = call i32* @LoadLibrary(i32 %7)
  store i32* %8, i32** %6, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = icmp eq i32* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = load i32, i32* @FALSE, align 4
  store i32 %12, i32* %3, align 4
  br label %97

13:                                               ; preds = %2
  %14 = load i32*, i32** %6, align 8
  %15 = call i64 @GetProcAddress(i32* %14, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %16 = load i32*, i32** %6, align 8
  %17 = ptrtoint i32* %16 to i64
  %18 = sub nsw i64 %15, %17
  %19 = load i64, i64* %4, align 8
  %20 = add nsw i64 %18, %19
  store i64 %20, i64* @InbvAcquireDisplayOwnership, align 8
  %21 = load i32*, i32** %6, align 8
  %22 = call i64 @GetProcAddress(i32* %21, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  %23 = load i32*, i32** %6, align 8
  %24 = ptrtoint i32* %23 to i64
  %25 = sub nsw i64 %22, %24
  %26 = load i64, i64* %4, align 8
  %27 = add nsw i64 %25, %26
  store i64 %27, i64* @InbvResetDisplay, align 8
  %28 = load i32*, i32** %6, align 8
  %29 = call i64 @GetProcAddress(i32* %28, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %30 = load i32*, i32** %6, align 8
  %31 = ptrtoint i32* %30 to i64
  %32 = sub nsw i64 %29, %31
  %33 = load i64, i64* %4, align 8
  %34 = add nsw i64 %32, %33
  store i64 %34, i64* @InbvSolidColorFill, align 8
  %35 = load i32*, i32** %6, align 8
  %36 = call i64 @GetProcAddress(i32* %35, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %37 = load i32*, i32** %6, align 8
  %38 = ptrtoint i32* %37 to i64
  %39 = sub nsw i64 %36, %38
  %40 = load i64, i64* %4, align 8
  %41 = add nsw i64 %39, %40
  store i64 %41, i64* @InbvSetTextColor, align 8
  %42 = load i32*, i32** %6, align 8
  %43 = call i64 @GetProcAddress(i32* %42, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0))
  %44 = load i32*, i32** %6, align 8
  %45 = ptrtoint i32* %44 to i64
  %46 = sub nsw i64 %43, %45
  %47 = load i64, i64* %4, align 8
  %48 = add nsw i64 %46, %47
  store i64 %48, i64* @InbvInstallDisplayStringFilter, align 8
  %49 = load i32*, i32** %6, align 8
  %50 = call i64 @GetProcAddress(i32* %49, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  %51 = load i32*, i32** %6, align 8
  %52 = ptrtoint i32* %51 to i64
  %53 = sub nsw i64 %50, %52
  %54 = load i64, i64* %4, align 8
  %55 = add nsw i64 %53, %54
  store i64 %55, i64* @InbvEnableDisplayString, align 8
  %56 = load i32*, i32** %6, align 8
  %57 = call i64 @GetProcAddress(i32* %56, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  %58 = load i32*, i32** %6, align 8
  %59 = ptrtoint i32* %58 to i64
  %60 = sub nsw i64 %57, %59
  %61 = load i64, i64* %4, align 8
  %62 = add nsw i64 %60, %61
  store i64 %62, i64* @InbvSetScrollRegion, align 8
  %63 = load i32*, i32** %6, align 8
  %64 = call i64 @GetProcAddress(i32* %63, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0))
  %65 = load i32*, i32** %6, align 8
  %66 = ptrtoint i32* %65 to i64
  %67 = sub nsw i64 %64, %66
  %68 = load i64, i64* %4, align 8
  %69 = add nsw i64 %67, %68
  store i64 %69, i64* @InbvDisplayString, align 8
  %70 = load i64, i64* @InbvAcquireDisplayOwnership, align 8
  %71 = icmp ne i64 %70, 0
  br i1 %71, label %72, label %95

72:                                               ; preds = %13
  %73 = load i64, i64* @InbvResetDisplay, align 8
  %74 = icmp ne i64 %73, 0
  br i1 %74, label %75, label %95

75:                                               ; preds = %72
  %76 = load i64, i64* @InbvSolidColorFill, align 8
  %77 = icmp ne i64 %76, 0
  br i1 %77, label %78, label %95

78:                                               ; preds = %75
  %79 = load i64, i64* @InbvSetTextColor, align 8
  %80 = icmp ne i64 %79, 0
  br i1 %80, label %81, label %95

81:                                               ; preds = %78
  %82 = load i64, i64* @InbvInstallDisplayStringFilter, align 8
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %95

84:                                               ; preds = %81
  %85 = load i64, i64* @InbvEnableDisplayString, align 8
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %95

87:                                               ; preds = %84
  %88 = load i64, i64* @InbvSetScrollRegion, align 8
  %89 = icmp ne i64 %88, 0
  br i1 %89, label %90, label %95

90:                                               ; preds = %87
  %91 = load i64, i64* @InbvDisplayString, align 8
  %92 = icmp ne i64 %91, 0
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = load i32, i32* @TRUE, align 4
  store i32 %94, i32* %3, align 4
  br label %97

95:                                               ; preds = %90, %87, %84, %81, %78, %75, %72, %13
  %96 = load i32, i32* @FALSE, align 4
  store i32 %96, i32* %3, align 4
  br label %97

97:                                               ; preds = %95, %93, %11
  %98 = load i32, i32* %3, align 4
  ret i32 %98
}

declare dso_local i32* @LoadLibrary(i32) #1

declare dso_local i64 @GetProcAddress(i32*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
