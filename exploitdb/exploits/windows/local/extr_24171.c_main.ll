; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_24171.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_24171.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [16 x i8] c"D:SKFOIJ(*EHJFL\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"Usage: foolpw RECOVERY_KEY CONTROL_PASSWORD\00", align 1
@.str.2 = private unnamed_addr constant [58 x i8] c"Recovery key must be 16 hexadecimal bytes (32 characters)\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"Passwords are limited to 16 characters\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"\0AInvalid hexadecimal character '%c'\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  %8 = alloca [33 x i8], align 16
  %9 = alloca [17 x i8], align 16
  %10 = alloca [17 x i8], align 16
  %11 = alloca i8*, align 8
  %12 = alloca [2 x i8], align 1
  %13 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8** %11, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 3
  br i1 %15, label %16, label %18

16:                                               ; preds = %2
  %17 = call i32 @puts(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %104

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @strlen(i8* %21)
  %23 = icmp ne i32 %22, 32
  br i1 %23, label %24, label %26

24:                                               ; preds = %18
  %25 = call i32 @puts(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %104

26:                                               ; preds = %18
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = icmp sgt i32 %30, 16
  br i1 %31, label %32, label %34

32:                                               ; preds = %26
  %33 = call i32 @puts(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %104

34:                                               ; preds = %26
  %35 = getelementptr inbounds [33 x i8], [33 x i8]* %8, i64 0, i64 0
  %36 = call i32 @memset(i8* %35, i32 0, i32 8)
  %37 = getelementptr inbounds [17 x i8], [17 x i8]* %9, i64 0, i64 0
  %38 = call i32 @memset(i8* %37, i32 0, i32 8)
  %39 = getelementptr inbounds [17 x i8], [17 x i8]* %10, i64 0, i64 0
  %40 = call i32 @memset(i8* %39, i32 0, i32 17)
  %41 = getelementptr inbounds [2 x i8], [2 x i8]* %12, i64 0, i64 0
  %42 = call i32 @memset(i8* %41, i32 0, i32 2)
  %43 = getelementptr inbounds [33 x i8], [33 x i8]* %8, i64 0, i64 0
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 1
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @strcpy(i8* %43, i8* %46)
  %48 = getelementptr inbounds [17 x i8], [17 x i8]* %10, i64 0, i64 0
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 2
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @strcpy(i8* %48, i8* %51)
  store i32 0, i32* %6, align 4
  br label %53

53:                                               ; preds = %99, %34
  %54 = load i32, i32* %6, align 4
  %55 = icmp slt i32 %54, 16
  br i1 %55, label %56, label %102

56:                                               ; preds = %53
  %57 = getelementptr inbounds [2 x i8], [2 x i8]* %12, i64 0, i64 0
  %58 = load i32, i32* %6, align 4
  %59 = mul nsw i32 %58, 2
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [33 x i8], [33 x i8]* %8, i64 0, i64 %60
  %62 = call i32 @memcpy(i8* %57, i8* %61, i32 2)
  %63 = getelementptr inbounds [2 x i8], [2 x i8]* %12, i64 0, i64 0
  %64 = call signext i8 @strtoul(i8* %63, i8** %13, i32 16)
  %65 = load i32, i32* %6, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [17 x i8], [17 x i8]* %9, i64 0, i64 %66
  store i8 %64, i8* %67, align 1
  %68 = load i8*, i8** %13, align 8
  %69 = load i8, i8* %68, align 1
  %70 = sext i8 %69 to i32
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %76

72:                                               ; preds = %56
  %73 = load i8*, i8** %13, align 8
  %74 = load i8, i8* %73, align 1
  %75 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8 signext %74)
  store i32 1, i32* %3, align 4
  br label %104

76:                                               ; preds = %56
  %77 = load i32, i32* %6, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [17 x i8], [17 x i8]* %10, i64 0, i64 %78
  %80 = load i8, i8* %79, align 1
  %81 = sext i8 %80 to i32
  %82 = load i8*, i8** %11, align 8
  %83 = load i32, i32* %6, align 4
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %82, i64 %84
  %86 = load i8, i8* %85, align 1
  %87 = sext i8 %86 to i32
  %88 = add nsw i32 %81, %87
  %89 = load i32, i32* %6, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds [17 x i8], [17 x i8]* %9, i64 0, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = xor i32 %88, %93
  %95 = trunc i32 %94 to i8
  store i8 %95, i8* %7, align 1
  %96 = load i8, i8* %7, align 1
  %97 = load i32, i32* @stdout, align 4
  %98 = call i32 @putc(i8 signext %96, i32 %97)
  br label %99

99:                                               ; preds = %76
  %100 = load i32, i32* %6, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %6, align 4
  br label %53

102:                                              ; preds = %53
  %103 = call i32 @puts(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %104

104:                                              ; preds = %102, %72, %32, %24, %16
  %105 = load i32, i32* %3, align 4
  ret i32 %105
}

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local signext i8 @strtoul(i8*, i8**, i32) #1

declare dso_local i32 @printf(i8*, i8 signext) #1

declare dso_local i32 @putc(i8 signext, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
