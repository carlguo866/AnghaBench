; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1174.c_GetZipTorrentPath.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1174.c_GetZipTorrentPath.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_PATH = common dso_local global i32 0, align 4
@HKEY_LOCAL_MACHINE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"SOFTWARE\\ZipTorrent\00", align 1
@KEY_QUERY_VALUE = common dso_local global i32 0, align 4
@ERROR_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"Install_Dir\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @GetZipTorrentPath() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = load i32, i32* @MAX_PATH, align 4
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %3, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %4, align 8
  %12 = load i32, i32* @MAX_PATH, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* @HKEY_LOCAL_MACHINE, align 4
  %14 = load i32, i32* @KEY_QUERY_VALUE, align 4
  %15 = call i64 @RegOpenKeyEx(i32 %13, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 0, i32 %14, i32* %2)
  %16 = load i64, i64* @ERROR_SUCCESS, align 8
  %17 = icmp eq i64 %15, %16
  br i1 %17, label %18, label %35

18:                                               ; preds = %0
  %19 = load i32, i32* %2, align 4
  %20 = ptrtoint i8* %11 to i32
  %21 = call i64 @RegQueryValueEx(i32 %19, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32* null, i32* null, i32 %20, i32* %5)
  store i64 %21, i64* %6, align 8
  %22 = load i64, i64* %6, align 8
  %23 = load i64, i64* @ERROR_SUCCESS, align 8
  %24 = icmp ne i64 %22, %23
  br i1 %24, label %29, label %25

25:                                               ; preds = %18
  %26 = load i32, i32* %5, align 4
  %27 = load i32, i32* @MAX_PATH, align 4
  %28 = icmp sgt i32 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %25, %18
  %30 = load i32, i32* %2, align 4
  %31 = call i32 @RegCloseKey(i32 %30)
  store i8* null, i8** %1, align 8
  store i32 1, i32* %7, align 4
  br label %36

32:                                               ; preds = %25
  %33 = load i32, i32* %2, align 4
  %34 = call i32 @RegCloseKey(i32 %33)
  store i8* %11, i8** %1, align 8
  store i32 1, i32* %7, align 4
  br label %36

35:                                               ; preds = %0
  store i8* null, i8** %1, align 8
  store i32 1, i32* %7, align 4
  br label %36

36:                                               ; preds = %35, %32, %29
  %37 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %37)
  %38 = load i8*, i8** %1, align 8
  ret i8* %38
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @RegOpenKeyEx(i32, i8*, i32, i32, i32*) #2

declare dso_local i64 @RegQueryValueEx(i32, i8*, i32*, i32*, i32, i32*) #2

declare dso_local i32 @RegCloseKey(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
