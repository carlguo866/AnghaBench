; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_2872.c_encode_alphanum.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_2872.c_encode_alphanum.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32 }

@MAX_ENCODED_LEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"\80\00", align 1
@.str.1 = private unnamed_addr constant [62 x i8] c"0123456789BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"%c%c\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @encode_alphanum(i8* %0, i8* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca [2 x i8], align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i8*, align 8
  %18 = alloca %struct.timeval, align 8
  %19 = alloca %struct.timezone, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %20 = load i8*, i8** %4, align 8
  %21 = load i32, i32* @MAX_ENCODED_LEN, align 4
  %22 = call i32 @memset(i8* %20, i32 0, i32 %21)
  %23 = call i32 @gettimeofday(%struct.timeval* %18, %struct.timezone* %19)
  %24 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 1
  %25 = load i64, i64* %24, align 8
  %26 = trunc i64 %25 to i32
  %27 = mul nsw i32 %26, 1000
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  %30 = load i64, i64* %29, align 8
  %31 = add nsw i64 %28, %30
  %32 = call i32 @srand(i64 %31)
  %33 = load i8*, i8** %5, align 8
  %34 = call i32 @strcat(i8* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  store i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0), i8** %17, align 8
  store i32 0, i32* %9, align 4
  br label %35

35:                                               ; preds = %124, %3
  %36 = load i32, i32* %9, align 4
  %37 = load i32, i32* %6, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %127

39:                                               ; preds = %35
  %40 = load i8*, i8** %5, align 8
  %41 = load i32, i32* %9, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds i8, i8* %40, i64 %42
  %44 = load i8, i8* %43, align 1
  %45 = zext i8 %44 to i32
  store i32 %45, i32* %10, align 4
  %46 = load i32, i32* %10, align 4
  %47 = and i32 %46, 240
  %48 = ashr i32 %47, 4
  store i32 %48, i32* %11, align 4
  %49 = load i32, i32* %10, align 4
  %50 = and i32 %49, 15
  store i32 %50, i32* %12, align 4
  %51 = load i32, i32* %12, align 4
  store i32 %51, i32* %16, align 4
  %52 = call i32 (...) @rand()
  %53 = load i8*, i8** %17, align 8
  %54 = call i32 @strlen(i8* %53)
  %55 = srem i32 %52, %54
  store i32 %55, i32* %8, align 4
  br label %56

56:                                               ; preds = %66, %39
  %57 = load i8*, i8** %17, align 8
  %58 = load i32, i32* %8, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %57, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = sext i8 %61 to i32
  %63 = and i32 %62, 15
  %64 = load i32, i32* %16, align 4
  %65 = icmp ne i32 %63, %64
  br i1 %65, label %66, label %72

66:                                               ; preds = %56
  %67 = load i32, i32* %8, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %8, align 4
  %69 = load i8*, i8** %17, align 8
  %70 = call i32 @strlen(i8* %69)
  %71 = srem i32 %68, %70
  store i32 %71, i32* %8, align 4
  br label %56

72:                                               ; preds = %56
  %73 = load i8*, i8** %17, align 8
  %74 = load i32, i32* %8, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8, i8* %73, i64 %75
  %77 = load i8, i8* %76, align 1
  %78 = sext i8 %77 to i32
  %79 = ashr i32 %78, 4
  store i32 %79, i32* %15, align 4
  %80 = load i32, i32* %11, align 4
  %81 = load i32, i32* %15, align 4
  %82 = xor i32 %80, %81
  store i32 %82, i32* %14, align 4
  %83 = call i32 (...) @rand()
  %84 = load i8*, i8** %17, align 8
  %85 = call i32 @strlen(i8* %84)
  %86 = srem i32 %83, %85
  store i32 %86, i32* %8, align 4
  br label %87

87:                                               ; preds = %97, %72
  %88 = load i8*, i8** %17, align 8
  %89 = load i32, i32* %8, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i8, i8* %88, i64 %90
  %92 = load i8, i8* %91, align 1
  %93 = sext i8 %92 to i32
  %94 = and i32 %93, 15
  %95 = load i32, i32* %14, align 4
  %96 = icmp ne i32 %94, %95
  br i1 %96, label %97, label %103

97:                                               ; preds = %87
  %98 = load i32, i32* %8, align 4
  %99 = add nsw i32 %98, 1
  store i32 %99, i32* %8, align 4
  %100 = load i8*, i8** %17, align 8
  %101 = call i32 @strlen(i8* %100)
  %102 = srem i32 %99, %101
  store i32 %102, i32* %8, align 4
  br label %87

103:                                              ; preds = %87
  %104 = load i8*, i8** %17, align 8
  %105 = load i32, i32* %8, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %104, i64 %106
  %108 = load i8, i8* %107, align 1
  %109 = sext i8 %108 to i32
  %110 = ashr i32 %109, 4
  store i32 %110, i32* %13, align 4
  %111 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  %112 = load i32, i32* %13, align 4
  %113 = shl i32 %112, 4
  %114 = load i32, i32* %14, align 4
  %115 = add nsw i32 %113, %114
  %116 = load i32, i32* %15, align 4
  %117 = shl i32 %116, 4
  %118 = load i32, i32* %16, align 4
  %119 = add nsw i32 %117, %118
  %120 = call i32 @sprintf(i8* %111, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i32 %115, i32 %119)
  %121 = load i8*, i8** %4, align 8
  %122 = getelementptr inbounds [2 x i8], [2 x i8]* %7, i64 0, i64 0
  %123 = call i32 @strcat(i8* %121, i8* %122)
  br label %124

124:                                              ; preds = %103
  %125 = load i32, i32* %9, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %9, align 4
  br label %35

127:                                              ; preds = %35
  %128 = load i8*, i8** %4, align 8
  %129 = call i32 @strcat(i8* %128, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #1

declare dso_local i32 @srand(i64) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @rand(...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
