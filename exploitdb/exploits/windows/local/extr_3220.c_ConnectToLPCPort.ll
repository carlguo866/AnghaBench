; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3220.c_ConnectToLPCPort.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3220.c_ConnectToLPCPort.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_13__ = type { i32, i32, i64 }
%struct.TYPE_14__ = type { i32, i32, i32, i32, i32 }
%struct.TYPE_11__ = type { i32, i32, i8* }
%struct.TYPE_12__ = type { i32, i32, i32, i32 }

@.str = private unnamed_addr constant [21 x i32] [i32 92, i32 82, i32 80, i32 67, i32 32, i32 67, i32 111, i32 110, i32 116, i32 114, i32 111, i32 108, i32 92, i32 115, i32 112, i32 111, i32 111, i32 108, i32 115, i32 115, i32 0], align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"NTDLL.DLL\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"NtConnectPort\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"NtCreateSection\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"[-] Error Loading functions\0A\00", align 1
@REQUIRED_SIZE = common dso_local global i32 0, align 4
@SecurityIdentification = common dso_local global i32 0, align 4
@SECTION_ALL_ACCESS = common dso_local global i32 0, align 4
@PAGE_READWRITE = common dso_local global i32 0, align 4
@SEC_COMMIT = common dso_local global i32 0, align 4
@SHARED_SECTION_SIZE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local { i64, i64 } @ConnectToLPCPort() #0 {
  %1 = alloca %struct.TYPE_13__, align 8
  %2 = alloca i32, align 4
  %3 = alloca %struct.TYPE_14__, align 4
  %4 = alloca %struct.TYPE_14__, align 4
  %5 = alloca [100 x i32], align 16
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.TYPE_11__, align 8
  %10 = alloca i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)*, align 8
  %11 = alloca i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)*, align 8
  %12 = alloca i32, align 4
  %13 = alloca %struct.TYPE_13__, align 8
  %14 = alloca i32, align 4
  %15 = alloca %struct.TYPE_12__, align 4
  %16 = alloca i32, align 4
  store i32 400, i32* %6, align 4
  store i8* bitcast ([21 x i32]* @.str to i8*), i8** %7, align 8
  %17 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %1, i32 0, i32 2
  store i64 0, i64* %17, align 8
  store i32 0, i32* %8, align 4
  br label %18

18:                                               ; preds = %25, %0
  %19 = load i32, i32* %8, align 4
  %20 = icmp slt i32 %19, 100
  br i1 %20, label %21, label %28

21:                                               ; preds = %18
  %22 = load i32, i32* %8, align 4
  %23 = sext i32 %22 to i64
  %24 = getelementptr inbounds [100 x i32], [100 x i32]* %5, i64 0, i64 %23
  store i32 0, i32* %24, align 4
  br label %25

25:                                               ; preds = %21
  %26 = load i32, i32* %8, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %8, align 4
  br label %18

28:                                               ; preds = %18
  %29 = call i32 @GetModuleHandle(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %30 = call i64 @GetProcAddress(i32 %29, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  %31 = inttoptr i64 %30 to i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)*
  store i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)* %31, i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)** %10, align 8
  %32 = call i32 @GetModuleHandle(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %33 = call i64 @GetProcAddress(i32 %32, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0))
  %34 = inttoptr i64 %33 to i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)*
  store i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)* %34, i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)** %11, align 8
  %35 = load i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)*, i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)** %10, align 8
  %36 = icmp ne i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)* %35, null
  br i1 %36, label %37, label %40

37:                                               ; preds = %28
  %38 = load i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)*, i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)** %11, align 8
  %39 = icmp ne i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)* %38, null
  br i1 %39, label %42, label %40

40:                                               ; preds = %37, %28
  %41 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  br label %90

42:                                               ; preds = %37
  store i32 0, i32* %14, align 4
  store i32 4, i32* %16, align 4
  %43 = load i32, i32* @REQUIRED_SIZE, align 4
  %44 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %13, i32 0, i32 1
  store i32 %43, i32* %44, align 4
  %45 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %13, i32 0, i32 0
  store i32 0, i32* %45, align 8
  %46 = ptrtoint i32* %16 to i32
  %47 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %15, i32 0, i32 0
  store i32 %46, i32* %47, align 4
  %48 = load i32, i32* @SecurityIdentification, align 4
  %49 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %15, i32 0, i32 3
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %15, i32 0, i32 1
  store i32 16777473, i32* %50, align 4
  %51 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %15, i32 0, i32 2
  store i32 65536, i32* %51, align 4
  %52 = load i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)*, i32 (i32*, i32, i32*, %struct.TYPE_13__*, i32, i32, i32*)** %11, align 8
  %53 = load i32, i32* @SECTION_ALL_ACCESS, align 4
  %54 = load i32, i32* @PAGE_READWRITE, align 4
  %55 = load i32, i32* @SEC_COMMIT, align 4
  %56 = call i32 %52(i32* %12, i32 %53, i32* null, %struct.TYPE_13__* %13, i32 %54, i32 %55, i32* null)
  %57 = call i32 @memset(%struct.TYPE_14__* %3, i32 0, i32 20)
  %58 = call i32 @memset(%struct.TYPE_14__* %4, i32 0, i32 20)
  %59 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %3, i32 0, i32 0
  store i32 24, i32* %59, align 4
  %60 = load i32, i32* %12, align 4
  %61 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %3, i32 0, i32 4
  store i32 %60, i32* %61, align 4
  %62 = load i32, i32* @SHARED_SECTION_SIZE, align 4
  %63 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %3, i32 0, i32 3
  store i32 %62, i32* %63, align 4
  %64 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %4, i32 0, i32 0
  store i32 12, i32* %64, align 4
  %65 = load i8*, i8** %7, align 8
  %66 = call i32 @wcslen(i8* %65)
  %67 = mul nsw i32 %66, 2
  %68 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %9, i32 0, i32 0
  store i32 %67, i32* %68, align 8
  %69 = load i8*, i8** %7, align 8
  %70 = call i32 @wcslen(i8* %69)
  %71 = mul nsw i32 %70, 2
  %72 = add nsw i32 %71, 2
  %73 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %9, i32 0, i32 1
  store i32 %72, i32* %73, align 4
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %9, i32 0, i32 2
  store i8* %74, i8** %75, align 8
  %76 = load i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)*, i32 (i32*, %struct.TYPE_11__*, %struct.TYPE_12__*, i32*, i32*, i32*, i32*, i32*)** %10, align 8
  %77 = bitcast %struct.TYPE_14__* %3 to i32*
  %78 = bitcast %struct.TYPE_14__* %4 to i32*
  %79 = getelementptr inbounds [100 x i32], [100 x i32]* %5, i64 0, i64 0
  %80 = call i32 %76(i32* %2, %struct.TYPE_11__* %9, %struct.TYPE_12__* %15, i32* %77, i32* %78, i32* %14, i32* %79, i32* %6)
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %89, label %82

82:                                               ; preds = %42
  %83 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %3, i32 0, i32 2
  %84 = load i32, i32* %83, align 4
  %85 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %1, i32 0, i32 1
  store i32 %84, i32* %85, align 4
  %86 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %3, i32 0, i32 1
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %1, i32 0, i32 0
  store i32 %87, i32* %88, align 8
  br label %89

89:                                               ; preds = %82, %42
  br label %90

90:                                               ; preds = %89, %40
  %91 = bitcast %struct.TYPE_13__* %1 to { i64, i64 }*
  %92 = load { i64, i64 }, { i64, i64 }* %91, align 8
  ret { i64, i64 } %92
}

declare dso_local i64 @GetProcAddress(i32, i8*) #1

declare dso_local i32 @GetModuleHandle(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @memset(%struct.TYPE_14__*, i32, i32) #1

declare dso_local i32 @wcslen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
