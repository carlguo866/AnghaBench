; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_355.c_set_lang.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_355.c_set_lang.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [56 x i8] c"warning: user language differs from system language\0D\0A\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"1. system : \00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"2. user   : \00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Select(1-2): \00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [30 x i8] c"wrong choice '%c', leaving.\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [18 x i8] c"system language\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"user language\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @set_lang() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = call i32 (...) @GetSystemDefaultLangID()
  store i32 %5, i32* %4, align 4
  %6 = load i32, i32* %4, align 4
  %7 = call i32 @PRIMARYLANGID(i32 %6)
  store i32 %7, i32* %3, align 4
  %8 = call i32 (...) @GetUserDefaultLangID()
  store i32 %8, i32* %4, align 4
  %9 = load i32, i32* %4, align 4
  %10 = call i32 @PRIMARYLANGID(i32 %9)
  store i32 %10, i32* %2, align 4
  %11 = load i32, i32* %2, align 4
  %12 = load i32, i32* %3, align 4
  %13 = icmp ne i32 %11, %12
  br i1 %13, label %14, label %44

14:                                               ; preds = %0
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
  %17 = load i32, i32* %3, align 4
  %18 = call i32 @print_lang(i32 %17)
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %20 = load i32, i32* %2, align 4
  %21 = call i32 @print_lang(i32 %20)
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %23 = load i32, i32* @stdout, align 4
  %24 = call i32 @fflush(i32 %23)
  %25 = call i32 (...) @getch()
  store i32 %25, i32* %4, align 4
  %26 = load i32, i32* %4, align 4
  %27 = icmp ne i32 %26, 49
  br i1 %27, label %28, label %35

28:                                               ; preds = %14
  %29 = load i32, i32* %4, align 4
  %30 = icmp ne i32 %29, 50
  br i1 %30, label %31, label %35

31:                                               ; preds = %28
  %32 = load i32, i32* %4, align 4
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0), i32 %32)
  %34 = call i32 @exit(i32 0) #3
  unreachable

35:                                               ; preds = %28, %14
  %36 = load i32, i32* %4, align 4
  %37 = icmp eq i32 %36, 49
  br i1 %37, label %38, label %41

38:                                               ; preds = %35
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0))
  %40 = load i32, i32* %3, align 4
  store i32 %40, i32* %1, align 4
  br label %46

41:                                               ; preds = %35
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  br label %43

43:                                               ; preds = %41
  br label %44

44:                                               ; preds = %43, %0
  %45 = load i32, i32* %2, align 4
  store i32 %45, i32* %1, align 4
  br label %46

46:                                               ; preds = %44, %38
  %47 = load i32, i32* %1, align 4
  ret i32 %47
}

declare dso_local i32 @GetSystemDefaultLangID(...) #1

declare dso_local i32 @PRIMARYLANGID(i32) #1

declare dso_local i32 @GetUserDefaultLangID(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @print_lang(i32) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i32 @getch(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
