; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_2412.c_GetKernelBase.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_2412.c_GetKernelBase.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i32 }

@SystemModuleInformation = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"malloc failed.\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"ZwQuerySystemInformation failed\0A\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"ntoskrnl.exe\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @GetKernelBase() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32*, align 8
  %6 = alloca %struct.TYPE_2__*, align 8
  %7 = alloca i32*, align 8
  %8 = load i32, i32* @SystemModuleInformation, align 4
  %9 = bitcast i64* %3 to i32*
  %10 = call i64 @ZwQuerySystemInformation(i32 %8, i32* %9, i64 0, i64* %3)
  %11 = load i64, i64* %3, align 8
  %12 = call i32* @malloc(i64 %11)
  store i32* %12, i32** %5, align 8
  %13 = icmp eq i32* %12, null
  br i1 %13, label %14, label %16

14:                                               ; preds = %0
  %15 = call i32 @ErrorQuit(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  br label %16

16:                                               ; preds = %14, %0
  %17 = load i32, i32* @SystemModuleInformation, align 4
  %18 = load i32*, i32** %5, align 8
  %19 = load i64, i64* %3, align 8
  %20 = call i64 @ZwQuerySystemInformation(i32 %17, i32* %18, i64 %19, i64* %3)
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %16
  %23 = call i32 @ErrorQuit(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  br label %24

24:                                               ; preds = %22, %16
  %25 = load i32*, i32** %5, align 8
  %26 = bitcast i32* %25 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* %4, align 8
  %28 = load i32*, i32** %5, align 8
  %29 = ptrtoint i32* %28 to i64
  %30 = add i64 %29, 8
  %31 = inttoptr i64 %30 to %struct.TYPE_2__*
  store %struct.TYPE_2__* %31, %struct.TYPE_2__** %6, align 8
  store i64 0, i64* %2, align 8
  br label %32

32:                                               ; preds = %52, %24
  %33 = load i64, i64* %2, align 8
  %34 = load i64, i64* %4, align 8
  %35 = icmp slt i64 %33, %34
  br i1 %35, label %36, label %55

36:                                               ; preds = %32
  %37 = load %struct.TYPE_2__*, %struct.TYPE_2__** %6, align 8
  %38 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i32 0, i32 1
  %39 = load i32, i32* %38, align 4
  %40 = call i32* @strstr(i32 %39, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  store i32* %40, i32** %7, align 8
  %41 = icmp ne i32* %40, null
  br i1 %41, label %42, label %49

42:                                               ; preds = %36
  %43 = load i32*, i32** %5, align 8
  %44 = call i32 @free(i32* %43)
  %45 = load %struct.TYPE_2__*, %struct.TYPE_2__** %6, align 8
  %46 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %45, i32 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = sext i32 %47 to i64
  store i64 %48, i64* %1, align 8
  br label %58

49:                                               ; preds = %36
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** %6, align 8
  %51 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i32 1
  store %struct.TYPE_2__* %51, %struct.TYPE_2__** %6, align 8
  br label %52

52:                                               ; preds = %49
  %53 = load i64, i64* %2, align 8
  %54 = add nsw i64 %53, 1
  store i64 %54, i64* %2, align 8
  br label %32

55:                                               ; preds = %32
  %56 = load i32*, i32** %5, align 8
  %57 = call i32 @free(i32* %56)
  store i64 0, i64* %1, align 8
  br label %58

58:                                               ; preds = %55, %42
  %59 = load i64, i64* %1, align 8
  ret i64 %59
}

declare dso_local i64 @ZwQuerySystemInformation(i32, i32*, i64, i64*) #1

declare dso_local i32* @malloc(i64) #1

declare dso_local i32 @ErrorQuit(i8*) #1

declare dso_local i32* @strstr(i32, i8*) #1

declare dso_local i32 @free(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
