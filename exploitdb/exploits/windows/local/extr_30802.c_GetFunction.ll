; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_30802.c_GetFunction.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_30802.c_GetFunction.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"ntdll.dll\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"LoadLibrary failed.\0A\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"ZwVdmControl\00", align 1
@ZwVdmControl = common dso_local global i32* null, align 8
@.str.3 = private unnamed_addr constant [24 x i8] c"GetProcAddress failed.\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"ZwQueryInformationProcess\00", align 1
@ZwQueryInformationProcess = common dso_local global i32* null, align 8
@.str.5 = private unnamed_addr constant [25 x i8] c"ZwQuerySystemInformation\00", align 1
@ZwQuerySystemInformation = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [27 x i8] c"GetProcessAddress failed.\0A\00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"ZwAllocateVirtualMemory\00", align 1
@ZwAllocateVirtualMemory = common dso_local global i32* null, align 8
@.str.8 = private unnamed_addr constant [17 x i8] c"RtlImageNtHeader\00", align 1
@RtlImageNtHeader = common dso_local global i32* null, align 8
@.str.9 = private unnamed_addr constant [29 x i8] c"RtlImageDirectoryEntryToData\00", align 1
@RtlImageDirectoryEntryToData = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @GetFunction() #0 {
  %1 = alloca i32*, align 8
  %2 = call i32* @LoadLibrary(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  store i32* %2, i32** %1, align 8
  %3 = load i32*, i32** %1, align 8
  %4 = icmp eq i32* %3, null
  br i1 %4, label %5, label %7

5:                                                ; preds = %0
  %6 = call i32 @ErrorQuit(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  br label %7

7:                                                ; preds = %5, %0
  %8 = load i32*, i32** %1, align 8
  %9 = call i64 @GetProcAddress(i32* %8, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %10 = inttoptr i64 %9 to i32*
  store i32* %10, i32** @ZwVdmControl, align 8
  %11 = load i32*, i32** @ZwVdmControl, align 8
  %12 = icmp eq i32* %11, null
  br i1 %12, label %13, label %15

13:                                               ; preds = %7
  %14 = call i32 @ErrorQuit(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %15

15:                                               ; preds = %13, %7
  %16 = load i32*, i32** %1, align 8
  %17 = call i64 @GetProcAddress(i32* %16, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  %18 = inttoptr i64 %17 to i32*
  store i32* %18, i32** @ZwQueryInformationProcess, align 8
  %19 = load i32*, i32** @ZwQueryInformationProcess, align 8
  %20 = icmp eq i32* %19, null
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = call i32 @ErrorQuit(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %23

23:                                               ; preds = %21, %15
  %24 = load i32*, i32** %1, align 8
  %25 = call i64 @GetProcAddress(i32* %24, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  %26 = inttoptr i64 %25 to i32*
  store i32* %26, i32** @ZwQuerySystemInformation, align 8
  %27 = load i32*, i32** @ZwQuerySystemInformation, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %29, label %31

29:                                               ; preds = %23
  %30 = call i32 @ErrorQuit(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6, i64 0, i64 0))
  br label %31

31:                                               ; preds = %29, %23
  %32 = load i32*, i32** %1, align 8
  %33 = call i64 @GetProcAddress(i32* %32, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0))
  %34 = inttoptr i64 %33 to i32*
  store i32* %34, i32** @ZwAllocateVirtualMemory, align 8
  %35 = load i32*, i32** @ZwAllocateVirtualMemory, align 8
  %36 = icmp eq i32* %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %31
  %38 = call i32 @ErrorQuit(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %39

39:                                               ; preds = %37, %31
  %40 = load i32*, i32** %1, align 8
  %41 = call i64 @GetProcAddress(i32* %40, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  %42 = inttoptr i64 %41 to i32*
  store i32* %42, i32** @RtlImageNtHeader, align 8
  %43 = load i32*, i32** @RtlImageNtHeader, align 8
  %44 = icmp eq i32* %43, null
  br i1 %44, label %45, label %47

45:                                               ; preds = %39
  %46 = call i32 @ErrorQuit(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %47

47:                                               ; preds = %45, %39
  %48 = load i32*, i32** %1, align 8
  %49 = call i64 @GetProcAddress(i32* %48, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0))
  %50 = inttoptr i64 %49 to i32*
  store i32* %50, i32** @RtlImageDirectoryEntryToData, align 8
  %51 = load i32*, i32** @RtlImageDirectoryEntryToData, align 8
  %52 = icmp eq i32* %51, null
  br i1 %52, label %53, label %55

53:                                               ; preds = %47
  %54 = call i32 @ErrorQuit(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %55

55:                                               ; preds = %53, %47
  %56 = load i32*, i32** %1, align 8
  %57 = call i32 @FreeLibrary(i32* %56)
  ret void
}

declare dso_local i32* @LoadLibrary(i8*) #1

declare dso_local i32 @ErrorQuit(i8*) #1

declare dso_local i64 @GetProcAddress(i32*, i8*) #1

declare dso_local i32 @FreeLibrary(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
