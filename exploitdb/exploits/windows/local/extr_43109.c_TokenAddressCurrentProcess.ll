; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43109.c_TokenAddressCurrentProcess.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43109.c_TokenAddressCurrentProcess.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i64, %struct.TYPE_5__* }
%struct.TYPE_5__ = type { i32, i32, i32 }

@TOKEN_QUERY = common dso_local global i32 0, align 4
@FALSE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"\0A[-] OpenProcessToken() failed (%d)\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"ntdll.dll\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"NtQuerySystemInformation\00", align 1
@.str.3 = private unnamed_addr constant [49 x i8] c"[-] Unable to resolve NtQuerySystemInformation\0A\0A\00", align 1
@SystemHandleInformation = common dso_local global i32 0, align 4
@STATUS_INFO_LENGTH_MISMATCH = common dso_local global i64 0, align 8
@.str.4 = private unnamed_addr constant [53 x i8] c"\0A[i] Current process id %d and token handle value %u\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @TokenAddressCurrentProcess(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64 (i32, %struct.TYPE_6__*, i32, i32*)*, align 8
  %7 = alloca %struct.TYPE_6__*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 0, i32* %10, align 4
  store i32 4096, i32* %11, align 4
  %15 = load i32, i32* %4, align 4
  %16 = load i32, i32* @TOKEN_QUERY, align 4
  %17 = call i32 @OpenProcessToken(i32 %15, i32 %16, i32* %14)
  store i32 %17, i32* %13, align 4
  %18 = load i32, i32* @FALSE, align 4
  %19 = icmp eq i32 %17, %18
  br i1 %19, label %20, label %23

20:                                               ; preds = %2
  %21 = call i32 (...) @GetLastError()
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i32 %21)
  store i32 -1, i32* %3, align 4
  br label %94

23:                                               ; preds = %2
  %24 = call i32 @GetModuleHandle(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %25 = call i64 @GetProcAddress(i32 %24, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %26 = inttoptr i64 %25 to i64 (i32, %struct.TYPE_6__*, i32, i32*)*
  store i64 (i32, %struct.TYPE_6__*, i32, i32*)* %26, i64 (i32, %struct.TYPE_6__*, i32, i32*)** %6, align 8
  %27 = load i64 (i32, %struct.TYPE_6__*, i32, i32*)*, i64 (i32, %struct.TYPE_6__*, i32, i32*)** %6, align 8
  %28 = icmp ne i64 (i32, %struct.TYPE_6__*, i32, i32*)* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %23
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %94

31:                                               ; preds = %23
  br label %32

32:                                               ; preds = %39, %31
  %33 = load i32, i32* %11, align 4
  %34 = add nsw i32 %33, 4096
  store i32 %34, i32* %11, align 4
  %35 = call i32 (...) @GetProcessHeap()
  %36 = load i32, i32* %11, align 4
  %37 = call i64 @HeapAlloc(i32 %35, i32 0, i32 %36)
  %38 = inttoptr i64 %37 to %struct.TYPE_6__*
  store %struct.TYPE_6__* %38, %struct.TYPE_6__** %7, align 8
  br label %39

39:                                               ; preds = %32
  %40 = load i64 (i32, %struct.TYPE_6__*, i32, i32*)*, i64 (i32, %struct.TYPE_6__*, i32, i32*)** %6, align 8
  %41 = load i32, i32* @SystemHandleInformation, align 4
  %42 = load %struct.TYPE_6__*, %struct.TYPE_6__** %7, align 8
  %43 = load i32, i32* %11, align 4
  %44 = call i64 %40(i32 %41, %struct.TYPE_6__* %42, i32 %43, i32* %12)
  %45 = load i64, i64* @STATUS_INFO_LENGTH_MISMATCH, align 8
  %46 = icmp eq i64 %44, %45
  br i1 %46, label %32, label %47

47:                                               ; preds = %39
  %48 = load i32, i32* %5, align 4
  %49 = load i32, i32* %14, align 4
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0), i32 %48, i32 %49)
  store i64 0, i64* %8, align 8
  br label %51

51:                                               ; preds = %86, %47
  %52 = load i64, i64* %8, align 8
  %53 = load %struct.TYPE_6__*, %struct.TYPE_6__** %7, align 8
  %54 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = icmp ult i64 %52, %55
  br i1 %56, label %57, label %89

57:                                               ; preds = %51
  %58 = load %struct.TYPE_6__*, %struct.TYPE_6__** %7, align 8
  %59 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %58, i32 0, i32 1
  %60 = load %struct.TYPE_5__*, %struct.TYPE_5__** %59, align 8
  %61 = load i64, i64* %8, align 8
  %62 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %60, i64 %61
  %63 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %62, i32 0, i32 0
  %64 = load i32, i32* %63, align 4
  %65 = load i32, i32* %5, align 4
  %66 = icmp eq i32 %64, %65
  br i1 %66, label %67, label %85

67:                                               ; preds = %57
  %68 = load %struct.TYPE_6__*, %struct.TYPE_6__** %7, align 8
  %69 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %68, i32 0, i32 1
  %70 = load %struct.TYPE_5__*, %struct.TYPE_5__** %69, align 8
  %71 = load i64, i64* %8, align 8
  %72 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %70, i64 %71
  %73 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %72, i32 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* %14, align 4
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %77, label %85

77:                                               ; preds = %67
  %78 = load %struct.TYPE_6__*, %struct.TYPE_6__** %7, align 8
  %79 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %78, i32 0, i32 1
  %80 = load %struct.TYPE_5__*, %struct.TYPE_5__** %79, align 8
  %81 = load i64, i64* %8, align 8
  %82 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %80, i64 %81
  %83 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %82, i32 0, i32 2
  %84 = load i32, i32* %83, align 4
  store i32 %84, i32* %10, align 4
  br label %85

85:                                               ; preds = %77, %67, %57
  br label %86

86:                                               ; preds = %85
  %87 = load i64, i64* %8, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %8, align 8
  br label %51

89:                                               ; preds = %51
  %90 = call i32 (...) @GetProcessHeap()
  %91 = load %struct.TYPE_6__*, %struct.TYPE_6__** %7, align 8
  %92 = call i32 @HeapFree(i32 %90, i32 0, %struct.TYPE_6__* %91)
  %93 = load i32, i32* %10, align 4
  store i32 %93, i32* %3, align 4
  br label %94

94:                                               ; preds = %89, %29, %20
  %95 = load i32, i32* %3, align 4
  ret i32 %95
}

declare dso_local i32 @OpenProcessToken(i32, i32, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @GetLastError(...) #1

declare dso_local i64 @GetProcAddress(i32, i8*) #1

declare dso_local i32 @GetModuleHandle(i8*) #1

declare dso_local i64 @HeapAlloc(i32, i32, i32) #1

declare dso_local i32 @GetProcessHeap(...) #1

declare dso_local i32 @HeapFree(i32, i32, %struct.TYPE_6__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
