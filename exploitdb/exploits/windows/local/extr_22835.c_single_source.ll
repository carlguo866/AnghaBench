; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_22835.c_single_source.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_22835.c_single_source.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"rt\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"Unable to open file!\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"File to open: %s\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"Please wait...\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"strcpy\00", align 1
@.str.5 = private unnamed_addr constant [73 x i8] c"Line %d, strcpy() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.6 = private unnamed_addr constant [62 x i8] c"   Syntax: char * strcpy ( char * dest, const char * src );\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"scanf\00", align 1
@.str.8 = private unnamed_addr constant [72 x i8] c"Line %d, scanf() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.9 = private unnamed_addr constant [53 x i8] c"   Syntax: int scanf ( const char * format, ... );\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"gets\00", align 1
@.str.11 = private unnamed_addr constant [72 x i8] c"Line %d, gets() function was found!, potential buffer overflow attack!\0A\00", align 1
@.str.12 = private unnamed_addr constant [40 x i8] c"   Syntax: char * gets( char * str );\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"fscanf\00", align 1
@.str.14 = private unnamed_addr constant [73 x i8] c"Line %d, fscanf() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.15 = private unnamed_addr constant [69 x i8] c"   Syntax: int fscanf ( FILE * stream, const char * format, ... );\0A\0A\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"fgets\00", align 1
@.str.17 = private unnamed_addr constant [71 x i8] c"Line %d fgets() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.18 = private unnamed_addr constant [64 x i8] c"   Syntax: char * fgets ( char * str, int n, FILE * stream );\0A\0A\00", align 1
@.str.19 = private unnamed_addr constant [7 x i8] c"setenv\00", align 1
@.str.20 = private unnamed_addr constant [72 x i8] c"Line %d setenv() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.21 = private unnamed_addr constant [82 x i8] c"   Syntax: int setenv ( const char * name, const char * value, int overwrite );\0A\0A\00", align 1
@.str.22 = private unnamed_addr constant [7 x i8] c"getenv\00", align 1
@.str.23 = private unnamed_addr constant [72 x i8] c"Line %d getenv() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.24 = private unnamed_addr constant [49 x i8] c"   Syntax: char * getenv( const char * name );\0A\0A\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"sscanf\00", align 1
@.str.26 = private unnamed_addr constant [72 x i8] c"Line %d sscanf() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.27 = private unnamed_addr constant [72 x i8] c"   Syntax: int sscanf ( const char * str, const char * format, ... );\0A\0A\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"strcat\00", align 1
@.str.29 = private unnamed_addr constant [72 x i8] c"Line %d strcat() function was found, potential buffer overflow attack!\0A\00", align 1
@.str.30 = private unnamed_addr constant [64 x i8] c"    Syntax: char *  strcat ( char * dest, const char * src );\0A\0A\00", align 1
@.str.31 = private unnamed_addr constant [8 x i8] c"fprintf\00", align 1
@.str.32 = private unnamed_addr constant [70 x i8] c"Line %d fprintf() function was found, potential formatstring attack!\0A\00", align 1
@.str.33 = private unnamed_addr constant [70 x i8] c"   Syntax: int fprintf ( FILE * stream, const char * format, ... );\0A\0A\00", align 1
@.str.34 = private unnamed_addr constant [8 x i8] c"sprintf\00", align 1
@.str.35 = private unnamed_addr constant [70 x i8] c"Line %d sprintf() function was found, potential formatstring attack!\0A\00", align 1
@.str.36 = private unnamed_addr constant [67 x i8] c"   Syntax: int sprintf ( char * str, const char * format, ... );\0A\0A\00", align 1
@.str.37 = private unnamed_addr constant [9 x i8] c"snprintf\00", align 1
@.str.38 = private unnamed_addr constant [71 x i8] c"Line %d snprintf() function was found, potential formatstring attack!\0A\00", align 1
@.str.39 = private unnamed_addr constant [77 x i8] c"   Syntax: int snprintf ( char *str, size_t n, const char * format, ... );\0A\0A\00", align 1
@.str.40 = private unnamed_addr constant [7 x i8] c"system\00", align 1
@.str.41 = private unnamed_addr constant [69 x i8] c"Line %d system() function was found, potential formatstring attack!\0A\00", align 1
@.str.42 = private unnamed_addr constant [49 x i8] c"   Syntax: int system ( const char * string );\0A\0A\00", align 1
@.str.43 = private unnamed_addr constant [7 x i8] c"syslog\00", align 1
@.str.44 = private unnamed_addr constant [69 x i8] c"Line %d syslog() function was found, potential formatstring attack!\0A\00", align 1
@.str.45 = private unnamed_addr constant [68 x i8] c"   Syntax: void syslog ( int priority, const char * message, ...)\0A\0A\00", align 1
@.str.46 = private unnamed_addr constant [9 x i8] c"vsprintf\00", align 1
@.str.47 = private unnamed_addr constant [71 x i8] c"Line %d vsprintf() function was found, potential formatstring attack!\0A\00", align 1
@.str.48 = private unnamed_addr constant [80 x i8] c"   Syntax: int vsprintf ( const char * buf, const char * format, va_list ap);\0A\0A\00", align 1
@.str.49 = private unnamed_addr constant [10 x i8] c"vsnprintf\00", align 1
@.str.50 = private unnamed_addr constant [72 x i8] c"Line %d vsnprintf() function was found, potential formatstring attack!\0A\00", align 1
@.str.51 = private unnamed_addr constant [85 x i8] c"   Syntax: int vsnprintf ( char * str, size_t n, const char * format, va_list ap);\0A\0A\00", align 1
@.str.52 = private unnamed_addr constant [6 x i8] c"popen\00", align 1
@.str.53 = private unnamed_addr constant [68 x i8] c"Line %d popen() function was found, potential formatstring attack!\0A\00", align 1
@.str.54 = private unnamed_addr constant [70 x i8] c"   Syntax: FILE* popen ( const char * command, const char * mode );\0A\0A\00", align 1
@.str.55 = private unnamed_addr constant [20 x i8] c"Nothing was found!\0A\00", align 1
@.str.56 = private unnamed_addr constant [25 x i8] c"\0AThe scan has finished!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @single_source(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca [256 x i8], align 16
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  store i8* %0, i8** %2, align 8
  store i32 1, i32* %4, align 4
  %6 = load i8*, i8** %2, align 8
  %7 = call i32* @fopen(i8* %6, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32* %7, i32** %5, align 8
  %8 = load i32*, i32** %5, align 8
  %9 = icmp ne i32* %8, null
  br i1 %9, label %12, label %10

10:                                               ; preds = %1
  %11 = call i32 @perror(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  br label %182

12:                                               ; preds = %1
  %13 = load i8*, i8** %2, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %13)
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  br label %16

16:                                               ; preds = %173, %12
  %17 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %18 = load i32*, i32** %5, align 8
  %19 = call i32* @fgets(i8* %17, i32 1044, i32* %18)
  %20 = icmp ne i32* %19, null
  br i1 %20, label %21, label %176

21:                                               ; preds = %16
  %22 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %23 = call i32* @strstr(i8* %22, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %24 = icmp ne i32* %23, null
  br i1 %24, label %25, label %29

25:                                               ; preds = %21
  %26 = load i32, i32* %4, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.5, i64 0, i64 0), i32 %26)
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.6, i64 0, i64 0))
  br label %173

29:                                               ; preds = %21
  %30 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %31 = call i32* @strstr(i8* %30, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0))
  %32 = icmp ne i32* %31, null
  br i1 %32, label %33, label %37

33:                                               ; preds = %29
  %34 = load i32, i32* %4, align 4
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.8, i64 0, i64 0), i32 %34)
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.9, i64 0, i64 0))
  br label %172

37:                                               ; preds = %29
  %38 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %39 = call i32* @strstr(i8* %38, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0))
  %40 = icmp ne i32* %39, null
  br i1 %40, label %41, label %45

41:                                               ; preds = %37
  %42 = load i32, i32* %4, align 4
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.11, i64 0, i64 0), i32 %42)
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0))
  br label %171

45:                                               ; preds = %37
  %46 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %47 = call i32* @strstr(i8* %46, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0))
  %48 = icmp ne i32* %47, null
  br i1 %48, label %49, label %53

49:                                               ; preds = %45
  %50 = load i32, i32* %4, align 4
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.14, i64 0, i64 0), i32 %50)
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.15, i64 0, i64 0))
  br label %170

53:                                               ; preds = %45
  %54 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %55 = call i32* @strstr(i8* %54, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0))
  %56 = icmp ne i32* %55, null
  br i1 %56, label %57, label %61

57:                                               ; preds = %53
  %58 = load i32, i32* %4, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.17, i64 0, i64 0), i32 %58)
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.18, i64 0, i64 0))
  br label %169

61:                                               ; preds = %53
  %62 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %63 = call i32* @strstr(i8* %62, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.19, i64 0, i64 0))
  %64 = icmp ne i32* %63, null
  br i1 %64, label %65, label %69

65:                                               ; preds = %61
  %66 = load i32, i32* %4, align 4
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.20, i64 0, i64 0), i32 %66)
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.21, i64 0, i64 0))
  br label %168

69:                                               ; preds = %61
  %70 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %71 = call i32* @strstr(i8* %70, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.22, i64 0, i64 0))
  %72 = icmp ne i32* %71, null
  br i1 %72, label %73, label %77

73:                                               ; preds = %69
  %74 = load i32, i32* %4, align 4
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.23, i64 0, i64 0), i32 %74)
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.24, i64 0, i64 0))
  br label %167

77:                                               ; preds = %69
  %78 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %79 = call i32* @strstr(i8* %78, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i64 0, i64 0))
  %80 = icmp ne i32* %79, null
  br i1 %80, label %81, label %85

81:                                               ; preds = %77
  %82 = load i32, i32* %4, align 4
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.26, i64 0, i64 0), i32 %82)
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.27, i64 0, i64 0))
  br label %166

85:                                               ; preds = %77
  %86 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %87 = call i32* @strstr(i8* %86, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i64 0, i64 0))
  %88 = icmp ne i32* %87, null
  br i1 %88, label %89, label %93

89:                                               ; preds = %85
  %90 = load i32, i32* %4, align 4
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.29, i64 0, i64 0), i32 %90)
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.30, i64 0, i64 0))
  br label %165

93:                                               ; preds = %85
  %94 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %95 = call i32* @strstr(i8* %94, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.31, i64 0, i64 0))
  %96 = icmp ne i32* %95, null
  br i1 %96, label %97, label %101

97:                                               ; preds = %93
  %98 = load i32, i32* %4, align 4
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.32, i64 0, i64 0), i32 %98)
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.33, i64 0, i64 0))
  br label %164

101:                                              ; preds = %93
  %102 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %103 = call i32* @strstr(i8* %102, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.34, i64 0, i64 0))
  %104 = icmp ne i32* %103, null
  br i1 %104, label %105, label %109

105:                                              ; preds = %101
  %106 = load i32, i32* %4, align 4
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.35, i64 0, i64 0), i32 %106)
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.36, i64 0, i64 0))
  br label %163

109:                                              ; preds = %101
  %110 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %111 = call i32* @strstr(i8* %110, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.37, i64 0, i64 0))
  %112 = icmp ne i32* %111, null
  br i1 %112, label %113, label %117

113:                                              ; preds = %109
  %114 = load i32, i32* %4, align 4
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.38, i64 0, i64 0), i32 %114)
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([77 x i8], [77 x i8]* @.str.39, i64 0, i64 0))
  br label %162

117:                                              ; preds = %109
  %118 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %119 = call i32* @strstr(i8* %118, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.40, i64 0, i64 0))
  %120 = icmp ne i32* %119, null
  br i1 %120, label %121, label %125

121:                                              ; preds = %117
  %122 = load i32, i32* %4, align 4
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.41, i64 0, i64 0), i32 %122)
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.42, i64 0, i64 0))
  br label %161

125:                                              ; preds = %117
  %126 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %127 = call i32* @strstr(i8* %126, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.43, i64 0, i64 0))
  %128 = icmp ne i32* %127, null
  br i1 %128, label %129, label %133

129:                                              ; preds = %125
  %130 = load i32, i32* %4, align 4
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.44, i64 0, i64 0), i32 %130)
  %132 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.45, i64 0, i64 0))
  br label %160

133:                                              ; preds = %125
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %135 = call i32* @strstr(i8* %134, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.46, i64 0, i64 0))
  %136 = icmp ne i32* %135, null
  br i1 %136, label %137, label %141

137:                                              ; preds = %133
  %138 = load i32, i32* %4, align 4
  %139 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.47, i64 0, i64 0), i32 %138)
  %140 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([80 x i8], [80 x i8]* @.str.48, i64 0, i64 0))
  br label %159

141:                                              ; preds = %133
  %142 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %143 = call i32* @strstr(i8* %142, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.49, i64 0, i64 0))
  %144 = icmp ne i32* %143, null
  br i1 %144, label %145, label %149

145:                                              ; preds = %141
  %146 = load i32, i32* %4, align 4
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.50, i64 0, i64 0), i32 %146)
  %148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([85 x i8], [85 x i8]* @.str.51, i64 0, i64 0))
  br label %158

149:                                              ; preds = %141
  %150 = getelementptr inbounds [256 x i8], [256 x i8]* %3, i64 0, i64 0
  %151 = call i32* @strstr(i8* %150, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.52, i64 0, i64 0))
  %152 = icmp ne i32* %151, null
  br i1 %152, label %153, label %157

153:                                              ; preds = %149
  %154 = load i32, i32* %4, align 4
  %155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.53, i64 0, i64 0), i32 %154)
  %156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.54, i64 0, i64 0))
  br label %157

157:                                              ; preds = %153, %149
  br label %158

158:                                              ; preds = %157, %145
  br label %159

159:                                              ; preds = %158, %137
  br label %160

160:                                              ; preds = %159, %129
  br label %161

161:                                              ; preds = %160, %121
  br label %162

162:                                              ; preds = %161, %113
  br label %163

163:                                              ; preds = %162, %105
  br label %164

164:                                              ; preds = %163, %97
  br label %165

165:                                              ; preds = %164, %89
  br label %166

166:                                              ; preds = %165, %81
  br label %167

167:                                              ; preds = %166, %73
  br label %168

168:                                              ; preds = %167, %65
  br label %169

169:                                              ; preds = %168, %57
  br label %170

170:                                              ; preds = %169, %49
  br label %171

171:                                              ; preds = %170, %41
  br label %172

172:                                              ; preds = %171, %33
  br label %173

173:                                              ; preds = %172, %25
  %174 = load i32, i32* %4, align 4
  %175 = add nsw i32 %174, 1
  store i32 %175, i32* %4, align 4
  br label %16

176:                                              ; preds = %16
  %177 = load i32, i32* %4, align 4
  %178 = icmp eq i32 %177, 1
  br i1 %178, label %179, label %181

179:                                              ; preds = %176
  %180 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.55, i64 0, i64 0))
  br label %181

181:                                              ; preds = %179, %176
  br label %182

182:                                              ; preds = %181, %10
  %183 = load i32*, i32** %5, align 8
  %184 = call i32 @fclose(i32* %183)
  %185 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.56, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32* @fgets(i8*, i32, i32*) #1

declare dso_local i32* @strstr(i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
