; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_38533.c_FindTokenAddressHandles.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_38533.c_FindTokenAddressHandles.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i64, %struct.TYPE_7__* }
%struct.TYPE_7__ = type { i64, i64, i8* }

@.str = private unnamed_addr constant [10 x i8] c"ntdll.dll\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"NtQuerySystemInformation\00", align 1
@SystemHandleInformation = common dso_local global i32 0, align 4
@STATUS_INFO_LENGTH_MISMATCH = common dso_local global i64 0, align 8
@HANDLE_TYPE_TOKEN = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [52 x i8] c" ObjectTypeNumber %d , ProcessId %d , Object  %p \0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @FindTokenAddressHandles(i64 %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i64 (i32, %struct.TYPE_6__*, i32, i32*)*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.TYPE_6__*, align 8
  %9 = alloca i64, align 8
  %10 = alloca %struct.TYPE_7__*, align 8
  store i64 %0, i64* %3, align 8
  %11 = call i32 @_T(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %12 = call i32* @LoadLibrary(i32 %11)
  store i32* %12, i32** %4, align 8
  %13 = load i32*, i32** %4, align 8
  %14 = icmp ne i32* %13, null
  %15 = zext i1 %14 to i32
  %16 = call i32 @assert(i32 %15)
  %17 = load i32*, i32** %4, align 8
  %18 = call i32 @GetProcAddress(i32* %17, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %19 = sext i32 %18 to i64
  %20 = inttoptr i64 %19 to i64 (i32, %struct.TYPE_6__*, i32, i32*)*
  store i64 (i32, %struct.TYPE_6__*, i32, i32*)* %20, i64 (i32, %struct.TYPE_6__*, i32, i32*)** %5, align 8
  %21 = load i64 (i32, %struct.TYPE_6__*, i32, i32*)*, i64 (i32, %struct.TYPE_6__*, i32, i32*)** %5, align 8
  %22 = icmp ne i64 (i32, %struct.TYPE_6__*, i32, i32*)* %21, null
  %23 = zext i1 %22 to i32
  %24 = call i32 @assert(i32 %23)
  store i32 4096, i32* %6, align 4
  %25 = call i32 (...) @GetProcessHeap()
  %26 = load i32, i32* %6, align 4
  %27 = call i64 @HeapAlloc(i32 %25, i32 0, i32 %26)
  %28 = inttoptr i64 %27 to %struct.TYPE_6__*
  store %struct.TYPE_6__* %28, %struct.TYPE_6__** %8, align 8
  br label %29

29:                                               ; preds = %37, %1
  %30 = load i64 (i32, %struct.TYPE_6__*, i32, i32*)*, i64 (i32, %struct.TYPE_6__*, i32, i32*)** %5, align 8
  %31 = load i32, i32* @SystemHandleInformation, align 4
  %32 = load %struct.TYPE_6__*, %struct.TYPE_6__** %8, align 8
  %33 = load i32, i32* %6, align 4
  %34 = call i64 %30(i32 %31, %struct.TYPE_6__* %32, i32 %33, i32* %7)
  %35 = load i64, i64* @STATUS_INFO_LENGTH_MISMATCH, align 8
  %36 = icmp eq i64 %34, %35
  br i1 %36, label %37, label %47

37:                                               ; preds = %29
  %38 = call i32 (...) @GetProcessHeap()
  %39 = load %struct.TYPE_6__*, %struct.TYPE_6__** %8, align 8
  %40 = call i32 @HeapFree(i32 %38, i32 0, %struct.TYPE_6__* %39)
  %41 = load i32, i32* %6, align 4
  %42 = add nsw i32 %41, 4096
  store i32 %42, i32* %6, align 4
  %43 = call i32 (...) @GetProcessHeap()
  %44 = load i32, i32* %6, align 4
  %45 = call i64 @HeapAlloc(i32 %43, i32 0, i32 %44)
  %46 = inttoptr i64 %45 to %struct.TYPE_6__*
  store %struct.TYPE_6__* %46, %struct.TYPE_6__** %8, align 8
  br label %29

47:                                               ; preds = %29
  store i64 0, i64* %9, align 8
  br label %48

48:                                               ; preds = %86, %47
  %49 = load i64, i64* %9, align 8
  %50 = load %struct.TYPE_6__*, %struct.TYPE_6__** %8, align 8
  %51 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %50, i32 0, i32 0
  %52 = load i64, i64* %51, align 8
  %53 = icmp ult i64 %49, %52
  br i1 %53, label %54, label %89

54:                                               ; preds = %48
  %55 = load %struct.TYPE_6__*, %struct.TYPE_6__** %8, align 8
  %56 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %55, i32 0, i32 1
  %57 = load %struct.TYPE_7__*, %struct.TYPE_7__** %56, align 8
  %58 = load i64, i64* %9, align 8
  %59 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %57, i64 %58
  store %struct.TYPE_7__* %59, %struct.TYPE_7__** %10, align 8
  %60 = load %struct.TYPE_7__*, %struct.TYPE_7__** %10, align 8
  %61 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %60, i32 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = load i64, i64* %3, align 8
  %64 = icmp eq i64 %62, %63
  br i1 %64, label %65, label %85

65:                                               ; preds = %54
  %66 = load %struct.TYPE_7__*, %struct.TYPE_7__** %10, align 8
  %67 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %66, i32 0, i32 1
  %68 = load i64, i64* %67, align 8
  %69 = load i64, i64* @HANDLE_TYPE_TOKEN, align 8
  %70 = icmp eq i64 %68, %69
  br i1 %70, label %71, label %85

71:                                               ; preds = %65
  %72 = load %struct.TYPE_7__*, %struct.TYPE_7__** %10, align 8
  %73 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %72, i32 0, i32 1
  %74 = load i64, i64* %73, align 8
  %75 = load %struct.TYPE_7__*, %struct.TYPE_7__** %10, align 8
  %76 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %75, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = load %struct.TYPE_7__*, %struct.TYPE_7__** %10, align 8
  %79 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %78, i32 0, i32 2
  %80 = load i8*, i8** %79, align 8
  %81 = call i32 @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.2, i64 0, i64 0), i64 %74, i64 %77, i8* %80)
  %82 = load %struct.TYPE_7__*, %struct.TYPE_7__** %10, align 8
  %83 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %82, i32 0, i32 2
  %84 = load i8*, i8** %83, align 8
  store i8* %84, i8** %2, align 8
  br label %93

85:                                               ; preds = %65, %54
  br label %86

86:                                               ; preds = %85
  %87 = load i64, i64* %9, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %9, align 8
  br label %48

89:                                               ; preds = %48
  %90 = call i32 (...) @GetProcessHeap()
  %91 = load %struct.TYPE_6__*, %struct.TYPE_6__** %8, align 8
  %92 = call i32 @HeapFree(i32 %90, i32 0, %struct.TYPE_6__* %91)
  store i8* null, i8** %2, align 8
  br label %93

93:                                               ; preds = %89, %71
  %94 = load i8*, i8** %2, align 8
  ret i8* %94
}

declare dso_local i32* @LoadLibrary(i32) #1

declare dso_local i32 @_T(i8*) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @GetProcAddress(i32*, i8*) #1

declare dso_local i64 @HeapAlloc(i32, i32, i32) #1

declare dso_local i32 @GetProcessHeap(...) #1

declare dso_local i32 @HeapFree(i32, i32, %struct.TYPE_6__*) #1

declare dso_local i32 @printf(i8*, i64, i64, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
