; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3688.c_GetWin32kBase.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3688.c_GetWin32kBase.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32 }

@SystemModuleInformation = common dso_local global i32 0, align 4
@STATUS_INFO_LENGTH_MISMATCH = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [50 x i8] c"Error with NtQuerySystemInformation : 0x%x : %d \0A\00", align 1
@HEAP_ZERO_MEMORY = common dso_local global i32 0, align 4
@STATUS_SUCCESS = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [11 x i8] c"win32k.sys\00", align 1
@HEAP_NO_SERIALIZE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @GetWin32kBase() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca %struct.TYPE_4__*, align 8
  %7 = load i32, i32* @SystemModuleInformation, align 4
  %8 = load %struct.TYPE_4__*, %struct.TYPE_4__** %6, align 8
  %9 = call i64 @NtQuerySystemInformation(i32 %7, %struct.TYPE_4__* %8, i64 0, i64* %5)
  store i64 %9, i64* %4, align 8
  %10 = load i64, i64* %4, align 8
  %11 = load i64, i64* @STATUS_INFO_LENGTH_MISMATCH, align 8
  %12 = icmp ne i64 %10, %11
  br i1 %12, label %13, label %18

13:                                               ; preds = %0
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* %4, align 8
  %16 = call i32 @RtlNtStatusToDosError(i64 %15)
  %17 = call i32 @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i64 %14, i32 %16)
  br label %18

18:                                               ; preds = %13, %0
  %19 = call i32 (...) @GetProcessHeap()
  %20 = load i32, i32* @HEAP_ZERO_MEMORY, align 4
  %21 = load i64, i64* %5, align 8
  %22 = call i64 @HeapAlloc(i32 %19, i32 %20, i64 %21)
  %23 = inttoptr i64 %22 to %struct.TYPE_4__*
  store %struct.TYPE_4__* %23, %struct.TYPE_4__** %6, align 8
  %24 = load i32, i32* @SystemModuleInformation, align 4
  %25 = load %struct.TYPE_4__*, %struct.TYPE_4__** %6, align 8
  %26 = load i64, i64* %5, align 8
  %27 = call i64 @NtQuerySystemInformation(i32 %24, %struct.TYPE_4__* %25, i64 %26, i64* %5)
  store i64 %27, i64* %4, align 8
  %28 = load i64, i64* %4, align 8
  %29 = load i64, i64* @STATUS_SUCCESS, align 8
  %30 = icmp ne i64 %28, %29
  br i1 %30, label %31, label %36

31:                                               ; preds = %18
  %32 = load i64, i64* %4, align 8
  %33 = load i64, i64* %4, align 8
  %34 = call i32 @RtlNtStatusToDosError(i64 %33)
  %35 = call i32 @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str, i64 0, i64 0), i64 %32, i32 %34)
  br label %36

36:                                               ; preds = %31, %18
  %37 = load %struct.TYPE_4__*, %struct.TYPE_4__** %6, align 8
  %38 = bitcast %struct.TYPE_4__* %37 to i64*
  %39 = load i64, i64* %38, align 8
  store i64 %39, i64* %3, align 8
  %40 = load %struct.TYPE_4__*, %struct.TYPE_4__** %6, align 8
  %41 = ptrtoint %struct.TYPE_4__* %40 to i64
  %42 = add nsw i64 %41, 4
  %43 = inttoptr i64 %42 to %struct.TYPE_4__*
  store %struct.TYPE_4__* %43, %struct.TYPE_4__** %6, align 8
  store i64 0, i64* %2, align 8
  br label %44

44:                                               ; preds = %64, %36
  %45 = load i64, i64* %2, align 8
  %46 = load i64, i64* %3, align 8
  %47 = icmp slt i64 %45, %46
  br i1 %47, label %48, label %67

48:                                               ; preds = %44
  %49 = load %struct.TYPE_4__*, %struct.TYPE_4__** %6, align 8
  %50 = load i64, i64* %2, align 8
  %51 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %49, i64 %50
  %52 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %51, i32 0, i32 1
  %53 = load i32, i32* %52, align 4
  %54 = call i64 @StrStr(i32 %53, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %63

56:                                               ; preds = %48
  %57 = load %struct.TYPE_4__*, %struct.TYPE_4__** %6, align 8
  %58 = load i64, i64* %2, align 8
  %59 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %57, i64 %58
  %60 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 4
  %62 = sext i32 %61 to i64
  store i64 %62, i64* %1, align 8
  br label %72

63:                                               ; preds = %48
  br label %64

64:                                               ; preds = %63
  %65 = load i64, i64* %2, align 8
  %66 = add nsw i64 %65, 1
  store i64 %66, i64* %2, align 8
  br label %44

67:                                               ; preds = %44
  %68 = call i32 (...) @GetProcessHeap()
  %69 = load i32, i32* @HEAP_NO_SERIALIZE, align 4
  %70 = load %struct.TYPE_4__*, %struct.TYPE_4__** %6, align 8
  %71 = call i32 @HeapFree(i32 %68, i32 %69, %struct.TYPE_4__* %70)
  store i64 0, i64* %1, align 8
  br label %72

72:                                               ; preds = %67, %56
  %73 = load i64, i64* %1, align 8
  ret i64 %73
}

declare dso_local i64 @NtQuerySystemInformation(i32, %struct.TYPE_4__*, i64, i64*) #1

declare dso_local i32 @printf(i8*, i64, i32) #1

declare dso_local i32 @RtlNtStatusToDosError(i64) #1

declare dso_local i64 @HeapAlloc(i32, i32, i64) #1

declare dso_local i32 @GetProcessHeap(...) #1

declare dso_local i64 @StrStr(i32, i8*) #1

declare dso_local i32 @HeapFree(i32, i32, %struct.TYPE_4__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
