; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1911.c_CalcJump.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1911.c_CalcJump.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@XPSP2 = common dso_local global i32 0, align 4
@W2KSP4 = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"\0AINFORMATION \0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"-----------------------------------------------------\0A\00", align 1
@.str.2 = private unnamed_addr constant [42 x i8] c"Patched Driver Call pointing to \09 [0x%p]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @CalcJump(i32 %0, i64 %1, i32* %2, i32* %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i64, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store i32 %0, i32* %5, align 4
  store i64 %1, i64* %6, align 8
  store i32* %2, i32** %7, align 8
  store i32* %3, i32** %8, align 8
  %15 = load i64, i64* %6, align 8
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %22

17:                                               ; preds = %4
  %18 = load i32, i32* %5, align 4
  %19 = load i32, i32* @XPSP2, align 4
  %20 = add nsw i32 %18, %19
  %21 = add nsw i32 %20, 14
  store i32 %21, i32* %9, align 4
  store i32 57874, i32* %14, align 4
  br label %27

22:                                               ; preds = %4
  %23 = load i32, i32* %5, align 4
  %24 = load i32, i32* @W2KSP4, align 4
  %25 = add nsw i32 %23, %24
  %26 = add nsw i32 %25, 14
  store i32 %26, i32* %9, align 4
  store i32 43377, i32* %14, align 4
  br label %27

27:                                               ; preds = %22, %17
  store i32 76, i32* %11, align 4
  br label %28

28:                                               ; preds = %54, %27
  %29 = load i32, i32* %11, align 4
  %30 = icmp slt i32 %29, 56796
  br i1 %30, label %31, label %57

31:                                               ; preds = %28
  %32 = load i32, i32* %11, align 4
  %33 = mul nsw i32 %32, 65536
  %34 = load i32, i32* %14, align 4
  %35 = add nsw i32 %33, %34
  %36 = xor i32 %35, -1
  store i32 %36, i32* %12, align 4
  %37 = load i32, i32* %9, align 4
  %38 = load i32, i32* %12, align 4
  %39 = sub nsw i32 %37, %38
  store i32 %39, i32* %13, align 4
  %40 = load i32, i32* %13, align 4
  %41 = icmp sgt i32 %40, 234881024
  br i1 %41, label %42, label %53

42:                                               ; preds = %31
  %43 = load i32, i32* %13, align 4
  %44 = icmp slt i32 %43, 251658240
  br i1 %44, label %45, label %53

45:                                               ; preds = %42
  %46 = load i32, i32* %13, align 4
  %47 = and i32 %46, -4096
  store i32 %47, i32* %10, align 4
  %48 = load i32, i32* %11, align 4
  %49 = sub nsw i32 %48, 4
  %50 = load i32*, i32** %7, align 8
  store i32 %49, i32* %50, align 4
  %51 = load i32, i32* %13, align 4
  %52 = load i32*, i32** %8, align 8
  store i32 %51, i32* %52, align 4
  br label %57

53:                                               ; preds = %42, %31
  br label %54

54:                                               ; preds = %53
  %55 = load i32, i32* %11, align 4
  %56 = add nsw i32 %55, 4
  store i32 %56, i32* %11, align 4
  br label %28

57:                                               ; preds = %45, %28
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0))
  %60 = load i32, i32* %13, align 4
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.2, i64 0, i64 0), i32 %60)
  %62 = load i32, i32* %10, align 4
  ret i32 %62
}

declare dso_local i32 @printf(i8*, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
