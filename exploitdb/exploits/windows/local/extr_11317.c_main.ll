; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11317.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11317.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [34 x i8] c"Initialization BReg error&#65281;\00", align 1
@.str.1 = private unnamed_addr constant [6 x i8] c"error\00", align 1
@MB_ICONSTOP = common dso_local global i32 0, align 4
@TestDeleteKey = common dso_local global i32 0, align 4
@TestDeleteRegPath = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [24 x i8] c"DeleteKey error&#65281;\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"SetRegKey error&#65281;\00", align 1
@.str.4 = private unnamed_addr constant [95 x i8] c"Broke System Security Check&#65292;Gain Escalated Privileges&#65292;Successful exploit&#65281;\00", align 1
@.str.5 = private unnamed_addr constant [11 x i8] c"Successful\00", align 1
@MB_OK = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %6 = call i32 (...) @InitBRegDll()
  %7 = icmp ne i32 %6, 0
  br i1 %7, label %11, label %8

8:                                                ; preds = %2
  %9 = load i32, i32* @MB_ICONSTOP, align 4
  %10 = call i32 @MessageBoxA(i32* null, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 %9)
  store i32 1, i32* %3, align 4
  br label %30

11:                                               ; preds = %2
  %12 = load i32, i32* @TestDeleteKey, align 4
  %13 = load i32, i32* @TestDeleteRegPath, align 4
  %14 = call i32 @BRegDeleteKey(i32 %12, i32 %13)
  %15 = call i64 @FAILED(i32 %14)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %20

17:                                               ; preds = %11
  %18 = load i32, i32* @MB_ICONSTOP, align 4
  %19 = call i32 @MessageBoxA(i32* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 %18)
  store i32 2, i32* %3, align 4
  br label %30

20:                                               ; preds = %11
  %21 = call i32 (...) @TestSetRegKey()
  %22 = call i64 @FAILED(i32 %21)
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %27

24:                                               ; preds = %20
  %25 = load i32, i32* @MB_ICONSTOP, align 4
  %26 = call i32 @MessageBoxA(i32* null, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0), i32 %25)
  store i32 3, i32* %3, align 4
  br label %30

27:                                               ; preds = %20
  %28 = load i32, i32* @MB_OK, align 4
  %29 = call i32 @MessageBoxA(i32* null, i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0), i32 %28)
  store i32 0, i32* %3, align 4
  br label %30

30:                                               ; preds = %27, %24, %17, %8
  %31 = load i32, i32* %3, align 4
  ret i32 %31
}

declare dso_local i32 @InitBRegDll(...) #1

declare dso_local i32 @MessageBoxA(i32*, i8*, i8*, i32) #1

declare dso_local i64 @FAILED(i32) #1

declare dso_local i32 @BRegDeleteKey(i32, i32) #1

declare dso_local i32 @TestSetRegKey(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
