; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4345.c_xpltCheckWindowsVersion.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4345.c_xpltCheckWindowsVersion.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@FALSE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [27 x i8] c"(*)Checking OS Version...\0A\00", align 1
@OS_VERSION_XP = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [29 x i8] c"(+)Detected Windows XP SP2.\0A\00", align 1
@TRUE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [53 x i8] c"(-)This exploit only runs on Windows XP SP2. Sorry.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @xpltCheckWindowsVersion() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = load i32, i32* @FALSE, align 4
  store i32 %4, i32* %2, align 4
  %5 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0))
  %6 = call i64 @GetWindowsVersion(i32* %3)
  store i64 %6, i64* %1, align 8
  %7 = load i64, i64* @OS_VERSION_XP, align 8
  %8 = load i64, i64* %1, align 8
  %9 = icmp eq i64 %7, %8
  br i1 %9, label %10, label %16

10:                                               ; preds = %0
  %11 = load i32, i32* %3, align 4
  %12 = icmp eq i32 %11, 2
  br i1 %12, label %13, label %16

13:                                               ; preds = %10
  %14 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* @TRUE, align 4
  store i32 %15, i32* %2, align 4
  br label %18

16:                                               ; preds = %10, %0
  %17 = call i32 @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0))
  br label %18

18:                                               ; preds = %16, %13
  %19 = load i32, i32* %2, align 4
  ret i32 %19
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @GetWindowsVersion(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
