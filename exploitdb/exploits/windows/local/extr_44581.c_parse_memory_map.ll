; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_44581.c_parse_memory_map.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_44581.c_parse_memory_map.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.memory_region = type { i32, i32 }
%struct.TYPE_14__ = type { i32, %struct.TYPE_13__* }
%struct.TYPE_13__ = type { %struct.TYPE_12__ }
%struct.TYPE_12__ = type { i32, %struct.TYPE_11__* }
%struct.TYPE_11__ = type { i32, %struct.TYPE_10__ }
%struct.TYPE_10__ = type { %struct.TYPE_9__ }
%struct.TYPE_9__ = type { i32, %struct.TYPE_8__ }
%struct.TYPE_8__ = type { i32 }

@.str = private unnamed_addr constant [54 x i32] [i32 72, i32 97, i32 114, i32 100, i32 119, i32 97, i32 114, i32 101, i32 92, i32 82, i32 101, i32 115, i32 111, i32 117, i32 114, i32 99, i32 101, i32 77, i32 97, i32 112, i32 92, i32 83, i32 121, i32 115, i32 116, i32 101, i32 109, i32 32, i32 82, i32 101, i32 115, i32 111, i32 117, i32 114, i32 99, i32 101, i32 115, i32 92, i32 80, i32 104, i32 121, i32 115, i32 105, i32 99, i32 97, i32 108, i32 32, i32 77, i32 101, i32 109, i32 111, i32 114, i32 121, i32 0], align 4
@.str.1 = private unnamed_addr constant [12 x i32] [i32 46, i32 84, i32 114, i32 97, i32 110, i32 115, i32 108, i32 97, i32 116, i32 101, i32 100, i32 0], align 4
@HKEY_LOCAL_MACHINE = common dso_local global i32 0, align 4
@ERROR_SUCCESS = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [27 x i8] c"[*] Could not get reg key\0A\00", align 1
@.str.3 = private unnamed_addr constant [34 x i8] c"[*] Could not query hardware key\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @parse_memory_map(%struct.memory_region* %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca %struct.memory_region*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca %struct.TYPE_14__*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store %struct.memory_region* %0, %struct.memory_region** %3, align 8
  store i32* null, i32** %4, align 8
  store i8* bitcast ([54 x i32]* @.str to i8*), i8** %5, align 8
  store i8* bitcast ([12 x i32]* @.str.1 to i8*), i8** %6, align 8
  store i32* null, i32** %7, align 8
  store i64 0, i64* %8, align 8
  store i64 0, i64* %9, align 8
  store i64 0, i64* %10, align 8
  %14 = load i32, i32* @HKEY_LOCAL_MACHINE, align 4
  %15 = load i8*, i8** %5, align 8
  %16 = call i32 @RegOpenKey(i32 %14, i8* %15, i32** %4)
  %17 = icmp ne i32 %16, 0
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = load i32, i32* @ERROR_SUCCESS, align 4
  %21 = icmp eq i32 %19, %20
  br i1 %21, label %22, label %24

22:                                               ; preds = %1
  %23 = call i32 @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  store i64 0, i64* %2, align 8
  br label %130

24:                                               ; preds = %1
  %25 = load i32*, i32** %4, align 8
  %26 = load i8*, i8** %6, align 8
  %27 = call i32 @RegQueryValueEx(i32* %25, i8* %26, i32 0, i64* %10, i32* null, i64* %8)
  %28 = icmp ne i32 %27, 0
  %29 = xor i1 %28, true
  %30 = zext i1 %29 to i32
  %31 = load i32, i32* @ERROR_SUCCESS, align 4
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %24
  %34 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  store i64 0, i64* %2, align 8
  br label %130

35:                                               ; preds = %24
  %36 = load i64, i64* %8, align 8
  %37 = call i64 @malloc(i64 %36)
  %38 = inttoptr i64 %37 to i32*
  store i32* %38, i32** %7, align 8
  %39 = load i32*, i32** %4, align 8
  %40 = load i8*, i8** %6, align 8
  %41 = load i32*, i32** %7, align 8
  %42 = call i32 @RegQueryValueEx(i32* %39, i8* %40, i32 0, i64* %10, i32* %41, i64* %8)
  %43 = load i32*, i32** %7, align 8
  %44 = bitcast i32* %43 to %struct.TYPE_14__*
  store %struct.TYPE_14__* %44, %struct.TYPE_14__** %11, align 8
  store i32 0, i32* %12, align 4
  br label %45

45:                                               ; preds = %125, %35
  %46 = load i32, i32* %12, align 4
  %47 = load %struct.TYPE_14__*, %struct.TYPE_14__** %11, align 8
  %48 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %47, i32 0, i32 0
  %49 = load i32, i32* %48, align 8
  %50 = icmp slt i32 %46, %49
  br i1 %50, label %51, label %128

51:                                               ; preds = %45
  store i32 0, i32* %13, align 4
  br label %52

52:                                               ; preds = %121, %51
  %53 = load i32, i32* %13, align 4
  %54 = load %struct.TYPE_14__*, %struct.TYPE_14__** %11, align 8
  %55 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %54, i32 0, i32 1
  %56 = load %struct.TYPE_13__*, %struct.TYPE_13__** %55, align 8
  %57 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %56, i64 0
  %58 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %57, i32 0, i32 0
  %59 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %58, i32 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = icmp slt i32 %53, %60
  br i1 %61, label %62, label %124

62:                                               ; preds = %52
  %63 = load %struct.TYPE_14__*, %struct.TYPE_14__** %11, align 8
  %64 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %63, i32 0, i32 1
  %65 = load %struct.TYPE_13__*, %struct.TYPE_13__** %64, align 8
  %66 = load i32, i32* %12, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %65, i64 %67
  %69 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %68, i32 0, i32 0
  %70 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %69, i32 0, i32 1
  %71 = load %struct.TYPE_11__*, %struct.TYPE_11__** %70, align 8
  %72 = load i32, i32* %13, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %71, i64 %73
  %75 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %74, i32 0, i32 0
  %76 = load i32, i32* %75, align 4
  %77 = icmp eq i32 %76, 3
  br i1 %77, label %78, label %120

78:                                               ; preds = %62
  %79 = load %struct.TYPE_14__*, %struct.TYPE_14__** %11, align 8
  %80 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %79, i32 0, i32 1
  %81 = load %struct.TYPE_13__*, %struct.TYPE_13__** %80, align 8
  %82 = load i32, i32* %12, align 4
  %83 = sext i32 %82 to i64
  %84 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %81, i64 %83
  %85 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %84, i32 0, i32 0
  %86 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %85, i32 0, i32 1
  %87 = load %struct.TYPE_11__*, %struct.TYPE_11__** %86, align 8
  %88 = load i32, i32* %13, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %87, i64 %89
  %91 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %90, i32 0, i32 1
  %92 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %91, i32 0, i32 0
  %93 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %92, i32 0, i32 1
  %94 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %93, i32 0, i32 0
  %95 = load i32, i32* %94, align 4
  %96 = load %struct.memory_region*, %struct.memory_region** %3, align 8
  %97 = getelementptr inbounds %struct.memory_region, %struct.memory_region* %96, i32 0, i32 1
  store i32 %95, i32* %97, align 4
  %98 = load %struct.TYPE_14__*, %struct.TYPE_14__** %11, align 8
  %99 = getelementptr inbounds %struct.TYPE_14__, %struct.TYPE_14__* %98, i32 0, i32 1
  %100 = load %struct.TYPE_13__*, %struct.TYPE_13__** %99, align 8
  %101 = load i32, i32* %12, align 4
  %102 = sext i32 %101 to i64
  %103 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %100, i64 %102
  %104 = getelementptr inbounds %struct.TYPE_13__, %struct.TYPE_13__* %103, i32 0, i32 0
  %105 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %104, i32 0, i32 1
  %106 = load %struct.TYPE_11__*, %struct.TYPE_11__** %105, align 8
  %107 = load i32, i32* %13, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %106, i64 %108
  %110 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %109, i32 0, i32 1
  %111 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %110, i32 0, i32 0
  %112 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %111, i32 0, i32 0
  %113 = load i32, i32* %112, align 4
  %114 = load %struct.memory_region*, %struct.memory_region** %3, align 8
  %115 = getelementptr inbounds %struct.memory_region, %struct.memory_region* %114, i32 0, i32 0
  store i32 %113, i32* %115, align 4
  %116 = load %struct.memory_region*, %struct.memory_region** %3, align 8
  %117 = getelementptr inbounds %struct.memory_region, %struct.memory_region* %116, i32 1
  store %struct.memory_region* %117, %struct.memory_region** %3, align 8
  %118 = load i64, i64* %9, align 8
  %119 = add nsw i64 %118, 1
  store i64 %119, i64* %9, align 8
  br label %120

120:                                              ; preds = %78, %62
  br label %121

121:                                              ; preds = %120
  %122 = load i32, i32* %13, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %13, align 4
  br label %52

124:                                              ; preds = %52
  br label %125

125:                                              ; preds = %124
  %126 = load i32, i32* %12, align 4
  %127 = add nsw i32 %126, 1
  store i32 %127, i32* %12, align 4
  br label %45

128:                                              ; preds = %45
  %129 = load i64, i64* %9, align 8
  store i64 %129, i64* %2, align 8
  br label %130

130:                                              ; preds = %128, %33, %22
  %131 = load i64, i64* %2, align 8
  ret i64 %131
}

declare dso_local i32 @RegOpenKey(i32, i8*, i32**) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @RegQueryValueEx(i32*, i8*, i32, i64*, i32*, i64*) #1

declare dso_local i64 @malloc(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
