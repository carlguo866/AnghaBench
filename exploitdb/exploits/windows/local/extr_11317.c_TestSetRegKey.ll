; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11317.c_TestSetRegKey.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11317.c_TestSetRegKey.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@TestSetKey = common dso_local global i32 0, align 4
@TestSetPath = common dso_local global i32 0, align 4
@REG_SZ = common dso_local global i32 0, align 4
@TestSetRegKey.szData = internal global [11 x i8] c"TEST VALUE\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @TestSetRegKey() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load i32, i32* @TestSetKey, align 4
  %6 = load i32, i32* @TestSetPath, align 4
  %7 = call i32 @BRegOpenKey(i32 %5, i32 %6, i32* %2)
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  %9 = call i64 @FAILED(i32 %8)
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %0
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %1, align 4
  br label %22

13:                                               ; preds = %0
  %14 = load i32, i32* @REG_SZ, align 4
  store i32 %14, i32* %4, align 4
  %15 = load i32, i32* %2, align 4
  %16 = load i32, i32* @TestSetPath, align 4
  %17 = load i32, i32* %4, align 4
  %18 = call i32 @BRegSetValueEx(i32 %15, i32 %16, i32* null, i32 %17, i32* bitcast ([11 x i8]* @TestSetRegKey.szData to i32*), i32 11)
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %2, align 4
  %20 = call i32 @BRegCloseKey(i32 %19)
  %21 = load i32, i32* %3, align 4
  store i32 %21, i32* %1, align 4
  br label %22

22:                                               ; preds = %13, %11
  %23 = load i32, i32* %1, align 4
  ret i32 %23
}

declare dso_local i32 @BRegOpenKey(i32, i32, i32*) #1

declare dso_local i64 @FAILED(i32) #1

declare dso_local i32 @BRegSetValueEx(i32, i32, i32*, i32, i32*, i32) #1

declare dso_local i32 @BRegCloseKey(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
