; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11232.c_get_module_version.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_11232.c_get_module_version.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ioctl_ver_req = type { i32, i32, i32*, i32*, i32*, i32*, i32*, %struct.ioctl_ver_req* }
%struct.ioctl_req = type { i32, i32, i32*, i32*, i32*, i32*, i32*, %struct.ioctl_req* }

@TRUE = common dso_local global i32 0, align 4
@FALSE = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"* CreateEventW failed\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@SAFECNTRL_IOCTL = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [26 x i8] c"* DeviceIoControl failed\0A\00", align 1
@.str.2 = private unnamed_addr constant [30 x i8] c"* GetOverlappedResult failed\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32, i32*, i32*, i32*, i32*)* @get_module_version to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @get_module_version(i32 %0, i32* %1, i32* %2, i32* %3, i32* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca %struct.ioctl_ver_req, align 8
  %12 = alloca %struct.ioctl_req, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.ioctl_ver_req, align 8
  %16 = alloca i64, align 8
  store i32 %0, i32* %6, align 4
  store i32* %1, i32** %7, align 8
  store i32* %2, i32** %8, align 8
  store i32* %3, i32** %9, align 8
  store i32* %4, i32** %10, align 8
  %17 = bitcast %struct.ioctl_req* %12 to %struct.ioctl_ver_req*
  %18 = call i32 @memset(%struct.ioctl_ver_req* %17, i32 0, i32 56)
  %19 = getelementptr inbounds %struct.ioctl_req, %struct.ioctl_req* %12, i32 0, i32 0
  store i32 10, i32* %19, align 8
  %20 = bitcast %struct.ioctl_ver_req* %11 to %struct.ioctl_req*
  %21 = getelementptr inbounds %struct.ioctl_req, %struct.ioctl_req* %12, i32 0, i32 7
  store %struct.ioctl_req* %20, %struct.ioctl_req** %21, align 8
  %22 = getelementptr inbounds %struct.ioctl_req, %struct.ioctl_req* %12, i32 0, i32 6
  store i32* %13, i32** %22, align 8
  %23 = call i32 @memset(%struct.ioctl_ver_req* %11, i32 204, i32 56)
  %24 = load i32*, i32** %7, align 8
  %25 = getelementptr inbounds %struct.ioctl_ver_req, %struct.ioctl_ver_req* %11, i32 0, i32 5
  store i32* %24, i32** %25, align 8
  %26 = load i32*, i32** %8, align 8
  %27 = getelementptr inbounds %struct.ioctl_ver_req, %struct.ioctl_ver_req* %11, i32 0, i32 4
  store i32* %26, i32** %27, align 8
  %28 = load i32*, i32** %9, align 8
  %29 = getelementptr inbounds %struct.ioctl_ver_req, %struct.ioctl_ver_req* %11, i32 0, i32 3
  store i32* %28, i32** %29, align 8
  %30 = load i32*, i32** %10, align 8
  %31 = getelementptr inbounds %struct.ioctl_ver_req, %struct.ioctl_ver_req* %11, i32 0, i32 2
  store i32* %30, i32** %31, align 8
  %32 = call i32 @memset(%struct.ioctl_ver_req* %15, i32 0, i32 56)
  %33 = load i32, i32* @TRUE, align 4
  %34 = load i32, i32* @FALSE, align 4
  %35 = call i32 @CreateEventW(i32* null, i32 %33, i32 %34, i32* null)
  %36 = getelementptr inbounds %struct.ioctl_ver_req, %struct.ioctl_ver_req* %15, i32 0, i32 1
  store i32 %35, i32* %36, align 4
  %37 = getelementptr inbounds %struct.ioctl_ver_req, %struct.ioctl_ver_req* %15, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %45, label %40

40:                                               ; preds = %5
  %41 = load i32, i32* @stderr, align 4
  %42 = call i32 @fprintf(i32 %41, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %43 = load i32, i32* @EXIT_FAILURE, align 4
  %44 = call i32 @exit(i32 %43) #3
  unreachable

45:                                               ; preds = %5
  %46 = load i32, i32* %6, align 4
  %47 = load i32, i32* @SAFECNTRL_IOCTL, align 4
  %48 = bitcast %struct.ioctl_req* %12 to %struct.ioctl_ver_req*
  %49 = call i64 @DeviceIoControl(i32 %46, i32 %47, %struct.ioctl_ver_req* %48, i32 56, i32* null, i32 0, i32* %14, %struct.ioctl_ver_req* %15)
  store i64 %49, i64* %16, align 8
  %50 = load i64, i64* %16, align 8
  %51 = icmp ne i64 %50, 0
  br i1 %51, label %57, label %52

52:                                               ; preds = %45
  %53 = load i32, i32* @stderr, align 4
  %54 = call i32 @fprintf(i32 %53, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  %55 = load i32, i32* @EXIT_FAILURE, align 4
  %56 = call i32 @exit(i32 %55) #3
  unreachable

57:                                               ; preds = %45
  %58 = load i32, i32* %6, align 4
  %59 = call i64 @GetOverlappedResult(i32 %58, %struct.ioctl_ver_req* %15, i32* %14, i32 1)
  store i64 %59, i64* %16, align 8
  %60 = load i64, i64* %16, align 8
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %67, label %62

62:                                               ; preds = %57
  %63 = load i32, i32* @stderr, align 4
  %64 = call i32 @fprintf(i32 %63, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.2, i64 0, i64 0))
  %65 = load i32, i32* @EXIT_FAILURE, align 4
  %66 = call i32 @exit(i32 %65) #3
  unreachable

67:                                               ; preds = %57
  %68 = getelementptr inbounds %struct.ioctl_ver_req, %struct.ioctl_ver_req* %15, i32 0, i32 1
  %69 = load i32, i32* %68, align 4
  %70 = call i32 @CloseHandle(i32 %69)
  %71 = load i32, i32* %13, align 4
  ret i32 %71
}

declare dso_local i32 @memset(%struct.ioctl_ver_req*, i32, i32) #1

declare dso_local i32 @CreateEventW(i32*, i32, i32, i32*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @DeviceIoControl(i32, i32, %struct.ioctl_ver_req*, i32, i32*, i32, i32*, %struct.ioctl_ver_req*) #1

declare dso_local i64 @GetOverlappedResult(i32, %struct.ioctl_ver_req*, i32*, i32) #1

declare dso_local i32 @CloseHandle(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
