; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4345.c_psGetImageBaseByBaseName.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_4345.c_psGetImageBaseByBaseName.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_PATH = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @psGetImageBaseByBaseName(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32**, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 0, i32* %5, align 4
  store i32** null, i32*** %6, align 8
  store i32* null, i32** %7, align 8
  %12 = load i32, i32* %3, align 4
  %13 = call i64 @psEnumDeviceDrivers(i32 %12, i32** null, i32 0, i32* %5)
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %78

15:                                               ; preds = %2
  %16 = load i32, i32* %5, align 4
  %17 = icmp sgt i32 %16, 0
  br i1 %17, label %18, label %78

18:                                               ; preds = %15
  %19 = load i32, i32* %5, align 4
  %20 = call i64 @malloc(i32 %19)
  %21 = inttoptr i64 %20 to i32**
  store i32** %21, i32*** %6, align 8
  %22 = load i32**, i32*** %6, align 8
  %23 = icmp ne i32** %22, null
  br i1 %23, label %24, label %77

24:                                               ; preds = %18
  %25 = load i32, i32* %3, align 4
  %26 = load i32**, i32*** %6, align 8
  %27 = load i32, i32* %5, align 4
  %28 = call i64 @psEnumDeviceDrivers(i32 %25, i32** %26, i32 %27, i32* %5)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %74

30:                                               ; preds = %24
  store i32 0, i32* %8, align 4
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = udiv i64 %32, 8
  %34 = trunc i64 %33 to i32
  store i32 %34, i32* %9, align 4
  br label %35

35:                                               ; preds = %69, %30
  %36 = load i32, i32* %8, align 4
  %37 = load i32, i32* %9, align 4
  %38 = icmp slt i32 %36, %37
  br i1 %38, label %39, label %42

39:                                               ; preds = %35
  %40 = load i32*, i32** %7, align 8
  %41 = icmp eq i32* null, %40
  br label %42

42:                                               ; preds = %39, %35
  %43 = phi i1 [ false, %35 ], [ %41, %39 ]
  br i1 %43, label %44, label %73

44:                                               ; preds = %42
  %45 = load i32, i32* @MAX_PATH, align 4
  %46 = zext i32 %45 to i64
  %47 = call i8* @llvm.stacksave()
  store i8* %47, i8** %10, align 8
  %48 = alloca i8, i64 %46, align 16
  store i64 %46, i64* %11, align 8
  %49 = load i32, i32* %3, align 4
  %50 = load i32**, i32*** %6, align 8
  %51 = load i32, i32* %8, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32*, i32** %50, i64 %52
  %54 = load i32*, i32** %53, align 8
  %55 = trunc i64 %46 to i32
  %56 = call i64 @psGetDeviceDriverBaseName(i32 %49, i32* %54, i8* %48, i32 %55)
  %57 = icmp ne i64 %56, 0
  br i1 %57, label %58, label %69

58:                                               ; preds = %44
  %59 = load i32, i32* %4, align 4
  %60 = call i32 @_stricmp(i8* %48, i32 %59)
  %61 = icmp ne i32 %60, 0
  br i1 %61, label %68, label %62

62:                                               ; preds = %58
  %63 = load i32**, i32*** %6, align 8
  %64 = load i32, i32* %8, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32*, i32** %63, i64 %65
  %67 = load i32*, i32** %66, align 8
  store i32* %67, i32** %7, align 8
  br label %68

68:                                               ; preds = %62, %58
  br label %69

69:                                               ; preds = %68, %44
  %70 = load i32, i32* %8, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %8, align 4
  %72 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %72)
  br label %35

73:                                               ; preds = %42
  br label %74

74:                                               ; preds = %73, %24
  %75 = load i32**, i32*** %6, align 8
  %76 = call i32 @free(i32** %75)
  br label %77

77:                                               ; preds = %74, %18
  br label %78

78:                                               ; preds = %77, %15, %2
  %79 = load i32*, i32** %7, align 8
  ret i32* %79
}

declare dso_local i64 @psEnumDeviceDrivers(i32, i32**, i32, i32*) #1

declare dso_local i64 @malloc(i32) #1

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #2

declare dso_local i64 @psGetDeviceDriverBaseName(i32, i32*, i8*, i32) #1

declare dso_local i32 @_stricmp(i8*, i32) #1

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #2

declare dso_local i32 @free(i32**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
