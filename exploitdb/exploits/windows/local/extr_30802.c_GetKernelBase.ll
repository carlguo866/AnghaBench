; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_30802.c_GetKernelBase.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_30802.c_GetKernelBase.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8*, i32 }

@SystemModuleInformation = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"malloc failed.\0A\00", align 1
@.str.1 = private unnamed_addr constant [33 x i8] c"ZwQuerySystemInformation failed\0A\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"ntoskrnl.exe\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"Kernel is %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"ntkrnlpa.exe\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @GetKernelBase(i8* %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32*, align 8
  %9 = alloca %struct.TYPE_2__*, align 8
  %10 = alloca i32*, align 8
  store i8* %0, i8** %3, align 8
  %11 = load i32, i32* @SystemModuleInformation, align 4
  %12 = bitcast i64* %5 to i32*
  %13 = call i64 @ZwQuerySystemInformation(i32 %11, i32* %12, i64 0, i64* %5)
  %14 = load i64, i64* %5, align 8
  %15 = call i32* @malloc(i64 %14)
  store i32* %15, i32** %8, align 8
  %16 = icmp eq i32* %15, null
  br i1 %16, label %17, label %19

17:                                               ; preds = %1
  %18 = call i32 @ErrorQuit(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  br label %19

19:                                               ; preds = %17, %1
  %20 = load i32, i32* @SystemModuleInformation, align 4
  %21 = load i32*, i32** %8, align 8
  %22 = load i64, i64* %5, align 8
  %23 = call i64 @ZwQuerySystemInformation(i32 %20, i32* %21, i64 %22, i64* %5)
  %24 = icmp ne i64 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %19
  %26 = call i32 @ErrorQuit(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  br label %27

27:                                               ; preds = %25, %19
  %28 = load i32*, i32** %8, align 8
  %29 = bitcast i32* %28 to i64*
  %30 = load i64, i64* %29, align 8
  store i64 %30, i64* %6, align 8
  %31 = load i32*, i32** %8, align 8
  %32 = ptrtoint i32* %31 to i64
  %33 = add i64 %32, 8
  %34 = inttoptr i64 %33 to %struct.TYPE_2__*
  store %struct.TYPE_2__* %34, %struct.TYPE_2__** %9, align 8
  store i64 0, i64* %4, align 8
  br label %35

35:                                               ; preds = %82, %27
  %36 = load i64, i64* %4, align 8
  %37 = load i64, i64* %6, align 8
  %38 = icmp slt i64 %36, %37
  br i1 %38, label %39, label %85

39:                                               ; preds = %35
  %40 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %41 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i32 0, i32 0
  %42 = load i8*, i8** %41, align 8
  %43 = call i32* @strstr(i8* %42, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  store i32* %43, i32** %10, align 8
  %44 = icmp ne i32* %43, null
  br i1 %44, label %45, label %59

45:                                               ; preds = %39
  %46 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %47 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %46, i32 0, i32 1
  %48 = load i32, i32* %47, align 8
  %49 = sext i32 %48 to i64
  store i64 %49, i64* %7, align 8
  %50 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %51 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %50, i32 0, i32 0
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i8* %52)
  %54 = load i32*, i32** %8, align 8
  %55 = call i32 @free(i32* %54)
  %56 = load i8*, i8** %3, align 8
  %57 = call i32 @strcpy(i8* %56, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0))
  %58 = load i64, i64* %7, align 8
  store i64 %58, i64* %2, align 8
  br label %88

59:                                               ; preds = %39
  %60 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %61 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %60, i32 0, i32 0
  %62 = load i8*, i8** %61, align 8
  %63 = call i32* @strstr(i8* %62, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  store i32* %63, i32** %10, align 8
  %64 = icmp ne i32* %63, null
  br i1 %64, label %65, label %79

65:                                               ; preds = %59
  %66 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %67 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %66, i32 0, i32 1
  %68 = load i32, i32* %67, align 8
  %69 = sext i32 %68 to i64
  store i64 %69, i64* %7, align 8
  %70 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %71 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %70, i32 0, i32 0
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i8* %72)
  %74 = load i32*, i32** %8, align 8
  %75 = call i32 @free(i32* %74)
  %76 = load i8*, i8** %3, align 8
  %77 = call i32 @strcpy(i8* %76, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0))
  %78 = load i64, i64* %7, align 8
  store i64 %78, i64* %2, align 8
  br label %88

79:                                               ; preds = %59
  %80 = load %struct.TYPE_2__*, %struct.TYPE_2__** %9, align 8
  %81 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %80, i32 1
  store %struct.TYPE_2__* %81, %struct.TYPE_2__** %9, align 8
  br label %82

82:                                               ; preds = %79
  %83 = load i64, i64* %4, align 8
  %84 = add nsw i64 %83, 1
  store i64 %84, i64* %4, align 8
  br label %35

85:                                               ; preds = %35
  %86 = load i32*, i32** %8, align 8
  %87 = call i32 @free(i32* %86)
  store i64 0, i64* %2, align 8
  br label %88

88:                                               ; preds = %85, %65, %45
  %89 = load i64, i64* %2, align 8
  ret i64 %89
}

declare dso_local i64 @ZwQuerySystemInformation(i32, i32*, i64, i64*) #1

declare dso_local i32* @malloc(i64) #1

declare dso_local i32 @ErrorQuit(i8*) #1

declare dso_local i32* @strstr(i8*, i8*) #1

declare dso_local i32 @printf(i8*, i8*) #1

declare dso_local i32 @free(i32*) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
