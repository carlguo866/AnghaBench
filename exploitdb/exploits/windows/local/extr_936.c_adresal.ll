; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_936.c_adresal.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_936.c_adresal.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"rb\00", align 1
@SEEK_SET = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @adresal(i8* %0, i8* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8, align 1
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32 0, i32* %7, align 4
  store i32 -1, i32* %8, align 4
  %11 = load i8*, i8** %4, align 8
  %12 = call i32* @fopen(i8* %11, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32* %12, i32** %9, align 8
  %13 = load i32*, i32** %9, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %18

15:                                               ; preds = %2
  %16 = load i32*, i32** %9, align 8
  %17 = call i32 @fclose(i32* %16)
  store i32 -1, i32* %3, align 4
  br label %77

18:                                               ; preds = %2
  br label %19

19:                                               ; preds = %73, %18
  %20 = load i32*, i32** %9, align 8
  %21 = call i32 @feof(i32* %20)
  %22 = icmp ne i32 %21, 0
  %23 = xor i1 %22, true
  br i1 %23, label %24, label %74

24:                                               ; preds = %19
  %25 = load i32, i32* %7, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %7, align 4
  store i32 0, i32* %10, align 4
  br label %27

27:                                               ; preds = %70, %24
  %28 = load i32, i32* %10, align 4
  %29 = load i8*, i8** %5, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = icmp slt i32 %28, %30
  br i1 %31, label %32, label %73

32:                                               ; preds = %27
  %33 = load i32*, i32** %9, align 8
  %34 = call signext i8 @getc(i32* %33)
  store i8 %34, i8* %6, align 1
  %35 = load i8, i8* %6, align 1
  %36 = sext i8 %35 to i32
  %37 = load i8*, i8** %5, align 8
  %38 = load i32, i32* %10, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = load i8, i8* %40, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp ne i32 %36, %42
  br i1 %43, label %44, label %54

44:                                               ; preds = %32
  %45 = load i32, i32* %10, align 4
  %46 = icmp sgt i32 %45, 0
  br i1 %46, label %47, label %53

47:                                               ; preds = %44
  %48 = load i32*, i32** %9, align 8
  %49 = load i32, i32* %7, align 4
  %50 = add nsw i32 %49, 1
  %51 = load i32, i32* @SEEK_SET, align 4
  %52 = call i32 @fseek(i32* %48, i32 %50, i32 %51)
  br label %53

53:                                               ; preds = %47, %44
  br label %73

54:                                               ; preds = %32
  %55 = load i32, i32* %10, align 4
  %56 = load i8*, i8** %5, align 8
  %57 = call i32 @strlen(i8* %56)
  %58 = sub nsw i32 %57, 2
  %59 = icmp sgt i32 %55, %58
  br i1 %59, label %60, label %69

60:                                               ; preds = %54
  %61 = load i32*, i32** %9, align 8
  %62 = call i32 @ftell(i32* %61)
  %63 = load i8*, i8** %5, align 8
  %64 = call i32 @strlen(i8* %63)
  %65 = sub nsw i32 %62, %64
  store i32 %65, i32* %8, align 4
  %66 = load i32*, i32** %9, align 8
  %67 = call i32 @fclose(i32* %66)
  %68 = load i32, i32* %8, align 4
  store i32 %68, i32* %3, align 4
  br label %77

69:                                               ; preds = %54
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %10, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %10, align 4
  br label %27

73:                                               ; preds = %53, %27
  br label %19

74:                                               ; preds = %19
  %75 = load i32*, i32** %9, align 8
  %76 = call i32 @fclose(i32* %75)
  store i32 -1, i32* %3, align 4
  br label %77

77:                                               ; preds = %74, %60, %15
  %78 = load i32, i32* %3, align 4
  ret i32 %78
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @feof(i32*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local signext i8 @getc(i32*) #1

declare dso_local i32 @fseek(i32*, i32, i32) #1

declare dso_local i32 @ftell(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
