; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_2284.c_Base64Decode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/local/extr_2284.c_Base64Decode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Base64Decode(i8* %0, i8* %1, i64 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  %12 = alloca i8, align 1
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i64 %2, i64* %7, align 8
  store i32 0, i32* %8, align 4
  %13 = load i8*, i8** %6, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 0
  %15 = load i8, i8* %14, align 1
  %16 = sext i8 %15 to i32
  %17 = icmp eq i32 %16, 43
  br i1 %17, label %18, label %27

18:                                               ; preds = %3
  %19 = load i8*, i8** %6, align 8
  %20 = getelementptr inbounds i8, i8* %19, i64 1
  %21 = load i8, i8* %20, align 1
  %22 = sext i8 %21 to i32
  %23 = icmp eq i32 %22, 32
  br i1 %23, label %24, label %27

24:                                               ; preds = %18
  %25 = load i8*, i8** %6, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 2
  store i8* %26, i8** %6, align 8
  br label %27

27:                                               ; preds = %24, %18, %3
  %28 = load i8*, i8** %6, align 8
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = icmp eq i32 %30, 13
  br i1 %31, label %32, label %33

32:                                               ; preds = %27
  store i32 0, i32* %4, align 4
  br label %142

33:                                               ; preds = %27
  br label %34

34:                                               ; preds = %138, %33
  %35 = load i8*, i8** %6, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 0
  %37 = load i8, i8* %36, align 1
  store i8 %37, i8* %9, align 1
  %38 = load i8, i8* %9, align 1
  %39 = call i32 @DECODE64(i8 zeroext %38)
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %42

41:                                               ; preds = %34
  store i32 -1, i32* %4, align 4
  br label %142

42:                                               ; preds = %34
  %43 = load i8*, i8** %6, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  %45 = load i8, i8* %44, align 1
  store i8 %45, i8* %10, align 1
  %46 = load i8, i8* %10, align 1
  %47 = call i32 @DECODE64(i8 zeroext %46)
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %50

49:                                               ; preds = %42
  store i32 -1, i32* %4, align 4
  br label %142

50:                                               ; preds = %42
  %51 = load i8*, i8** %6, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 2
  %53 = load i8, i8* %52, align 1
  store i8 %53, i8* %11, align 1
  %54 = load i8, i8* %11, align 1
  %55 = zext i8 %54 to i32
  %56 = icmp ne i32 %55, 61
  br i1 %56, label %57, label %62

57:                                               ; preds = %50
  %58 = load i8, i8* %11, align 1
  %59 = call i32 @DECODE64(i8 zeroext %58)
  %60 = icmp eq i32 %59, -1
  br i1 %60, label %61, label %62

61:                                               ; preds = %57
  store i32 -1, i32* %4, align 4
  br label %142

62:                                               ; preds = %57, %50
  %63 = load i8*, i8** %6, align 8
  %64 = getelementptr inbounds i8, i8* %63, i64 3
  %65 = load i8, i8* %64, align 1
  store i8 %65, i8* %12, align 1
  %66 = load i8, i8* %12, align 1
  %67 = zext i8 %66 to i32
  %68 = icmp ne i32 %67, 61
  br i1 %68, label %69, label %74

69:                                               ; preds = %62
  %70 = load i8, i8* %12, align 1
  %71 = call i32 @DECODE64(i8 zeroext %70)
  %72 = icmp eq i32 %71, -1
  br i1 %72, label %73, label %74

73:                                               ; preds = %69
  store i32 -1, i32* %4, align 4
  br label %142

74:                                               ; preds = %69, %62
  %75 = load i8*, i8** %6, align 8
  %76 = getelementptr inbounds i8, i8* %75, i64 4
  store i8* %76, i8** %6, align 8
  %77 = load i8, i8* %9, align 1
  %78 = call i32 @DECODE64(i8 zeroext %77)
  %79 = shl i32 %78, 2
  %80 = load i8, i8* %10, align 1
  %81 = call i32 @DECODE64(i8 zeroext %80)
  %82 = ashr i32 %81, 4
  %83 = or i32 %79, %82
  %84 = trunc i32 %83 to i8
  %85 = load i8*, i8** %5, align 8
  %86 = getelementptr inbounds i8, i8* %85, i32 1
  store i8* %86, i8** %5, align 8
  store i8 %84, i8* %85, align 1
  %87 = load i32, i32* %8, align 4
  %88 = add nsw i32 %87, 1
  store i32 %88, i32* %8, align 4
  %89 = load i8, i8* %11, align 1
  %90 = zext i8 %89 to i32
  %91 = icmp ne i32 %90, 61
  br i1 %91, label %92, label %123

92:                                               ; preds = %74
  %93 = load i8, i8* %10, align 1
  %94 = call i32 @DECODE64(i8 zeroext %93)
  %95 = shl i32 %94, 4
  %96 = and i32 %95, 240
  %97 = load i8, i8* %11, align 1
  %98 = call i32 @DECODE64(i8 zeroext %97)
  %99 = ashr i32 %98, 2
  %100 = or i32 %96, %99
  %101 = trunc i32 %100 to i8
  %102 = load i8*, i8** %5, align 8
  %103 = getelementptr inbounds i8, i8* %102, i32 1
  store i8* %103, i8** %5, align 8
  store i8 %101, i8* %102, align 1
  %104 = load i32, i32* %8, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %8, align 4
  %106 = load i8, i8* %12, align 1
  %107 = zext i8 %106 to i32
  %108 = icmp ne i32 %107, 61
  br i1 %108, label %109, label %122

109:                                              ; preds = %92
  %110 = load i8, i8* %11, align 1
  %111 = call i32 @DECODE64(i8 zeroext %110)
  %112 = shl i32 %111, 6
  %113 = and i32 %112, 192
  %114 = load i8, i8* %12, align 1
  %115 = call i32 @DECODE64(i8 zeroext %114)
  %116 = or i32 %113, %115
  %117 = trunc i32 %116 to i8
  %118 = load i8*, i8** %5, align 8
  %119 = getelementptr inbounds i8, i8* %118, i32 1
  store i8* %119, i8** %5, align 8
  store i8 %117, i8* %118, align 1
  %120 = load i32, i32* %8, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %8, align 4
  br label %122

122:                                              ; preds = %109, %92
  br label %123

123:                                              ; preds = %122, %74
  br label %124

124:                                              ; preds = %123
  %125 = load i8*, i8** %6, align 8
  %126 = load i8, i8* %125, align 1
  %127 = sext i8 %126 to i32
  %128 = icmp ne i32 %127, 0
  br i1 %128, label %129, label %138

129:                                              ; preds = %124
  %130 = load i8*, i8** %6, align 8
  %131 = load i8, i8* %130, align 1
  %132 = sext i8 %131 to i32
  %133 = icmp ne i32 %132, 13
  br i1 %133, label %134, label %138

134:                                              ; preds = %129
  %135 = load i8, i8* %12, align 1
  %136 = zext i8 %135 to i32
  %137 = icmp ne i32 %136, 61
  br label %138

138:                                              ; preds = %134, %129, %124
  %139 = phi i1 [ false, %129 ], [ false, %124 ], [ %137, %134 ]
  br i1 %139, label %34, label %140

140:                                              ; preds = %138
  %141 = load i32, i32* %8, align 4
  store i32 %141, i32* %4, align 4
  br label %142

142:                                              ; preds = %140, %73, %61, %49, %41, %32
  %143 = load i32, i32* %4, align 4
  ret i32 %143
}

declare dso_local i32 @DECODE64(i8 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
