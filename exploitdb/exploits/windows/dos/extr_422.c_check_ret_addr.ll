; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_422.c_check_ret_addr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_422.c_check_ret_addr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [126 x i8] c"nError: please use a full offset of 4 hex numbers.n       For example: 0x12341234, 12341234, 00001234, 0x33333333 and so onnn\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"%02x\00", align 1
@.str.2 = private unnamed_addr constant [240 x i8] c"nError: the return address cannot contain bytes greater than 0x3f (your: 0x%02x).n       For example 0x12341234 contains 0x12, 0x34, 0x12 and 0x34 that are ok.n       While 0x12345678 is not ok because 0x56 and 0x78 are greater than 0x3fnn\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @check_ret_addr(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i8* %0, i8** %2, align 8
  store i64 0, i64* %3, align 8
  %7 = bitcast i64* %3 to i32*
  %8 = getelementptr inbounds i32, i32* %7, i64 3
  store i32* %8, i32** %4, align 8
  %9 = load i8*, i8** %2, align 8
  %10 = getelementptr inbounds i8, i8* %9, i64 1
  %11 = load i8, i8* %10, align 1
  %12 = sext i8 %11 to i32
  %13 = icmp eq i32 %12, 120
  br i1 %13, label %20, label %14

14:                                               ; preds = %1
  %15 = load i8*, i8** %2, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  %17 = load i8, i8* %16, align 1
  %18 = sext i8 %17 to i32
  %19 = icmp eq i32 %18, 88
  br i1 %19, label %20, label %23

20:                                               ; preds = %14, %1
  %21 = load i8*, i8** %2, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 2
  store i8* %22, i8** %2, align 8
  br label %23

23:                                               ; preds = %20, %14
  %24 = load i8*, i8** %2, align 8
  %25 = call i32 @strlen(i8* %24)
  %26 = icmp ne i32 %25, 8
  br i1 %26, label %27, label %31

27:                                               ; preds = %23
  %28 = load i32, i32* @stdout, align 4
  %29 = call i32 @fputs(i8* getelementptr inbounds ([126 x i8], [126 x i8]* @.str, i64 0, i64 0), i32 %28)
  %30 = call i32 @exit(i32 1) #3
  unreachable

31:                                               ; preds = %23
  store i32 0, i32* %6, align 4
  br label %32

32:                                               ; preds = %71, %31
  %33 = load i32, i32* %6, align 4
  %34 = icmp slt i32 %33, 4
  br i1 %34, label %35, label %74

35:                                               ; preds = %32
  %36 = load i8*, i8** %2, align 8
  %37 = call i32 @sscanf(i8* %36, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32* %5)
  %38 = load i32, i32* %5, align 4
  %39 = icmp sgt i32 %38, 63
  br i1 %39, label %40, label %44

40:                                               ; preds = %35
  %41 = load i32, i32* %5, align 4
  %42 = call i32 @printf(i8* getelementptr inbounds ([240 x i8], [240 x i8]* @.str.2, i64 0, i64 0), i32 %41)
  %43 = call i32 @exit(i32 1) #3
  unreachable

44:                                               ; preds = %35
  %45 = load i32, i32* %5, align 4
  %46 = icmp sle i32 %45, 9
  br i1 %46, label %47, label %51

47:                                               ; preds = %44
  %48 = load i32, i32* %5, align 4
  %49 = add nsw i32 %48, 48
  %50 = load i32*, i32** %4, align 8
  store i32 %49, i32* %50, align 4
  br label %66

51:                                               ; preds = %44
  %52 = load i32, i32* %5, align 4
  %53 = icmp sge i32 %52, 10
  br i1 %53, label %54, label %61

54:                                               ; preds = %51
  %55 = load i32, i32* %5, align 4
  %56 = icmp sle i32 %55, 35
  br i1 %56, label %57, label %61

57:                                               ; preds = %54
  %58 = load i32, i32* %5, align 4
  %59 = add nsw i32 %58, 87
  %60 = load i32*, i32** %4, align 8
  store i32 %59, i32* %60, align 4
  br label %65

61:                                               ; preds = %54, %51
  %62 = load i32, i32* %5, align 4
  %63 = add nsw i32 %62, 29
  %64 = load i32*, i32** %4, align 8
  store i32 %63, i32* %64, align 4
  br label %65

65:                                               ; preds = %61, %57
  br label %66

66:                                               ; preds = %65, %47
  %67 = load i32*, i32** %4, align 8
  %68 = getelementptr inbounds i32, i32* %67, i32 -1
  store i32* %68, i32** %4, align 8
  %69 = load i8*, i8** %2, align 8
  %70 = getelementptr inbounds i8, i8* %69, i64 2
  store i8* %70, i8** %2, align 8
  br label %71

71:                                               ; preds = %66
  %72 = load i32, i32* %6, align 4
  %73 = add nsw i32 %72, 1
  store i32 %73, i32* %6, align 4
  br label %32

74:                                               ; preds = %32
  %75 = load i64, i64* %3, align 8
  ret i64 %75
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fputs(i8*, i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @sscanf(i8*, i8*, i32*) #1

declare dso_local i32 @printf(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
