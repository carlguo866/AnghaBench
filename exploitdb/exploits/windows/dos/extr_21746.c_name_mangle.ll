; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_name_mangle.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_name_mangle.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"%-15.15s%c\00", align 1
@global_scope = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @name_mangle(i8* %0, i8* %1, i8 signext %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8, align 1
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [20 x i8], align 16
  %12 = alloca i8*, align 8
  store i8* %0, i8** %5, align 8
  store i8* %1, i8** %6, align 8
  store i8 %2, i8* %7, align 1
  %13 = load i8*, i8** %6, align 8
  store i8* %13, i8** %12, align 8
  %14 = getelementptr inbounds [20 x i8], [20 x i8]* %11, i64 0, i64 0
  %15 = call i32 @memset(i8* %14, i32 0, i32 20)
  %16 = load i8*, i8** %5, align 8
  %17 = call i64 @strcmp(i8* %16, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0))
  %18 = icmp eq i64 %17, 0
  br i1 %18, label %19, label %21

19:                                               ; preds = %3
  %20 = getelementptr inbounds [20 x i8], [20 x i8]* %11, i64 0, i64 0
  store i8 42, i8* %20, align 16
  br label %26

21:                                               ; preds = %3
  %22 = getelementptr inbounds [20 x i8], [20 x i8]* %11, i64 0, i64 0
  %23 = load i8*, i8** %5, align 8
  %24 = load i8, i8* %7, align 1
  %25 = call i32 @snprintf(i8* %22, i32 19, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %23, i8 signext %24)
  br label %26

26:                                               ; preds = %21, %19
  %27 = load i8*, i8** %12, align 8
  %28 = getelementptr inbounds i8, i8* %27, i64 0
  store i8 32, i8* %28, align 1
  %29 = load i8*, i8** %12, align 8
  %30 = getelementptr inbounds i8, i8* %29, i32 1
  store i8* %30, i8** %12, align 8
  store i32 0, i32* %8, align 4
  br label %31

31:                                               ; preds = %60, %26
  %32 = load i32, i32* %8, align 4
  %33 = icmp slt i32 %32, 16
  br i1 %33, label %34, label %63

34:                                               ; preds = %31
  %35 = load i32, i32* %8, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds [20 x i8], [20 x i8]* %11, i64 0, i64 %36
  %38 = load i8, i8* %37, align 1
  %39 = call i32 @toupper(i8 signext %38)
  store i32 %39, i32* %9, align 4
  %40 = load i32, i32* %9, align 4
  %41 = ashr i32 %40, 4
  %42 = and i32 %41, 15
  %43 = add nsw i32 %42, 65
  %44 = trunc i32 %43 to i8
  %45 = load i8*, i8** %12, align 8
  %46 = load i32, i32* %8, align 4
  %47 = mul nsw i32 %46, 2
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds i8, i8* %45, i64 %48
  store i8 %44, i8* %49, align 1
  %50 = load i32, i32* %9, align 4
  %51 = and i32 %50, 15
  %52 = add nsw i32 %51, 65
  %53 = trunc i32 %52 to i8
  %54 = load i8*, i8** %12, align 8
  %55 = load i32, i32* %8, align 4
  %56 = mul nsw i32 %55, 2
  %57 = add nsw i32 %56, 1
  %58 = sext i32 %57 to i64
  %59 = getelementptr inbounds i8, i8* %54, i64 %58
  store i8 %53, i8* %59, align 1
  br label %60

60:                                               ; preds = %34
  %61 = load i32, i32* %8, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %8, align 4
  br label %31

63:                                               ; preds = %31
  %64 = load i8*, i8** %12, align 8
  %65 = getelementptr inbounds i8, i8* %64, i64 32
  store i8* %65, i8** %12, align 8
  %66 = load i8*, i8** %12, align 8
  %67 = getelementptr inbounds i8, i8* %66, i64 0
  store i8 0, i8* %67, align 1
  store i32 0, i32* %8, align 4
  store i32 0, i32* %10, align 4
  br label %68

68:                                               ; preds = %116, %63
  %69 = load i32*, i32** @global_scope, align 8
  %70 = icmp ne i32* null, %69
  br i1 %70, label %71, label %121

71:                                               ; preds = %68
  %72 = load i32*, i32** @global_scope, align 8
  %73 = load i32, i32* %8, align 4
  %74 = sext i32 %73 to i64
  %75 = getelementptr inbounds i32, i32* %72, i64 %74
  %76 = load i32, i32* %75, align 4
  switch i32 %76, label %103 [
    i32 0, label %77
    i32 46, label %93
  ]

77:                                               ; preds = %71
  %78 = load i32, i32* %10, align 4
  %79 = trunc i32 %78 to i8
  %80 = load i8*, i8** %12, align 8
  %81 = getelementptr inbounds i8, i8* %80, i64 0
  store i8 %79, i8* %81, align 1
  %82 = load i32, i32* %10, align 4
  %83 = icmp sgt i32 %82, 0
  br i1 %83, label %84, label %90

84:                                               ; preds = %77
  %85 = load i8*, i8** %12, align 8
  %86 = load i32, i32* %10, align 4
  %87 = add nsw i32 %86, 1
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %85, i64 %88
  store i8 0, i8* %89, align 1
  br label %90

90:                                               ; preds = %84, %77
  %91 = load i8*, i8** %6, align 8
  %92 = call i32 @name_len(i8* %91)
  store i32 %92, i32* %4, align 4
  br label %124

93:                                               ; preds = %71
  %94 = load i32, i32* %10, align 4
  %95 = trunc i32 %94 to i8
  %96 = load i8*, i8** %12, align 8
  %97 = getelementptr inbounds i8, i8* %96, i64 0
  store i8 %95, i8* %97, align 1
  %98 = load i32, i32* %10, align 4
  %99 = add nsw i32 %98, 1
  %100 = load i8*, i8** %12, align 8
  %101 = sext i32 %99 to i64
  %102 = getelementptr inbounds i8, i8* %100, i64 %101
  store i8* %102, i8** %12, align 8
  store i32 -1, i32* %10, align 4
  br label %115

103:                                              ; preds = %71
  %104 = load i32*, i32** @global_scope, align 8
  %105 = load i32, i32* %8, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i32, i32* %104, i64 %106
  %108 = load i32, i32* %107, align 4
  %109 = trunc i32 %108 to i8
  %110 = load i8*, i8** %12, align 8
  %111 = load i32, i32* %10, align 4
  %112 = add nsw i32 %111, 1
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %110, i64 %113
  store i8 %109, i8* %114, align 1
  br label %115

115:                                              ; preds = %103, %93
  br label %116

116:                                              ; preds = %115
  %117 = load i32, i32* %8, align 4
  %118 = add nsw i32 %117, 1
  store i32 %118, i32* %8, align 4
  %119 = load i32, i32* %10, align 4
  %120 = add nsw i32 %119, 1
  store i32 %120, i32* %10, align 4
  br label %68

121:                                              ; preds = %68
  %122 = load i8*, i8** %6, align 8
  %123 = call i32 @name_len(i8* %122)
  store i32 %123, i32* %4, align 4
  br label %124

124:                                              ; preds = %121, %90
  %125 = load i32, i32* %4, align 4
  ret i32 %125
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, i8*, i8 signext) #1

declare dso_local i32 @toupper(i8 signext) #1

declare dso_local i32 @name_len(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
