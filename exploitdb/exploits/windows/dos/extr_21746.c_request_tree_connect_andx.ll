; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_request_tree_connect_andx.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_request_tree_connect_andx.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i32, i32, i32, i32, i64 }

@SMB_TREE_CONNECT_ANDX = common dso_local global i32 0, align 4
@SESSION_MESSAGE = common dso_local global i8 0, align 1
@.str = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"\\\\%s\\IPC$\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c"IPC\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @request_tree_connect_andx(i8* %0, i32 %1, i8* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca %struct.TYPE_6__, align 8
  %8 = alloca %struct.TYPE_6__, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i8* %2, i8** %6, align 8
  %13 = call i64 (...) @rand()
  store i64 %13, i64* %9, align 8
  %14 = load i8*, i8** %4, align 8
  %15 = getelementptr inbounds i8, i8* %14, i64 4
  %16 = bitcast i8* %15 to %struct.TYPE_6__*
  %17 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %16, i32 0, i32 4
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %10, align 8
  %19 = load i32, i32* @SMB_TREE_CONNECT_ANDX, align 4
  %20 = load i64, i64* %9, align 8
  %21 = load i64, i64* %10, align 8
  %22 = call i32 @build_smb_header(%struct.TYPE_6__* %7, i32 %19, i32 24, i32 8193, i32 0, i64 %20, i64 %21, i32 0)
  %23 = load i8, i8* @SESSION_MESSAGE, align 1
  %24 = load i8*, i8** %4, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 0
  store i8 %23, i8* %25, align 1
  %26 = load i8*, i8** %4, align 8
  %27 = getelementptr inbounds i8, i8* %26, i64 1
  store i8 0, i8* %27, align 1
  %28 = load i8*, i8** %4, align 8
  %29 = getelementptr inbounds i8, i8* %28, i64 4
  %30 = call i32 @memcpy(i8* %29, %struct.TYPE_6__* %7, i32 24)
  %31 = call i32 @memset(%struct.TYPE_6__* %8, i32 0, i32 24)
  %32 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %8, i32 0, i32 0
  store i32 4, i32* %32, align 8
  %33 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %8, i32 0, i32 1
  store i32 255, i32* %33, align 4
  %34 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %8, i32 0, i32 2
  store i32 1, i32* %34, align 8
  %35 = load i8*, i8** %4, align 8
  %36 = getelementptr inbounds i8, i8* %35, i64 4
  %37 = getelementptr inbounds i8, i8* %36, i64 24
  %38 = getelementptr inbounds i8, i8* %37, i64 24
  store i8* %38, i8** %11, align 8
  %39 = load i8*, i8** %11, align 8
  %40 = call i8* (i8*, ...) @push_string(i8* %39, i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str, i64 0, i64 0))
  store i8* %40, i8** %11, align 8
  %41 = load i8*, i8** %6, align 8
  %42 = call i64 @strlen(i8* %41)
  %43 = add nsw i64 8, %42
  %44 = call i8* @malloc(i64 %43)
  store i8* %44, i8** %12, align 8
  %45 = load i8*, i8** %12, align 8
  %46 = load i8*, i8** %6, align 8
  %47 = call i32 @sprintf(i8* %45, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* %46)
  %48 = load i8*, i8** %11, align 8
  %49 = load i8*, i8** %12, align 8
  %50 = call i8* (i8*, ...) @push_string(i8* %48, i8* %49)
  store i8* %50, i8** %11, align 8
  %51 = load i8*, i8** %12, align 8
  %52 = call i32 @free(i8* %51)
  %53 = load i8*, i8** %11, align 8
  %54 = call i8* (i8*, ...) @push_string(i8* %53, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  store i8* %54, i8** %11, align 8
  %55 = load i8*, i8** %11, align 8
  %56 = load i8*, i8** %4, align 8
  %57 = ptrtoint i8* %55 to i64
  %58 = ptrtoint i8* %56 to i64
  %59 = sub i64 %57, %58
  %60 = sub nsw i64 %59, 4
  %61 = sub i64 %60, 24
  %62 = sub i64 %61, 24
  %63 = trunc i64 %62 to i32
  %64 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %8, i32 0, i32 3
  store i32 %63, i32* %64, align 4
  %65 = load i8*, i8** %4, align 8
  %66 = getelementptr inbounds i8, i8* %65, i64 4
  %67 = getelementptr inbounds i8, i8* %66, i64 24
  %68 = call i32 @memcpy(i8* %67, %struct.TYPE_6__* %8, i32 24)
  %69 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %8, i32 0, i32 3
  %70 = load i32, i32* %69, align 4
  %71 = sext i32 %70 to i64
  %72 = add i64 48, %71
  %73 = call i64 @bswap16(i64 %72)
  %74 = load i8*, i8** %4, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 2
  %76 = bitcast i8* %75 to i64*
  store i64 %73, i64* %76, align 8
  %77 = load i32, i32* %5, align 4
  %78 = load i8*, i8** %4, align 8
  %79 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %8, i32 0, i32 3
  %80 = load i32, i32* %79, align 4
  %81 = sext i32 %80 to i64
  %82 = add i64 52, %81
  %83 = trunc i64 %82 to i32
  %84 = call i32 @write(i32 %77, i8* %78, i32 %83)
  ret void
}

declare dso_local i64 @rand(...) #1

declare dso_local i32 @build_smb_header(%struct.TYPE_6__*, i32, i32, i32, i32, i64, i64, i32) #1

declare dso_local i32 @memcpy(i8*, %struct.TYPE_6__*, i32) #1

declare dso_local i32 @memset(%struct.TYPE_6__*, i32, i32) #1

declare dso_local i8* @push_string(i8*, ...) #1

declare dso_local i8* @malloc(i64) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i64 @bswap16(i64) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
