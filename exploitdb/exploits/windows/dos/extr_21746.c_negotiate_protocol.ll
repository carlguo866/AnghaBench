; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_negotiate_protocol.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_negotiate_protocol.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i8, i32* }

@SESSION_MESSAGE = common dso_local global i8 0, align 1
@SMB_NEGOTIATE_PROTOCOL = common dso_local global i32 0, align 4
@dialects = common dso_local global %struct.TYPE_2__* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @negotiate_protocol(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %10 = call i64 (...) @rand()
  store i64 %10, i64* %7, align 8
  %11 = call i64 (...) @rand()
  store i64 %11, i64* %8, align 8
  %12 = load i8, i8* @SESSION_MESSAGE, align 1
  %13 = load i8*, i8** %3, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 0
  store i8 %12, i8* %14, align 1
  %15 = load i8*, i8** %3, align 8
  %16 = getelementptr inbounds i8, i8* %15, i64 1
  store i8 0, i8* %16, align 1
  %17 = load i32, i32* @SMB_NEGOTIATE_PROTOCOL, align 4
  %18 = load i64, i64* %7, align 8
  %19 = load i64, i64* %8, align 8
  %20 = call i32 @build_smb_header(i32* %5, i32 %17, i32 0, i32 0, i32 0, i64 %18, i32 0, i64 %19)
  %21 = load i8*, i8** %3, align 8
  %22 = getelementptr inbounds i8, i8* %21, i64 4
  %23 = call i32 @memcpy(i8* %22, i32* %5, i32 4)
  %24 = load i8*, i8** %3, align 8
  %25 = getelementptr inbounds i8, i8* %24, i64 4
  %26 = getelementptr inbounds i8, i8* %25, i64 4
  %27 = getelementptr inbounds i8, i8* %26, i64 3
  store i8* %27, i8** %6, align 8
  store i32 0, i32* %9, align 4
  br label %28

28:                                               ; preds = %63, %2
  %29 = load %struct.TYPE_2__*, %struct.TYPE_2__** @dialects, align 8
  %30 = load i32, i32* %9, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %29, i64 %31
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 1
  %34 = load i32*, i32** %33, align 8
  %35 = icmp ne i32* %34, null
  br i1 %35, label %36, label %66

36:                                               ; preds = %28
  %37 = load %struct.TYPE_2__*, %struct.TYPE_2__** @dialects, align 8
  %38 = load i32, i32* %9, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %37, i64 %39
  %41 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %40, i32 0, i32 0
  %42 = load i8, i8* %41, align 8
  %43 = load i8*, i8** %6, align 8
  store i8 %42, i8* %43, align 1
  %44 = load i8*, i8** %6, align 8
  %45 = getelementptr inbounds i8, i8* %44, i64 1
  %46 = load %struct.TYPE_2__*, %struct.TYPE_2__** @dialects, align 8
  %47 = load i32, i32* %9, align 4
  %48 = sext i32 %47 to i64
  %49 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %46, i64 %48
  %50 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %49, i32 0, i32 1
  %51 = load i32*, i32** %50, align 8
  %52 = call i32 @strcpy(i8* %45, i32* %51)
  %53 = load %struct.TYPE_2__*, %struct.TYPE_2__** @dialects, align 8
  %54 = load i32, i32* %9, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %53, i64 %55
  %57 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %56, i32 0, i32 1
  %58 = load i32*, i32** %57, align 8
  %59 = call i64 @strlen(i32* %58)
  %60 = add nsw i64 %59, 2
  %61 = load i8*, i8** %6, align 8
  %62 = getelementptr inbounds i8, i8* %61, i64 %60
  store i8* %62, i8** %6, align 8
  br label %63

63:                                               ; preds = %36
  %64 = load i32, i32* %9, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %9, align 4
  br label %28

66:                                               ; preds = %28
  %67 = load i8*, i8** %3, align 8
  %68 = getelementptr inbounds i8, i8* %67, i64 4
  %69 = getelementptr inbounds i8, i8* %68, i64 4
  %70 = bitcast i8* %69 to i64*
  store i64 0, i64* %70, align 8
  %71 = load i8*, i8** %6, align 8
  %72 = load i8*, i8** %3, align 8
  %73 = ptrtoint i8* %71 to i64
  %74 = ptrtoint i8* %72 to i64
  %75 = sub i64 %73, %74
  %76 = sub nsw i64 %75, 4
  %77 = sub i64 %76, 4
  %78 = sub i64 %77, 3
  %79 = load i8*, i8** %3, align 8
  %80 = getelementptr inbounds i8, i8* %79, i64 4
  %81 = getelementptr inbounds i8, i8* %80, i64 4
  %82 = getelementptr inbounds i8, i8* %81, i64 1
  %83 = bitcast i8* %82 to i64*
  store i64 %78, i64* %83, align 8
  %84 = load i8*, i8** %6, align 8
  %85 = load i8*, i8** %3, align 8
  %86 = ptrtoint i8* %84 to i64
  %87 = ptrtoint i8* %85 to i64
  %88 = sub i64 %86, %87
  %89 = sub nsw i64 %88, 4
  %90 = call i64 @bswap16(i64 %89)
  %91 = load i8*, i8** %3, align 8
  %92 = getelementptr inbounds i8, i8* %91, i64 2
  %93 = bitcast i8* %92 to i64*
  store i64 %90, i64* %93, align 8
  %94 = load i32, i32* %4, align 4
  %95 = load i8*, i8** %3, align 8
  %96 = load i8*, i8** %6, align 8
  %97 = load i8*, i8** %3, align 8
  %98 = ptrtoint i8* %96 to i64
  %99 = ptrtoint i8* %97 to i64
  %100 = sub i64 %98, %99
  %101 = trunc i64 %100 to i32
  %102 = call i32 @write(i32 %94, i8* %95, i32 %101)
  ret void
}

declare dso_local i64 @rand(...) #1

declare dso_local i32 @build_smb_header(i32*, i32, i32, i32, i32, i64, i32, i64) #1

declare dso_local i32 @memcpy(i8*, i32*, i32) #1

declare dso_local i32 @strcpy(i8*, i32*) #1

declare dso_local i64 @strlen(i32*) #1

declare dso_local i64 @bswap16(i64) #1

declare dso_local i32 @write(i32, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
