; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_35.c_funk.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_35.c_funk.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [25 x i8] c"error starting winsock..\00", align 1
@.str.1 = private unnamed_addr constant [26 x i8] c"error: can't resolve '%s'\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [31 x i8] c"Error: Unable to create socket\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c"Error: Cudn't Connect\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%s\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @funk(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca [100 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca [100 x i8], align 16
  store i8* %0, i8** %4, align 8
  store i8* %1, i8** %5, align 8
  %12 = call i64 @WSAStartup(i32 257, i32* %8)
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  store i8* null, i8** %3, align 8
  br label %63

16:                                               ; preds = %2
  %17 = load i8*, i8** %5, align 8
  %18 = call %struct.hostent* @gethostbyname(i8* %17)
  store %struct.hostent* %18, %struct.hostent** %9, align 8
  %19 = icmp eq %struct.hostent* %18, null
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = load i8*, i8** %5, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  store i8* null, i8** %3, align 8
  br label %63

23:                                               ; preds = %16
  %24 = call i32 @htons(i32 80)
  %25 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  store i32 %24, i32* %25, align 4
  %26 = load i32, i32* @AF_INET, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %26, i32* %27, align 4
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  %29 = load %struct.hostent*, %struct.hostent** %9, align 8
  %30 = getelementptr inbounds %struct.hostent, %struct.hostent* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = inttoptr i64 %31 to %struct.in_addr*
  %33 = bitcast %struct.in_addr* %28 to i8*
  %34 = bitcast %struct.in_addr* %32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %33, i8* align 4 %34, i64 4, i1 false)
  %35 = load i32, i32* @AF_INET, align 4
  %36 = load i32, i32* @SOCK_STREAM, align 4
  %37 = call i32 @socket(i32 %35, i32 %36, i32 0)
  store i32 %37, i32* %6, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %41

39:                                               ; preds = %23
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0))
  br label %41

41:                                               ; preds = %39, %23
  %42 = load i32, i32* %6, align 4
  %43 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %44 = call i32 @connect(i32 %42, %struct.sockaddr* %43, i32 12)
  %45 = icmp eq i32 %44, -1
  br i1 %45, label %46, label %48

46:                                               ; preds = %41
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0))
  br label %48

48:                                               ; preds = %46, %41
  %49 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %50 = call i32 @memset(i8* %49, i32 0, i32 100)
  %51 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %52 = load i8*, i8** %4, align 8
  %53 = call i32 @sprintf(i8* %51, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i8* %52, i32 8)
  %54 = load i32, i32* %6, align 4
  %55 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %56 = getelementptr inbounds [100 x i8], [100 x i8]* %11, i64 0, i64 0
  %57 = call i32 @strlen(i8* %56)
  %58 = call i32 @send(i32 %54, i8* %55, i32 %57, i32 0)
  %59 = load i32, i32* %6, align 4
  %60 = getelementptr inbounds [100 x i8], [100 x i8]* %7, i64 0, i64 0
  %61 = call i32 @recv(i32 %59, i8* %60, i32 100, i32 0)
  %62 = getelementptr inbounds [100 x i8], [100 x i8]* %7, i64 0, i64 0
  store i8* %62, i8** %3, align 8
  br label %63

63:                                               ; preds = %48, %20, %14
  %64 = load i8*, i8** %3, align 8
  ret i8* %64
}

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
