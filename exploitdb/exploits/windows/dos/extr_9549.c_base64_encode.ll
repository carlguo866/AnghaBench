; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_9549.c_base64_encode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_9549.c_base64_encode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @base64_encode(i32* %0, i32* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca [64 x i32], align 16
  store i32* %0, i32** %4, align 8
  store i32* %1, i32** %5, align 8
  %13 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 1
  store i32 65, i32* %13, align 4
  %14 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 7
  store i32 71, i32* %14, align 4
  %15 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 13
  store i32 77, i32* %15, align 4
  %16 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 19
  store i32 83, i32* %16, align 4
  %17 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 25
  store i32 89, i32* %17, align 4
  %18 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 2
  store i32 66, i32* %18, align 8
  %19 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 8
  store i32 72, i32* %19, align 16
  %20 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 14
  store i32 78, i32* %20, align 8
  %21 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 20
  store i32 84, i32* %21, align 16
  %22 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 26
  store i32 90, i32* %22, align 8
  %23 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 3
  store i32 67, i32* %23, align 4
  %24 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 9
  store i32 73, i32* %24, align 4
  %25 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 15
  store i32 79, i32* %25, align 4
  %26 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 21
  store i32 85, i32* %26, align 4
  %27 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 4
  store i32 68, i32* %27, align 16
  %28 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 10
  store i32 74, i32* %28, align 8
  %29 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 16
  store i32 80, i32* %29, align 16
  %30 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 22
  store i32 86, i32* %30, align 8
  %31 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 5
  store i32 69, i32* %31, align 4
  %32 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 11
  store i32 75, i32* %32, align 4
  %33 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 17
  store i32 81, i32* %33, align 4
  %34 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 23
  store i32 87, i32* %34, align 4
  %35 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 6
  store i32 70, i32* %35, align 8
  %36 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 12
  store i32 76, i32* %36, align 16
  %37 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 18
  store i32 82, i32* %37, align 8
  %38 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 24
  store i32 88, i32* %38, align 16
  %39 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 27
  store i32 97, i32* %39, align 4
  %40 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 28
  store i32 98, i32* %40, align 16
  %41 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 29
  store i32 99, i32* %41, align 4
  %42 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 30
  store i32 100, i32* %42, align 8
  %43 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 31
  store i32 101, i32* %43, align 4
  %44 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 32
  store i32 102, i32* %44, align 16
  %45 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 33
  store i32 103, i32* %45, align 4
  %46 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 34
  store i32 104, i32* %46, align 8
  %47 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 35
  store i32 105, i32* %47, align 4
  %48 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 36
  store i32 106, i32* %48, align 16
  %49 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 37
  store i32 107, i32* %49, align 4
  %50 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 38
  store i32 108, i32* %50, align 8
  %51 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 39
  store i32 109, i32* %51, align 4
  %52 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 40
  store i32 111, i32* %52, align 16
  %53 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 41
  store i32 112, i32* %53, align 4
  %54 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 42
  store i32 113, i32* %54, align 8
  %55 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 43
  store i32 114, i32* %55, align 4
  %56 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 44
  store i32 115, i32* %56, align 16
  %57 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 45
  store i32 116, i32* %57, align 4
  %58 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 46
  store i32 117, i32* %58, align 8
  %59 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 47
  store i32 118, i32* %59, align 4
  %60 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 48
  store i32 119, i32* %60, align 16
  %61 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 49
  store i32 120, i32* %61, align 4
  %62 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 50
  store i32 121, i32* %62, align 8
  %63 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 51
  store i32 122, i32* %63, align 4
  %64 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 52
  store i32 48, i32* %64, align 16
  %65 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 53
  store i32 49, i32* %65, align 4
  %66 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 54
  store i32 50, i32* %66, align 8
  %67 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 55
  store i32 51, i32* %67, align 4
  %68 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 56
  store i32 52, i32* %68, align 16
  %69 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 57
  store i32 53, i32* %69, align 4
  %70 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 58
  store i32 54, i32* %70, align 8
  %71 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 59
  store i32 55, i32* %71, align 4
  %72 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 60
  store i32 56, i32* %72, align 16
  %73 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 61
  store i32 57, i32* %73, align 4
  %74 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 62
  store i32 43, i32* %74, align 8
  %75 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 63
  store i32 44, i32* %75, align 4
  %76 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 64
  store i32 47, i32* %76, align 16
  %77 = load i32*, i32** %5, align 8
  %78 = icmp ne i32* %77, null
  br i1 %78, label %79, label %83

79:                                               ; preds = %2
  %80 = load i32*, i32** %5, align 8
  %81 = load i32, i32* %80, align 4
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %79, %2
  %84 = load i32*, i32** %4, align 8
  %85 = call i32 @strlen(i32* %84)
  store i32 %85, i32* %6, align 4
  br label %89

86:                                               ; preds = %79
  %87 = load i32*, i32** %5, align 8
  %88 = load i32, i32* %87, align 4
  store i32 %88, i32* %6, align 4
  br label %89

89:                                               ; preds = %86, %83
  %90 = load i32, i32* %6, align 4
  %91 = sdiv i32 %90, 3
  %92 = shl i32 %91, 2
  %93 = add nsw i32 %92, 6
  %94 = call i32* @malloc(i32 %93)
  store i32* %94, i32** %10, align 8
  %95 = load i32*, i32** %10, align 8
  %96 = icmp ne i32* %95, null
  br i1 %96, label %98, label %97

97:                                               ; preds = %89
  store i32* null, i32** %3, align 8
  br label %185

98:                                               ; preds = %89
  %99 = load i32*, i32** %10, align 8
  store i32* %99, i32** %11, align 8
  br label %100

100:                                              ; preds = %155, %98
  %101 = load i32*, i32** %4, align 8
  %102 = getelementptr inbounds i32, i32* %101, i64 0
  %103 = load i32, i32* %102, align 4
  store i32 %103, i32* %7, align 4
  %104 = load i32*, i32** %4, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 1
  %106 = load i32, i32* %105, align 4
  store i32 %106, i32* %8, align 4
  %107 = load i32*, i32** %4, align 8
  %108 = getelementptr inbounds i32, i32* %107, i64 2
  %109 = load i32, i32* %108, align 4
  store i32 %109, i32* %9, align 4
  %110 = load i32, i32* %7, align 4
  %111 = ashr i32 %110, 2
  %112 = and i32 %111, 63
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 %113
  %115 = load i32, i32* %114, align 4
  %116 = load i32*, i32** %11, align 8
  %117 = getelementptr inbounds i32, i32* %116, i32 1
  store i32* %117, i32** %11, align 8
  store i32 %115, i32* %116, align 4
  %118 = load i32, i32* %7, align 4
  %119 = and i32 %118, 3
  %120 = shl i32 %119, 4
  %121 = load i32, i32* %8, align 4
  %122 = ashr i32 %121, 4
  %123 = and i32 %122, 15
  %124 = or i32 %120, %123
  %125 = and i32 %124, 63
  %126 = sext i32 %125 to i64
  %127 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = load i32*, i32** %11, align 8
  %130 = getelementptr inbounds i32, i32* %129, i32 1
  store i32* %130, i32** %11, align 8
  store i32 %128, i32* %129, align 4
  %131 = load i32, i32* %8, align 4
  %132 = and i32 %131, 15
  %133 = shl i32 %132, 2
  %134 = load i32, i32* %9, align 4
  %135 = ashr i32 %134, 6
  %136 = and i32 %135, 3
  %137 = or i32 %133, %136
  %138 = and i32 %137, 63
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = load i32*, i32** %11, align 8
  %143 = getelementptr inbounds i32, i32* %142, i32 1
  store i32* %143, i32** %11, align 8
  store i32 %141, i32* %142, align 4
  %144 = load i32, i32* %9, align 4
  %145 = and i32 %144, 63
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds [64 x i32], [64 x i32]* %12, i64 0, i64 %146
  %148 = load i32, i32* %147, align 4
  %149 = load i32*, i32** %11, align 8
  %150 = getelementptr inbounds i32, i32* %149, i32 1
  store i32* %150, i32** %11, align 8
  store i32 %148, i32* %149, align 4
  %151 = load i32*, i32** %4, align 8
  %152 = getelementptr inbounds i32, i32* %151, i64 3
  store i32* %152, i32** %4, align 8
  %153 = load i32, i32* %6, align 4
  %154 = sub nsw i32 %153, 3
  store i32 %154, i32* %6, align 4
  br label %155

155:                                              ; preds = %100
  %156 = load i32, i32* %6, align 4
  %157 = icmp sgt i32 %156, 0
  br i1 %157, label %100, label %158

158:                                              ; preds = %155
  %159 = load i32*, i32** %11, align 8
  store i32 0, i32* %159, align 4
  br label %160

160:                                              ; preds = %168, %158
  %161 = load i32, i32* %6, align 4
  %162 = icmp slt i32 %161, 0
  br i1 %162, label %163, label %171

163:                                              ; preds = %160
  %164 = load i32*, i32** %11, align 8
  %165 = load i32, i32* %6, align 4
  %166 = sext i32 %165 to i64
  %167 = getelementptr inbounds i32, i32* %164, i64 %166
  store i32 61, i32* %167, align 4
  br label %168

168:                                              ; preds = %163
  %169 = load i32, i32* %6, align 4
  %170 = add nsw i32 %169, 1
  store i32 %170, i32* %6, align 4
  br label %160

171:                                              ; preds = %160
  %172 = load i32*, i32** %5, align 8
  %173 = icmp ne i32* %172, null
  br i1 %173, label %174, label %183

174:                                              ; preds = %171
  %175 = load i32*, i32** %11, align 8
  %176 = load i32*, i32** %10, align 8
  %177 = ptrtoint i32* %175 to i64
  %178 = ptrtoint i32* %176 to i64
  %179 = sub i64 %177, %178
  %180 = sdiv exact i64 %179, 4
  %181 = trunc i64 %180 to i32
  %182 = load i32*, i32** %5, align 8
  store i32 %181, i32* %182, align 4
  br label %183

183:                                              ; preds = %174, %171
  %184 = load i32*, i32** %10, align 8
  store i32* %184, i32** %3, align 8
  br label %185

185:                                              ; preds = %183, %97
  %186 = load i32*, i32** %3, align 8
  ret i32* %186
}

declare dso_local i32 @strlen(i32*) #1

declare dso_local i32* @malloc(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
