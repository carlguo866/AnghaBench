; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_42341.c_SendRequest.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_42341.c_SendRequest.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@DEFAULT_BUFLEN = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [30 x i8] c"\0A[>] Initialising Winsock...\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"[!] Failed. Error Code : %d\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"[>] Initialised.\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [33 x i8] c"[!] Could not create socket : %d\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"[>] Socket created.\0A\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"172.16.116.222\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"[!] Connect error\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"[>] Connected\00", align 1
@.str.8 = private unnamed_addr constant [16 x i8] c"[!] Send failed\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"\0A[>] Request sent\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @SendRequest(i8* %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  %14 = load i32, i32* @DEFAULT_BUFLEN, align 4
  %15 = zext i32 %14 to i64
  %16 = call i8* @llvm.stacksave()
  store i8* %16, i8** %9, align 8
  %17 = alloca i8, i64 %15, align 16
  store i64 %15, i64* %10, align 8
  %18 = load i32, i32* @DEFAULT_BUFLEN, align 4
  store i32 %18, i32* %11, align 4
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str, i64 0, i64 0))
  %20 = call i32 @MAKEWORD(i32 2, i32 2)
  %21 = call i64 @WSAStartup(i32 %20, i32* %6)
  %22 = icmp ne i64 %21, 0
  br i1 %22, label %23, label %26

23:                                               ; preds = %2
  %24 = call i32 (...) @WSAGetLastError()
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i32 %24)
  store i32 1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %64

26:                                               ; preds = %2
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0))
  %28 = load i32, i32* @AF_INET, align 4
  %29 = load i32, i32* @SOCK_STREAM, align 4
  %30 = call i32 @socket(i32 %28, i32 %29, i32 0)
  store i32 %30, i32* %7, align 4
  %31 = load i32, i32* @INVALID_SOCKET, align 4
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %33, label %36

33:                                               ; preds = %26
  %34 = call i32 (...) @WSAGetLastError()
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0), i32 %34)
  br label %36

36:                                               ; preds = %33, %26
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %38 = call i32 @inet_addr(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  store i32 %38, i32* %40, align 4
  %41 = load i32, i32* @AF_INET, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %41, i32* %42, align 4
  %43 = call i32 @htons(i32 8080)
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %43, i32* %44, align 4
  %45 = load i32, i32* %7, align 4
  %46 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %47 = call i64 @connect(i32 %45, %struct.sockaddr* %46, i32 12)
  %48 = icmp slt i64 %47, 0
  br i1 %48, label %49, label %51

49:                                               ; preds = %36
  %50 = call i32 @puts(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %64

51:                                               ; preds = %36
  %52 = call i32 @puts(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0))
  %53 = load i32, i32* %7, align 4
  %54 = load i8*, i8** %4, align 8
  %55 = load i32, i32* %5, align 4
  %56 = call i64 @send(i32 %53, i8* %54, i32 %55, i32 0)
  %57 = icmp slt i64 %56, 0
  br i1 %57, label %58, label %60

58:                                               ; preds = %51
  %59 = call i32 @puts(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.8, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %64

60:                                               ; preds = %51
  %61 = call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %62 = load i32, i32* %7, align 4
  %63 = call i32 @closesocket(i32 %62)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %13, align 4
  br label %64

64:                                               ; preds = %60, %58, %49, %23
  %65 = load i8*, i8** %9, align 8
  call void @llvm.stackrestore(i8* %65)
  %66 = load i32, i32* %3, align 4
  ret i32 %66
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i64 @WSAStartup(i32, i32*) #2

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i32 @WSAGetLastError(...) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @puts(i8*) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @closesocket(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
