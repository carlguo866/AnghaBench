; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_24635.c_in_cksum.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_24635.c_in_cksum.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

; Function Attrs: noinline nounwind optnone uwtable
define dso_local zeroext i16 @in_cksum(i16* %0, i32 %1) #0 {
  %3 = alloca i16*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca i16, align 2
  %7 = alloca i16, align 2
  store i16* %0, i16** %3, align 8
  store i32 %1, i32* %4, align 4
  store i64 0, i64* %5, align 8
  br label %8

8:                                                ; preds = %11, %2
  %9 = load i32, i32* %4, align 4
  %10 = icmp sgt i32 %9, 1
  br i1 %10, label %11, label %20

11:                                               ; preds = %8
  %12 = load i16*, i16** %3, align 8
  %13 = getelementptr inbounds i16, i16* %12, i32 1
  store i16* %13, i16** %3, align 8
  %14 = load i16, i16* %12, align 2
  %15 = zext i16 %14 to i64
  %16 = load i64, i64* %5, align 8
  %17 = add nsw i64 %16, %15
  store i64 %17, i64* %5, align 8
  %18 = load i32, i32* %4, align 4
  %19 = sub nsw i32 %18, 2
  store i32 %19, i32* %4, align 4
  br label %8

20:                                               ; preds = %8
  %21 = load i32, i32* %4, align 4
  %22 = icmp eq i32 %21, 1
  br i1 %22, label %23, label %32

23:                                               ; preds = %20
  store i16 0, i16* %6, align 2
  %24 = load i16*, i16** %3, align 8
  %25 = bitcast i16* %24 to i8*
  %26 = load i8, i8* %25, align 1
  %27 = bitcast i16* %6 to i8*
  store i8 %26, i8* %27, align 2
  %28 = load i16, i16* %6, align 2
  %29 = zext i16 %28 to i64
  %30 = load i64, i64* %5, align 8
  %31 = add nsw i64 %30, %29
  store i64 %31, i64* %5, align 8
  br label %32

32:                                               ; preds = %23, %20
  %33 = load i64, i64* %5, align 8
  %34 = ashr i64 %33, 16
  %35 = load i64, i64* %5, align 8
  %36 = and i64 %35, 65535
  %37 = add nsw i64 %34, %36
  store i64 %37, i64* %5, align 8
  %38 = load i64, i64* %5, align 8
  %39 = ashr i64 %38, 16
  %40 = load i64, i64* %5, align 8
  %41 = add nsw i64 %40, %39
  store i64 %41, i64* %5, align 8
  %42 = load i64, i64* %5, align 8
  %43 = xor i64 %42, -1
  %44 = trunc i64 %43 to i16
  store i16 %44, i16* %7, align 2
  %45 = load i16, i16* %7, align 2
  ret i16 %45
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
