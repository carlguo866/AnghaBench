; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_841.c_Huff_DecompressPacket.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_841.c_Huff_DecompressPacket.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_MSGLEN = common dso_local global i32 0, align 4
@huffBitPos = common dso_local global i32 0, align 4
@NOT_REFERENCED = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @Huff_DecompressPacket(i8* %0, i32 %1, i32 %2, i32 %3) #0 {
  %5 = alloca i32, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store i8* %0, i8** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32 %2, i32* %8, align 4
  store i32 %3, i32* %9, align 4
  %20 = load i32, i32* @MAX_MSGLEN, align 4
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %11, align 8
  %23 = alloca i8, i64 %21, align 16
  store i64 %21, i64* %12, align 8
  %24 = load i8*, i8** %6, align 8
  %25 = load i32, i32* %7, align 4
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  store i8* %27, i8** %13, align 8
  %28 = load i32, i32* %8, align 4
  %29 = load i32, i32* %7, align 4
  %30 = sub nsw i32 %28, %29
  store i32 %30, i32* %15, align 4
  %31 = load i32, i32* %15, align 4
  %32 = icmp sle i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %4
  %34 = load i32, i32* %8, align 4
  store i32 %34, i32* %5, align 4
  store i32 1, i32* %19, align 4
  br label %114

35:                                               ; preds = %4
  %36 = load i32*, i32** %10, align 8
  %37 = call i32 @Huff_PrepareTree(i32* %36)
  %38 = load i8*, i8** %13, align 8
  %39 = getelementptr inbounds i8, i8* %38, i64 0
  %40 = load i8, i8* %39, align 1
  %41 = zext i8 %40 to i32
  %42 = shl i32 %41, 8
  %43 = load i8*, i8** %13, align 8
  %44 = getelementptr inbounds i8, i8* %43, i64 1
  %45 = load i8, i8* %44, align 1
  %46 = zext i8 %45 to i32
  %47 = add nsw i32 %42, %46
  store i32 %47, i32* %14, align 4
  store i32 16, i32* @huffBitPos, align 4
  %48 = load i32, i32* %14, align 4
  %49 = load i32, i32* %9, align 4
  %50 = load i32, i32* %7, align 4
  %51 = sub nsw i32 %49, %50
  %52 = icmp sgt i32 %48, %51
  br i1 %52, label %53, label %57

53:                                               ; preds = %35
  %54 = load i32, i32* %9, align 4
  %55 = load i32, i32* %7, align 4
  %56 = sub nsw i32 %54, %55
  store i32 %56, i32* %14, align 4
  br label %57

57:                                               ; preds = %53, %35
  store i32 0, i32* %16, align 4
  br label %58

58:                                               ; preds = %104, %57
  %59 = load i32, i32* %16, align 4
  %60 = load i32, i32* %14, align 4
  %61 = icmp slt i32 %59, %60
  br i1 %61, label %62, label %107

62:                                               ; preds = %58
  %63 = load i32, i32* @huffBitPos, align 4
  %64 = ashr i32 %63, 3
  %65 = load i32, i32* %15, align 4
  %66 = icmp sgt i32 %64, %65
  br i1 %66, label %67, label %71

67:                                               ; preds = %62
  %68 = load i32, i32* %16, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds i8, i8* %23, i64 %69
  store i8 0, i8* %70, align 1
  br label %107

71:                                               ; preds = %62
  %72 = load i32*, i32** %10, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 2
  %74 = load i32, i32* %73, align 4
  %75 = load i8*, i8** %13, align 8
  %76 = call i32 @Huff_GetByteFromTree(i32 %74, i8* %75)
  store i32 %76, i32* %18, align 4
  %77 = load i32, i32* %18, align 4
  %78 = load i32, i32* @NOT_REFERENCED, align 4
  %79 = icmp eq i32 %77, %78
  br i1 %79, label %80, label %95

80:                                               ; preds = %71
  store i32 0, i32* %18, align 4
  store i32 0, i32* %17, align 4
  br label %81

81:                                               ; preds = %91, %80
  %82 = load i32, i32* %17, align 4
  %83 = icmp slt i32 %82, 8
  br i1 %83, label %84, label %94

84:                                               ; preds = %81
  %85 = load i32, i32* %18, align 4
  %86 = shl i32 %85, 1
  store i32 %86, i32* %18, align 4
  %87 = load i8*, i8** %13, align 8
  %88 = call i32 @Huff_GetBit(i8* %87)
  %89 = load i32, i32* %18, align 4
  %90 = or i32 %89, %88
  store i32 %90, i32* %18, align 4
  br label %91

91:                                               ; preds = %84
  %92 = load i32, i32* %17, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %17, align 4
  br label %81

94:                                               ; preds = %81
  br label %95

95:                                               ; preds = %94, %71
  %96 = load i32, i32* %18, align 4
  %97 = trunc i32 %96 to i8
  %98 = load i32, i32* %16, align 4
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds i8, i8* %23, i64 %99
  store i8 %97, i8* %100, align 1
  %101 = load i32*, i32** %10, align 8
  %102 = load i32, i32* %18, align 4
  %103 = call i32 @Huff_AddReference(i32* %101, i32 %102)
  br label %104

104:                                              ; preds = %95
  %105 = load i32, i32* %16, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %16, align 4
  br label %58

107:                                              ; preds = %67, %58
  %108 = load i8*, i8** %13, align 8
  %109 = load i32, i32* %14, align 4
  %110 = call i32 @memcpy(i8* %108, i8* %23, i32 %109)
  %111 = load i32, i32* %7, align 4
  %112 = load i32, i32* %14, align 4
  %113 = add nsw i32 %111, %112
  store i32 %113, i32* %5, align 4
  store i32 1, i32* %19, align 4
  br label %114

114:                                              ; preds = %107, %33
  %115 = load i8*, i8** %11, align 8
  call void @llvm.stackrestore(i8* %115)
  %116 = load i32, i32* %5, align 4
  ret i32 %116
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @Huff_PrepareTree(i32*) #2

declare dso_local i32 @Huff_GetByteFromTree(i32, i8*) #2

declare dso_local i32 @Huff_GetBit(i8*) #2

declare dso_local i32 @Huff_AddReference(i32*, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
