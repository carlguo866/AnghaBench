; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22670.c_check_for_iis.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22670.c_check_for_iis.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@ERROR = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [14 x i8] c"Socket error \00", align 1
@IP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [15 x i8] c"Connect Error \00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"GET / HTTP/1.0\0D\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"IIS\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c" Not an IIS server! \0A\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"SEARCH / HTTP/1.0\0D\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"HTTP/1.1 411 Length Required\00", align 1
@.str.7 = private unnamed_addr constant [29 x i8] c"METHOD SEARCH NOT ALLOWED. \0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @check_for_iis() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca %struct.sockaddr_in, align 4
  %4 = alloca [50 x i8], align 16
  store i32 1, i32* %2, align 4
  %5 = load i32, i32* @AF_INET, align 4
  %6 = load i32, i32* @SOCK_STREAM, align 4
  %7 = call i32 @socket(i32 %5, i32 %6, i32 0)
  store i32 %7, i32* %1, align 4
  %8 = load i32, i32* %1, align 4
  %9 = load i32, i32* @ERROR, align 4
  %10 = icmp eq i32 %8, %9
  br i1 %10, label %11, label %14

11:                                               ; preds = %0
  %12 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 @exit(i32 0) #3
  unreachable

14:                                               ; preds = %0
  %15 = call i32 @htons(i32 80)
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 2
  store i32 %15, i32* %16, align 4
  %17 = load i32, i32* @AF_INET, align 4
  %18 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 1
  store i32 %17, i32* %18, align 4
  %19 = load i32, i32* @IP, align 4
  %20 = call i32 @inet_addr(i32 %19)
  %21 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %3, i32 0, i32 0
  %22 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %21, i32 0, i32 0
  store i32 %20, i32* %22, align 4
  %23 = load i32, i32* %1, align 4
  %24 = bitcast %struct.sockaddr_in* %3 to %struct.sockaddr*
  %25 = call i32 @connect(i32 %23, %struct.sockaddr* %24, i32 12)
  %26 = icmp eq i32 %25, -1
  br i1 %26, label %27, label %30

27:                                               ; preds = %14
  %28 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %29 = call i32 @exit(i32 0) #3
  unreachable

30:                                               ; preds = %14
  %31 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %32 = call i32 @strcpy(i8* %31, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0))
  %33 = load i32, i32* %1, align 4
  %34 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %35 = call i32 @send(i32 %33, i8* %34, i32 50, i32 0)
  %36 = load i32, i32* %1, align 4
  %37 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %38 = call i32 @recv(i32 %36, i8* %37, i32 50, i32 0)
  %39 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %40 = call i32* @strstr(i8* %39, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  %41 = icmp eq i32* %40, null
  br i1 %41, label %42, label %44

42:                                               ; preds = %30
  %43 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %44

44:                                               ; preds = %42, %30
  %45 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %46 = call i32 @sprintf(i8* %45, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.5, i64 0, i64 0), i32 40)
  %47 = load i32, i32* %1, align 4
  %48 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %49 = call i32 @send(i32 %47, i8* %48, i32 50, i32 0)
  %50 = load i32, i32* %1, align 4
  %51 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %52 = call i32 @recv(i32 %50, i8* %51, i32 50, i32 0)
  %53 = getelementptr inbounds [50 x i8], [50 x i8]* %4, i64 0, i64 0
  %54 = call i32* @strstr(i8* %53, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0))
  %55 = icmp eq i32* %54, null
  br i1 %55, label %56, label %58

56:                                               ; preds = %44
  %57 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %58

58:                                               ; preds = %56, %44
  %59 = load i32, i32* %2, align 4
  ret i32 %59
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32* @strstr(i8*, i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
