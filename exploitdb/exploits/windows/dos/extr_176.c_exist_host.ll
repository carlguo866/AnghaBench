; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_176.c_exist_host.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_176.c_exist_host.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i8*, i32 }
%struct.sockaddr_in = type { %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.in_addr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @exist_host(i8* %0, i32* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.in_addr, align 4
  store i8* %0, i8** %4, align 8
  store i32* %1, i32** %5, align 8
  %9 = bitcast %struct.sockaddr_in* %7 to i8*
  %10 = call i32 @memset(i8* %9, i32 0, i32 8)
  %11 = bitcast %struct.in_addr* %8 to i8*
  %12 = call i32 @memset(i8* %11, i32 0, i32 4)
  %13 = load i32, i32* @AF_INET, align 4
  %14 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %13, i32* %14, align 4
  %15 = load i8*, i8** %4, align 8
  %16 = call i64 @inet_aton(i8* %15, %struct.in_addr* %8)
  %17 = icmp ne i64 %16, 0
  br i1 %17, label %18, label %23

18:                                               ; preds = %2
  %19 = load i32*, i32** %5, align 8
  %20 = bitcast i32* %19 to i8*
  %21 = bitcast %struct.in_addr* %8 to i8*
  %22 = call i32 @memcpy(i8* %20, i8* %21, i32 4)
  store i32 0, i32* %3, align 4
  br label %44

23:                                               ; preds = %2
  %24 = load i8*, i8** %4, align 8
  %25 = call %struct.hostent* @gethostbyname(i8* %24)
  store %struct.hostent* %25, %struct.hostent** %6, align 8
  %26 = icmp ne %struct.hostent* %25, null
  br i1 %26, label %27, label %43

27:                                               ; preds = %23
  %28 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %29 = bitcast %struct.TYPE_2__* %28 to i8*
  %30 = load %struct.hostent*, %struct.hostent** %6, align 8
  %31 = getelementptr inbounds %struct.hostent, %struct.hostent* %30, i32 0, i32 0
  %32 = load i8*, i8** %31, align 8
  %33 = load %struct.hostent*, %struct.hostent** %6, align 8
  %34 = getelementptr inbounds %struct.hostent, %struct.hostent* %33, i32 0, i32 1
  %35 = load i32, i32* %34, align 8
  %36 = call i32 @memcpy(i8* %29, i8* %32, i32 %35)
  %37 = load i32*, i32** %5, align 8
  %38 = bitcast i32* %37 to i8*
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  %41 = bitcast i32* %40 to i8*
  %42 = call i32 @memcpy(i8* %38, i8* %41, i32 4)
  store i32 0, i32* %3, align 4
  br label %44

43:                                               ; preds = %23
  store i32 1, i32* %3, align 4
  br label %44

44:                                               ; preds = %43, %27, %18
  %45 = load i32, i32* %3, align 4
  ret i32 %45
}

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i64 @inet_aton(i8*, %struct.in_addr*) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
