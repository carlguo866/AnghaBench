; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22290.c_bf1942_rcon_connect.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22290.c_bf1942_rcon_connect.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32* }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@errno = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @bf1942_rcon_connect(i8* %0, i32 %1, i8* %2, i8* %3, i32* %4) #0 {
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca %struct.hostent*, align 8
  %16 = alloca %struct.sockaddr_in, align 4
  %17 = alloca i64, align 8
  %18 = alloca [10 x i8], align 1
  %19 = alloca [20 x i8], align 16
  store i8* %0, i8** %7, align 8
  store i32 %1, i32* %8, align 4
  store i8* %2, i8** %9, align 8
  store i8* %3, i8** %10, align 8
  store i32* %4, i32** %11, align 8
  %20 = load i32, i32* @AF_INET, align 4
  %21 = load i32, i32* @SOCK_STREAM, align 4
  %22 = call i32 @socket(i32 %20, i32 %21, i32 0)
  store i32 %22, i32* %12, align 4
  %23 = icmp slt i32 %22, 0
  br i1 %23, label %24, label %26

24:                                               ; preds = %5
  %25 = load i32, i32* @errno, align 4
  store i32 %25, i32* %6, align 4
  br label %115

26:                                               ; preds = %5
  %27 = load i8*, i8** %7, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %15, align 8
  %29 = icmp ult %struct.hostent* %28, null
  br i1 %29, label %30, label %32

30:                                               ; preds = %26
  %31 = load i32, i32* @errno, align 4
  store i32 %31, i32* %6, align 4
  br label %115

32:                                               ; preds = %26
  %33 = load i32, i32* @AF_INET, align 4
  %34 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 2
  store i32 %33, i32* %34, align 4
  %35 = load i32, i32* %8, align 4
  %36 = call i32 @htons(i32 %35)
  %37 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 1
  store i32 %36, i32* %37, align 4
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %16, i32 0, i32 0
  %39 = load %struct.hostent*, %struct.hostent** %15, align 8
  %40 = getelementptr inbounds %struct.hostent, %struct.hostent* %39, i32 0, i32 0
  %41 = load i32*, i32** %40, align 8
  %42 = load i32, i32* %41, align 4
  %43 = call i32 @memcpy(i32* %38, i32 %42, i32 4)
  %44 = load i32, i32* %12, align 4
  %45 = bitcast %struct.sockaddr_in* %16 to %struct.sockaddr*
  %46 = call i64 @connect(i32 %44, %struct.sockaddr* %45, i32 4)
  %47 = icmp slt i64 %46, 0
  br i1 %47, label %48, label %50

48:                                               ; preds = %32
  %49 = load i32, i32* @errno, align 4
  store i32 %49, i32* %6, align 4
  br label %115

50:                                               ; preds = %32
  %51 = load i32, i32* %12, align 4
  %52 = getelementptr inbounds [10 x i8], [10 x i8]* %18, i64 0, i64 0
  %53 = call i32 @read(i32 %51, i8* %52, i32 10)
  store i32 %53, i32* %13, align 4
  %54 = icmp slt i32 %53, 0
  br i1 %54, label %55, label %57

55:                                               ; preds = %50
  %56 = load i32, i32* @errno, align 4
  store i32 %56, i32* %6, align 4
  br label %115

57:                                               ; preds = %50
  %58 = load i8*, i8** %9, align 8
  %59 = call i32 @strlen(i8* %58)
  %60 = add nsw i32 %59, 1
  %61 = sext i32 %60 to i64
  store i64 %61, i64* %17, align 8
  %62 = load i32, i32* %12, align 4
  %63 = call i64 (i32, ...) @write(i32 %62, i64* %17, i64 8)
  %64 = icmp slt i64 %63, 0
  br i1 %64, label %65, label %67

65:                                               ; preds = %57
  %66 = load i32, i32* @errno, align 4
  store i32 %66, i32* %6, align 4
  br label %115

67:                                               ; preds = %57
  %68 = load i32, i32* %12, align 4
  %69 = load i8*, i8** %9, align 8
  %70 = load i8*, i8** %9, align 8
  %71 = call i32 @strlen(i8* %70)
  %72 = add nsw i32 %71, 1
  %73 = call i64 (i32, ...) @write(i32 %68, i8* %69, i32 %72)
  %74 = icmp slt i64 %73, 0
  br i1 %74, label %75, label %77

75:                                               ; preds = %67
  %76 = load i32, i32* @errno, align 4
  store i32 %76, i32* %6, align 4
  br label %115

77:                                               ; preds = %67
  %78 = load i8*, i8** %10, align 8
  %79 = call i32 @strlen(i8* %78)
  %80 = add nsw i32 %79, 1
  %81 = sext i32 %80 to i64
  store i64 %81, i64* %17, align 8
  %82 = load i32, i32* %12, align 4
  %83 = call i64 (i32, ...) @write(i32 %82, i64* %17, i64 8)
  %84 = icmp slt i64 %83, 0
  br i1 %84, label %85, label %87

85:                                               ; preds = %77
  %86 = load i32, i32* @errno, align 4
  store i32 %86, i32* %6, align 4
  br label %115

87:                                               ; preds = %77
  %88 = load i32, i32* %12, align 4
  %89 = load i8*, i8** %10, align 8
  %90 = load i8*, i8** %10, align 8
  %91 = call i32 @strlen(i8* %90)
  %92 = add nsw i32 %91, 1
  %93 = call i64 (i32, ...) @write(i32 %88, i8* %89, i32 %92)
  %94 = icmp slt i64 %93, 0
  br i1 %94, label %95, label %97

95:                                               ; preds = %87
  %96 = load i32, i32* @errno, align 4
  store i32 %96, i32* %6, align 4
  br label %115

97:                                               ; preds = %87
  %98 = load i32, i32* %12, align 4
  %99 = getelementptr inbounds [20 x i8], [20 x i8]* %19, i64 0, i64 0
  %100 = call i32 @read(i32 %98, i8* %99, i32 20)
  %101 = icmp slt i32 %100, 0
  br i1 %101, label %102, label %104

102:                                              ; preds = %97
  %103 = load i32, i32* @errno, align 4
  store i32 %103, i32* %6, align 4
  br label %115

104:                                              ; preds = %97
  %105 = getelementptr inbounds [20 x i8], [20 x i8]* %19, i64 0, i64 0
  %106 = load i8, i8* %105, align 16
  %107 = sext i8 %106 to i32
  %108 = icmp eq i32 %107, 1
  br i1 %108, label %109, label %112

109:                                              ; preds = %104
  store i32 0, i32* %14, align 4
  %110 = load i32, i32* %12, align 4
  %111 = load i32*, i32** %11, align 8
  store i32 %110, i32* %111, align 4
  br label %113

112:                                              ; preds = %104
  store i32 -1, i32* %14, align 4
  br label %113

113:                                              ; preds = %112, %109
  %114 = load i32, i32* %14, align 4
  store i32 %114, i32* %6, align 4
  br label %115

115:                                              ; preds = %113, %102, %95, %85, %75, %65, %55, %48, %30, %24
  %116 = load i32, i32* %6, align 4
  ret i32 %116
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @read(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i64 @write(i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
