; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_list_netbios_names.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_21746.c_list_netbios_names.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, i8*, i32, i8*, i8*, i64, i32, %struct.TYPE_3__, i32 }
%struct.TYPE_3__ = type { i64 }
%struct.hostent = type { i64 }
%struct.timeval = type { i32, i64 }
%struct.sockaddr = type { i32 }
%struct.TYPE_4__ = type { i32 }

@.str = private unnamed_addr constant [36 x i8] c"Trying to list netbios names on %s\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [28 x i8] c"Could not resolve host: %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [36 x i8] c"Could not setup the UDP socket: %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [2 x i8] c"*\00", align 1
@.str.4 = private unnamed_addr constant [31 x i8] c"Could not send UDP packet: %s\0A\00", align 1
@.str.5 = private unnamed_addr constant [91 x i8] c"The udp read has reached the timeout - try setting the netbios name manually - exiting...\0A\00", align 1
@.str.6 = private unnamed_addr constant [83 x i8] c"No netbios name available for use - you probably won't be able to crash this host\0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"However, you can try setting one manually\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @list_netbios_names(i8* %0, i64 %1, i8* %2, i16 zeroext %3, i32 %4) #0 {
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i16, align 2
  %11 = alloca i32, align 4
  %12 = alloca %struct.sockaddr_in, align 8
  %13 = alloca %struct.sockaddr_in, align 8
  %14 = alloca %struct.hostent*, align 8
  %15 = alloca i32, align 4
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca %struct.timeval, align 8
  store i8* %0, i8** %7, align 8
  store i64 %1, i64* %8, align 8
  store i8* %2, i8** %9, align 8
  store i16 %3, i16* %10, align 2
  store i32 %4, i32* %11, align 4
  %19 = load i8*, i8** %9, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i8* %19)
  %21 = load i8*, i8** %9, align 8
  %22 = call %struct.hostent* @gethostbyname(i8* %21)
  store %struct.hostent* %22, %struct.hostent** %14, align 8
  %23 = load %struct.hostent*, %struct.hostent** %14, align 8
  %24 = icmp eq %struct.hostent* %23, null
  br i1 %24, label %25, label %29

25:                                               ; preds = %5
  %26 = load i32, i32* @stderr, align 4
  %27 = load i8*, i8** %9, align 8
  %28 = call i32 (i32, i8*, ...) @fprintf(i32 %26, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0), i8* %27)
  store i8* null, i8** %6, align 8
  br label %129

29:                                               ; preds = %5
  %30 = call i32 @memset(%struct.sockaddr_in* %13, i32 0, i32 72)
  %31 = load i32, i32* @AF_INET, align 4
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 8
  store i32 %31, i32* %32, align 8
  %33 = load %struct.hostent*, %struct.hostent** %14, align 8
  %34 = getelementptr inbounds %struct.hostent, %struct.hostent* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = inttoptr i64 %35 to i64*
  %37 = load i64, i64* %36, align 8
  %38 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 7
  %39 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %38, i32 0, i32 0
  store i64 %37, i64* %39, align 8
  %40 = load i16, i16* %10, align 2
  %41 = call i32 @htons(i16 zeroext %40)
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %13, i32 0, i32 6
  store i32 %41, i32* %42, align 8
  %43 = load i32, i32* @AF_INET, align 4
  %44 = load i32, i32* @SOCK_DGRAM, align 4
  %45 = call i32 @socket(i32 %43, i32 %44, i32 0)
  store i32 %45, i32* %15, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %52

47:                                               ; preds = %29
  %48 = load i32, i32* @stderr, align 4
  %49 = load i32, i32* @errno, align 4
  %50 = call i8* @strerror(i32 %49)
  %51 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i8* %50)
  store i8* null, i8** %6, align 8
  br label %129

52:                                               ; preds = %29
  %53 = call i32 @memset(%struct.sockaddr_in* %12, i32 0, i32 72)
  %54 = call i8* @bswap16(i32 30)
  %55 = ptrtoint i8* %54 to i64
  %56 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 5
  store i64 %55, i64* %56, align 8
  %57 = call i8* @bswap16(i32 16)
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 4
  store i8* %57, i8** %58, align 8
  %59 = call i8* @bswap16(i32 1)
  %60 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 3
  store i8* %59, i8** %60, align 8
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  %62 = load i32, i32* %61, align 8
  %63 = call i32 @name_mangle(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i32 %62, i32 0)
  %64 = call i8* @bswap16(i32 33)
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i8* %64, i8** %65, align 8
  %66 = call i8* @bswap16(i32 1)
  %67 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  store i8* %66, i8** %67, align 8
  %68 = load i32, i32* %15, align 4
  %69 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %70 = call i32 @sendto(i32 %68, %struct.sockaddr_in* %12, i32 72, i32 0, %struct.sockaddr* %69, i32 72)
  %71 = sext i32 %70 to i64
  %72 = icmp ne i64 %71, 72
  br i1 %72, label %73, label %78

73:                                               ; preds = %52
  %74 = load i32, i32* @stderr, align 4
  %75 = load i32, i32* @errno, align 4
  %76 = call i8* @strerror(i32 %75)
  %77 = call i32 (i32, i8*, ...) @fprintf(i32 %74, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i8* %76)
  store i8* null, i8** %6, align 8
  br label %129

78:                                               ; preds = %52
  %79 = call i32 @FD_ZERO(i32* %17)
  %80 = load i32, i32* %15, align 4
  %81 = call i32 @FD_SET(i32 %80, i32* %17)
  %82 = load i32, i32* %11, align 4
  %83 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 0
  store i32 %82, i32* %83, align 8
  %84 = getelementptr inbounds %struct.timeval, %struct.timeval* %18, i32 0, i32 1
  store i64 0, i64* %84, align 8
  %85 = load i32, i32* %15, align 4
  %86 = add nsw i32 %85, 1
  %87 = call i32 @select(i32 %86, i32* %17, i32* null, i32* null, %struct.timeval* %18)
  %88 = icmp ne i32 %87, 0
  br i1 %88, label %92, label %89

89:                                               ; preds = %78
  %90 = load i32, i32* @stderr, align 4
  %91 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([91 x i8], [91 x i8]* @.str.5, i64 0, i64 0))
  store i8* null, i8** %6, align 8
  br label %129

92:                                               ; preds = %78
  %93 = load i32, i32* %15, align 4
  %94 = load i8*, i8** %7, align 8
  %95 = load i64, i64* %8, align 8
  %96 = call i32 @recvfrom(i32 %93, i8* %94, i64 %95, i32 0, i32* null, i32* null)
  store i32 0, i32* %16, align 4
  br label %97

97:                                               ; preds = %123, %92
  %98 = load i32, i32* %16, align 4
  %99 = load i8*, i8** %7, align 8
  %100 = bitcast i8* %99 to %struct.TYPE_4__*
  %101 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %100, i32 0, i32 0
  %102 = load i32, i32* %101, align 4
  %103 = icmp slt i32 %98, %102
  br i1 %103, label %104, label %126

104:                                              ; preds = %97
  %105 = load i8*, i8** %7, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 4
  %107 = load i32, i32* %16, align 4
  %108 = mul nsw i32 18, %107
  %109 = sext i32 %108 to i64
  %110 = getelementptr inbounds i8, i8* %106, i64 %109
  %111 = getelementptr inbounds i8, i8* %110, i64 15
  %112 = load i8, i8* %111, align 1
  %113 = zext i8 %112 to i32
  %114 = icmp eq i32 %113, 32
  br i1 %114, label %115, label %122

115:                                              ; preds = %104
  %116 = load i8*, i8** %7, align 8
  %117 = getelementptr inbounds i8, i8* %116, i64 4
  %118 = load i32, i32* %16, align 4
  %119 = mul nsw i32 18, %118
  %120 = sext i32 %119 to i64
  %121 = getelementptr inbounds i8, i8* %117, i64 %120
  store i8* %121, i8** %6, align 8
  br label %129

122:                                              ; preds = %104
  br label %123

123:                                              ; preds = %122
  %124 = load i32, i32* %16, align 4
  %125 = add nsw i32 %124, 1
  store i32 %125, i32* %16, align 4
  br label %97

126:                                              ; preds = %97
  %127 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.6, i64 0, i64 0))
  %128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0))
  store i8* null, i8** %6, align 8
  br label %129

129:                                              ; preds = %126, %115, %89, %73, %47, %25
  %130 = load i8*, i8** %6, align 8
  ret i8* %130
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i8* @strerror(i32) #1

declare dso_local i8* @bswap16(i32) #1

declare dso_local i32 @name_mangle(i8*, i32, i32) #1

declare dso_local i32 @sendto(i32, %struct.sockaddr_in*, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i32 @recvfrom(i32, i8*, i64, i32, i32*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
