; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_18956.c_recvdata.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_18956.c_recvdata.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@inBuffer = common dso_local global i32* null, align 8
@conn_socket = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"retval is :%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"first char is: %x\0A\00", align 1
@SOCKET_ERROR = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"Client: recv() failed: error %d.\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"Client: recv() is OK.\0A\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"%c\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @recvdata() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  %3 = load i32*, i32** @inBuffer, align 8
  %4 = call i32 @memset(i32* %3, i32 0, i32 128)
  %5 = load i32, i32* @conn_socket, align 4
  %6 = load i32*, i32** @inBuffer, align 8
  %7 = call i32 @recv(i32 %5, i32* %6, i32 128, i32 0)
  store i32 %7, i32* %2, align 4
  %8 = load i32, i32* %2, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0), i32 %8)
  %10 = load i32*, i32** @inBuffer, align 8
  %11 = getelementptr inbounds i32, i32* %10, i64 0
  %12 = load i32, i32* %11, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i32 %12)
  %14 = load i32, i32* %2, align 4
  %15 = load i32, i32* @SOCKET_ERROR, align 4
  %16 = icmp eq i32 %14, %15
  br i1 %16, label %17, label %24

17:                                               ; preds = %0
  %18 = load i32, i32* @stderr, align 4
  %19 = call i32 (...) @WSAGetLastError()
  %20 = call i32 @fprintf(i32 %18, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* @conn_socket, align 4
  %22 = call i32 @closesocket(i32 %21)
  %23 = call i32 (...) @WSACleanup()
  br label %44

24:                                               ; preds = %0
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %26

26:                                               ; preds = %37, %24
  %27 = load i32, i32* %1, align 4
  %28 = load i32, i32* %2, align 4
  %29 = icmp slt i32 %27, %28
  br i1 %29, label %30, label %40

30:                                               ; preds = %26
  %31 = load i32*, i32** @inBuffer, align 8
  %32 = load i32, i32* %1, align 4
  %33 = sext i32 %32 to i64
  %34 = getelementptr inbounds i32, i32* %31, i64 %33
  %35 = load i32, i32* %34, align 4
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0), i32 %35)
  br label %37

37:                                               ; preds = %30
  %38 = load i32, i32* %1, align 4
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %1, align 4
  br label %26

40:                                               ; preds = %26
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %42 = load i32, i32* @stdout, align 4
  %43 = call i32 @fflush(i32 %42)
  br label %44

44:                                               ; preds = %17, %40
  ret void
}

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i32 @recv(i32, i32*, i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @fprintf(i32, i8*, i32) #1

declare dso_local i32 @WSAGetLastError(...) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @fflush(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
