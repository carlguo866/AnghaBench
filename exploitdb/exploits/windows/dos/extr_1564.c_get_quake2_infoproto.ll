; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1564.c_get_quake2_infoproto.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1564.c_get_quake2_infoproto.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFFSZ = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [54 x i8] c"- request informations and retrieve server protocol:\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"status\00", align 1
@.str.2 = private unnamed_addr constant [72 x i8] c"- the port you have specified seems a query port so I try to query it:\0A\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"\\status\\\00", align 1
@.str.4 = private unnamed_addr constant [46 x i8] c"- relaunch this tool specifying the port %d\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [99 x i8] c"- no server protocol specified in the server's reply.\0A  I try to retrieve it with a fast scanning\0A\00", align 1
@MINPROTO = common dso_local global i32 0, align 4
@MAXPROTO = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [20 x i8] c"- try protocol %d: \00", align 1
@.str.7 = private unnamed_addr constant [8 x i8] c"info %d\00", align 1
@.str.8 = private unnamed_addr constant [65 x i8] c"- no reply from the server, I try to get protocol from challenge\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"getchallenge\0A\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.12 = private unnamed_addr constant [44 x i8] c"- no protocol in the reply from the server\0A\00", align 1
@.str.13 = private unnamed_addr constant [6 x i8] c"wrong\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"%s\0A\00", align 1
@.str.15 = private unnamed_addr constant [65 x i8] c"\0AError: I have not been able to retrieve the server's protocol\0A\0A\00", align 1
@stdout = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @get_quake2_infoproto(i32 %0, i32* %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32* %1, i32** %4, align 8
  %13 = load i32, i32* @BUFFSZ, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %8, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %9, align 8
  store i32 35, i32* %7, align 4
  %17 = getelementptr inbounds i8, i8* %16, i64 4
  store i8* %17, i8** %10, align 8
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str, i64 0, i64 0))
  %19 = load i32, i32* @AF_INET, align 4
  %20 = load i32, i32* @SOCK_DGRAM, align 4
  %21 = load i32, i32* @IPPROTO_UDP, align 4
  %22 = call i32 @socket(i32 %19, i32 %20, i32 %21)
  store i32 %22, i32* %5, align 4
  %23 = load i32, i32* %5, align 4
  %24 = icmp slt i32 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %2
  %26 = call i32 (...) @std_err()
  br label %27

27:                                               ; preds = %25, %2
  %28 = trunc i64 %14 to i32
  %29 = call i32 (i32, i32, i32, i8*, i32, i8*, ...) @quake2_build_pck(i32 -1, i32 0, i32 0, i8* %16, i32 %28, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 %29, i32* %6, align 4
  %30 = load i32, i32* %5, align 4
  %31 = load i32, i32* %6, align 4
  %32 = trunc i64 %14 to i32
  %33 = call i32 @send_recv(i32 %30, i8* %16, i32 %31, i8* %16, i32 %32, i32 1)
  store i32 %33, i32* %6, align 4
  %34 = load i8, i8* %16, align 16
  %35 = sext i8 %34 to i32
  %36 = icmp eq i32 %35, 92
  br i1 %36, label %37, label %52

37:                                               ; preds = %27
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.2, i64 0, i64 0))
  %39 = load i32, i32* %5, align 4
  %40 = trunc i64 %14 to i32
  %41 = call i32 @send_recv(i32 %39, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i32 8, i8* %16, i32 %40, i32 1)
  store i32 %41, i32* %6, align 4
  %42 = call i32 @info_proto(i8* %16, i32 0)
  store i32 %42, i32* %6, align 4
  %43 = load i32, i32* %6, align 4
  %44 = icmp sgt i32 %43, 0
  br i1 %44, label %45, label %48

45:                                               ; preds = %37
  %46 = load i32, i32* %6, align 4
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.4, i64 0, i64 0), i32 %46)
  br label %48

48:                                               ; preds = %45, %37
  %49 = load i32, i32* %5, align 4
  %50 = call i32 @close(i32 %49)
  %51 = call i32 @exit(i32 1) #4
  unreachable

52:                                               ; preds = %27
  %53 = load i8*, i8** %10, align 8
  %54 = call i32 @info_proto(i8* %53, i32 1)
  store i32 %54, i32* %7, align 4
  %55 = load i32, i32* %3, align 4
  %56 = icmp ne i32 %55, 0
  br i1 %56, label %61, label %57

57:                                               ; preds = %52
  %58 = load i32*, i32** %4, align 8
  %59 = load i32, i32* %58, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %61, label %62

61:                                               ; preds = %57, %52
  store i32 1, i32* %12, align 4
  br label %131

62:                                               ; preds = %57
  %63 = load i32, i32* %7, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %126

65:                                               ; preds = %62
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([99 x i8], [99 x i8]* @.str.5, i64 0, i64 0))
  %67 = load i32, i32* @MINPROTO, align 4
  store i32 %67, i32* %7, align 4
  br label %68

68:                                               ; preds = %113, %65
  %69 = load i32, i32* %7, align 4
  %70 = load i32, i32* @MAXPROTO, align 4
  %71 = icmp slt i32 %69, %70
  br i1 %71, label %72, label %116

72:                                               ; preds = %68
  %73 = load i32, i32* %7, align 4
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %73)
  %75 = trunc i64 %14 to i32
  %76 = load i32, i32* %7, align 4
  %77 = call i32 (i32, i32, i32, i8*, i32, i8*, ...) @quake2_build_pck(i32 -1, i32 0, i32 0, i8* %16, i32 %75, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.7, i64 0, i64 0), i32 %76)
  store i32 %77, i32* %6, align 4
  %78 = load i32, i32* %5, align 4
  %79 = load i32, i32* %6, align 4
  %80 = trunc i64 %14 to i32
  %81 = call i32 @send_recv(i32 %78, i8* %16, i32 %79, i8* %16, i32 %80, i32 0)
  store i32 %81, i32* %6, align 4
  %82 = load i32, i32* %6, align 4
  %83 = icmp slt i32 %82, 0
  br i1 %83, label %84, label %105

84:                                               ; preds = %72
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.8, i64 0, i64 0))
  %86 = trunc i64 %14 to i32
  %87 = call i32 (i32, i32, i32, i8*, i32, i8*, ...) @quake2_build_pck(i32 -1, i32 0, i32 0, i8* %16, i32 %86, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0))
  store i32 %87, i32* %6, align 4
  %88 = load i32, i32* %5, align 4
  %89 = load i32, i32* %6, align 4
  %90 = trunc i64 %14 to i32
  %91 = call i32 @send_recv(i32 %88, i8* %16, i32 %89, i8* %16, i32 %90, i32 1)
  store i32 %91, i32* %6, align 4
  %92 = load i8*, i8** %10, align 8
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0), i8* %92)
  %94 = load i8*, i8** %10, align 8
  %95 = call i8* @strchr(i8* %94, i8 signext 61)
  store i8* %95, i8** %11, align 8
  %96 = load i8*, i8** %11, align 8
  %97 = icmp ne i8* %96, null
  br i1 %97, label %98, label %102

98:                                               ; preds = %84
  %99 = load i8*, i8** %11, align 8
  %100 = getelementptr inbounds i8, i8* %99, i64 1
  %101 = call i32 @sscanf(i8* %100, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i32* %7)
  br label %104

102:                                              ; preds = %84
  %103 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.12, i64 0, i64 0))
  store i32 35, i32* %7, align 4
  br label %104

104:                                              ; preds = %102, %98
  br label %116

105:                                              ; preds = %72
  %106 = load i8*, i8** %10, align 8
  %107 = call i32 @stristr(i8* %106, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0))
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %110, label %109

109:                                              ; preds = %105
  br label %116

110:                                              ; preds = %105
  %111 = load i8*, i8** %10, align 8
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0), i8* %111)
  br label %113

113:                                              ; preds = %110
  %114 = load i32, i32* %7, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %7, align 4
  br label %68

116:                                              ; preds = %109, %104, %68
  %117 = load i32, i32* %7, align 4
  %118 = load i32, i32* @MAXPROTO, align 4
  %119 = icmp eq i32 %117, %118
  br i1 %119, label %120, label %123

120:                                              ; preds = %116
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.15, i64 0, i64 0))
  %122 = call i32 @exit(i32 1) #4
  unreachable

123:                                              ; preds = %116
  %124 = load i32, i32* @stdout, align 4
  %125 = call i32 @fputc(i8 signext 10, i32 %124)
  br label %126

126:                                              ; preds = %123, %62
  %127 = load i32, i32* %5, align 4
  %128 = call i32 @close(i32 %127)
  %129 = load i32, i32* %7, align 4
  %130 = load i32*, i32** %4, align 8
  store i32 %129, i32* %130, align 4
  store i32 0, i32* %12, align 4
  br label %131

131:                                              ; preds = %126, %61
  %132 = load i8*, i8** %8, align 8
  call void @llvm.stackrestore(i8* %132)
  %133 = load i32, i32* %12, align 4
  switch i32 %133, label %135 [
    i32 0, label %134
    i32 1, label %134
  ]

134:                                              ; preds = %131, %131
  ret void

135:                                              ; preds = %131
  unreachable
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @std_err(...) #2

declare dso_local i32 @quake2_build_pck(i32, i32, i32, i8*, i32, i8*, ...) #2

declare dso_local i32 @send_recv(i32, i8*, i32, i8*, i32, i32) #2

declare dso_local i32 @info_proto(i8*, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i8* @strchr(i8*, i8 signext) #2

declare dso_local i32 @sscanf(i8*, i8*, i32*) #2

declare dso_local i32 @stristr(i8*, i8*) #2

declare dso_local i32 @fputc(i8 signext, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
