; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_16023.c_KernelGetModuleBase.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_16023.c_KernelGetModuleBase.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32*, i64, i64 }
%struct.TYPE_3__ = type { i32, i32 }

@STATUS_INSUFFICIENT_RESOURCES = common dso_local global i32 0, align 4
@SystemModuleInfo = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @KernelGetModuleBase(i32 %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.TYPE_4__*, align 8
  %9 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i32* null, i32** %4, align 8
  store i32* null, i32** %5, align 8
  %10 = load i32, i32* @STATUS_INSUFFICIENT_RESOURCES, align 4
  store i32 %10, i32* %6, align 4
  store i32 0, i32* %7, align 4
  %11 = load i32, i32* @SystemModuleInfo, align 4
  %12 = call i32 @ZwQuerySystemInformation(i32 %11, i32* %7, i32 0, i32* %7)
  store i32 %12, i32* %6, align 4
  %13 = load i32, i32* %7, align 4
  %14 = icmp ne i32 %13, 0
  br i1 %14, label %16, label %15

15:                                               ; preds = %1
  store i32* null, i32** %2, align 8
  br label %88

16:                                               ; preds = %1
  %17 = load i32, i32* %7, align 4
  %18 = mul nsw i32 %17, 2
  %19 = call i64 @malloc(i32 %18)
  %20 = inttoptr i64 %19 to i32*
  store i32* %20, i32** %5, align 8
  %21 = load i32*, i32** %5, align 8
  %22 = icmp ne i32* %21, null
  br i1 %22, label %24, label %23

23:                                               ; preds = %16
  store i32* null, i32** %2, align 8
  br label %88

24:                                               ; preds = %16
  %25 = load i32*, i32** %5, align 8
  %26 = load i32, i32* %7, align 4
  %27 = mul nsw i32 %26, 2
  %28 = call i32 @memset(i32* %25, i32 0, i32 %27)
  %29 = load i32, i32* @SystemModuleInfo, align 4
  %30 = load i32*, i32** %5, align 8
  %31 = load i32, i32* %7, align 4
  %32 = mul nsw i32 %31, 2
  %33 = call i32 @ZwQuerySystemInformation(i32 %29, i32* %30, i32 %32, i32* %7)
  store i32 %33, i32* %6, align 4
  %34 = load i32, i32* %6, align 4
  %35 = call i64 @NT_SUCCESS(i32 %34)
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %37, label %80

37:                                               ; preds = %24
  %38 = load i32*, i32** %5, align 8
  %39 = bitcast i32* %38 to %struct.TYPE_3__*
  %40 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %39, i32 0, i32 1
  %41 = load i32, i32* %40, align 4
  %42 = sext i32 %41 to i64
  %43 = inttoptr i64 %42 to %struct.TYPE_4__*
  store %struct.TYPE_4__* %43, %struct.TYPE_4__** %8, align 8
  store i32 0, i32* %9, align 4
  br label %44

44:                                               ; preds = %76, %37
  %45 = load i32, i32* %9, align 4
  %46 = load i32*, i32** %5, align 8
  %47 = bitcast i32* %46 to %struct.TYPE_3__*
  %48 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %47, i32 0, i32 0
  %49 = load i32, i32* %48, align 4
  %50 = icmp slt i32 %45, %49
  br i1 %50, label %51, label %79

51:                                               ; preds = %44
  %52 = load %struct.TYPE_4__*, %struct.TYPE_4__** %8, align 8
  %53 = load i32, i32* %9, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %52, i64 %54
  %56 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %55, i32 0, i32 2
  %57 = load i64, i64* %56, align 8
  %58 = load %struct.TYPE_4__*, %struct.TYPE_4__** %8, align 8
  %59 = load i32, i32* %9, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %58, i64 %60
  %62 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %61, i32 0, i32 1
  %63 = load i64, i64* %62, align 8
  %64 = add nsw i64 %57, %63
  %65 = load i32, i32* %3, align 4
  %66 = call i64 @_stricmp(i64 %64, i32 %65)
  %67 = icmp eq i64 %66, 0
  br i1 %67, label %68, label %75

68:                                               ; preds = %51
  %69 = load %struct.TYPE_4__*, %struct.TYPE_4__** %8, align 8
  %70 = load i32, i32* %9, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %69, i64 %71
  %73 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %72, i32 0, i32 0
  %74 = load i32*, i32** %73, align 8
  store i32* %74, i32** %4, align 8
  br label %79

75:                                               ; preds = %51
  br label %76

76:                                               ; preds = %75
  %77 = load i32, i32* %9, align 4
  %78 = add nsw i32 %77, 1
  store i32 %78, i32* %9, align 4
  br label %44

79:                                               ; preds = %68, %44
  br label %80

80:                                               ; preds = %79, %24
  %81 = load i32*, i32** %5, align 8
  %82 = icmp ne i32* %81, null
  br i1 %82, label %83, label %86

83:                                               ; preds = %80
  %84 = load i32*, i32** %5, align 8
  %85 = call i32 @free(i32* %84)
  br label %86

86:                                               ; preds = %83, %80
  %87 = load i32*, i32** %4, align 8
  store i32* %87, i32** %2, align 8
  br label %88

88:                                               ; preds = %86, %23, %15
  %89 = load i32*, i32** %2, align 8
  ret i32* %89
}

declare dso_local i32 @ZwQuerySystemInformation(i32, i32*, i32, i32*) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i64 @NT_SUCCESS(i32) #1

declare dso_local i64 @_stricmp(i64, i32) #1

declare dso_local i32 @free(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
