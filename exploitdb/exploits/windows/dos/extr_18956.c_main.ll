; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_18956.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_18956.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [10 x i8] c"localhost\00", align 1
@DEFAULT_PORT = common dso_local global i16 0, align 2
@DEFAULT_PROTO = common dso_local global i32 0, align 4
@wsaData = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [35 x i8] c"WSAStartup() failed with error %d\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@conn_socket = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [40 x i8] c"Client: Error Opening socket: Error %d\0A\00", align 1
@SOCKET_ERROR = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [30 x i8] c"Client: connect() failed: %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i16, align 2
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca %struct.sockaddr_in, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0), i8** %6, align 8
  %15 = load i16, i16* @DEFAULT_PORT, align 2
  store i16 %15, i16* %7, align 2
  store i32 -1, i32* %10, align 4
  %16 = load i32, i32* @DEFAULT_PROTO, align 4
  store i32 %16, i32* %13, align 4
  %17 = load i32, i32* %4, align 4
  %18 = icmp slt i32 %17, 3
  br i1 %18, label %19, label %21

19:                                               ; preds = %2
  %20 = call i32 (...) @Usage()
  br label %21

21:                                               ; preds = %19, %2
  %22 = call i32 @WSAStartup(i32 514, i32* @wsaData)
  store i32 %22, i32* %11, align 4
  %23 = icmp ne i32 %22, 0
  br i1 %23, label %24, label %29

24:                                               ; preds = %21
  %25 = load i32, i32* @stderr, align 4
  %26 = load i32, i32* %11, align 4
  %27 = call i32 @fprintf(i32 %25, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0), i32 %26)
  %28 = call i32 (...) @WSACleanup()
  store i32 -1, i32* %3, align 4
  br label %73

29:                                               ; preds = %21
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 2
  %32 = load i8*, i8** %31, align 8
  %33 = call zeroext i16 @atoi(i8* %32)
  store i16 %33, i16* %7, align 2
  %34 = call i32 @memset(%struct.sockaddr_in* %14, i32 0, i32 12)
  %35 = load i8**, i8*** %5, align 8
  %36 = getelementptr inbounds i8*, i8** %35, i64 1
  %37 = load i8*, i8** %36, align 8
  %38 = call i32 @inet_addr(i8* %37)
  %39 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 2
  %40 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %39, i32 0, i32 0
  store i32 %38, i32* %40, align 4
  %41 = load i32, i32* @AF_INET, align 4
  %42 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 1
  store i32 %41, i32* %42, align 4
  %43 = load i16, i16* %7, align 2
  %44 = call i32 @htons(i16 zeroext %43)
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %14, i32 0, i32 0
  store i32 %44, i32* %45, align 4
  %46 = load i32, i32* @AF_INET, align 4
  %47 = load i32, i32* %13, align 4
  %48 = call i64 @socket(i32 %46, i32 %47, i32 0)
  store i64 %48, i64* @conn_socket, align 8
  %49 = load i64, i64* @conn_socket, align 8
  %50 = icmp slt i64 %49, 0
  br i1 %50, label %51, label %56

51:                                               ; preds = %29
  %52 = load i32, i32* @stderr, align 4
  %53 = call i32 (...) @WSAGetLastError()
  %54 = call i32 @fprintf(i32 %52, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.2, i64 0, i64 0), i32 %53)
  %55 = call i32 (...) @WSACleanup()
  store i32 -1, i32* %3, align 4
  br label %73

56:                                               ; preds = %29
  %57 = load i64, i64* @conn_socket, align 8
  %58 = bitcast %struct.sockaddr_in* %14 to %struct.sockaddr*
  %59 = call i64 @connect(i64 %57, %struct.sockaddr* %58, i32 12)
  %60 = load i64, i64* @SOCKET_ERROR, align 8
  %61 = icmp eq i64 %59, %60
  br i1 %61, label %62, label %67

62:                                               ; preds = %56
  %63 = load i32, i32* @stderr, align 4
  %64 = call i32 (...) @WSAGetLastError()
  %65 = call i32 @fprintf(i32 %63, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 %64)
  %66 = call i32 (...) @WSACleanup()
  store i32 -1, i32* %3, align 4
  br label %73

67:                                               ; preds = %56
  %68 = call i32 (...) @senddata()
  %69 = call i32 (...) @recvdata()
  %70 = load i64, i64* @conn_socket, align 8
  %71 = call i32 @closesocket(i64 %70)
  %72 = call i32 (...) @WSACleanup()
  store i32 0, i32* %3, align 4
  br label %73

73:                                               ; preds = %67, %62, %51, %24
  %74 = load i32, i32* %3, align 4
  ret i32 %74
}

declare dso_local i32 @Usage(...) #1

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @fprintf(i32, i8*, i32) #1

declare dso_local i32 @WSACleanup(...) #1

declare dso_local zeroext i16 @atoi(i8*) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i16 zeroext) #1

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @WSAGetLastError(...) #1

declare dso_local i64 @connect(i64, %struct.sockaddr*, i32) #1

declare dso_local i32 @senddata(...) #1

declare dso_local i32 @recvdata(...) #1

declare dso_local i32 @closesocket(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
