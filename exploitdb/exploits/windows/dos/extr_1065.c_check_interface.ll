; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1065.c_check_interface.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_1065.c_check_interface.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.check_interface.wks_uuid = private unnamed_addr constant [17 x i8] c"\98\D0\FFk\12\A1\106\983F\C3\F8~4Z\00", align 16
@__const.check_interface.srv_uuid = private unnamed_addr constant [17 x i8] c"\C8O2Kp\16\D3\01\12xZG\BFn\E1\88\00", align 16
@__const.check_interface.spl_uuid = private unnamed_addr constant [17 x i8] c"xV4\124\12\CD\AB\EF\00\01#Eg\89\AB\00", align 16
@__const.check_interface.wrg_uuid = private unnamed_addr constant [17 x i8] c"\01\D0\8C3D\22\F11\AA\AA\90\008\00\10\03\00", align 16
@.str = private unnamed_addr constant [56 x i8] c"there is/are %d invalid byte(s) in the interface UUID!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @check_interface(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca [17 x i8], align 16
  %12 = alloca [17 x i8], align 16
  %13 = alloca [17 x i8], align 16
  %14 = alloca [17 x i8], align 16
  store i8* %0, i8** %3, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  %15 = bitcast [17 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %15, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.check_interface.wks_uuid, i32 0, i32 0), i64 17, i1 false)
  %16 = bitcast [17 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %16, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.check_interface.srv_uuid, i32 0, i32 0), i64 17, i1 false)
  %17 = bitcast [17 x i8]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.check_interface.spl_uuid, i32 0, i32 0), i64 17, i1 false)
  %18 = bitcast [17 x i8]* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 16 getelementptr inbounds ([17 x i8], [17 x i8]* @__const.check_interface.wrg_uuid, i32 0, i32 0), i64 17, i1 false)
  store i32 0, i32* %4, align 4
  br label %19

19:                                               ; preds = %186, %1
  %20 = load i32, i32* %4, align 4
  %21 = icmp slt i32 %20, 16
  br i1 %21, label %22, label %189

22:                                               ; preds = %19
  store i32 0, i32* %5, align 4
  %23 = load i8*, i8** %3, align 8
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 120, %24
  %26 = sext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %23, i64 %26
  %28 = load i8, i8* %27, align 1
  %29 = sext i8 %28 to i32
  %30 = icmp slt i32 %29, 0
  br i1 %30, label %31, label %110

31:                                               ; preds = %22
  %32 = load i8*, i8** %3, align 8
  %33 = load i32, i32* %4, align 4
  %34 = add nsw i32 120, %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds i8, i8* %32, i64 %35
  %37 = load i8, i8* %36, align 1
  %38 = sext i8 %37 to i32
  %39 = add nsw i32 %38, 256
  %40 = load i32, i32* %4, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [17 x i8], [17 x i8]* %11, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = icmp eq i32 %39, %44
  br i1 %45, label %46, label %49

46:                                               ; preds = %31
  %47 = load i32, i32* %6, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %6, align 4
  store i32 1, i32* %5, align 4
  br label %49

49:                                               ; preds = %46, %31
  %50 = load i8*, i8** %3, align 8
  %51 = load i32, i32* %4, align 4
  %52 = add nsw i32 120, %51
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds i8, i8* %50, i64 %53
  %55 = load i8, i8* %54, align 1
  %56 = sext i8 %55 to i32
  %57 = add nsw i32 %56, 256
  %58 = load i32, i32* %4, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds [17 x i8], [17 x i8]* %12, i64 0, i64 %59
  %61 = load i8, i8* %60, align 1
  %62 = zext i8 %61 to i32
  %63 = icmp eq i32 %57, %62
  br i1 %63, label %64, label %67

64:                                               ; preds = %49
  %65 = load i32, i32* %7, align 4
  %66 = add nsw i32 %65, 1
  store i32 %66, i32* %7, align 4
  store i32 1, i32* %5, align 4
  br label %67

67:                                               ; preds = %64, %49
  %68 = load i8*, i8** %3, align 8
  %69 = load i32, i32* %4, align 4
  %70 = add nsw i32 120, %69
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i8, i8* %68, i64 %71
  %73 = load i8, i8* %72, align 1
  %74 = sext i8 %73 to i32
  %75 = add nsw i32 %74, 256
  %76 = load i32, i32* %4, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds [17 x i8], [17 x i8]* %13, i64 0, i64 %77
  %79 = load i8, i8* %78, align 1
  %80 = zext i8 %79 to i32
  %81 = icmp eq i32 %75, %80
  br i1 %81, label %82, label %85

82:                                               ; preds = %67
  %83 = load i32, i32* %8, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %8, align 4
  store i32 1, i32* %5, align 4
  br label %85

85:                                               ; preds = %82, %67
  %86 = load i8*, i8** %3, align 8
  %87 = load i32, i32* %4, align 4
  %88 = add nsw i32 120, %87
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds i8, i8* %86, i64 %89
  %91 = load i8, i8* %90, align 1
  %92 = sext i8 %91 to i32
  %93 = add nsw i32 %92, 256
  %94 = load i32, i32* %4, align 4
  %95 = sext i32 %94 to i64
  %96 = getelementptr inbounds [17 x i8], [17 x i8]* %14, i64 0, i64 %95
  %97 = load i8, i8* %96, align 1
  %98 = zext i8 %97 to i32
  %99 = icmp eq i32 %93, %98
  br i1 %99, label %100, label %103

100:                                              ; preds = %85
  %101 = load i32, i32* %9, align 4
  %102 = add nsw i32 %101, 1
  store i32 %102, i32* %9, align 4
  store i32 1, i32* %5, align 4
  br label %103

103:                                              ; preds = %100, %85
  %104 = load i32, i32* %5, align 4
  %105 = icmp eq i32 %104, 0
  br i1 %105, label %106, label %109

106:                                              ; preds = %103
  %107 = load i32, i32* %10, align 4
  %108 = add nsw i32 %107, 1
  store i32 %108, i32* %10, align 4
  br label %109

109:                                              ; preds = %106, %103
  br label %185

110:                                              ; preds = %22
  %111 = load i8*, i8** %3, align 8
  %112 = load i32, i32* %4, align 4
  %113 = add nsw i32 120, %112
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8, i8* %111, i64 %114
  %116 = load i8, i8* %115, align 1
  %117 = sext i8 %116 to i32
  %118 = load i32, i32* %4, align 4
  %119 = sext i32 %118 to i64
  %120 = getelementptr inbounds [17 x i8], [17 x i8]* %11, i64 0, i64 %119
  %121 = load i8, i8* %120, align 1
  %122 = zext i8 %121 to i32
  %123 = icmp eq i32 %117, %122
  br i1 %123, label %124, label %127

124:                                              ; preds = %110
  %125 = load i32, i32* %6, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %6, align 4
  store i32 1, i32* %5, align 4
  br label %127

127:                                              ; preds = %124, %110
  %128 = load i8*, i8** %3, align 8
  %129 = load i32, i32* %4, align 4
  %130 = add nsw i32 120, %129
  %131 = sext i32 %130 to i64
  %132 = getelementptr inbounds i8, i8* %128, i64 %131
  %133 = load i8, i8* %132, align 1
  %134 = sext i8 %133 to i32
  %135 = load i32, i32* %4, align 4
  %136 = sext i32 %135 to i64
  %137 = getelementptr inbounds [17 x i8], [17 x i8]* %12, i64 0, i64 %136
  %138 = load i8, i8* %137, align 1
  %139 = zext i8 %138 to i32
  %140 = icmp eq i32 %134, %139
  br i1 %140, label %141, label %144

141:                                              ; preds = %127
  %142 = load i32, i32* %7, align 4
  %143 = add nsw i32 %142, 1
  store i32 %143, i32* %7, align 4
  store i32 1, i32* %5, align 4
  br label %144

144:                                              ; preds = %141, %127
  %145 = load i8*, i8** %3, align 8
  %146 = load i32, i32* %4, align 4
  %147 = add nsw i32 120, %146
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i8, i8* %145, i64 %148
  %150 = load i8, i8* %149, align 1
  %151 = sext i8 %150 to i32
  %152 = load i32, i32* %4, align 4
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds [17 x i8], [17 x i8]* %13, i64 0, i64 %153
  %155 = load i8, i8* %154, align 1
  %156 = zext i8 %155 to i32
  %157 = icmp eq i32 %151, %156
  br i1 %157, label %158, label %161

158:                                              ; preds = %144
  %159 = load i32, i32* %8, align 4
  %160 = add nsw i32 %159, 1
  store i32 %160, i32* %8, align 4
  store i32 1, i32* %5, align 4
  br label %161

161:                                              ; preds = %158, %144
  %162 = load i8*, i8** %3, align 8
  %163 = load i32, i32* %4, align 4
  %164 = add nsw i32 120, %163
  %165 = sext i32 %164 to i64
  %166 = getelementptr inbounds i8, i8* %162, i64 %165
  %167 = load i8, i8* %166, align 1
  %168 = sext i8 %167 to i32
  %169 = load i32, i32* %4, align 4
  %170 = sext i32 %169 to i64
  %171 = getelementptr inbounds [17 x i8], [17 x i8]* %14, i64 0, i64 %170
  %172 = load i8, i8* %171, align 1
  %173 = zext i8 %172 to i32
  %174 = icmp eq i32 %168, %173
  br i1 %174, label %175, label %178

175:                                              ; preds = %161
  %176 = load i32, i32* %9, align 4
  %177 = add nsw i32 %176, 1
  store i32 %177, i32* %9, align 4
  store i32 1, i32* %5, align 4
  br label %178

178:                                              ; preds = %175, %161
  %179 = load i32, i32* %5, align 4
  %180 = icmp eq i32 %179, 0
  br i1 %180, label %181, label %184

181:                                              ; preds = %178
  %182 = load i32, i32* %10, align 4
  %183 = add nsw i32 %182, 1
  store i32 %183, i32* %10, align 4
  br label %184

184:                                              ; preds = %181, %178
  br label %185

185:                                              ; preds = %184, %109
  br label %186

186:                                              ; preds = %185
  %187 = load i32, i32* %4, align 4
  %188 = add nsw i32 %187, 1
  store i32 %188, i32* %4, align 4
  br label %19

189:                                              ; preds = %19
  %190 = load i32, i32* %6, align 4
  %191 = icmp eq i32 %190, 16
  br i1 %191, label %192, label %193

192:                                              ; preds = %189
  store i32 0, i32* %2, align 4
  br label %208

193:                                              ; preds = %189
  %194 = load i32, i32* %7, align 4
  %195 = icmp eq i32 %194, 16
  br i1 %195, label %196, label %197

196:                                              ; preds = %193
  store i32 1, i32* %2, align 4
  br label %208

197:                                              ; preds = %193
  %198 = load i32, i32* %8, align 4
  %199 = icmp eq i32 %198, 16
  br i1 %199, label %200, label %201

200:                                              ; preds = %197
  store i32 2, i32* %2, align 4
  br label %208

201:                                              ; preds = %197
  %202 = load i32, i32* %9, align 4
  %203 = icmp eq i32 %202, 16
  br i1 %203, label %204, label %205

204:                                              ; preds = %201
  store i32 3, i32* %2, align 4
  br label %208

205:                                              ; preds = %201
  %206 = load i32, i32* %10, align 4
  %207 = call i32 @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str, i64 0, i64 0), i32 %206)
  store i32 -1, i32* %2, align 4
  br label %208

208:                                              ; preds = %205, %204, %200, %196, %192
  %209 = load i32, i32* %2, align 4
  ret i32 %209
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
