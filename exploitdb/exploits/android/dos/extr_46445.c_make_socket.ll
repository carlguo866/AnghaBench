; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/android/dos/extr_46445.c_make_socket.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/android/dos/extr_46445.c_make_socket.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.addrinfo = type { i32, i32, i32, i32, i32, %struct.addrinfo* }

@AF_UNSPEC = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"getaddrinfo: %s\0A\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"No connection could be made\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"[Connected -> %s:%s]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @make_socket(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca %struct.addrinfo, align 8
  %6 = alloca %struct.addrinfo*, align 8
  %7 = alloca %struct.addrinfo*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = call i32 @memset(%struct.addrinfo* %5, i32 0, i32 32)
  %11 = load i32, i32* @AF_UNSPEC, align 4
  %12 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %5, i32 0, i32 4
  store i32 %11, i32* %12, align 8
  %13 = load i32, i32* @SOCK_STREAM, align 4
  %14 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %5, i32 0, i32 3
  store i32 %13, i32* %14, align 4
  %15 = load i8*, i8** %3, align 8
  %16 = load i8*, i8** %4, align 8
  %17 = call i32 @getaddrinfo(i8* %15, i8* %16, %struct.addrinfo* %5, %struct.addrinfo** %6)
  store i32 %17, i32* %9, align 4
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %25

19:                                               ; preds = %2
  %20 = load i32, i32* @stderr, align 4
  %21 = load i32, i32* %9, align 4
  %22 = call i8* @gai_strerror(i32 %21)
  %23 = call i32 (i32, i8*, ...) @fprintf(i32 %20, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i8* %22)
  %24 = call i32 @exit(i32 0) #3
  unreachable

25:                                               ; preds = %2
  %26 = load %struct.addrinfo*, %struct.addrinfo** %6, align 8
  store %struct.addrinfo* %26, %struct.addrinfo** %7, align 8
  br label %27

27:                                               ; preds = %57, %25
  %28 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %29 = icmp ne %struct.addrinfo* %28, null
  br i1 %29, label %30, label %61

30:                                               ; preds = %27
  %31 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %32 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %31, i32 0, i32 4
  %33 = load i32, i32* %32, align 8
  %34 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %35 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %34, i32 0, i32 3
  %36 = load i32, i32* %35, align 4
  %37 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %38 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %37, i32 0, i32 2
  %39 = load i32, i32* %38, align 8
  %40 = call i32 @socket(i32 %33, i32 %36, i32 %39)
  store i32 %40, i32* %8, align 4
  %41 = icmp eq i32 %40, -1
  br i1 %41, label %42, label %43

42:                                               ; preds = %30
  br label %57

43:                                               ; preds = %30
  %44 = load i32, i32* %8, align 4
  %45 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %46 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %45, i32 0, i32 1
  %47 = load i32, i32* %46, align 4
  %48 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %49 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %48, i32 0, i32 0
  %50 = load i32, i32* %49, align 8
  %51 = call i32 @connect(i32 %44, i32 %47, i32 %50)
  %52 = icmp eq i32 %51, -1
  br i1 %52, label %53, label %56

53:                                               ; preds = %43
  %54 = load i32, i32* %8, align 4
  %55 = call i32 @close(i32 %54)
  br label %57

56:                                               ; preds = %43
  br label %61

57:                                               ; preds = %53, %42
  %58 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %59 = getelementptr inbounds %struct.addrinfo, %struct.addrinfo* %58, i32 0, i32 5
  %60 = load %struct.addrinfo*, %struct.addrinfo** %59, align 8
  store %struct.addrinfo* %60, %struct.addrinfo** %7, align 8
  br label %27

61:                                               ; preds = %56, %27
  %62 = load %struct.addrinfo*, %struct.addrinfo** %7, align 8
  %63 = icmp eq %struct.addrinfo* %62, null
  br i1 %63, label %64, label %74

64:                                               ; preds = %61
  %65 = load %struct.addrinfo*, %struct.addrinfo** %6, align 8
  %66 = icmp ne %struct.addrinfo* %65, null
  br i1 %66, label %67, label %70

67:                                               ; preds = %64
  %68 = load %struct.addrinfo*, %struct.addrinfo** %6, align 8
  %69 = call i32 @freeaddrinfo(%struct.addrinfo* %68)
  br label %70

70:                                               ; preds = %67, %64
  %71 = load i32, i32* @stderr, align 4
  %72 = call i32 (i32, i8*, ...) @fprintf(i32 %71, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %73 = call i32 @exit(i32 0) #3
  unreachable

74:                                               ; preds = %61
  %75 = load %struct.addrinfo*, %struct.addrinfo** %6, align 8
  %76 = icmp ne %struct.addrinfo* %75, null
  br i1 %76, label %77, label %80

77:                                               ; preds = %74
  %78 = load %struct.addrinfo*, %struct.addrinfo** %6, align 8
  %79 = call i32 @freeaddrinfo(%struct.addrinfo* %78)
  br label %80

80:                                               ; preds = %77, %74
  %81 = load i32, i32* @stderr, align 4
  %82 = load i8*, i8** %3, align 8
  %83 = load i8*, i8** %4, align 8
  %84 = call i32 (i32, i8*, ...) @fprintf(i32 %81, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i8* %82, i8* %83)
  %85 = load i32, i32* %8, align 4
  ret i32 %85
}

declare dso_local i32 @memset(%struct.addrinfo*, i32, i32) #1

declare dso_local i32 @getaddrinfo(i8*, i8*, %struct.addrinfo*, %struct.addrinfo**) #1

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i8* @gai_strerror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @connect(i32, i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @freeaddrinfo(%struct.addrinfo*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
