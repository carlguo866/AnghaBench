; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/android/dos/extr_39801.c_wtoa.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/android/dos/extr_39801.c_wtoa.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.WPSProbeRespIe = type { i32 }

@wtag_c_point = common dso_local global i64* null, align 8
@MAX_TL = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @wtoa(i8* %0, %struct.WPSProbeRespIe* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca %struct.WPSProbeRespIe*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store %struct.WPSProbeRespIe* %1, %struct.WPSProbeRespIe** %4, align 8
  %13 = load %struct.WPSProbeRespIe*, %struct.WPSProbeRespIe** %4, align 8
  %14 = bitcast %struct.WPSProbeRespIe* %13 to i8*
  store i8* %14, i8** %5, align 8
  store i32 0, i32* %8, align 4
  store i32 0, i32* %9, align 4
  store i32 0, i32* %10, align 4
  store i32 4, i32* %12, align 4
  br label %15

15:                                               ; preds = %95, %2
  %16 = load i32, i32* %9, align 4
  %17 = load i32, i32* %12, align 4
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %96

19:                                               ; preds = %15
  %20 = load i64*, i64** @wtag_c_point, align 8
  %21 = load i32, i32* %10, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i64, i64* %20, i64 %22
  %24 = load i64, i64* %23, align 8
  %25 = load i8*, i8** %5, align 8
  %26 = load i32, i32* %9, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  %29 = ptrtoint i8* %28 to i64
  %30 = icmp eq i64 %24, %29
  br i1 %30, label %31, label %83

31:                                               ; preds = %19
  %32 = load i32, i32* %10, align 4
  %33 = add nsw i32 %32, 1
  store i32 %33, i32* %10, align 4
  %34 = icmp slt i32 %32, 7
  %35 = zext i1 %34 to i32
  %36 = call i32 @assert(i32 %35)
  store i64 0, i64* %7, align 8
  store i32 0, i32* %11, align 4
  br label %37

37:                                               ; preds = %53, %31
  %38 = load i32, i32* %11, align 4
  %39 = icmp slt i32 %38, 32
  br i1 %39, label %40, label %56

40:                                               ; preds = %37
  %41 = load i8*, i8** %5, align 8
  %42 = load i32, i32* %9, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %9, align 4
  %44 = sext i32 %42 to i64
  %45 = getelementptr inbounds i8, i8* %41, i64 %44
  %46 = load i8, i8* %45, align 1
  %47 = zext i8 %46 to i32
  %48 = load i32, i32* %11, align 4
  %49 = shl i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = load i64, i64* %7, align 8
  %52 = or i64 %51, %50
  store i64 %52, i64* %7, align 8
  br label %53

53:                                               ; preds = %40
  %54 = load i32, i32* %11, align 4
  %55 = add nsw i32 %54, 8
  store i32 %55, i32* %11, align 4
  br label %37

56:                                               ; preds = %37
  %57 = load i64, i64* %7, align 8
  %58 = inttoptr i64 %57 to i8*
  store i8* %58, i8** %6, align 8
  store i32 0, i32* %11, align 4
  br label %59

59:                                               ; preds = %66, %56
  %60 = load i8*, i8** %6, align 8
  %61 = load i32, i32* %11, align 4
  %62 = sext i32 %61 to i64
  %63 = getelementptr inbounds i8, i8* %60, i64 %62
  %64 = load i8, i8* %63, align 1
  %65 = icmp ne i8 %64, 0
  br i1 %65, label %66, label %78

66:                                               ; preds = %59
  %67 = load i8*, i8** %6, align 8
  %68 = load i32, i32* %11, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %11, align 4
  %70 = sext i32 %68 to i64
  %71 = getelementptr inbounds i8, i8* %67, i64 %70
  %72 = load i8, i8* %71, align 1
  %73 = load i8*, i8** %3, align 8
  %74 = load i32, i32* %8, align 4
  %75 = add nsw i32 %74, 1
  store i32 %75, i32* %8, align 4
  %76 = sext i32 %74 to i64
  %77 = getelementptr inbounds i8, i8* %73, i64 %76
  store i8 %72, i8* %77, align 1
  br label %59

78:                                               ; preds = %59
  %79 = load i32, i32* %9, align 4
  %80 = add nsw i32 %79, 4
  store i32 %80, i32* %9, align 4
  %81 = load i8*, i8** %6, align 8
  %82 = call i32 @free(i8* %81)
  br label %95

83:                                               ; preds = %19
  %84 = load i8*, i8** %5, align 8
  %85 = load i32, i32* %9, align 4
  %86 = add nsw i32 %85, 1
  store i32 %86, i32* %9, align 4
  %87 = sext i32 %85 to i64
  %88 = getelementptr inbounds i8, i8* %84, i64 %87
  %89 = load i8, i8* %88, align 1
  %90 = load i8*, i8** %3, align 8
  %91 = load i32, i32* %8, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %8, align 4
  %93 = sext i32 %91 to i64
  %94 = getelementptr inbounds i8, i8* %90, i64 %93
  store i8 %89, i8* %94, align 1
  br label %95

95:                                               ; preds = %83, %78
  br label %15

96:                                               ; preds = %15
  %97 = load i32, i32* %8, align 4
  %98 = sub nsw i32 %97, 2
  %99 = trunc i32 %98 to i8
  %100 = load i8*, i8** %3, align 8
  %101 = getelementptr inbounds i8, i8* %100, i64 1
  store i8 %99, i8* %101, align 1
  %102 = load i32, i32* %8, align 4
  %103 = load i32, i32* @MAX_TL, align 4
  %104 = add nsw i32 %103, 1
  %105 = icmp sle i32 %102, %104
  %106 = zext i1 %105 to i32
  %107 = call i32 @assert(i32 %106)
  %108 = load i32, i32* %8, align 4
  ret i32 %108
}

declare dso_local i32 @assert(i32) #1

declare dso_local i32 @free(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
