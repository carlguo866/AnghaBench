; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/android/dos/extr_39801.c_broadcast.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/android/dos/extr_39801.c_broadcast.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_ll = type { i32, %struct.TYPE_2__, i32, i32, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.ifreq = type { i32, %struct.TYPE_2__, i32, i32, i32, i32 }
%struct.iwreq = type { i32, %struct.TYPE_2__, i32, i32, i32, i32 }
%struct.sockaddr = type { i32 }

@AF_PACKET = common dso_local global i32 0, align 4
@SOCK_RAW = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [16 x i8] c"socket() failed\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@IFACE = common dso_local global i32 0, align 4
@SIOCGIFINDEX = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [27 x i8] c"ioctl(SIOCGIFINDEX) failed\00", align 1
@SIOCGIFHWADDR = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [28 x i8] c"ioctl(SIOCGIFHWADDR) failed\00", align 1
@IFNAMSIZ = common dso_local global i32 0, align 4
@SIOCGIWMODE = common dso_local global i32 0, align 4
@IW_MODE_MONITOR = common dso_local global i32 0, align 4
@IFF_UP = common dso_local global i32 0, align 4
@IFF_BROADCAST = common dso_local global i32 0, align 4
@IFF_RUNNING = common dso_local global i32 0, align 4
@SIOCGIFFLAGS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [27 x i8] c"ioctl(SIOCGIFFLAGS) failed\00", align 1
@.str.4 = private unnamed_addr constant [14 x i8] c"bind() failed\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"write() failed\00", align 1
@DELAY = common dso_local global i32 0, align 4
@DESTINATION_MAC = common dso_local global i32* null, align 8
@SSID = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @broadcast(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.sockaddr_ll, align 4
  %6 = alloca %struct.ifreq, align 4
  %7 = alloca %struct.iwreq, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 100, i32* %10, align 4
  %11 = load i32, i32* @AF_PACKET, align 4
  %12 = load i32, i32* @SOCK_RAW, align 4
  %13 = call i32 @socket(i32 %11, i32 %12, i32 768)
  store i32 %13, i32* %8, align 4
  %14 = load i32, i32* %8, align 4
  %15 = icmp slt i32 %14, 0
  br i1 %15, label %16, label %20

16:                                               ; preds = %2
  %17 = call i32 @perror(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str, i64 0, i64 0))
  %18 = load i32, i32* @EXIT_FAILURE, align 4
  %19 = call i32 @exit(i32 %18) #3
  unreachable

20:                                               ; preds = %2
  %21 = bitcast %struct.ifreq* %6 to %struct.sockaddr_ll*
  %22 = call i32 @memset(%struct.sockaddr_ll* %21, i32 0, i32 24)
  %23 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %6, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* @IFACE, align 4
  %26 = call i32 @strncpy(i32 %24, i32 %25, i32 4)
  %27 = load i32, i32* %8, align 4
  %28 = load i32, i32* @SIOCGIFINDEX, align 4
  %29 = bitcast %struct.ifreq* %6 to %struct.sockaddr_ll*
  %30 = call i64 @ioctl(i32 %27, i32 %28, %struct.sockaddr_ll* %29)
  %31 = icmp slt i64 %30, 0
  br i1 %31, label %32, label %38

32:                                               ; preds = %20
  %33 = call i32 @perror(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0))
  %34 = load i32, i32* %8, align 4
  %35 = call i32 @close(i32 %34)
  %36 = load i32, i32* @EXIT_FAILURE, align 4
  %37 = call i32 @exit(i32 %36) #3
  unreachable

38:                                               ; preds = %20
  %39 = call i32 @memset(%struct.sockaddr_ll* %5, i32 0, i32 24)
  %40 = load i32, i32* @AF_PACKET, align 4
  %41 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %5, i32 0, i32 5
  store i32 %40, i32* %41, align 4
  %42 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %6, i32 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = getelementptr inbounds %struct.sockaddr_ll, %struct.sockaddr_ll* %5, i32 0, i32 4
  store i32 %43, i32* %44, align 4
  %45 = load i32, i32* %8, align 4
  %46 = load i32, i32* @SIOCGIFHWADDR, align 4
  %47 = bitcast %struct.ifreq* %6 to %struct.sockaddr_ll*
  %48 = call i64 @ioctl(i32 %45, i32 %46, %struct.sockaddr_ll* %47)
  %49 = icmp slt i64 %48, 0
  br i1 %49, label %50, label %56

50:                                               ; preds = %38
  %51 = call i32 @perror(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.2, i64 0, i64 0))
  %52 = load i32, i32* %8, align 4
  %53 = call i32 @close(i32 %52)
  %54 = load i32, i32* @EXIT_FAILURE, align 4
  %55 = call i32 @exit(i32 %54) #3
  unreachable

56:                                               ; preds = %38
  %57 = bitcast %struct.iwreq* %7 to %struct.sockaddr_ll*
  %58 = call i32 @memset(%struct.sockaddr_ll* %57, i32 0, i32 24)
  %59 = getelementptr inbounds %struct.iwreq, %struct.iwreq* %7, i32 0, i32 2
  %60 = load i32, i32* %59, align 4
  %61 = load i32, i32* @IFACE, align 4
  %62 = load i32, i32* @IFNAMSIZ, align 4
  %63 = call i32 @strncpy(i32 %60, i32 %61, i32 %62)
  %64 = load i32, i32* %8, align 4
  %65 = load i32, i32* @SIOCGIWMODE, align 4
  %66 = bitcast %struct.iwreq* %7 to %struct.sockaddr_ll*
  %67 = call i64 @ioctl(i32 %64, i32 %65, %struct.sockaddr_ll* %66)
  %68 = icmp slt i64 %67, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %56
  %70 = load i32, i32* @IW_MODE_MONITOR, align 4
  %71 = getelementptr inbounds %struct.iwreq, %struct.iwreq* %7, i32 0, i32 1
  %72 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %71, i32 0, i32 0
  store i32 %70, i32* %72, align 4
  br label %73

73:                                               ; preds = %69, %56
  %74 = load i32, i32* @IFF_UP, align 4
  %75 = load i32, i32* @IFF_BROADCAST, align 4
  %76 = or i32 %74, %75
  %77 = load i32, i32* @IFF_RUNNING, align 4
  %78 = or i32 %76, %77
  %79 = getelementptr inbounds %struct.ifreq, %struct.ifreq* %6, i32 0, i32 0
  %80 = load i32, i32* %79, align 4
  %81 = or i32 %80, %78
  store i32 %81, i32* %79, align 4
  %82 = load i32, i32* %8, align 4
  %83 = load i32, i32* @SIOCGIFFLAGS, align 4
  %84 = bitcast %struct.ifreq* %6 to %struct.sockaddr_ll*
  %85 = call i64 @ioctl(i32 %82, i32 %83, %struct.sockaddr_ll* %84)
  %86 = icmp slt i64 %85, 0
  br i1 %86, label %87, label %93

87:                                               ; preds = %73
  %88 = call i32 @perror(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.3, i64 0, i64 0))
  %89 = load i32, i32* %8, align 4
  %90 = call i32 @close(i32 %89)
  %91 = load i32, i32* @EXIT_FAILURE, align 4
  %92 = call i32 @exit(i32 %91) #3
  unreachable

93:                                               ; preds = %73
  %94 = load i32, i32* %8, align 4
  %95 = bitcast %struct.sockaddr_ll* %5 to %struct.sockaddr*
  %96 = call i64 @bind(i32 %94, %struct.sockaddr* %95, i32 24)
  %97 = icmp slt i64 %96, 0
  br i1 %97, label %98, label %104

98:                                               ; preds = %93
  %99 = call i32 @perror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.4, i64 0, i64 0))
  %100 = load i32, i32* %8, align 4
  %101 = call i32 @close(i32 %100)
  %102 = load i32, i32* @EXIT_FAILURE, align 4
  %103 = call i32 @exit(i32 %102) #3
  unreachable

104:                                              ; preds = %93
  br label %105

105:                                              ; preds = %122, %104
  %106 = load i32, i32* %10, align 4
  %107 = add nsw i32 %106, -1
  store i32 %107, i32* %10, align 4
  %108 = icmp ne i32 %106, 0
  br i1 %108, label %109, label %125

109:                                              ; preds = %105
  %110 = load i32, i32* %8, align 4
  %111 = load i8*, i8** %3, align 8
  %112 = load i32, i32* %4, align 4
  %113 = call i32 @write(i32 %110, i8* %111, i32 %112)
  store i32 %113, i32* %9, align 4
  %114 = load i32, i32* %9, align 4
  %115 = icmp slt i32 %114, 0
  br i1 %115, label %116, label %122

116:                                              ; preds = %109
  %117 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i64 0, i64 0))
  %118 = load i32, i32* %8, align 4
  %119 = call i32 @close(i32 %118)
  %120 = load i32, i32* @EXIT_FAILURE, align 4
  %121 = call i32 @exit(i32 %120) #3
  unreachable

122:                                              ; preds = %109
  %123 = load i32, i32* @DELAY, align 4
  %124 = call i32 @usleep(i32 %123)
  br label %105

125:                                              ; preds = %105
  ret i32 0
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @memset(%struct.sockaddr_ll*, i32, i32) #1

declare dso_local i32 @strncpy(i32, i32, i32) #1

declare dso_local i64 @ioctl(i32, i32, %struct.sockaddr_ll*) #1

declare dso_local i32 @close(i32) #1

declare dso_local i64 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @usleep(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
