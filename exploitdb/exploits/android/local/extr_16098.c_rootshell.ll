; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/android/local/extr_16098.c_rootshell.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/android/local/extr_16098.c_rootshell.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [15 x i8] c"/system/bin/sh\00", align 1
@__const.rootshell.sh = private unnamed_addr constant [2 x i8*] [i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i32 0, i32 0), i8* null], align 16
@.str.1 = private unnamed_addr constant [11 x i8] c"[-] execve\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @rootshell(i8** %0) #0 {
  %2 = alloca i8**, align 8
  %3 = alloca [128 x i8], align 16
  %4 = alloca [2 x i8*], align 16
  store i8** %0, i8*** %2, align 8
  %5 = bitcast [2 x i8*]* %4 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 bitcast ([2 x i8*]* @__const.rootshell.sh to i8*), i64 16, i1 false)
  %6 = call i32 @setuid(i32 0)
  %7 = call i32 @setgid(i32 0)
  %8 = getelementptr inbounds [2 x i8*], [2 x i8*]* %4, i64 0, i64 0
  %9 = load i8*, i8** %8, align 16
  %10 = getelementptr inbounds [2 x i8*], [2 x i8*]* %4, i64 0, i64 0
  %11 = load i8**, i8*** %2, align 8
  %12 = call i32 @execve(i8* %9, i8** %10, i8** %11)
  %13 = call i32 @die(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @setuid(i32) #2

declare dso_local i32 @setgid(i32) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

declare dso_local i32 @die(i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
