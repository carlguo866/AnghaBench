; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/cgi/webapps/extr_179.c_http_connection.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/cgi/webapps/extr_179.c_http_connection.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { %struct.TYPE_2__, i32, i32 }
%struct.TYPE_2__ = type { i32 }
%struct.hostent = type { i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@ROT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [15 x i8] c"gethostbyname:\00", align 1
@WEISS = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"Connect:\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @http_connection(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca %struct.sockaddr_in, align 4
  %5 = alloca %struct.hostent*, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 80, i32* %7, align 4
  %8 = load i32, i32* @AF_INET, align 4
  %9 = load i32, i32* @SOCK_STREAM, align 4
  %10 = call i32 @socket(i32 %8, i32 %9, i32 0)
  store i32 %10, i32* %6, align 4
  %11 = call i32 @bzero(%struct.sockaddr_in* %4, i32 12)
  %12 = load i32, i32* @AF_INET, align 4
  %13 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 2
  store i32 %12, i32* %13, align 4
  %14 = load i32, i32* %7, align 4
  %15 = call i32 @htons(i32 %14)
  %16 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 1
  store i32 %15, i32* %16, align 4
  %17 = load i8*, i8** %3, align 8
  %18 = call i32 @inet_addr(i8* %17)
  %19 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  %20 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %19, i32 0, i32 0
  store i32 %18, i32* %20, align 4
  %21 = icmp eq i32 %18, -1
  br i1 %21, label %22, label %38

22:                                               ; preds = %1
  %23 = load i8*, i8** %3, align 8
  %24 = call i64 @gethostbyname(i8* %23)
  %25 = inttoptr i64 %24 to %struct.hostent*
  store %struct.hostent* %25, %struct.hostent** %5, align 8
  %26 = icmp eq %struct.hostent* %25, null
  br i1 %26, label %27, label %31

27:                                               ; preds = %22
  %28 = load i32, i32* @ROT, align 4
  %29 = call i32 @perror(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %30 = load i32, i32* @WEISS, align 4
  store i32 -1, i32* %2, align 4
  br label %51

31:                                               ; preds = %22
  %32 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %4, i32 0, i32 0
  %33 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %32, i32 0, i32 0
  %34 = load %struct.hostent*, %struct.hostent** %5, align 8
  %35 = getelementptr inbounds %struct.hostent, %struct.hostent* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = call i32 @memcpy(i32* %33, i32 %36, i32 4)
  br label %38

38:                                               ; preds = %31, %1
  %39 = load i32, i32* %6, align 4
  %40 = bitcast %struct.sockaddr_in* %4 to %struct.sockaddr*
  %41 = call i64 @connect(i32 %39, %struct.sockaddr* %40, i32 12)
  %42 = icmp slt i64 %41, 0
  br i1 %42, label %43, label %49

43:                                               ; preds = %38
  %44 = load i32, i32* @ROT, align 4
  %45 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0))
  %46 = load i32, i32* %6, align 4
  %47 = call i32 @close(i32 %46)
  %48 = load i32, i32* @WEISS, align 4
  store i32 -1, i32* %2, align 4
  br label %51

49:                                               ; preds = %38
  %50 = load i32, i32* %6, align 4
  store i32 %50, i32* %2, align 4
  br label %51

51:                                               ; preds = %49, %43, %27
  %52 = load i32, i32* %2, align 4
  ret i32 %52
}

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @bzero(%struct.sockaddr_in*, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @inet_addr(i8*) #1

declare dso_local i64 @gethostbyname(i8*) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memcpy(i32*, i32, i32) #1

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
