; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/cgi/webapps/extr_840.c_readout.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/cgi/webapps/extr_840.c_readout.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@BUFF = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [20 x i8] c"[*] Output by %s:\0A\0A\00", align 1
@BANSTART = common dso_local global i32 0, align 4
@BANSTOP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [3 x i8] c"\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @readout(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8, align 1
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  store i32 0, i32* %5, align 4
  %10 = load i32, i32* @BUFF, align 4
  %11 = zext i32 %10 to i64
  %12 = call i8* @llvm.stacksave()
  store i8* %12, i8** %7, align 8
  %13 = alloca i8, i64 %11, align 16
  store i64 %11, i64* %8, align 8
  %14 = load i8**, i8*** %4, align 8
  %15 = getelementptr inbounds i8*, i8** %14, i64 1
  %16 = load i8*, i8** %15, align 8
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i8* %16)
  br label %18

18:                                               ; preds = %40, %2
  %19 = load i32, i32* @BANSTART, align 4
  %20 = call i32* @strstr(i8* %13, i32 %19)
  %21 = icmp eq i32* %20, null
  br i1 %21, label %22, label %41

22:                                               ; preds = %18
  %23 = load i32, i32* %3, align 4
  %24 = call i32 @read(i32 %23, i8* %9, i32 1)
  store i32 %24, i32* %6, align 4
  %25 = load i8, i8* %9, align 1
  %26 = load i32, i32* %5, align 4
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %5, align 4
  %28 = sext i32 %26 to i64
  %29 = getelementptr inbounds i8, i8* %13, i64 %28
  store i8 %25, i8* %29, align 1
  %30 = load i32, i32* %5, align 4
  %31 = load i32, i32* @BUFF, align 4
  %32 = icmp sge i32 %30, %31
  br i1 %32, label %33, label %35

33:                                               ; preds = %22
  %34 = call i32 (...) @errbuff()
  br label %35

35:                                               ; preds = %33, %22
  %36 = load i32, i32* %6, align 4
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %38, label %40

38:                                               ; preds = %35
  %39 = call i32 (...) @errsplo()
  br label %40

40:                                               ; preds = %38, %35
  br label %18

41:                                               ; preds = %18
  br label %42

42:                                               ; preds = %61, %41
  %43 = load i32, i32* @BANSTOP, align 4
  %44 = call i32* @strstr(i8* %13, i32 %43)
  %45 = icmp eq i32* %44, null
  br i1 %45, label %46, label %62

46:                                               ; preds = %42
  %47 = load i32, i32* %3, align 4
  %48 = call i32 @read(i32 %47, i8* %9, i32 1)
  %49 = load i8, i8* %9, align 1
  %50 = load i32, i32* %5, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %5, align 4
  %52 = sext i32 %50 to i64
  %53 = getelementptr inbounds i8, i8* %13, i64 %52
  store i8 %49, i8* %53, align 1
  %54 = load i8, i8* %9, align 1
  %55 = call i32 @putchar(i8 signext %54)
  %56 = load i32, i32* %5, align 4
  %57 = load i32, i32* @BUFF, align 4
  %58 = icmp sge i32 %56, %57
  br i1 %58, label %59, label %61

59:                                               ; preds = %46
  %60 = call i32 (...) @errbuff()
  br label %61

61:                                               ; preds = %59, %46
  br label %42

62:                                               ; preds = %42
  %63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0))
  %64 = load i8*, i8** %7, align 8
  call void @llvm.stackrestore(i8* %64)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32* @strstr(i8*, i32) #2

declare dso_local i32 @read(i32, i8*, i32) #2

declare dso_local i32 @errbuff(...) #2

declare dso_local i32 @errsplo(...) #2

declare dso_local i32 @putchar(i8 signext) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
