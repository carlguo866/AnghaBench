; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/ios/dos/extr_45652.c_go.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/ios/dos/extr_45652.c_go.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@dealloc_thread_func = common dso_local global i32 0, align 4
@alloc_thread_func = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @go(i64 %0) #0 {
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i64 %0, i64* %2, align 8
  %7 = load i64, i64* %2, align 8
  %8 = add nsw i64 %7, 904
  %9 = call i64 @rk64(i64 %8)
  store i64 %9, i64* %3, align 8
  %10 = load i64, i64* %3, align 8
  %11 = add nsw i64 %10, 352
  %12 = call i64 @rk64(i64 %11)
  store i64 %12, i64* %4, align 8
  %13 = load i64, i64* %4, align 8
  %14 = add nsw i64 %13, 24
  %15 = call i32 @wk32(i64 %14, i32 0)
  %16 = load i64, i64* %4, align 8
  %17 = add nsw i64 %16, 28
  %18 = call i32 @wk32(i64 %17, i32 0)
  %19 = load i32, i32* @dealloc_thread_func, align 4
  %20 = call i32 @pthread_create(i32* %5, i32* null, i32 %19, i32* null)
  %21 = load i32, i32* @alloc_thread_func, align 4
  %22 = call i32 @pthread_create(i32* %6, i32* null, i32 %21, i32* null)
  %23 = load i32, i32* %5, align 4
  %24 = call i32 @pthread_join(i32 %23, i32* null)
  ret void
}

declare dso_local i64 @rk64(i64) #1

declare dso_local i32 @wk32(i64, i32) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i32, i32*) #1

declare dso_local i32 @pthread_join(i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
