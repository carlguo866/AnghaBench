; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/ios/dos/extr_45652.c_persona_bad_alloc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/ios/dos/extr_45652.c_persona_bad_alloc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.kpersona_info = type { i32, i32, i32, i32, i32 }

@PERSONA_INFO_V1 = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [8 x i8] c"a_name2\00", align 1
@PERSONA_GUEST = common dso_local global i32 0, align 4
@PERSONA_OP_ALLOC = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [9 x i8] c"err: %x\0A\00", align 1
@.str.2 = private unnamed_addr constant [18 x i8] c"kpersona_uid: %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8* @persona_bad_alloc() #0 {
  %1 = alloca %struct.kpersona_info, align 4
  %2 = alloca i32, align 4
  %3 = alloca i64, align 8
  %4 = alloca i32, align 4
  %5 = bitcast %struct.kpersona_info* %1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 4 %5, i8 0, i64 20, i1 false)
  store i32 -123, i32* %2, align 4
  store i64 4, i64* %3, align 8
  %6 = load i32, i32* @PERSONA_INFO_V1, align 4
  %7 = getelementptr inbounds %struct.kpersona_info, %struct.kpersona_info* %1, i32 0, i32 3
  store i32 %6, i32* %7, align 4
  %8 = getelementptr inbounds %struct.kpersona_info, %struct.kpersona_info* %1, i32 0, i32 2
  %9 = load i32, i32* %8, align 4
  %10 = call i32 @strcpy(i32 %9, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0))
  %11 = getelementptr inbounds %struct.kpersona_info, %struct.kpersona_info* %1, i32 0, i32 0
  store i32 235, i32* %11, align 4
  %12 = load i32, i32* @PERSONA_GUEST, align 4
  %13 = getelementptr inbounds %struct.kpersona_info, %struct.kpersona_info* %1, i32 0, i32 1
  store i32 %12, i32* %13, align 4
  %14 = load i32, i32* @PERSONA_OP_ALLOC, align 4
  %15 = call i32 @sys_persona(i32 %14, i32 0, %struct.kpersona_info* %1, i32* null, i64* %3)
  store i32 %15, i32* %4, align 4
  %16 = load i32, i32* %4, align 4
  %17 = call i32 @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.1, i64 0, i64 0), i32 %16)
  %18 = load i32, i32* %2, align 4
  %19 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.2, i64 0, i64 0), i32 %18)
  ret i8* null
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #1

declare dso_local i32 @strcpy(i32, i8*) #2

declare dso_local i32 @sys_persona(i32, i32, %struct.kpersona_info*, i32*, i64*) #2

declare dso_local i32 @printf(i8*, i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
