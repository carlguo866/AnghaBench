; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/ios/dos/extr_47607.c_print_usb_device.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/ios/dos/extr_47607.c_print_usb_device.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@KERN_SUCCESS = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [9 x i8] c"idVendor\00", align 1
@KERN_FAILURE = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [10 x i8] c"idProduct\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"locationID\00", align 1
@kCFNumberSInt32Type = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [32 x i8] c"Got device %#x @ %#x (%#x:%#x)\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32)* @print_usb_device to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @print_usb_device(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  store i32 %0, i32* %3, align 4
  %9 = load i64, i64* @KERN_SUCCESS, align 8
  store i64 %9, i64* %4, align 8
  store i32 0, i32* %5, align 4
  store i32 0, i32* %6, align 4
  store i32 0, i32* %7, align 4
  store i32* null, i32** %8, align 8
  %10 = load i32, i32* %3, align 4
  %11 = call i64 @IORegistryEntryCreateCFProperties(i32 %10, i32** %8, i32* null, i32 0)
  store i64 %11, i64* %4, align 8
  %12 = load i64, i64* %4, align 8
  %13 = load i64, i64* @KERN_SUCCESS, align 8
  %14 = icmp ne i64 %12, %13
  br i1 %14, label %18, label %15

15:                                               ; preds = %1
  %16 = load i32*, i32** %8, align 8
  %17 = icmp ne i32* %16, null
  br i1 %17, label %21, label %18

18:                                               ; preds = %15, %1
  %19 = load i64, i64* %4, align 8
  %20 = trunc i64 %19 to i32
  store i32 %20, i32* %2, align 4
  br label %59

21:                                               ; preds = %15
  %22 = load i32*, i32** %8, align 8
  %23 = call i32 @CFSTR(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str, i64 0, i64 0))
  %24 = call i32 @CFDictionaryGetValueIfPresent(i32* %22, i32 %23, i32* %5)
  %25 = icmp ne i32 %24, 0
  br i1 %25, label %28, label %26

26:                                               ; preds = %21
  %27 = load i32, i32* @KERN_FAILURE, align 4
  store i32 %27, i32* %2, align 4
  br label %59

28:                                               ; preds = %21
  %29 = load i32*, i32** %8, align 8
  %30 = call i32 @CFSTR(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %31 = call i32 @CFDictionaryGetValueIfPresent(i32* %29, i32 %30, i32* %6)
  %32 = icmp ne i32 %31, 0
  br i1 %32, label %35, label %33

33:                                               ; preds = %28
  %34 = load i32, i32* @KERN_FAILURE, align 4
  store i32 %34, i32* %2, align 4
  br label %59

35:                                               ; preds = %28
  %36 = load i32*, i32** %8, align 8
  %37 = call i32 @CFSTR(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %38 = call i32 @CFDictionaryGetValueIfPresent(i32* %36, i32 %37, i32* %7)
  %39 = load i32, i32* %5, align 4
  %40 = load i32, i32* @kCFNumberSInt32Type, align 4
  %41 = call i32 @CFNumberGetValue(i32 %39, i32 %40, i32* %5)
  %42 = load i32, i32* %6, align 4
  %43 = load i32, i32* @kCFNumberSInt32Type, align 4
  %44 = call i32 @CFNumberGetValue(i32 %42, i32 %43, i32* %6)
  %45 = load i32, i32* %7, align 4
  %46 = icmp ne i32 %45, 0
  br i1 %46, label %47, label %51

47:                                               ; preds = %35
  %48 = load i32, i32* %7, align 4
  %49 = load i32, i32* @kCFNumberSInt32Type, align 4
  %50 = call i32 @CFNumberGetValue(i32 %48, i32 %49, i32* %7)
  br label %51

51:                                               ; preds = %47, %35
  %52 = load i32, i32* %3, align 4
  %53 = load i32, i32* %7, align 4
  %54 = load i32, i32* %5, align 4
  %55 = load i32, i32* %6, align 4
  %56 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.3, i64 0, i64 0), i32 %52, i32 %53, i32 %54, i32 %55)
  %57 = load i64, i64* %4, align 8
  %58 = trunc i64 %57 to i32
  store i32 %58, i32* %2, align 4
  br label %59

59:                                               ; preds = %51, %33, %26, %18
  %60 = load i32, i32* %2, align 4
  ret i32 %60
}

declare dso_local i64 @IORegistryEntryCreateCFProperties(i32, i32**, i32*, i32) #1

declare dso_local i32 @CFDictionaryGetValueIfPresent(i32*, i32, i32*) #1

declare dso_local i32 @CFSTR(i8*) #1

declare dso_local i32 @CFNumberGetValue(i32, i32, i32*) #1

declare dso_local i32 @printf(i8*, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
