; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_32946.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_32946.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_9__ = type { i64 (%struct.TYPE_9__*, %struct.TYPE_8__*, %struct.TYPE_8__*, i32)*, i32 (%struct.TYPE_9__*)* }
%struct.TYPE_8__ = type { i8**, i32 }

@__const.main.data = private unnamed_addr constant [5 x i8] c"abcd\00", align 1
@.str = private unnamed_addr constant [2 x i8] c"J\00", align 1
@_malloc_options = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [8 x i8] c"test.db\00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@O_TRUNC = common dso_local global i32 0, align 4
@DB_HASH = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [9 x i8] c"dbopen()\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"db->put()\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [5 x i8], align 1
  %3 = alloca %struct.TYPE_9__*, align 8
  %4 = alloca %struct.TYPE_8__, align 8
  store i32 0, i32* %1, align 4
  %5 = bitcast [5 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %5, i8* align 1 getelementptr inbounds ([5 x i8], [5 x i8]* @__const.main.data, i32 0, i32 0), i64 5, i1 false)
  store i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0), i8** @_malloc_options, align 8
  %6 = load i32, i32* @O_RDWR, align 4
  %7 = load i32, i32* @O_CREAT, align 4
  %8 = or i32 %6, %7
  %9 = load i32, i32* @O_TRUNC, align 4
  %10 = or i32 %8, %9
  %11 = load i32, i32* @DB_HASH, align 4
  %12 = call %struct.TYPE_9__* @dbopen(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.1, i64 0, i64 0), i32 %10, i32 420, i32 %11, i32* null)
  store %struct.TYPE_9__* %12, %struct.TYPE_9__** %3, align 8
  %13 = load %struct.TYPE_9__*, %struct.TYPE_9__** %3, align 8
  %14 = icmp eq %struct.TYPE_9__* %13, null
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 @err(i32 1, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.2, i64 0, i64 0))
  br label %17

17:                                               ; preds = %15, %0
  %18 = bitcast [5 x i8]* %2 to i8**
  %19 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 0
  store i8** %18, i8*** %19, align 8
  %20 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %4, i32 0, i32 1
  store i32 5, i32* %20, align 8
  %21 = load %struct.TYPE_9__*, %struct.TYPE_9__** %3, align 8
  %22 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %21, i32 0, i32 0
  %23 = load i64 (%struct.TYPE_9__*, %struct.TYPE_8__*, %struct.TYPE_8__*, i32)*, i64 (%struct.TYPE_9__*, %struct.TYPE_8__*, %struct.TYPE_8__*, i32)** %22, align 8
  %24 = load %struct.TYPE_9__*, %struct.TYPE_9__** %3, align 8
  %25 = call i64 %23(%struct.TYPE_9__* %24, %struct.TYPE_8__* %4, %struct.TYPE_8__* %4, i32 0)
  %26 = icmp ne i64 %25, 0
  br i1 %26, label %27, label %29

27:                                               ; preds = %17
  %28 = call i32 @err(i32 1, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  br label %29

29:                                               ; preds = %27, %17
  %30 = load %struct.TYPE_9__*, %struct.TYPE_9__** %3, align 8
  %31 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %30, i32 0, i32 1
  %32 = load i32 (%struct.TYPE_9__*)*, i32 (%struct.TYPE_9__*)** %31, align 8
  %33 = load %struct.TYPE_9__*, %struct.TYPE_9__** %3, align 8
  %34 = call i32 %32(%struct.TYPE_9__* %33)
  ret i32 0
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local %struct.TYPE_9__* @dbopen(i8*, i32, i32, i32, i32*) #2

declare dso_local i32 @err(i32, i8*) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
