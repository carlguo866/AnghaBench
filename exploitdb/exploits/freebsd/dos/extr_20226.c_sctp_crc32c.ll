; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/dos/extr_20226.c_sctp_crc32c.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/dos/extr_20226.c_sctp_crc32c.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SP_LEN = common dso_local global i32 0, align 4
@DP_LEN = common dso_local global i32 0, align 4
@VTAG_LEN = common dso_local global i32 0, align 4
@HEADER_LEN = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i32)* @sctp_crc32c to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @sctp_crc32c(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i8, align 1
  %9 = alloca i8, align 1
  %10 = alloca i8, align 1
  %11 = alloca i8, align 1
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  store i32 -1, i32* %6, align 4
  store i32 0, i32* %5, align 4
  br label %12

12:                                               ; preds = %28, %2
  %13 = load i32, i32* %5, align 4
  %14 = load i32, i32* @SP_LEN, align 4
  %15 = load i32, i32* @DP_LEN, align 4
  %16 = add i32 %14, %15
  %17 = load i32, i32* @VTAG_LEN, align 4
  %18 = add i32 %16, %17
  %19 = icmp ult i32 %13, %18
  br i1 %19, label %20, label %31

20:                                               ; preds = %12
  %21 = load i32, i32* %6, align 4
  %22 = load i8*, i8** %3, align 8
  %23 = load i32, i32* %5, align 4
  %24 = zext i32 %23 to i64
  %25 = getelementptr inbounds i8, i8* %22, i64 %24
  %26 = load i8, i8* %25, align 1
  %27 = call i32 @CRC32C(i32 %21, i8 zeroext %26)
  br label %28

28:                                               ; preds = %20
  %29 = load i32, i32* %5, align 4
  %30 = add i32 %29, 1
  store i32 %30, i32* %5, align 4
  br label %12

31:                                               ; preds = %12
  %32 = load i32, i32* %6, align 4
  %33 = call i32 @CRC32C(i32 %32, i8 zeroext 0)
  %34 = load i32, i32* %6, align 4
  %35 = call i32 @CRC32C(i32 %34, i8 zeroext 0)
  %36 = load i32, i32* %6, align 4
  %37 = call i32 @CRC32C(i32 %36, i8 zeroext 0)
  %38 = load i32, i32* %6, align 4
  %39 = call i32 @CRC32C(i32 %38, i8 zeroext 0)
  %40 = load i32, i32* @HEADER_LEN, align 4
  store i32 %40, i32* %5, align 4
  br label %41

41:                                               ; preds = %53, %31
  %42 = load i32, i32* %5, align 4
  %43 = load i32, i32* %4, align 4
  %44 = icmp ult i32 %42, %43
  br i1 %44, label %45, label %56

45:                                               ; preds = %41
  %46 = load i32, i32* %6, align 4
  %47 = load i8*, i8** %3, align 8
  %48 = load i32, i32* %5, align 4
  %49 = zext i32 %48 to i64
  %50 = getelementptr inbounds i8, i8* %47, i64 %49
  %51 = load i8, i8* %50, align 1
  %52 = call i32 @CRC32C(i32 %46, i8 zeroext %51)
  br label %53

53:                                               ; preds = %45
  %54 = load i32, i32* %5, align 4
  %55 = add i32 %54, 1
  store i32 %55, i32* %5, align 4
  br label %41

56:                                               ; preds = %41
  %57 = load i32, i32* %6, align 4
  %58 = xor i32 %57, -1
  store i32 %58, i32* %7, align 4
  %59 = load i32, i32* %7, align 4
  %60 = and i32 %59, 255
  %61 = trunc i32 %60 to i8
  store i8 %61, i8* %8, align 1
  %62 = load i32, i32* %7, align 4
  %63 = lshr i32 %62, 8
  %64 = and i32 %63, 255
  %65 = trunc i32 %64 to i8
  store i8 %65, i8* %9, align 1
  %66 = load i32, i32* %7, align 4
  %67 = lshr i32 %66, 16
  %68 = and i32 %67, 255
  %69 = trunc i32 %68 to i8
  store i8 %69, i8* %10, align 1
  %70 = load i32, i32* %7, align 4
  %71 = lshr i32 %70, 24
  %72 = and i32 %71, 255
  %73 = trunc i32 %72 to i8
  store i8 %73, i8* %11, align 1
  %74 = load i8, i8* %8, align 1
  %75 = zext i8 %74 to i32
  %76 = shl i32 %75, 24
  %77 = load i8, i8* %9, align 1
  %78 = zext i8 %77 to i32
  %79 = shl i32 %78, 16
  %80 = or i32 %76, %79
  %81 = load i8, i8* %10, align 1
  %82 = zext i8 %81 to i32
  %83 = shl i32 %82, 8
  %84 = or i32 %80, %83
  %85 = load i8, i8* %11, align 1
  %86 = zext i8 %85 to i32
  %87 = or i32 %84, %86
  store i32 %87, i32* %6, align 4
  %88 = load i32, i32* %6, align 4
  ret i32 %88
}

declare dso_local i32 @CRC32C(i32, i8 zeroext) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
