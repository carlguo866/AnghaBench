; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/dos/extr_19130.c_server.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/dos/extr_19130.c_server.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_un = type { i64, i32, i32 }
%struct.msghdr = type { i32, i32, i64, i8*, i64, i32*, i8* }
%struct.mycmsghdr = type { i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32, i32, i32 }
%struct.sockaddr = type { i32 }

@PATH = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"unlink error %d\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@AF_UNIX = common dso_local global i32 0, align 4
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"socket error %d\0A\00", align 1
@.str.2 = private unnamed_addr constant [15 x i8] c"bind error %d\0A\00", align 1
@SOME_FILE = common dso_local global i32 0, align 4
@O_RDONLY = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [20 x i8] c"open file error %d\0A\00", align 1
@.str.4 = private unnamed_addr constant [19 x i8] c"recvfrom error %d\0A\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SCM_RIGHTS = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [18 x i8] c"sendmsg error %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @server() #0 {
  %1 = alloca %struct.sockaddr_un, align 8
  %2 = alloca %struct.msghdr, align 8
  %3 = alloca %struct.mycmsghdr, align 4
  %4 = alloca [1 x i8], align 1
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = load i32, i32* @PATH, align 4
  %9 = call i32 @unlink(i32 %8)
  %10 = icmp eq i32 %9, -1
  br i1 %10, label %11, label %14

11:                                               ; preds = %0
  %12 = load i32, i32* @errno, align 4
  %13 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 %12)
  br label %14

14:                                               ; preds = %11, %0
  %15 = load i32, i32* @AF_UNIX, align 4
  %16 = load i32, i32* @SOCK_DGRAM, align 4
  %17 = call i32 @socket(i32 %15, i32 %16, i32 0)
  store i32 %17, i32* %5, align 4
  %18 = icmp eq i32 %17, -1
  br i1 %18, label %19, label %22

19:                                               ; preds = %14
  %20 = load i32, i32* @errno, align 4
  %21 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %20)
  br label %22

22:                                               ; preds = %19, %14
  %23 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 2
  %24 = load i32, i32* %23, align 4
  %25 = load i32, i32* @PATH, align 4
  %26 = call i32 @strcpy(i32 %24, i32 %25)
  %27 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 2
  %28 = load i32, i32* %27, align 4
  %29 = call i64 @strlen(i32 %28)
  %30 = add i64 12, %29
  %31 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 0
  store i64 %30, i64* %31, align 8
  %32 = load i32, i32* @AF_UNIX, align 4
  %33 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 1
  store i32 %32, i32* %33, align 8
  %34 = load i32, i32* %5, align 4
  %35 = bitcast %struct.sockaddr_un* %1 to %struct.sockaddr*
  %36 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 0
  %37 = load i64, i64* %36, align 8
  %38 = call i32 @bind(i32 %34, %struct.sockaddr* %35, i64 %37)
  %39 = icmp eq i32 %38, -1
  br i1 %39, label %40, label %43

40:                                               ; preds = %22
  %41 = load i32, i32* @errno, align 4
  %42 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %41)
  br label %43

43:                                               ; preds = %40, %22
  br label %44

44:                                               ; preds = %91, %43
  %45 = load i32, i32* @SOME_FILE, align 4
  %46 = load i32, i32* @O_RDONLY, align 4
  %47 = call i32 @open(i32 %45, i32 %46)
  store i32 %47, i32* %7, align 4
  %48 = icmp eq i32 %47, -1
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = load i32, i32* @errno, align 4
  %51 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0), i32 %50)
  br label %52

52:                                               ; preds = %49, %44
  store i32 4, i32* %6, align 4
  %53 = load i32, i32* %5, align 4
  %54 = bitcast [1 x i8]* %4 to i8**
  %55 = bitcast %struct.sockaddr_un* %1 to %struct.sockaddr*
  %56 = call i32 @recvfrom(i32 %53, i8** %54, i32 1, i32 0, %struct.sockaddr* %55, i32* %6)
  %57 = icmp eq i32 %56, -1
  br i1 %57, label %58, label %61

58:                                               ; preds = %52
  %59 = load i32, i32* @errno, align 4
  %60 = call i32 @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.4, i64 0, i64 0), i32 %59)
  br label %61

61:                                               ; preds = %58, %52
  %62 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %63 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %62, i32 0, i32 0
  store i32 16, i32* %63, align 4
  %64 = load i32, i32* @SOL_SOCKET, align 4
  %65 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %66 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %65, i32 0, i32 2
  store i32 %64, i32* %66, align 4
  %67 = load i32, i32* @SCM_RIGHTS, align 4
  %68 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %69 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %68, i32 0, i32 1
  store i32 %67, i32* %69, align 4
  %70 = load i32, i32* %7, align 4
  %71 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 0
  store i32 %70, i32* %71, align 4
  %72 = bitcast %struct.sockaddr_un* %1 to i8*
  %73 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 6
  store i8* %72, i8** %73, align 8
  %74 = load i32, i32* %6, align 4
  %75 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 0
  store i32 %74, i32* %75, align 8
  %76 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 5
  store i32* null, i32** %76, align 8
  %77 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 4
  store i64 0, i64* %77, align 8
  %78 = bitcast %struct.mycmsghdr* %3 to i8*
  %79 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 3
  store i8* %78, i8** %79, align 8
  %80 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %81 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %80, i32 0, i32 0
  %82 = load i32, i32* %81, align 4
  %83 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 1
  store i32 %82, i32* %83, align 4
  %84 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %2, i32 0, i32 2
  store i64 0, i64* %84, align 8
  %85 = load i32, i32* %5, align 4
  %86 = call i32 @sendmsg(i32 %85, %struct.msghdr* %2, i32 0)
  %87 = icmp eq i32 %86, -1
  br i1 %87, label %88, label %91

88:                                               ; preds = %61
  %89 = load i32, i32* @errno, align 4
  %90 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.5, i64 0, i64 0), i32 %89)
  br label %91

91:                                               ; preds = %88, %61
  %92 = load i32, i32* %7, align 4
  %93 = call i32 @close(i32 %92)
  br label %44
}

declare dso_local i32 @unlink(i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @socket(i32, i32, i32) #1

declare dso_local i32 @strcpy(i32, i32) #1

declare dso_local i64 @strlen(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i64) #1

declare dso_local i32 @open(i32, i32) #1

declare dso_local i32 @recvfrom(i32, i8**, i32, i32, %struct.sockaddr*, i32*) #1

declare dso_local i32 @sendmsg(i32, %struct.msghdr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
