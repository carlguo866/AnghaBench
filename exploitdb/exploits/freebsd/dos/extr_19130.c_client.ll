; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/freebsd/dos/extr_19130.c_client.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/freebsd/dos/extr_19130.c_client.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sockaddr_un = type { i32, i8*, i32 }
%struct.mycmsghdr = type { i32, %struct.TYPE_2__ }
%struct.TYPE_2__ = type { i32, i32, i32 }
%struct.msghdr = type { i32, i64, i64, i64, i32*, i64, i32* }
%struct.sockaddr = type { i32 }

@AF_UNIX = common dso_local global i8* null, align 8
@SOCK_DGRAM = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"socket error %d\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@PATH_TMP = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [17 x i8] c"unlink error %d\0A\00", align 1
@PATH = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [15 x i8] c"bind error %d\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"sendto error %d\0A\00", align 1
@SOL_SOCKET = common dso_local global i32 0, align 4
@SCM_RIGHTS = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [18 x i8] c"recvmsg error %d\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @client() #0 {
  %1 = alloca %struct.sockaddr_un, align 8
  %2 = alloca %struct.sockaddr_un, align 8
  %3 = alloca %struct.mycmsghdr, align 4
  %4 = alloca %struct.msghdr, align 8
  %5 = alloca [1 x i8], align 1
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = load i8*, i8** @AF_UNIX, align 8
  %10 = load i32, i32* @SOCK_DGRAM, align 4
  %11 = call i32 @socket(i8* %9, i32 %10, i32 0)
  store i32 %11, i32* %6, align 4
  %12 = icmp eq i32 %11, -1
  br i1 %12, label %13, label %16

13:                                               ; preds = %0
  %14 = load i32, i32* @errno, align 4
  %15 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0), i32 %14)
  br label %16

16:                                               ; preds = %13, %0
  %17 = load i32, i32* @PATH_TMP, align 4
  %18 = call i32 @unlink(i32 %17)
  %19 = icmp eq i32 %18, -1
  br i1 %19, label %20, label %23

20:                                               ; preds = %16
  %21 = load i32, i32* @errno, align 4
  %22 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  br label %23

23:                                               ; preds = %20, %16
  %24 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %2, i32 0, i32 2
  %25 = load i32, i32* %24, align 8
  %26 = load i32, i32* @PATH_TMP, align 4
  %27 = call i32 @strcpy(i32 %25, i32 %26)
  %28 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %2, i32 0, i32 2
  %29 = load i32, i32* %28, align 8
  %30 = call i8* @strlen(i32 %29)
  %31 = getelementptr i8, i8* %30, i64 12
  %32 = ptrtoint i8* %31 to i32
  %33 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %2, i32 0, i32 0
  store i32 %32, i32* %33, align 8
  %34 = load i8*, i8** @AF_UNIX, align 8
  %35 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %2, i32 0, i32 1
  store i8* %34, i8** %35, align 8
  %36 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 2
  %37 = load i32, i32* %36, align 8
  %38 = load i32, i32* @PATH, align 4
  %39 = call i32 @strcpy(i32 %37, i32 %38)
  %40 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 2
  %41 = load i32, i32* %40, align 8
  %42 = call i8* @strlen(i32 %41)
  %43 = getelementptr i8, i8* %42, i64 12
  %44 = ptrtoint i8* %43 to i32
  %45 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 0
  store i32 %44, i32* %45, align 8
  %46 = load i8*, i8** @AF_UNIX, align 8
  %47 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 1
  store i8* %46, i8** %47, align 8
  %48 = load i32, i32* %6, align 4
  %49 = bitcast %struct.sockaddr_un* %2 to %struct.sockaddr*
  %50 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %2, i32 0, i32 0
  %51 = load i32, i32* %50, align 8
  %52 = call i32 @bind(i32 %48, %struct.sockaddr* %49, i32 %51)
  %53 = icmp eq i32 %52, -1
  br i1 %53, label %54, label %57

54:                                               ; preds = %23
  %55 = load i32, i32* @errno, align 4
  %56 = call i32 @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.2, i64 0, i64 0), i32 %55)
  br label %57

57:                                               ; preds = %54, %23
  %58 = load i32, i32* %6, align 4
  %59 = bitcast [1 x i8]* %5 to i8**
  %60 = bitcast %struct.sockaddr_un* %1 to %struct.sockaddr*
  %61 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 0
  %62 = load i32, i32* %61, align 8
  %63 = call i32 @sendto(i32 %58, i8** %59, i32 1, i32 0, %struct.sockaddr* %60, i32 %62)
  %64 = icmp eq i32 %63, -1
  br i1 %64, label %65, label %68

65:                                               ; preds = %57
  %66 = load i32, i32* @errno, align 4
  %67 = call i32 @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 %66)
  br label %68

68:                                               ; preds = %65, %57
  %69 = getelementptr inbounds %struct.sockaddr_un, %struct.sockaddr_un* %1, i32 0, i32 0
  %70 = load i32, i32* %69, align 8
  store i32 %70, i32* %7, align 4
  %71 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %72 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %71, i32 0, i32 0
  store i32 16, i32* %72, align 4
  %73 = load i32, i32* @SOL_SOCKET, align 4
  %74 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %75 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %74, i32 0, i32 2
  store i32 %73, i32* %75, align 4
  %76 = load i32, i32* @SCM_RIGHTS, align 4
  %77 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %78 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %77, i32 0, i32 1
  store i32 %76, i32* %78, align 4
  %79 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 6
  store i32* null, i32** %79, align 8
  %80 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 5
  store i64 0, i64* %80, align 8
  %81 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 4
  store i32* null, i32** %81, align 8
  %82 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 3
  store i64 0, i64* %82, align 8
  %83 = ptrtoint %struct.mycmsghdr* %3 to i64
  %84 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 2
  store i64 %83, i64* %84, align 8
  %85 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 1
  %86 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %85, i32 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 0
  store i32 %87, i32* %88, align 8
  %89 = getelementptr inbounds %struct.msghdr, %struct.msghdr* %4, i32 0, i32 1
  store i64 0, i64* %89, align 8
  %90 = load i32, i32* %6, align 4
  %91 = call i32 @recvmsg(i32 %90, %struct.msghdr* %4, i32 0)
  %92 = icmp eq i32 %91, -1
  br i1 %92, label %93, label %96

93:                                               ; preds = %68
  %94 = load i32, i32* @errno, align 4
  %95 = call i32 @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i32 %94)
  br label %96

96:                                               ; preds = %93, %68
  %97 = getelementptr inbounds %struct.mycmsghdr, %struct.mycmsghdr* %3, i32 0, i32 0
  %98 = load i32, i32* %97, align 4
  store i32 %98, i32* %8, align 4
  %99 = load i32, i32* %8, align 4
  %100 = call i32 @close(i32 %99)
  %101 = load i32, i32* %6, align 4
  %102 = call i32 @close(i32 %101)
  ret void
}

declare dso_local i32 @socket(i8*, i32, i32) #1

declare dso_local i32 @printf(i8*, i32) #1

declare dso_local i32 @unlink(i32) #1

declare dso_local i32 @strcpy(i32, i32) #1

declare dso_local i8* @strlen(i32) #1

declare dso_local i32 @bind(i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @sendto(i32, i8**, i32, i32, %struct.sockaddr*, i32) #1

declare dso_local i32 @recvmsg(i32, %struct.msghdr*, i32) #1

declare dso_local i32 @close(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
