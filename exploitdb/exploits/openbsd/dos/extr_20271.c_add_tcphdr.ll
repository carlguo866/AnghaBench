; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/openbsd/dos/extr_20271.c_add_tcphdr.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/openbsd/dos/extr_20271.c_add_tcphdr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.net_tuple = type { i32, i32, i32, i32 }
%struct.tcphdr = type { i32, i32, i32, i32, i8*, i32, i8*, i64, i32, i32, i32, i32 }
%struct._fakehead = type { i32, i32, i32, i32, i8*, i32, i8*, i64, i32, i32, i32, i32 }

@TCP_SIZE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @add_tcphdr(i8* %0, %struct.net_tuple* %1, i32 %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca %struct.net_tuple*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.tcphdr, align 8
  %8 = alloca %struct._fakehead, align 8
  %9 = alloca i32, align 4
  store i8* %0, i8** %4, align 8
  store %struct.net_tuple* %1, %struct.net_tuple** %5, align 8
  store i32 %2, i32* %6, align 4
  %10 = call i32 @memset(%struct.tcphdr* %7, i32 0, i32 64)
  %11 = bitcast %struct._fakehead* %8 to %struct.tcphdr*
  %12 = call i32 @memset(%struct.tcphdr* %11, i32 0, i32 64)
  %13 = load %struct.net_tuple*, %struct.net_tuple** %5, align 8
  %14 = getelementptr inbounds %struct.net_tuple, %struct.net_tuple* %13, i32 0, i32 3
  %15 = load i32, i32* %14, align 4
  %16 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %7, i32 0, i32 11
  store i32 %15, i32* %16, align 4
  %17 = load %struct.net_tuple*, %struct.net_tuple** %5, align 8
  %18 = getelementptr inbounds %struct.net_tuple, %struct.net_tuple* %17, i32 0, i32 2
  %19 = load i32, i32* %18, align 4
  %20 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %7, i32 0, i32 10
  store i32 %19, i32* %20, align 8
  %21 = load %struct.net_tuple*, %struct.net_tuple** %5, align 8
  %22 = getelementptr inbounds %struct.net_tuple, %struct.net_tuple* %21, i32 0, i32 1
  %23 = load i32, i32* %22, align 4
  %24 = getelementptr inbounds %struct._fakehead, %struct._fakehead* %8, i32 0, i32 9
  store i32 %23, i32* %24, align 4
  %25 = load %struct.net_tuple*, %struct.net_tuple** %5, align 8
  %26 = getelementptr inbounds %struct.net_tuple, %struct.net_tuple* %25, i32 0, i32 0
  %27 = load i32, i32* %26, align 4
  %28 = getelementptr inbounds %struct._fakehead, %struct._fakehead* %8, i32 0, i32 8
  store i32 %27, i32* %28, align 8
  %29 = getelementptr inbounds %struct._fakehead, %struct._fakehead* %8, i32 0, i32 7
  store i64 0, i64* %29, align 8
  %30 = getelementptr inbounds %struct._fakehead, %struct._fakehead* %8, i32 0, i32 0
  store i32 6, i32* %30, align 8
  %31 = load i32, i32* @TCP_SIZE, align 4
  %32 = call i8* @htons(i32 %31)
  %33 = getelementptr inbounds %struct._fakehead, %struct._fakehead* %8, i32 0, i32 6
  store i8* %32, i8** %33, align 8
  %34 = bitcast %struct._fakehead* %8 to i32*
  %35 = call i32 @in_cksum(i32* %34, i32 64)
  store i32 %35, i32* %9, align 4
  %36 = load i32, i32* @TCP_SIZE, align 4
  %37 = ashr i32 %36, 2
  %38 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %7, i32 0, i32 1
  store i32 %37, i32* %38, align 4
  %39 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %7, i32 0, i32 2
  store i32 31337, i32* %39, align 8
  %40 = load i32, i32* %6, align 4
  %41 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %7, i32 0, i32 5
  %42 = load i32, i32* %41, align 8
  %43 = or i32 %42, %40
  store i32 %43, i32* %41, align 8
  %44 = call i8* @htons(i32 16383)
  %45 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %7, i32 0, i32 4
  store i8* %44, i8** %45, align 8
  %46 = bitcast %struct.tcphdr* %7 to i32*
  %47 = call i32 @in_cksum(i32* %46, i32 64)
  %48 = load i32, i32* %9, align 4
  %49 = add nsw i32 %48, %47
  store i32 %49, i32* %9, align 4
  %50 = load i32, i32* %9, align 4
  %51 = call i32 @CKSUM_CARRY(i32 %50)
  %52 = getelementptr inbounds %struct.tcphdr, %struct.tcphdr* %7, i32 0, i32 3
  store i32 %51, i32* %52, align 4
  %53 = load i8*, i8** %4, align 8
  %54 = call i32 @memcpy(i8* %53, %struct.tcphdr* %7, i32 64)
  ret void
}

declare dso_local i32 @memset(%struct.tcphdr*, i32, i32) #1

declare dso_local i8* @htons(i32) #1

declare dso_local i32 @in_cksum(i32*, i32) #1

declare dso_local i32 @CKSUM_CARRY(i32) #1

declare dso_local i32 @memcpy(i8*, %struct.tcphdr*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
