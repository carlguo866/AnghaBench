; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/openbsd/remote/extr_20733.c_docmd.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/openbsd/remote/extr_20733.c_docmd.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.timeval = type { i32, i64 }

@debug = common dso_local global i64 0, align 8
@STDERR_FILENO = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c"\\\\ \00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"send\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"recv\00", align 1
@stderr = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [23 x i8] c"EOF on socket. Sorry.\0A\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"// \00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @docmd(i32 %0, i8* %1, i32 %2) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca [1024 x i8], align 16
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca %struct.timeval, align 8
  store i32 %0, i32* %4, align 4
  store i8* %1, i8** %5, align 8
  store i32 %2, i32* %6, align 4
  %11 = load i8*, i8** %5, align 8
  %12 = call i32 @strlen(i8* %11)
  store i32 %12, i32* %8, align 4
  %13 = load i64, i64* @debug, align 8
  %14 = icmp ne i64 %13, 0
  br i1 %14, label %15, label %22

15:                                               ; preds = %3
  %16 = load i32, i32* @STDERR_FILENO, align 4
  %17 = call i32 @write(i32 %16, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 3)
  %18 = load i32, i32* @STDERR_FILENO, align 4
  %19 = load i8*, i8** %5, align 8
  %20 = load i32, i32* %8, align 4
  %21 = call i32 @write(i32 %18, i8* %19, i32 %20)
  br label %22

22:                                               ; preds = %15, %3
  %23 = load i32, i32* %4, align 4
  %24 = load i8*, i8** %5, align 8
  %25 = load i32, i32* %8, align 4
  %26 = call i32 @send(i32 %23, i8* %24, i32 %25, i32 0)
  %27 = load i32, i32* %8, align 4
  %28 = icmp ne i32 %26, %27
  br i1 %28, label %29, label %32

29:                                               ; preds = %22
  %30 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %31 = call i32 @exit(i32 0) #3
  unreachable

32:                                               ; preds = %22
  %33 = call i32 @FD_ZERO(i32* %9)
  %34 = load i32, i32* %4, align 4
  %35 = call i32 @FD_SET(i32 %34, i32* %9)
  %36 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 0
  store i32 1, i32* %36, align 8
  %37 = getelementptr inbounds %struct.timeval, %struct.timeval* %10, i32 0, i32 1
  store i64 0, i64* %37, align 8
  %38 = load i32, i32* %4, align 4
  %39 = add nsw i32 %38, 1
  %40 = call i32 @select(i32 %39, i32* %9, i32* null, i32* null, %struct.timeval* %10)
  %41 = load i32, i32* %4, align 4
  %42 = call i64 @FD_ISSET(i32 %41, i32* %9)
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %73

44:                                               ; preds = %32
  %45 = load i32, i32* %4, align 4
  %46 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %47 = call i32 @recv(i32 %45, i8* %46, i32 1024, i32 0)
  store i32 %47, i32* %8, align 4
  %48 = icmp slt i32 %47, 0
  br i1 %48, label %49, label %52

49:                                               ; preds = %44
  %50 = call i32 @perror(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %51 = call i32 @exit(i32 0) #3
  unreachable

52:                                               ; preds = %44
  %53 = load i32, i32* %8, align 4
  %54 = icmp eq i32 %53, 0
  br i1 %54, label %55, label %59

55:                                               ; preds = %52
  %56 = load i32, i32* @stderr, align 4
  %57 = call i32 @fprintf(i32 %56, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %58 = call i32 @exit(i32 0) #3
  unreachable

59:                                               ; preds = %52
  %60 = load i64, i64* @debug, align 8
  %61 = icmp ne i64 %60, 0
  br i1 %61, label %65, label %62

62:                                               ; preds = %59
  %63 = load i32, i32* %6, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %72

65:                                               ; preds = %62, %59
  %66 = load i32, i32* @STDERR_FILENO, align 4
  %67 = call i32 @write(i32 %66, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32 3)
  %68 = load i32, i32* @STDERR_FILENO, align 4
  %69 = getelementptr inbounds [1024 x i8], [1024 x i8]* %7, i64 0, i64 0
  %70 = load i32, i32* %8, align 4
  %71 = call i32 @write(i32 %68, i8* %69, i32 %70)
  br label %72

72:                                               ; preds = %65, %62
  br label %73

73:                                               ; preds = %72, %32
  ret void
}

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @send(i32, i8*, i32, i32) #1

declare dso_local i32 @perror(i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @FD_ZERO(i32*) #1

declare dso_local i32 @FD_SET(i32, i32*) #1

declare dso_local i32 @select(i32, i32*, i32*, i32*, %struct.timeval*) #1

declare dso_local i64 @FD_ISSET(i32, i32*) #1

declare dso_local i32 @recv(i32, i8*, i32, i32) #1

declare dso_local i32 @fprintf(i32, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
