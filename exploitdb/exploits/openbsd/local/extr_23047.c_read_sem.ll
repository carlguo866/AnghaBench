; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/openbsd/local/extr_23047.c_read_sem.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/openbsd/local/extr_23047.c_read_sem.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sem = type { i8*, i8*, i8*, i8* }

@semid = common dso_local global i32 0, align 4
@idx = common dso_local global i32 0, align 4
@GETVAL = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@GETPID = common dso_local global i32 0, align 4
@GETNCNT = common dso_local global i32 0, align 4
@GETZCNT = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [17 x i8] c"read_sem: semctl\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @read_sem(%struct.sem* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca %struct.sem*, align 8
  store %struct.sem* %0, %struct.sem** %3, align 8
  %4 = load %struct.sem*, %struct.sem** %3, align 8
  %5 = call i32 @memset(%struct.sem* %4, i32 0, i32 32)
  %6 = load i32, i32* @semid, align 4
  %7 = load i32, i32* @idx, align 4
  %8 = load i32, i32* @GETVAL, align 4
  %9 = call i8* @semctl(i32 %6, i32 %7, i32 %8, i32* null)
  %10 = load %struct.sem*, %struct.sem** %3, align 8
  %11 = getelementptr inbounds %struct.sem, %struct.sem* %10, i32 0, i32 3
  store i8* %9, i8** %11, align 8
  %12 = load i64, i64* @errno, align 8
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %14, label %15

14:                                               ; preds = %1
  br label %46

15:                                               ; preds = %1
  %16 = load i32, i32* @semid, align 4
  %17 = load i32, i32* @idx, align 4
  %18 = load i32, i32* @GETPID, align 4
  %19 = call i8* @semctl(i32 %16, i32 %17, i32 %18, i32* null)
  %20 = load %struct.sem*, %struct.sem** %3, align 8
  %21 = getelementptr inbounds %struct.sem, %struct.sem* %20, i32 0, i32 2
  store i8* %19, i8** %21, align 8
  %22 = load i64, i64* @errno, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %15
  br label %46

25:                                               ; preds = %15
  %26 = load i32, i32* @semid, align 4
  %27 = load i32, i32* @idx, align 4
  %28 = load i32, i32* @GETNCNT, align 4
  %29 = call i8* @semctl(i32 %26, i32 %27, i32 %28, i32* null)
  %30 = load %struct.sem*, %struct.sem** %3, align 8
  %31 = getelementptr inbounds %struct.sem, %struct.sem* %30, i32 0, i32 1
  store i8* %29, i8** %31, align 8
  %32 = load i64, i64* @errno, align 8
  %33 = icmp ne i64 %32, 0
  br i1 %33, label %34, label %35

34:                                               ; preds = %25
  br label %46

35:                                               ; preds = %25
  %36 = load i32, i32* @semid, align 4
  %37 = load i32, i32* @idx, align 4
  %38 = load i32, i32* @GETZCNT, align 4
  %39 = call i8* @semctl(i32 %36, i32 %37, i32 %38, i32* null)
  %40 = load %struct.sem*, %struct.sem** %3, align 8
  %41 = getelementptr inbounds %struct.sem, %struct.sem* %40, i32 0, i32 0
  store i8* %39, i8** %41, align 8
  %42 = load i64, i64* @errno, align 8
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %45

44:                                               ; preds = %35
  br label %46

45:                                               ; preds = %35
  store i32 0, i32* %2, align 4
  br label %48

46:                                               ; preds = %44, %34, %24, %14
  %47 = call i32 @perror(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  store i32 -1, i32* %2, align 4
  br label %48

48:                                               ; preds = %46, %45
  %49 = load i32, i32* %2, align 4
  ret i32 %49
}

declare dso_local i32 @memset(%struct.sem*, i32, i32) #1

declare dso_local i8* @semctl(i32, i32, i32, i32*) #1

declare dso_local i32 @perror(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
