; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/openbsd/local/extr_23047.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/openbsd/local/extr_23047.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [12 x i8] c"%s <semid>\0A\00", align 1
@semid = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [4 x i8] c"\0A> \00", align 1
@stdin = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [38 x i8] c"Enter one of the following commands:\0A\00", align 1
@.str.3 = private unnamed_addr constant [23 x i8] c"\09r - read a semaphore\0A\00", align 1
@.str.4 = private unnamed_addr constant [26 x i8] c"\09\09syntax r index[.level]\0A\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"\09\09e.g. r 1\0A\00", align 1
@.str.6 = private unnamed_addr constant [16 x i8] c"\09\09e.g. r 1.val\0A\00", align 1
@.str.7 = private unnamed_addr constant [20 x i8] c"\09w - write a value\0A\00", align 1
@.str.8 = private unnamed_addr constant [24 x i8] c"\09\09syntax w index value\0A\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"\09\09e.g. w 1 7\0A\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"\09q - quit\0A\00", align 1
@.str.11 = private unnamed_addr constant [6 x i8] c"r %d\0A\00", align 1
@idx = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [9 x i8] c"w %d %d\0A\00", align 1
@val = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca [80 x i8], align 16
  %8 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %9 = load i32, i32* %4, align 4
  %10 = icmp slt i32 %9, 2
  br i1 %10, label %11, label %16

11:                                               ; preds = %2
  %12 = load i8**, i8*** %5, align 8
  %13 = getelementptr inbounds i8*, i8** %12, i64 0
  %14 = load i8*, i8** %13, align 8
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i8* %14)
  store i32 1, i32* %3, align 4
  br label %78

16:                                               ; preds = %2
  %17 = load i8**, i8*** %5, align 8
  %18 = getelementptr inbounds i8*, i8** %17, i64 1
  %19 = load i8*, i8** %18, align 8
  %20 = call i32 @atoi(i8* %19)
  store i32 %20, i32* @semid, align 4
  store i32 0, i32* %6, align 4
  br label %21

21:                                               ; preds = %76, %16
  %22 = load i32, i32* %6, align 4
  %23 = icmp ne i32 %22, 0
  %24 = xor i1 %23, true
  br i1 %24, label %25, label %77

25:                                               ; preds = %21
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.1, i64 0, i64 0))
  %27 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %28 = load i32, i32* @stdin, align 4
  %29 = call i32 @fgets(i8* %27, i32 80, i32 %28)
  %30 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %31 = load i8, i8* %30, align 16
  %32 = sext i8 %31 to i32
  switch i32 %32, label %75 [
    i32 114, label %33
    i32 82, label %33
    i32 119, label %36
    i32 87, label %36
    i32 113, label %39
    i32 81, label %39
    i32 104, label %40
    i32 72, label %40
    i32 13, label %50
    i32 10, label %50
  ]

33:                                               ; preds = %25, %25
  store i8 114, i8* %8, align 1
  %34 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %35 = call i32 @do_read(i8* %34)
  br label %76

36:                                               ; preds = %25, %25
  store i8 119, i8* %8, align 1
  %37 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %38 = call i32 @do_write(i8* %37)
  br label %76

39:                                               ; preds = %25, %25
  store i32 1, i32* %6, align 4
  br label %76

40:                                               ; preds = %25, %25
  %41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.2, i64 0, i64 0))
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.3, i64 0, i64 0))
  %43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.4, i64 0, i64 0))
  %44 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i64 0, i64 0))
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.6, i64 0, i64 0))
  %46 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.7, i64 0, i64 0))
  %47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.8, i64 0, i64 0))
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0))
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i64 0, i64 0))
  br label %76

50:                                               ; preds = %25, %25
  %51 = load i8, i8* %8, align 1
  %52 = sext i8 %51 to i32
  %53 = icmp eq i32 %52, 114
  br i1 %53, label %54, label %61

54:                                               ; preds = %50
  %55 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %56 = load i32, i32* @idx, align 4
  %57 = add nsw i32 %56, 1
  store i32 %57, i32* @idx, align 4
  %58 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %55, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i32 %57)
  %59 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %60 = call i32 @do_read(i8* %59)
  br label %74

61:                                               ; preds = %50
  %62 = load i8, i8* %8, align 1
  %63 = sext i8 %62 to i32
  %64 = icmp eq i32 %63, 119
  br i1 %64, label %65, label %73

65:                                               ; preds = %61
  %66 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %67 = load i32, i32* @idx, align 4
  %68 = add nsw i32 %67, 1
  store i32 %68, i32* @idx, align 4
  %69 = load i32, i32* @val, align 4
  %70 = call i32 (i8*, i8*, i32, ...) @sprintf(i8* %66, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i64 0, i64 0), i32 %68, i32 %69)
  %71 = getelementptr inbounds [80 x i8], [80 x i8]* %7, i64 0, i64 0
  %72 = call i32 @do_write(i8* %71)
  br label %73

73:                                               ; preds = %65, %61
  br label %74

74:                                               ; preds = %73, %54
  br label %76

75:                                               ; preds = %25
  br label %76

76:                                               ; preds = %75, %74, %40, %39, %36, %33
  br label %21

77:                                               ; preds = %21
  store i32 0, i32* %3, align 4
  br label %78

78:                                               ; preds = %77, %11
  %79 = load i32, i32* %3, align 4
  ret i32 %79
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @fgets(i8*, i32, i32) #1

declare dso_local i32 @do_read(i8*) #1

declare dso_local i32 @do_write(i8*) #1

declare dso_local i32 @sprintf(i8*, i8*, i32, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
