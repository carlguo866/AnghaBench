; ModuleID = '/home/carl/AnghaBench/exploitdb/exploits/openbsd/local/extr_42271.c_get_jobkeys.c'
source_filename = "/home/carl/AnghaBench/exploitdb/exploits/openbsd/local/extr_42271.c_get_jobkeys.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i64, i64 }

@NUMJOBS = common dso_local global i64 0, align 8
@STDERR_FILENO = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [22 x i8] c"initializing jobkeys\0A\00", align 1
@cmp_key = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [20 x i8] c"finalizing jobkeys\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i64* ()* @get_jobkeys to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i64* @get_jobkeys() #0 {
  %1 = alloca i64, align 8
  %2 = alloca %struct.TYPE_4__*, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = load i64, i64* @NUMJOBS, align 8
  store i64 %7, i64* %1, align 8
  %8 = load i64, i64* %1, align 8
  %9 = call i8* @calloc(i64 %8, i32 16)
  %10 = bitcast i8* %9 to %struct.TYPE_4__*
  store %struct.TYPE_4__* %10, %struct.TYPE_4__** %2, align 8
  %11 = load i32, i32* @STDERR_FILENO, align 4
  %12 = call i32 @write(i32 %11, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0), i32 21)
  %13 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %14 = icmp ne %struct.TYPE_4__* %13, null
  br i1 %14, label %17, label %15

15:                                               ; preds = %0
  %16 = call i32 (...) @die()
  br label %17

17:                                               ; preds = %15, %0
  store i64 0, i64* %3, align 8
  br label %18

18:                                               ; preds = %28, %17
  %19 = load i64, i64* %3, align 8
  %20 = load i64, i64* %1, align 8
  %21 = icmp ult i64 %19, %20
  br i1 %21, label %22, label %31

22:                                               ; preds = %18
  %23 = load i64, i64* %3, align 8
  %24 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %25 = load i64, i64* %3, align 8
  %26 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %24, i64 %25
  %27 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %26, i32 0, i32 0
  store i64 %23, i64* %27, align 8
  br label %28

28:                                               ; preds = %22
  %29 = load i64, i64* %3, align 8
  %30 = add i64 %29, 1
  store i64 %30, i64* %3, align 8
  br label %18

31:                                               ; preds = %18
  %32 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %33 = load i64, i64* %1, align 8
  %34 = load i32, i32* @cmp_key, align 4
  %35 = call i32 @slowsort(%struct.TYPE_4__* %32, i64 %33, i32 16, i32 %34, i32 34603008)
  %36 = load i64, i64* %1, align 8
  %37 = call i8* @calloc(i64 %36, i32 8)
  %38 = bitcast i8* %37 to i64*
  store i64* %38, i64** %4, align 8
  %39 = load i32, i32* @STDERR_FILENO, align 4
  %40 = call i32 @write(i32 %39, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.1, i64 0, i64 0), i32 19)
  %41 = load i64*, i64** %4, align 8
  %42 = icmp ne i64* %41, null
  br i1 %42, label %45, label %43

43:                                               ; preds = %31
  %44 = call i32 (...) @die()
  br label %45

45:                                               ; preds = %43, %31
  store i64 0, i64* %3, align 8
  br label %46

46:                                               ; preds = %90, %45
  %47 = load i64, i64* %3, align 8
  %48 = load i64, i64* %1, align 8
  %49 = icmp ult i64 %47, %48
  br i1 %49, label %50, label %93

50:                                               ; preds = %46
  %51 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %52 = load i64, i64* %3, align 8
  %53 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %51, i64 %52
  %54 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %53, i32 0, i32 0
  %55 = load i64, i64* %54, align 8
  store i64 %55, i64* %5, align 8
  %56 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %57 = load i64, i64* %3, align 8
  %58 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %56, i64 %57
  %59 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %58, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  store i64 %60, i64* %6, align 8
  %61 = load i64, i64* %5, align 8
  %62 = load i64, i64* %1, align 8
  %63 = icmp uge i64 %61, %62
  br i1 %63, label %64, label %66

64:                                               ; preds = %50
  %65 = call i32 (...) @die()
  br label %66

66:                                               ; preds = %64, %50
  %67 = load i64, i64* %6, align 8
  %68 = icmp ule i64 %67, 0
  br i1 %68, label %69, label %71

69:                                               ; preds = %66
  %70 = call i32 (...) @die()
  br label %71

71:                                               ; preds = %69, %66
  %72 = load i64, i64* %6, align 8
  %73 = load i64, i64* %1, align 8
  %74 = icmp ugt i64 %72, %73
  br i1 %74, label %75, label %77

75:                                               ; preds = %71
  %76 = call i32 (...) @die()
  br label %77

77:                                               ; preds = %75, %71
  %78 = load i64*, i64** %4, align 8
  %79 = load i64, i64* %5, align 8
  %80 = getelementptr inbounds i64, i64* %78, i64 %79
  %81 = load i64, i64* %80, align 8
  %82 = icmp ne i64 %81, 0
  br i1 %82, label %83, label %85

83:                                               ; preds = %77
  %84 = call i32 (...) @die()
  br label %85

85:                                               ; preds = %83, %77
  %86 = load i64, i64* %6, align 8
  %87 = load i64*, i64** %4, align 8
  %88 = load i64, i64* %5, align 8
  %89 = getelementptr inbounds i64, i64* %87, i64 %88
  store i64 %86, i64* %89, align 8
  br label %90

90:                                               ; preds = %85
  %91 = load i64, i64* %3, align 8
  %92 = add i64 %91, 1
  store i64 %92, i64* %3, align 8
  br label %46

93:                                               ; preds = %46
  %94 = load %struct.TYPE_4__*, %struct.TYPE_4__** %2, align 8
  %95 = call i32 @free(%struct.TYPE_4__* %94)
  %96 = load i64*, i64** %4, align 8
  ret i64* %96
}

declare dso_local i8* @calloc(i64, i32) #1

declare dso_local i32 @write(i32, i8*, i32) #1

declare dso_local i32 @die(...) #1

declare dso_local i32 @slowsort(%struct.TYPE_4__*, i64, i32, i32, i32) #1

declare dso_local i32 @free(%struct.TYPE_4__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
