; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/linux_x86-64/extr_43956.c_keySched.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/linux_x86-64/extr_43956.c_keySched.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@RHO = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @keySched(i32* %0, i32 %1, i32** %2, i32* %3, i32* %4) #0 {
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32**, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32*, align 8
  %11 = alloca [4 x i32], align 16
  %12 = alloca [4 x i32], align 16
  %13 = alloca i32, align 4
  %14 = alloca i32, align 4
  %15 = alloca [8 x i32], align 16
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32* %0, i32** %6, align 8
  store i32 %1, i32* %7, align 4
  store i32** %2, i32*** %8, align 8
  store i32* %3, i32** %9, align 8
  store i32* %4, i32** %10, align 8
  %18 = load i32, i32* %7, align 4
  %19 = add nsw i32 %18, 63
  %20 = sdiv i32 %19, 64
  %21 = load i32*, i32** %10, align 8
  store i32 %20, i32* %21, align 4
  %22 = load i32*, i32** %10, align 8
  %23 = load i32, i32* %22, align 4
  %24 = sext i32 %23 to i64
  %25 = mul i64 4, %24
  %26 = trunc i64 %25 to i32
  %27 = call i64 @malloc(i32 %26)
  %28 = inttoptr i64 %27 to i32*
  %29 = load i32**, i32*** %8, align 8
  store i32* %28, i32** %29, align 8
  store i32 0, i32* %13, align 4
  br label %30

30:                                               ; preds = %57, %5
  %31 = load i32, i32* %13, align 4
  %32 = load i32*, i32** %10, align 8
  %33 = load i32, i32* %32, align 4
  %34 = icmp slt i32 %31, %33
  br i1 %34, label %35, label %60

35:                                               ; preds = %30
  %36 = load i32*, i32** %6, align 8
  %37 = load i32, i32* %13, align 4
  %38 = mul nsw i32 2, %37
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds i32, i32* %36, i64 %39
  %41 = load i32, i32* %40, align 4
  %42 = call i32 @BSWAP(i32 %41)
  %43 = load i32, i32* %13, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 %44
  store i32 %42, i32* %45, align 4
  %46 = load i32*, i32** %6, align 8
  %47 = load i32, i32* %13, align 4
  %48 = mul nsw i32 2, %47
  %49 = add nsw i32 %48, 1
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %46, i64 %50
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @BSWAP(i32 %52)
  %54 = load i32, i32* %13, align 4
  %55 = sext i32 %54 to i64
  %56 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %55
  store i32 %53, i32* %56, align 4
  br label %57

57:                                               ; preds = %35
  %58 = load i32, i32* %13, align 4
  %59 = add nsw i32 %58, 1
  store i32 %59, i32* %13, align 4
  br label %30

60:                                               ; preds = %30
  store i32 0, i32* %13, align 4
  br label %61

61:                                               ; preds = %113, %60
  %62 = load i32, i32* %13, align 4
  %63 = load i32*, i32** %10, align 8
  %64 = load i32, i32* %63, align 4
  %65 = icmp slt i32 %62, %64
  br i1 %65, label %66, label %116

66:                                               ; preds = %61
  store i32 0, i32* %14, align 4
  br label %67

67:                                               ; preds = %80, %66
  %68 = load i32, i32* %14, align 4
  %69 = icmp slt i32 %68, 4
  br i1 %69, label %70, label %83

70:                                               ; preds = %67
  %71 = load i32, i32* %13, align 4
  %72 = sext i32 %71 to i64
  %73 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 %72
  %74 = load i32, i32* %73, align 4
  %75 = load i32, i32* %14, align 4
  %76 = call i32 @_b(i32 %74, i32 %75)
  %77 = load i32, i32* %14, align 4
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds [8 x i32], [8 x i32]* %15, i64 0, i64 %78
  store i32 %76, i32* %79, align 4
  br label %80

80:                                               ; preds = %70
  %81 = load i32, i32* %14, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %14, align 4
  br label %67

83:                                               ; preds = %67
  store i32 0, i32* %14, align 4
  br label %84

84:                                               ; preds = %98, %83
  %85 = load i32, i32* %14, align 4
  %86 = icmp slt i32 %85, 4
  br i1 %86, label %87, label %101

87:                                               ; preds = %84
  %88 = load i32, i32* %13, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = load i32, i32* %14, align 4
  %93 = call i32 @_b(i32 %91, i32 %92)
  %94 = load i32, i32* %14, align 4
  %95 = add nsw i32 %94, 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds [8 x i32], [8 x i32]* %15, i64 0, i64 %96
  store i32 %93, i32* %97, align 4
  br label %98

98:                                               ; preds = %87
  %99 = load i32, i32* %14, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %14, align 4
  br label %84

101:                                              ; preds = %84
  %102 = getelementptr inbounds [8 x i32], [8 x i32]* %15, i64 0, i64 0
  %103 = call i32 @RSMatrixMultiply(i32* %102)
  %104 = load i32**, i32*** %8, align 8
  %105 = load i32*, i32** %104, align 8
  %106 = load i32*, i32** %10, align 8
  %107 = load i32, i32* %106, align 4
  %108 = load i32, i32* %13, align 4
  %109 = sub nsw i32 %107, %108
  %110 = sub nsw i32 %109, 1
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %105, i64 %111
  store i32 %103, i32* %112, align 4
  br label %113

113:                                              ; preds = %101
  %114 = load i32, i32* %13, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %13, align 4
  br label %61

116:                                              ; preds = %61
  store i32 0, i32* %13, align 4
  br label %117

117:                                              ; preds = %159, %116
  %118 = load i32, i32* %13, align 4
  %119 = icmp slt i32 %118, 20
  br i1 %119, label %120, label %162

120:                                              ; preds = %117
  %121 = load i32, i32* %13, align 4
  %122 = mul nsw i32 2, %121
  %123 = load i32, i32* @RHO, align 4
  %124 = mul nsw i32 %122, %123
  %125 = getelementptr inbounds [4 x i32], [4 x i32]* %12, i64 0, i64 0
  %126 = load i32*, i32** %10, align 8
  %127 = load i32, i32* %126, align 4
  %128 = call i32 @h(i32 %124, i32* %125, i32 %127)
  store i32 %128, i32* %16, align 4
  %129 = load i32, i32* %13, align 4
  %130 = mul nsw i32 2, %129
  %131 = load i32, i32* @RHO, align 4
  %132 = mul nsw i32 %130, %131
  %133 = load i32, i32* @RHO, align 4
  %134 = add nsw i32 %132, %133
  %135 = getelementptr inbounds [4 x i32], [4 x i32]* %11, i64 0, i64 0
  %136 = load i32*, i32** %10, align 8
  %137 = load i32, i32* %136, align 4
  %138 = call i32 @h(i32 %134, i32* %135, i32 %137)
  %139 = call i32 @ROL(i32 %138, i32 8)
  store i32 %139, i32* %17, align 4
  %140 = load i32, i32* %16, align 4
  %141 = load i32, i32* %17, align 4
  %142 = add nsw i32 %140, %141
  %143 = load i32*, i32** %9, align 8
  %144 = load i32, i32* %13, align 4
  %145 = mul nsw i32 2, %144
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i32, i32* %143, i64 %146
  store i32 %142, i32* %147, align 4
  %148 = load i32, i32* %16, align 4
  %149 = load i32, i32* %17, align 4
  %150 = mul nsw i32 2, %149
  %151 = add nsw i32 %148, %150
  %152 = call i32 @ROL(i32 %151, i32 9)
  %153 = load i32*, i32** %9, align 8
  %154 = load i32, i32* %13, align 4
  %155 = mul nsw i32 2, %154
  %156 = add nsw i32 %155, 1
  %157 = sext i32 %156 to i64
  %158 = getelementptr inbounds i32, i32* %153, i64 %157
  store i32 %152, i32* %158, align 4
  br label %159

159:                                              ; preds = %120
  %160 = load i32, i32* %13, align 4
  %161 = add nsw i32 %160, 1
  store i32 %161, i32* %13, align 4
  br label %117

162:                                              ; preds = %117
  ret void
}

declare dso_local i64 @malloc(i32) #1

declare dso_local i32 @BSWAP(i32) #1

declare dso_local i32 @_b(i32, i32) #1

declare dso_local i32 @RSMatrixMultiply(i32*) #1

declare dso_local i32 @h(i32, i32*, i32) #1

declare dso_local i32 @ROL(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
