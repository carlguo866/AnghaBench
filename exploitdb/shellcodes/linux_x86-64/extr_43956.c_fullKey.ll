; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/linux_x86-64/extr_43956.c_fullKey.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/linux_x86-64/extr_43956.c_fullKey.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@Q1 = common dso_local global i64* null, align 8
@Q0 = common dso_local global i64* null, align 8
@multEF = common dso_local global i32* null, align 8
@mult5B = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @fullKey(i32* %0, i32 %1, [256 x i32]* %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32, align 4
  %6 = alloca [256 x i32]*, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i32, align 4
  store i32* %0, i32** %4, align 8
  store i32 %1, i32* %5, align 4
  store [256 x i32]* %2, [256 x i32]** %6, align 8
  store i32 0, i32* %11, align 4
  br label %12

12:                                               ; preds = %290, %3
  %13 = load i32, i32* %11, align 4
  %14 = icmp slt i32 %13, 256
  br i1 %14, label %15, label %293

15:                                               ; preds = %12
  %16 = load i32, i32* %11, align 4
  %17 = sext i32 %16 to i64
  store i64 %17, i64* %7, align 8
  %18 = load i32, i32* %11, align 4
  %19 = sext i32 %18 to i64
  store i64 %19, i64* %8, align 8
  %20 = load i32, i32* %11, align 4
  %21 = sext i32 %20 to i64
  store i64 %21, i64* %9, align 8
  %22 = load i32, i32* %11, align 4
  %23 = sext i32 %22 to i64
  store i64 %23, i64* %10, align 8
  %24 = load i32, i32* %5, align 4
  switch i32 %24, label %180 [
    i32 4, label %25
    i32 3, label %62
    i32 2, label %99
  ]

25:                                               ; preds = %15
  %26 = load i64*, i64** @Q1, align 8
  %27 = load i64, i64* %7, align 8
  %28 = getelementptr inbounds i64, i64* %26, i64 %27
  %29 = load i64, i64* %28, align 8
  %30 = load i32*, i32** %4, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 3
  %32 = load i32, i32* %31, align 4
  %33 = call i64 @b0(i32 %32)
  %34 = xor i64 %29, %33
  store i64 %34, i64* %7, align 8
  %35 = load i64*, i64** @Q0, align 8
  %36 = load i64, i64* %8, align 8
  %37 = getelementptr inbounds i64, i64* %35, i64 %36
  %38 = load i64, i64* %37, align 8
  %39 = load i32*, i32** %4, align 8
  %40 = getelementptr inbounds i32, i32* %39, i64 3
  %41 = load i32, i32* %40, align 4
  %42 = call i64 @b1(i32 %41)
  %43 = xor i64 %38, %42
  store i64 %43, i64* %8, align 8
  %44 = load i64*, i64** @Q0, align 8
  %45 = load i64, i64* %9, align 8
  %46 = getelementptr inbounds i64, i64* %44, i64 %45
  %47 = load i64, i64* %46, align 8
  %48 = load i32*, i32** %4, align 8
  %49 = getelementptr inbounds i32, i32* %48, i64 3
  %50 = load i32, i32* %49, align 4
  %51 = call i64 @b2(i32 %50)
  %52 = xor i64 %47, %51
  store i64 %52, i64* %9, align 8
  %53 = load i64*, i64** @Q1, align 8
  %54 = load i64, i64* %10, align 8
  %55 = getelementptr inbounds i64, i64* %53, i64 %54
  %56 = load i64, i64* %55, align 8
  %57 = load i32*, i32** %4, align 8
  %58 = getelementptr inbounds i32, i32* %57, i64 3
  %59 = load i32, i32* %58, align 4
  %60 = call i64 @b3(i32 %59)
  %61 = xor i64 %56, %60
  store i64 %61, i64* %10, align 8
  br label %62

62:                                               ; preds = %15, %25
  %63 = load i64*, i64** @Q1, align 8
  %64 = load i64, i64* %7, align 8
  %65 = getelementptr inbounds i64, i64* %63, i64 %64
  %66 = load i64, i64* %65, align 8
  %67 = load i32*, i32** %4, align 8
  %68 = getelementptr inbounds i32, i32* %67, i64 2
  %69 = load i32, i32* %68, align 4
  %70 = call i64 @b0(i32 %69)
  %71 = xor i64 %66, %70
  store i64 %71, i64* %7, align 8
  %72 = load i64*, i64** @Q1, align 8
  %73 = load i64, i64* %8, align 8
  %74 = getelementptr inbounds i64, i64* %72, i64 %73
  %75 = load i64, i64* %74, align 8
  %76 = load i32*, i32** %4, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 2
  %78 = load i32, i32* %77, align 4
  %79 = call i64 @b1(i32 %78)
  %80 = xor i64 %75, %79
  store i64 %80, i64* %8, align 8
  %81 = load i64*, i64** @Q0, align 8
  %82 = load i64, i64* %9, align 8
  %83 = getelementptr inbounds i64, i64* %81, i64 %82
  %84 = load i64, i64* %83, align 8
  %85 = load i32*, i32** %4, align 8
  %86 = getelementptr inbounds i32, i32* %85, i64 2
  %87 = load i32, i32* %86, align 4
  %88 = call i64 @b2(i32 %87)
  %89 = xor i64 %84, %88
  store i64 %89, i64* %9, align 8
  %90 = load i64*, i64** @Q0, align 8
  %91 = load i64, i64* %10, align 8
  %92 = getelementptr inbounds i64, i64* %90, i64 %91
  %93 = load i64, i64* %92, align 8
  %94 = load i32*, i32** %4, align 8
  %95 = getelementptr inbounds i32, i32* %94, i64 2
  %96 = load i32, i32* %95, align 4
  %97 = call i64 @b3(i32 %96)
  %98 = xor i64 %93, %97
  store i64 %98, i64* %10, align 8
  br label %99

99:                                               ; preds = %15, %62
  %100 = load i64*, i64** @Q1, align 8
  %101 = load i64*, i64** @Q0, align 8
  %102 = load i64*, i64** @Q0, align 8
  %103 = load i64, i64* %7, align 8
  %104 = getelementptr inbounds i64, i64* %102, i64 %103
  %105 = load i64, i64* %104, align 8
  %106 = load i32*, i32** %4, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 1
  %108 = load i32, i32* %107, align 4
  %109 = call i64 @b0(i32 %108)
  %110 = xor i64 %105, %109
  %111 = getelementptr inbounds i64, i64* %101, i64 %110
  %112 = load i64, i64* %111, align 8
  %113 = load i32*, i32** %4, align 8
  %114 = getelementptr inbounds i32, i32* %113, i64 0
  %115 = load i32, i32* %114, align 4
  %116 = call i64 @b0(i32 %115)
  %117 = xor i64 %112, %116
  %118 = getelementptr inbounds i64, i64* %100, i64 %117
  %119 = load i64, i64* %118, align 8
  store i64 %119, i64* %7, align 8
  %120 = load i64*, i64** @Q0, align 8
  %121 = load i64*, i64** @Q0, align 8
  %122 = load i64*, i64** @Q1, align 8
  %123 = load i64, i64* %8, align 8
  %124 = getelementptr inbounds i64, i64* %122, i64 %123
  %125 = load i64, i64* %124, align 8
  %126 = load i32*, i32** %4, align 8
  %127 = getelementptr inbounds i32, i32* %126, i64 1
  %128 = load i32, i32* %127, align 4
  %129 = call i64 @b1(i32 %128)
  %130 = xor i64 %125, %129
  %131 = getelementptr inbounds i64, i64* %121, i64 %130
  %132 = load i64, i64* %131, align 8
  %133 = load i32*, i32** %4, align 8
  %134 = getelementptr inbounds i32, i32* %133, i64 0
  %135 = load i32, i32* %134, align 4
  %136 = call i64 @b1(i32 %135)
  %137 = xor i64 %132, %136
  %138 = getelementptr inbounds i64, i64* %120, i64 %137
  %139 = load i64, i64* %138, align 8
  store i64 %139, i64* %8, align 8
  %140 = load i64*, i64** @Q1, align 8
  %141 = load i64*, i64** @Q1, align 8
  %142 = load i64*, i64** @Q0, align 8
  %143 = load i64, i64* %9, align 8
  %144 = getelementptr inbounds i64, i64* %142, i64 %143
  %145 = load i64, i64* %144, align 8
  %146 = load i32*, i32** %4, align 8
  %147 = getelementptr inbounds i32, i32* %146, i64 1
  %148 = load i32, i32* %147, align 4
  %149 = call i64 @b2(i32 %148)
  %150 = xor i64 %145, %149
  %151 = getelementptr inbounds i64, i64* %141, i64 %150
  %152 = load i64, i64* %151, align 8
  %153 = load i32*, i32** %4, align 8
  %154 = getelementptr inbounds i32, i32* %153, i64 0
  %155 = load i32, i32* %154, align 4
  %156 = call i64 @b2(i32 %155)
  %157 = xor i64 %152, %156
  %158 = getelementptr inbounds i64, i64* %140, i64 %157
  %159 = load i64, i64* %158, align 8
  store i64 %159, i64* %9, align 8
  %160 = load i64*, i64** @Q0, align 8
  %161 = load i64*, i64** @Q1, align 8
  %162 = load i64*, i64** @Q1, align 8
  %163 = load i64, i64* %10, align 8
  %164 = getelementptr inbounds i64, i64* %162, i64 %163
  %165 = load i64, i64* %164, align 8
  %166 = load i32*, i32** %4, align 8
  %167 = getelementptr inbounds i32, i32* %166, i64 1
  %168 = load i32, i32* %167, align 4
  %169 = call i64 @b3(i32 %168)
  %170 = xor i64 %165, %169
  %171 = getelementptr inbounds i64, i64* %161, i64 %170
  %172 = load i64, i64* %171, align 8
  %173 = load i32*, i32** %4, align 8
  %174 = getelementptr inbounds i32, i32* %173, i64 0
  %175 = load i32, i32* %174, align 4
  %176 = call i64 @b3(i32 %175)
  %177 = xor i64 %172, %176
  %178 = getelementptr inbounds i64, i64* %160, i64 %177
  %179 = load i64, i64* %178, align 8
  store i64 %179, i64* %10, align 8
  br label %180

180:                                              ; preds = %99, %15
  %181 = load i32*, i32** @multEF, align 8
  %182 = load i64, i64* %7, align 8
  %183 = getelementptr inbounds i32, i32* %181, i64 %182
  %184 = load i32, i32* %183, align 4
  %185 = shl i32 %184, 24
  %186 = load i32*, i32** @multEF, align 8
  %187 = load i64, i64* %7, align 8
  %188 = getelementptr inbounds i32, i32* %186, i64 %187
  %189 = load i32, i32* %188, align 4
  %190 = shl i32 %189, 16
  %191 = or i32 %185, %190
  %192 = load i32*, i32** @mult5B, align 8
  %193 = load i64, i64* %7, align 8
  %194 = getelementptr inbounds i32, i32* %192, i64 %193
  %195 = load i32, i32* %194, align 4
  %196 = shl i32 %195, 8
  %197 = or i32 %191, %196
  %198 = sext i32 %197 to i64
  %199 = load i64, i64* %7, align 8
  %200 = or i64 %198, %199
  %201 = trunc i64 %200 to i32
  %202 = load [256 x i32]*, [256 x i32]** %6, align 8
  %203 = getelementptr inbounds [256 x i32], [256 x i32]* %202, i64 0
  %204 = load i32, i32* %11, align 4
  %205 = sext i32 %204 to i64
  %206 = getelementptr inbounds [256 x i32], [256 x i32]* %203, i64 0, i64 %205
  store i32 %201, i32* %206, align 4
  %207 = load i64, i64* %8, align 8
  %208 = shl i64 %207, 24
  %209 = load i32*, i32** @mult5B, align 8
  %210 = load i64, i64* %8, align 8
  %211 = getelementptr inbounds i32, i32* %209, i64 %210
  %212 = load i32, i32* %211, align 4
  %213 = shl i32 %212, 16
  %214 = sext i32 %213 to i64
  %215 = or i64 %208, %214
  %216 = load i32*, i32** @multEF, align 8
  %217 = load i64, i64* %8, align 8
  %218 = getelementptr inbounds i32, i32* %216, i64 %217
  %219 = load i32, i32* %218, align 4
  %220 = shl i32 %219, 8
  %221 = sext i32 %220 to i64
  %222 = or i64 %215, %221
  %223 = load i32*, i32** @multEF, align 8
  %224 = load i64, i64* %8, align 8
  %225 = getelementptr inbounds i32, i32* %223, i64 %224
  %226 = load i32, i32* %225, align 4
  %227 = sext i32 %226 to i64
  %228 = or i64 %222, %227
  %229 = trunc i64 %228 to i32
  %230 = load [256 x i32]*, [256 x i32]** %6, align 8
  %231 = getelementptr inbounds [256 x i32], [256 x i32]* %230, i64 1
  %232 = load i32, i32* %11, align 4
  %233 = sext i32 %232 to i64
  %234 = getelementptr inbounds [256 x i32], [256 x i32]* %231, i64 0, i64 %233
  store i32 %229, i32* %234, align 4
  %235 = load i32*, i32** @multEF, align 8
  %236 = load i64, i64* %9, align 8
  %237 = getelementptr inbounds i32, i32* %235, i64 %236
  %238 = load i32, i32* %237, align 4
  %239 = shl i32 %238, 24
  %240 = sext i32 %239 to i64
  %241 = load i64, i64* %9, align 8
  %242 = shl i64 %241, 16
  %243 = or i64 %240, %242
  %244 = load i32*, i32** @multEF, align 8
  %245 = load i64, i64* %9, align 8
  %246 = getelementptr inbounds i32, i32* %244, i64 %245
  %247 = load i32, i32* %246, align 4
  %248 = shl i32 %247, 8
  %249 = sext i32 %248 to i64
  %250 = or i64 %243, %249
  %251 = load i32*, i32** @mult5B, align 8
  %252 = load i64, i64* %9, align 8
  %253 = getelementptr inbounds i32, i32* %251, i64 %252
  %254 = load i32, i32* %253, align 4
  %255 = sext i32 %254 to i64
  %256 = or i64 %250, %255
  %257 = trunc i64 %256 to i32
  %258 = load [256 x i32]*, [256 x i32]** %6, align 8
  %259 = getelementptr inbounds [256 x i32], [256 x i32]* %258, i64 2
  %260 = load i32, i32* %11, align 4
  %261 = sext i32 %260 to i64
  %262 = getelementptr inbounds [256 x i32], [256 x i32]* %259, i64 0, i64 %261
  store i32 %257, i32* %262, align 4
  %263 = load i32*, i32** @mult5B, align 8
  %264 = load i64, i64* %10, align 8
  %265 = getelementptr inbounds i32, i32* %263, i64 %264
  %266 = load i32, i32* %265, align 4
  %267 = shl i32 %266, 24
  %268 = load i32*, i32** @multEF, align 8
  %269 = load i64, i64* %10, align 8
  %270 = getelementptr inbounds i32, i32* %268, i64 %269
  %271 = load i32, i32* %270, align 4
  %272 = shl i32 %271, 16
  %273 = or i32 %267, %272
  %274 = sext i32 %273 to i64
  %275 = load i64, i64* %10, align 8
  %276 = shl i64 %275, 8
  %277 = or i64 %274, %276
  %278 = load i32*, i32** @mult5B, align 8
  %279 = load i64, i64* %10, align 8
  %280 = getelementptr inbounds i32, i32* %278, i64 %279
  %281 = load i32, i32* %280, align 4
  %282 = sext i32 %281 to i64
  %283 = or i64 %277, %282
  %284 = trunc i64 %283 to i32
  %285 = load [256 x i32]*, [256 x i32]** %6, align 8
  %286 = getelementptr inbounds [256 x i32], [256 x i32]* %285, i64 3
  %287 = load i32, i32* %11, align 4
  %288 = sext i32 %287 to i64
  %289 = getelementptr inbounds [256 x i32], [256 x i32]* %286, i64 0, i64 %288
  store i32 %284, i32* %289, align 4
  br label %290

290:                                              ; preds = %180
  %291 = load i32, i32* %11, align 4
  %292 = add nsw i32 %291, 1
  store i32 %292, i32* %11, align 4
  br label %12

293:                                              ; preds = %12
  ret void
}

declare dso_local i64 @b0(i32) #1

declare dso_local i64 @b1(i32) #1

declare dso_local i64 @b2(i32) #1

declare dso_local i64 @b3(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
