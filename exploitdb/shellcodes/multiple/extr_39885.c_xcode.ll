; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/multiple/extr_39885.c_xcode.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/multiple/extr_39885.c_xcode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.xcode.args = private unnamed_addr constant [14 x i8] c"\FF-c\FF/bin//sh\00\00", align 1
@.str = private unnamed_addr constant [21 x i8] c"[ executing code...\0A\00", align 1
@PROT_EXEC = common dso_local global i32 0, align 4
@PROT_WRITE = common dso_local global i32 0, align 4
@PROT_READ = common dso_local global i32 0, align 4
@MAP_ANON = common dso_local global i32 0, align 4
@MAP_PRIVATE = common dso_local global i32 0, align 4
@CMD_LEN_OFS = common dso_local global i64 0, align 8
@MEM_COMMIT = common dso_local global i32 0, align 4
@MEM_RELEASE = common dso_local global i32 0, align 4
@PAGE_EXECUTE_READWRITE = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @xcode(i8* %0, i64 %1, i8* %2, i64 %3) #0 {
  %5 = alloca i8*, align 8
  %6 = alloca i64, align 8
  %7 = alloca i8*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i8*, align 8
  %10 = alloca i64*, align 8
  %11 = alloca [14 x i8], align 1
  %12 = alloca i64, align 8
  store i8* %0, i8** %5, align 8
  store i64 %1, i64* %6, align 8
  store i8* %2, i8** %7, align 8
  store i64 %3, i64* %8, align 8
  %13 = bitcast [14 x i8]* %11 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %13, i8* align 1 getelementptr inbounds ([14 x i8], [14 x i8]* @__const.xcode.args, i32 0, i32 0), i64 14, i1 false)
  %14 = getelementptr inbounds [14 x i8], [14 x i8]* %11, i64 0, i64 0
  %15 = call i32 @strlen(i8* %14)
  %16 = add nsw i32 %15, 1
  %17 = sext i32 %16 to i64
  store i64 %17, i64* %12, align 8
  %18 = call i32 @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str, i64 0, i64 0))
  %19 = load i64, i64* %6, align 8
  %20 = load i64, i64* %8, align 8
  %21 = add i64 %19, %20
  %22 = load i64, i64* %12, align 8
  %23 = add i64 %21, %22
  %24 = load i32, i32* @PROT_EXEC, align 4
  %25 = load i32, i32* @PROT_WRITE, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @PROT_READ, align 4
  %28 = or i32 %26, %27
  %29 = load i32, i32* @MAP_ANON, align 4
  %30 = load i32, i32* @MAP_PRIVATE, align 4
  %31 = or i32 %29, %30
  %32 = call i8* @mmap(i32 0, i64 %23, i32 %28, i32 %31, i32 -1, i32 0)
  store i8* %32, i8** %9, align 8
  %33 = load i8*, i8** %9, align 8
  %34 = icmp ne i8* %33, null
  br i1 %34, label %35, label %79

35:                                               ; preds = %4
  %36 = load i8*, i8** %9, align 8
  %37 = bitcast i8* %36 to i64*
  store i64* %37, i64** %10, align 8
  %38 = load i64*, i64** %10, align 8
  %39 = bitcast i64* %38 to i8*
  %40 = load i8*, i8** %5, align 8
  %41 = load i64, i64* %6, align 8
  %42 = call i32 @memcpy(i8* %39, i8* %40, i64 %41)
  %43 = load i64, i64* %8, align 8
  %44 = load i64*, i64** %10, align 8
  %45 = load i64, i64* @CMD_LEN_OFS, align 8
  %46 = getelementptr inbounds i64, i64* %44, i64 %45
  store i64 %43, i64* %46, align 8
  %47 = load i64*, i64** %10, align 8
  %48 = load i64, i64* %6, align 8
  %49 = getelementptr inbounds i64, i64* %47, i64 %48
  %50 = bitcast i64* %49 to i8*
  %51 = load i8*, i8** %7, align 8
  %52 = load i64, i64* %8, align 8
  %53 = call i32 @memcpy(i8* %50, i8* %51, i64 %52)
  %54 = load i64*, i64** %10, align 8
  %55 = load i64, i64* %6, align 8
  %56 = load i64, i64* %8, align 8
  %57 = add i64 %55, %56
  %58 = getelementptr inbounds i64, i64* %54, i64 %57
  %59 = bitcast i64* %58 to i8*
  %60 = getelementptr inbounds [14 x i8], [14 x i8]* %11, i64 0, i64 0
  %61 = load i64, i64* %12, align 8
  %62 = call i32 @memcpy(i8* %59, i8* %60, i64 %61)
  %63 = load i8*, i8** %9, align 8
  %64 = load i64, i64* %6, align 8
  %65 = load i64, i64* %8, align 8
  %66 = add i64 %64, %65
  %67 = load i64, i64* %12, align 8
  %68 = add i64 %66, %67
  %69 = call i32 @bin2file(i8* %63, i64 %68)
  %70 = load i8*, i8** %9, align 8
  %71 = bitcast i8* %70 to void (...)*
  call void (...) %71()
  %72 = load i8*, i8** %9, align 8
  %73 = load i64, i64* %6, align 8
  %74 = load i64, i64* %8, align 8
  %75 = add i64 %73, %74
  %76 = load i64, i64* %12, align 8
  %77 = add i64 %75, %76
  %78 = call i32 @munmap(i8* %72, i64 %77)
  br label %79

79:                                               ; preds = %35, %4
  ret void
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32 @strlen(i8*) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i8* @mmap(i32, i64, i32, i32, i32, i32) #2

declare dso_local i32 @memcpy(i8*, i8*, i64) #2

declare dso_local i32 @bin2file(i8*, i64) #2

declare dso_local i32 @munmap(i8*, i64) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
