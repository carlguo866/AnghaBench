; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13286.c_slide_substr_forward.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13286.c_slide_substr_forward.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [38 x i8] c"you can't slide it that far forward!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @slide_substr_forward(i32* %0, i64 %1, i64 %2, i64 %3, i64 %4) #0 {
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i64, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32*, align 8
  %13 = alloca i32*, align 8
  %14 = alloca i32*, align 8
  %15 = alloca i32*, align 8
  %16 = alloca i64, align 8
  %17 = alloca i64, align 8
  store i32* %0, i32** %7, align 8
  store i64 %1, i64* %8, align 8
  store i64 %2, i64* %9, align 8
  store i64 %3, i64* %10, align 8
  store i64 %4, i64* %11, align 8
  %18 = load i64, i64* %11, align 8
  %19 = load i64, i64* %10, align 8
  %20 = load i64, i64* %9, align 8
  %21 = sub nsw i64 %19, %20
  %22 = load i64, i64* %8, align 8
  %23 = sub nsw i64 %21, %22
  %24 = icmp sgt i64 %18, %23
  br i1 %24, label %25, label %27

25:                                               ; preds = %5
  %26 = call i32 @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str, i64 0, i64 0))
  store i32* null, i32** %6, align 8
  br label %111

27:                                               ; preds = %5
  %28 = load i64, i64* %10, align 8
  %29 = call i32* @malloc(i64 %28)
  store i32* %29, i32** %15, align 8
  %30 = load i32*, i32** %15, align 8
  %31 = load i64, i64* %10, align 8
  %32 = call i32 @memset(i32* %30, i32 0, i64 %31)
  %33 = load i64, i64* %10, align 8
  %34 = load i64, i64* %9, align 8
  %35 = sub nsw i64 %33, %34
  %36 = load i64, i64* %8, align 8
  %37 = sub nsw i64 %35, %36
  store i64 %37, i64* %17, align 8
  %38 = load i64, i64* %17, align 8
  %39 = call i32* @malloc(i64 %38)
  store i32* %39, i32** %14, align 8
  %40 = load i32*, i32** %14, align 8
  %41 = load i64, i64* %17, align 8
  %42 = call i32 @memset(i32* %40, i32 0, i64 %41)
  %43 = load i64, i64* %8, align 8
  store i64 %43, i64* %16, align 8
  %44 = load i64, i64* %16, align 8
  %45 = call i32* @malloc(i64 %44)
  store i32* %45, i32** %12, align 8
  %46 = load i32*, i32** %12, align 8
  %47 = load i64, i64* %16, align 8
  %48 = call i32 @memset(i32* %46, i32 0, i64 %47)
  %49 = load i64, i64* %9, align 8
  %50 = call i32* @malloc(i64 %49)
  store i32* %50, i32** %13, align 8
  %51 = load i32*, i32** %13, align 8
  %52 = load i64, i64* %9, align 8
  %53 = call i32 @memset(i32* %51, i32 0, i64 %52)
  %54 = load i32*, i32** %13, align 8
  %55 = load i32*, i32** %7, align 8
  %56 = load i64, i64* %8, align 8
  %57 = getelementptr inbounds i32, i32* %55, i64 %56
  %58 = load i64, i64* %9, align 8
  %59 = call i32 @strncpy(i32* %54, i32* %57, i64 %58)
  %60 = load i32*, i32** %12, align 8
  %61 = load i32*, i32** %7, align 8
  %62 = load i64, i64* %16, align 8
  %63 = call i32 @strncpy(i32* %60, i32* %61, i64 %62)
  %64 = load i32*, i32** %14, align 8
  %65 = load i32*, i32** %7, align 8
  %66 = load i64, i64* %8, align 8
  %67 = getelementptr inbounds i32, i32* %65, i64 %66
  %68 = load i64, i64* %9, align 8
  %69 = getelementptr inbounds i32, i32* %67, i64 %68
  %70 = load i64, i64* %17, align 8
  %71 = call i32 @strncpy(i32* %64, i32* %69, i64 %70)
  %72 = load i32*, i32** %15, align 8
  %73 = load i32*, i32** %12, align 8
  %74 = load i64, i64* %16, align 8
  %75 = call i32 @strncpy(i32* %72, i32* %73, i64 %74)
  %76 = load i32*, i32** %15, align 8
  %77 = load i64, i64* %16, align 8
  %78 = getelementptr inbounds i32, i32* %76, i64 %77
  %79 = load i32*, i32** %14, align 8
  %80 = load i64, i64* %11, align 8
  %81 = call i32 @strncpy(i32* %78, i32* %79, i64 %80)
  %82 = load i32*, i32** %15, align 8
  %83 = load i64, i64* %16, align 8
  %84 = getelementptr inbounds i32, i32* %82, i64 %83
  %85 = load i64, i64* %11, align 8
  %86 = getelementptr inbounds i32, i32* %84, i64 %85
  %87 = load i32*, i32** %13, align 8
  %88 = load i64, i64* %9, align 8
  %89 = call i32 @strncpy(i32* %86, i32* %87, i64 %88)
  %90 = load i32*, i32** %15, align 8
  %91 = load i64, i64* %16, align 8
  %92 = getelementptr inbounds i32, i32* %90, i64 %91
  %93 = load i64, i64* %11, align 8
  %94 = getelementptr inbounds i32, i32* %92, i64 %93
  %95 = load i64, i64* %9, align 8
  %96 = getelementptr inbounds i32, i32* %94, i64 %95
  %97 = load i32*, i32** %14, align 8
  %98 = load i64, i64* %11, align 8
  %99 = getelementptr inbounds i32, i32* %97, i64 %98
  %100 = load i64, i64* %17, align 8
  %101 = load i64, i64* %11, align 8
  %102 = sub nsw i64 %100, %101
  %103 = call i32 @strncpy(i32* %96, i32* %99, i64 %102)
  %104 = load i32*, i32** %12, align 8
  %105 = call i32 @free(i32* %104)
  %106 = load i32*, i32** %14, align 8
  %107 = call i32 @free(i32* %106)
  %108 = load i32*, i32** %13, align 8
  %109 = call i32 @free(i32* %108)
  %110 = load i32*, i32** %15, align 8
  store i32* %110, i32** %6, align 8
  br label %111

111:                                              ; preds = %27, %25
  %112 = load i32*, i32** %6, align 8
  ret i32* %112
}

declare dso_local i32 @printf(i8*) #1

declare dso_local i32* @malloc(i64) #1

declare dso_local i32 @memset(i32*, i32, i64) #1

declare dso_local i32 @strncpy(i32*, i32*, i64) #1

declare dso_local i32 @free(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
