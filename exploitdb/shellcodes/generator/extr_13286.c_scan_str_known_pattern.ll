; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13286.c_scan_str_known_pattern.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13286.c_scan_str_known_pattern.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ALNUM_CHARSET = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [10 x i8] c"(buf[0]*'\00", align 1
@.str.1 = private unnamed_addr constant [10 x i8] c"')^buf[1]\00", align 1
@.str.2 = private unnamed_addr constant [20 x i8] c"key = 0x%2X ('%c')\0A\00", align 1
@.str.3 = private unnamed_addr constant [42 x i8] c"found pattern using: (buf[1]*key)^buf[0]\0A\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"(buf[0]*0x30)^buf[1]\00", align 1
@.str.5 = private unnamed_addr constant [21 x i8] c"(buf[1]*0x30)^buf[0]\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"(buf[0]*0x10)^buf[1]\00", align 1
@.str.7 = private unnamed_addr constant [21 x i8] c"(buf[1]*0x10)^buf[0]\00", align 1
@.str.8 = private unnamed_addr constant [23 x i8] c"(buf[0]*buf[1])^buf[2]\00", align 1
@.str.9 = private unnamed_addr constant [23 x i8] c"(buf[0]*buf[2])^buf[1]\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"(buf[1]*buf[2])^buf[0]\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"(buf[0]^buf[1])*buf[2]\00", align 1
@.str.12 = private unnamed_addr constant [23 x i8] c"(buf[0]^buf[2])*buf[1]\00", align 1
@.str.13 = private unnamed_addr constant [23 x i8] c"(buf[1]^buf[2])*buf[0]\00", align 1
@.str.14 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32* @scan_str_known_pattern(i32* %0, i32* %1, i32 %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32*, align 8
  %9 = alloca i32*, align 8
  store i32* %0, i32** %5, align 8
  store i32* %1, i32** %6, align 8
  store i32 %2, i32* %7, align 4
  %10 = load i32*, i32** @ALNUM_CHARSET, align 8
  %11 = call i64 @strlen(i32* %10)
  %12 = add i64 %11, 1
  %13 = trunc i64 %12 to i32
  %14 = call i32* @malloc(i32 %13)
  store i32* %14, i32** %8, align 8
  %15 = call i32* @malloc(i32 255)
  store i32* %15, i32** %9, align 8
  %16 = load i32*, i32** %8, align 8
  %17 = load i32*, i32** @ALNUM_CHARSET, align 8
  %18 = load i32*, i32** @ALNUM_CHARSET, align 8
  %19 = call i64 @strlen(i32* %18)
  %20 = call i32 @strncpy(i32* %16, i32* %17, i64 %19)
  %21 = load i32*, i32** %8, align 8
  %22 = load i32*, i32** @ALNUM_CHARSET, align 8
  %23 = call i64 @strlen(i32* %22)
  %24 = getelementptr inbounds i32, i32* %21, i64 %23
  store i32 0, i32* %24, align 4
  %25 = load i32*, i32** %9, align 8
  %26 = call i32 @memset(i32* %25, i32 0, i32 255)
  br label %27

27:                                               ; preds = %54, %3
  %28 = load i32*, i32** %8, align 8
  %29 = load i32, i32* %28, align 4
  %30 = icmp ne i32 %29, 0
  br i1 %30, label %31, label %55

31:                                               ; preds = %27
  %32 = load i32*, i32** %5, align 8
  %33 = load i32*, i32** %6, align 8
  %34 = load i32, i32* %7, align 4
  %35 = load i32*, i32** %8, align 8
  %36 = getelementptr inbounds i32, i32* %35, i32 1
  store i32* %36, i32** %8, align 8
  %37 = load i32, i32* %35, align 4
  %38 = call i64 @arg1_imul_key_xor_arg2(i32* %32, i32* %33, i32 %34, i32 %37, i32 0, i32 1)
  %39 = icmp ne i64 %38, 0
  br i1 %39, label %40, label %54

40:                                               ; preds = %31
  %41 = load i32*, i32** %8, align 8
  %42 = getelementptr inbounds i32, i32* %41, i32 -1
  store i32* %42, i32** %8, align 8
  %43 = load i32*, i32** %9, align 8
  %44 = call i32 @strcat(i32* %43, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str, i64 0, i64 0))
  %45 = load i32*, i32** %8, align 8
  %46 = load i32, i32* %45, align 4
  %47 = load i32*, i32** %9, align 8
  %48 = load i32*, i32** %9, align 8
  %49 = call i64 @strlen(i32* %48)
  %50 = getelementptr inbounds i32, i32* %47, i64 %49
  store i32 %46, i32* %50, align 4
  %51 = load i32*, i32** %9, align 8
  %52 = call i32 @strcat(i32* %51, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.1, i64 0, i64 0))
  %53 = load i32*, i32** %9, align 8
  store i32* %53, i32** %4, align 8
  br label %154

54:                                               ; preds = %31
  br label %27

55:                                               ; preds = %27
  %56 = load i32*, i32** @ALNUM_CHARSET, align 8
  %57 = call i64 @strlen(i32* %56)
  %58 = load i32*, i32** %8, align 8
  %59 = sub i64 0, %57
  %60 = getelementptr inbounds i32, i32* %58, i64 %59
  store i32* %60, i32** %8, align 8
  br label %61

61:                                               ; preds = %82, %55
  %62 = load i32*, i32** %8, align 8
  %63 = load i32, i32* %62, align 4
  %64 = icmp ne i32 %63, 0
  br i1 %64, label %65, label %83

65:                                               ; preds = %61
  %66 = load i32*, i32** %5, align 8
  %67 = load i32*, i32** %6, align 8
  %68 = load i32, i32* %7, align 4
  %69 = load i32*, i32** %8, align 8
  %70 = getelementptr inbounds i32, i32* %69, i32 1
  store i32* %70, i32** %8, align 8
  %71 = load i32, i32* %69, align 4
  %72 = call i64 @arg1_imul_key_xor_arg2(i32* %66, i32* %67, i32 %68, i32 %71, i32 1, i32 0)
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %74, label %82

74:                                               ; preds = %65
  %75 = load i32*, i32** %8, align 8
  %76 = getelementptr inbounds i32, i32* %75, i32 -1
  store i32* %76, i32** %8, align 8
  %77 = load i32*, i32** %8, align 8
  %78 = load i32, i32* %77, align 4
  %79 = load i32*, i32** %8, align 8
  %80 = load i32, i32* %79, align 4
  %81 = call i32 @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.2, i64 0, i64 0), i32 %78, i32 %80)
  store i32* bitcast ([42 x i8]* @.str.3 to i32*), i32** %4, align 8
  br label %154

82:                                               ; preds = %65
  br label %61

83:                                               ; preds = %61
  %84 = load i32*, i32** %5, align 8
  %85 = load i32*, i32** %6, align 8
  %86 = load i32, i32* %7, align 4
  %87 = call i64 @arg1_imul_key_xor_arg2(i32* %84, i32* %85, i32 %86, i32 48, i32 0, i32 1)
  %88 = icmp ne i64 %87, 0
  br i1 %88, label %89, label %90

89:                                               ; preds = %83
  store i32* bitcast ([21 x i8]* @.str.4 to i32*), i32** %4, align 8
  br label %154

90:                                               ; preds = %83
  %91 = load i32*, i32** %5, align 8
  %92 = load i32*, i32** %6, align 8
  %93 = load i32, i32* %7, align 4
  %94 = call i64 @arg1_imul_key_xor_arg2(i32* %91, i32* %92, i32 %93, i32 48, i32 1, i32 0)
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %97

96:                                               ; preds = %90
  store i32* bitcast ([21 x i8]* @.str.5 to i32*), i32** %4, align 8
  br label %154

97:                                               ; preds = %90
  %98 = load i32*, i32** %5, align 8
  %99 = load i32*, i32** %6, align 8
  %100 = load i32, i32* %7, align 4
  %101 = call i64 @arg1_imul_key_xor_arg2(i32* %98, i32* %99, i32 %100, i32 16, i32 0, i32 1)
  %102 = icmp ne i64 %101, 0
  br i1 %102, label %103, label %104

103:                                              ; preds = %97
  store i32* bitcast ([21 x i8]* @.str.6 to i32*), i32** %4, align 8
  br label %154

104:                                              ; preds = %97
  %105 = load i32*, i32** %5, align 8
  %106 = load i32*, i32** %6, align 8
  %107 = load i32, i32* %7, align 4
  %108 = call i64 @arg1_imul_key_xor_arg2(i32* %105, i32* %106, i32 %107, i32 16, i32 1, i32 0)
  %109 = icmp ne i64 %108, 0
  br i1 %109, label %110, label %111

110:                                              ; preds = %104
  store i32* bitcast ([21 x i8]* @.str.7 to i32*), i32** %4, align 8
  br label %154

111:                                              ; preds = %104
  %112 = load i32*, i32** %5, align 8
  %113 = load i32*, i32** %6, align 8
  %114 = load i32, i32* %7, align 4
  %115 = call i64 @arg1_imul_arg2_xor_arg3(i32* %112, i32* %113, i32 %114, i32 0, i32 1, i32 2)
  %116 = icmp ne i64 %115, 0
  br i1 %116, label %117, label %118

117:                                              ; preds = %111
  store i32* bitcast ([23 x i8]* @.str.8 to i32*), i32** %4, align 8
  br label %154

118:                                              ; preds = %111
  %119 = load i32*, i32** %5, align 8
  %120 = load i32*, i32** %6, align 8
  %121 = load i32, i32* %7, align 4
  %122 = call i64 @arg1_imul_arg2_xor_arg3(i32* %119, i32* %120, i32 %121, i32 0, i32 2, i32 1)
  %123 = icmp ne i64 %122, 0
  br i1 %123, label %124, label %125

124:                                              ; preds = %118
  store i32* bitcast ([23 x i8]* @.str.9 to i32*), i32** %4, align 8
  br label %154

125:                                              ; preds = %118
  %126 = load i32*, i32** %5, align 8
  %127 = load i32*, i32** %6, align 8
  %128 = load i32, i32* %7, align 4
  %129 = call i64 @arg1_imul_arg2_xor_arg3(i32* %126, i32* %127, i32 %128, i32 1, i32 2, i32 0)
  %130 = icmp ne i64 %129, 0
  br i1 %130, label %131, label %132

131:                                              ; preds = %125
  store i32* bitcast ([23 x i8]* @.str.10 to i32*), i32** %4, align 8
  br label %154

132:                                              ; preds = %125
  %133 = load i32*, i32** %5, align 8
  %134 = load i32*, i32** %6, align 8
  %135 = load i32, i32* %7, align 4
  %136 = call i64 @arg1_xor_arg2_imul_arg3(i32* %133, i32* %134, i32 %135, i32 0, i32 1, i32 2)
  %137 = icmp ne i64 %136, 0
  br i1 %137, label %138, label %139

138:                                              ; preds = %132
  store i32* bitcast ([23 x i8]* @.str.11 to i32*), i32** %4, align 8
  br label %154

139:                                              ; preds = %132
  %140 = load i32*, i32** %5, align 8
  %141 = load i32*, i32** %6, align 8
  %142 = load i32, i32* %7, align 4
  %143 = call i64 @arg1_xor_arg2_imul_arg3(i32* %140, i32* %141, i32 %142, i32 0, i32 2, i32 1)
  %144 = icmp ne i64 %143, 0
  br i1 %144, label %145, label %146

145:                                              ; preds = %139
  store i32* bitcast ([23 x i8]* @.str.12 to i32*), i32** %4, align 8
  br label %154

146:                                              ; preds = %139
  %147 = load i32*, i32** %5, align 8
  %148 = load i32*, i32** %6, align 8
  %149 = load i32, i32* %7, align 4
  %150 = call i64 @arg1_xor_arg2_imul_arg3(i32* %147, i32* %148, i32 %149, i32 1, i32 2, i32 0)
  %151 = icmp ne i64 %150, 0
  br i1 %151, label %152, label %153

152:                                              ; preds = %146
  store i32* bitcast ([23 x i8]* @.str.13 to i32*), i32** %4, align 8
  br label %154

153:                                              ; preds = %146
  store i32* bitcast ([1 x i8]* @.str.14 to i32*), i32** %4, align 8
  br label %154

154:                                              ; preds = %153, %152, %145, %138, %131, %124, %117, %110, %103, %96, %89, %74, %40
  %155 = load i32*, i32** %4, align 8
  ret i32* %155
}

declare dso_local i32* @malloc(i32) #1

declare dso_local i64 @strlen(i32*) #1

declare dso_local i32 @strncpy(i32*, i32*, i64) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

declare dso_local i64 @arg1_imul_key_xor_arg2(i32*, i32*, i32, i32, i32, i32) #1

declare dso_local i32 @strcat(i32*, i8*) #1

declare dso_local i32 @printf(i8*, i32, i32) #1

declare dso_local i64 @arg1_imul_arg2_xor_arg3(i32*, i32*, i32, i32, i32, i32) #1

declare dso_local i64 @arg1_xor_arg2_imul_arg3(i32*, i32*, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
