; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13286.c_get_nop_slide.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13286.c_get_nop_slide.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"AI\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"BJ\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"CK\00", align 1
@.str.3 = private unnamed_addr constant [3 x i8] c"EM\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"FN\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"GO\00", align 1
@.str.6 = private unnamed_addr constant [3 x i8] c"HG\00", align 1
@.str.7 = private unnamed_addr constant [3 x i8] c"HO\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"DL\00", align 1
@__const.get_nop_slide.alnum_nop = private unnamed_addr constant [3 x [3 x i8*]] [[3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i32 0, i32 0)], [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.3, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i32 0, i32 0)], [3 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.6, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.7, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i32 0, i32 0)]], align 16
@.str.9 = private unnamed_addr constant [2 x i8] c"H\00", align 1
@.str.10 = private unnamed_addr constant [2 x i8] c"G\00", align 1
@.str.11 = private unnamed_addr constant [2 x i8] c"O\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i8** @get_nop_slide(i32 %0, i32 %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca [3 x [3 x i8*]], align 16
  %9 = alloca i8**, align 8
  store i32 %0, i32* %3, align 4
  store i32 %1, i32* %4, align 4
  store i32 0, i32* %7, align 4
  %10 = bitcast [3 x [3 x i8*]]* %8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %10, i8* align 16 bitcast ([3 x [3 x i8*]]* @__const.get_nop_slide.alnum_nop to i8*), i64 72, i1 false)
  %11 = load i32, i32* %3, align 4
  %12 = call i8** @malloc(i32 %11)
  store i8** %12, i8*** %9, align 8
  %13 = load i8**, i8*** %9, align 8
  %14 = load i32, i32* %3, align 4
  %15 = call i32 @memset(i8** %13, i32 0, i32 %14)
  %16 = load i32, i32* %3, align 4
  %17 = srem i32 %16, 2
  %18 = icmp ne i32 %17, 0
  br i1 %18, label %19, label %22

19:                                               ; preds = %2
  store i32 1, i32* %7, align 4
  %20 = load i32, i32* %3, align 4
  %21 = add nsw i32 %20, -1
  store i32 %21, i32* %3, align 4
  br label %22

22:                                               ; preds = %19, %2
  store i32 0, i32* %5, align 4
  br label %23

23:                                               ; preds = %54, %22
  %24 = load i32, i32* %5, align 4
  %25 = load i32, i32* %3, align 4
  %26 = sdiv i32 %25, 2
  %27 = icmp slt i32 %24, %26
  br i1 %27, label %28, label %57

28:                                               ; preds = %23
  br label %29

29:                                               ; preds = %45, %28
  %30 = call i32 (...) @rand()
  %31 = sext i32 %30 to i64
  %32 = urem i64 %31, 24
  %33 = trunc i64 %32 to i32
  store i32 %33, i32* %6, align 4
  br label %34

34:                                               ; preds = %29
  %35 = load i32, i32* %4, align 4
  %36 = icmp eq i32 %35, 2
  br i1 %36, label %37, label %45

37:                                               ; preds = %34
  %38 = load i32, i32* %6, align 4
  %39 = icmp eq i32 %38, 6
  br i1 %39, label %43, label %40

40:                                               ; preds = %37
  %41 = load i32, i32* %6, align 4
  %42 = icmp eq i32 %41, 7
  br label %43

43:                                               ; preds = %40, %37
  %44 = phi i1 [ true, %37 ], [ %42, %40 ]
  br label %45

45:                                               ; preds = %43, %34
  %46 = phi i1 [ false, %34 ], [ %44, %43 ]
  br i1 %46, label %29, label %47

47:                                               ; preds = %45
  %48 = load i8**, i8*** %9, align 8
  %49 = load i32, i32* %6, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [3 x [3 x i8*]], [3 x [3 x i8*]]* %8, i64 0, i64 %50
  %52 = getelementptr inbounds [3 x i8*], [3 x i8*]* %51, i64 0, i64 0
  %53 = call i32 (i8**, ...) @strcat(i8** %48, i8** %52)
  br label %54

54:                                               ; preds = %47
  %55 = load i32, i32* %5, align 4
  %56 = add nsw i32 %55, 1
  store i32 %56, i32* %5, align 4
  br label %23

57:                                               ; preds = %23
  %58 = load i32, i32* %7, align 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %74

60:                                               ; preds = %57
  %61 = load i8**, i8*** %9, align 8
  %62 = load i32, i32* %4, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %65

64:                                               ; preds = %60
  br label %71

65:                                               ; preds = %60
  %66 = call i32 (...) @rand()
  %67 = srem i32 %66, 2
  %68 = icmp ne i32 %67, 0
  %69 = zext i1 %68 to i64
  %70 = select i1 %68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.11, i64 0, i64 0)
  br label %71

71:                                               ; preds = %65, %64
  %72 = phi i8* [ getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0), %64 ], [ %70, %65 ]
  %73 = call i32 (i8**, ...) @strcat(i8** %61, i8* %72)
  br label %74

74:                                               ; preds = %71, %57
  %75 = load i8**, i8*** %9, align 8
  ret i8** %75
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i8** @malloc(i32) #2

declare dso_local i32 @memset(i8**, i32, i32) #2

declare dso_local i32 @rand(...) #2

declare dso_local i32 @strcat(i8**, ...) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
