; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13281.c_push_shc.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/generator/extr_13281.c_push_shc.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.push_shc.pushb_0 = private unnamed_addr constant [6 x i32] [i32 131, i32 236, i32 1, i32 136, i32 4, i32 36], align 16
@__const.push_shc.pushb = private unnamed_addr constant [6 x i32] [i32 131, i32 236, i32 1, i32 198, i32 4, i32 36], align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @push_shc(i32* %0, i8* %1, i32* %2) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i8*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca [6 x i32], align 16
  %13 = alloca [6 x i32], align 16
  store i32* %0, i32** %4, align 8
  store i8* %1, i8** %5, align 8
  store i32* %2, i32** %6, align 8
  %14 = load i8*, i8** %5, align 8
  %15 = call i32 @strlen(i8* %14)
  store i32 %15, i32* %7, align 4
  %16 = load i32, i32* %7, align 4
  store i32 %16, i32* %11, align 4
  %17 = bitcast [6 x i32]* %12 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %17, i8* align 16 bitcast ([6 x i32]* @__const.push_shc.pushb_0 to i8*), i64 24, i1 false)
  %18 = bitcast [6 x i32]* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %18, i8* align 16 bitcast ([6 x i32]* @__const.push_shc.pushb to i8*), i64 24, i1 false)
  %19 = load i32*, i32** %4, align 8
  %20 = load i32*, i32** %6, align 8
  %21 = load i32, i32* %20, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds i32, i32* %19, i64 %22
  %24 = getelementptr inbounds [6 x i32], [6 x i32]* %12, i64 0, i64 0
  %25 = call i32 (i32*, ...) @memcpy(i32* %23, i32* %24, i32 6)
  %26 = load i32*, i32** %6, align 8
  %27 = load i32, i32* %26, align 4
  %28 = add nsw i32 %27, 6
  store i32 %28, i32* %26, align 4
  store i32 0, i32* %8, align 4
  br label %29

29:                                               ; preds = %60, %3
  %30 = load i32, i32* %8, align 4
  %31 = load i32, i32* %7, align 4
  %32 = load i32, i32* %7, align 4
  %33 = srem i32 %32, 4
  %34 = sub nsw i32 %31, %33
  %35 = sdiv i32 %34, 4
  %36 = icmp slt i32 %30, %35
  br i1 %36, label %37, label %63

37:                                               ; preds = %29
  %38 = load i32*, i32** %4, align 8
  %39 = load i32*, i32** %6, align 8
  %40 = load i32, i32* %39, align 4
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* %39, align 4
  %42 = sext i32 %40 to i64
  %43 = getelementptr inbounds i32, i32* %38, i64 %42
  %44 = call i32 @memset(i32* %43, i32 104, i32 1)
  %45 = load i32, i32* %11, align 4
  %46 = sub nsw i32 %45, 4
  store i32 %46, i32* %11, align 4
  %47 = load i32*, i32** %4, align 8
  %48 = load i32*, i32** %6, align 8
  %49 = load i32, i32* %48, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i32, i32* %47, i64 %50
  %52 = load i8*, i8** %5, align 8
  %53 = load i32, i32* %11, align 4
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds i8, i8* %52, i64 %54
  %56 = call i32 (i32*, ...) @memcpy(i32* %51, i8* %55, i32 4)
  %57 = load i32*, i32** %6, align 8
  %58 = load i32, i32* %57, align 4
  %59 = add nsw i32 %58, 4
  store i32 %59, i32* %57, align 4
  br label %60

60:                                               ; preds = %37
  %61 = load i32, i32* %8, align 4
  %62 = add nsw i32 %61, 1
  store i32 %62, i32* %8, align 4
  br label %29

63:                                               ; preds = %29
  %64 = load i32, i32* %7, align 4
  %65 = srem i32 %64, 2
  store i32 %65, i32* %9, align 4
  %66 = load i32, i32* %9, align 4
  %67 = icmp eq i32 %66, 1
  br i1 %67, label %68, label %73

68:                                               ; preds = %63
  %69 = load i32, i32* %7, align 4
  %70 = sub nsw i32 %69, 1
  %71 = sdiv i32 %70, 2
  %72 = srem i32 %71, 2
  br label %77

73:                                               ; preds = %63
  %74 = load i32, i32* %7, align 4
  %75 = sdiv i32 %74, 2
  %76 = srem i32 %75, 2
  br label %77

77:                                               ; preds = %73, %68
  %78 = phi i32 [ %72, %68 ], [ %76, %73 ]
  store i32 %78, i32* %10, align 4
  %79 = load i32, i32* %10, align 4
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %111

81:                                               ; preds = %77
  %82 = load i32*, i32** %4, align 8
  %83 = load i32*, i32** %6, align 8
  %84 = load i32, i32* %83, align 4
  %85 = add nsw i32 %84, 1
  store i32 %85, i32* %83, align 4
  %86 = sext i32 %84 to i64
  %87 = getelementptr inbounds i32, i32* %82, i64 %86
  %88 = call i32 @memset(i32* %87, i32 102, i32 1)
  %89 = load i32*, i32** %4, align 8
  %90 = load i32*, i32** %6, align 8
  %91 = load i32, i32* %90, align 4
  %92 = add nsw i32 %91, 1
  store i32 %92, i32* %90, align 4
  %93 = sext i32 %91 to i64
  %94 = getelementptr inbounds i32, i32* %89, i64 %93
  %95 = call i32 @memset(i32* %94, i32 104, i32 1)
  %96 = load i32, i32* %11, align 4
  %97 = sub nsw i32 %96, 2
  store i32 %97, i32* %11, align 4
  %98 = load i32*, i32** %4, align 8
  %99 = load i32*, i32** %6, align 8
  %100 = load i32, i32* %99, align 4
  %101 = sext i32 %100 to i64
  %102 = getelementptr inbounds i32, i32* %98, i64 %101
  %103 = load i8*, i8** %5, align 8
  %104 = load i32, i32* %11, align 4
  %105 = sext i32 %104 to i64
  %106 = getelementptr inbounds i8, i8* %103, i64 %105
  %107 = call i32 (i32*, ...) @memcpy(i32* %102, i8* %106, i32 2)
  %108 = load i32*, i32** %6, align 8
  %109 = load i32, i32* %108, align 4
  %110 = add nsw i32 %109, 2
  store i32 %110, i32* %108, align 4
  br label %111

111:                                              ; preds = %81, %77
  %112 = load i32, i32* %9, align 4
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %114, label %137

114:                                              ; preds = %111
  %115 = load i32*, i32** %4, align 8
  %116 = load i32*, i32** %6, align 8
  %117 = load i32, i32* %116, align 4
  %118 = sext i32 %117 to i64
  %119 = getelementptr inbounds i32, i32* %115, i64 %118
  %120 = getelementptr inbounds [6 x i32], [6 x i32]* %13, i64 0, i64 0
  %121 = call i32 (i32*, ...) @memcpy(i32* %119, i32* %120, i32 6)
  %122 = load i32*, i32** %6, align 8
  %123 = load i32, i32* %122, align 4
  %124 = add nsw i32 %123, 6
  store i32 %124, i32* %122, align 4
  %125 = load i32*, i32** %4, align 8
  %126 = load i32*, i32** %6, align 8
  %127 = load i32, i32* %126, align 4
  %128 = add nsw i32 %127, 1
  store i32 %128, i32* %126, align 4
  %129 = sext i32 %127 to i64
  %130 = getelementptr inbounds i32, i32* %125, i64 %129
  %131 = load i8*, i8** %5, align 8
  %132 = load i32, i32* %11, align 4
  %133 = add nsw i32 %132, -1
  store i32 %133, i32* %11, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds i8, i8* %131, i64 %134
  %136 = call i32 (i32*, ...) @memcpy(i32* %130, i8* %135, i32 1)
  br label %137

137:                                              ; preds = %114, %111
  ret void
}

declare dso_local i32 @strlen(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

declare dso_local i32 @memcpy(i32*, ...) #1

declare dso_local i32 @memset(i32*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
