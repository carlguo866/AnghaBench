; ModuleID = '/home/carl/AnghaBench/exploitdb/shellcodes/openbsd_x86/extr_13475.c_main.c'
source_filename = "/home/carl/AnghaBench/exploitdb/shellcodes/openbsd_x86/extr_13475.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [8 x i8] c"/tmp/. \00", align 1
@O_RDWR = common dso_local global i32 0, align 4
@O_CREAT = common dso_local global i32 0, align 4
@S_IRUSR = common dso_local global i32 0, align 4
@S_IWUSR = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"open\00", align 1
@shellcode = common dso_local global i32 0, align 4
@SEEK_SET = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [6 x i8] c"lseek\00", align 1
@PROT_READ = common dso_local global i32 0, align 4
@PROT_EXEC = common dso_local global i32 0, align 4
@MAP_FAILED = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [5 x i8] c"mmap\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca void (...)*, align 8
  %3 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %4 = load i32, i32* @O_RDWR, align 4
  %5 = load i32, i32* @O_CREAT, align 4
  %6 = or i32 %4, %5
  %7 = load i32, i32* @S_IRUSR, align 4
  %8 = load i32, i32* @S_IWUSR, align 4
  %9 = or i32 %7, %8
  %10 = call i32 @open(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str, i64 0, i64 0), i32 %6, i32 %9)
  store i32 %10, i32* %3, align 4
  %11 = load i32, i32* %3, align 4
  %12 = icmp slt i32 %11, 0
  br i1 %12, label %13, label %15

13:                                               ; preds = %0
  %14 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  br label %15

15:                                               ; preds = %13, %0
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* @shellcode, align 4
  %18 = load i32, i32* @shellcode, align 4
  %19 = call i32 @strlen(i32 %18)
  %20 = call i32 @write(i32 %16, i32 %17, i32 %19)
  %21 = load i32, i32* %3, align 4
  %22 = load i32, i32* @SEEK_SET, align 4
  %23 = call i64 @lseek(i32 %21, i64 0, i32 %22)
  %24 = icmp slt i64 %23, 0
  br i1 %24, label %25, label %27

25:                                               ; preds = %15
  %26 = call i32 @err(i32 1, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %27

27:                                               ; preds = %25, %15
  %28 = load i32, i32* @shellcode, align 4
  %29 = call i32 @strlen(i32 %28)
  %30 = load i32, i32* @PROT_READ, align 4
  %31 = load i32, i32* @PROT_EXEC, align 4
  %32 = or i32 %30, %31
  %33 = load i32, i32* %3, align 4
  %34 = call i64 @mmap(i32* null, i32 %29, i32 %32, i32* null, i32 %33, i32* null)
  %35 = inttoptr i64 %34 to void (...)*
  store void (...)* %35, void (...)** %2, align 8
  %36 = load void (...)*, void (...)** %2, align 8
  %37 = load i64, i64* @MAP_FAILED, align 8
  %38 = inttoptr i64 %37 to void (...)*
  %39 = icmp eq void (...)* %36, %38
  br i1 %39, label %40, label %42

40:                                               ; preds = %27
  %41 = call i32 @err(i32 1, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  br label %42

42:                                               ; preds = %40, %27
  %43 = load void (...)*, void (...)** %2, align 8
  call void (...) %43()
  ret i32 0
}

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @err(i32, i8*) #1

declare dso_local i32 @write(i32, i32, i32) #1

declare dso_local i32 @strlen(i32) #1

declare dso_local i64 @lseek(i32, i64, i32) #1

declare dso_local i64 @mmap(i32*, i32, i32, i32*, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
