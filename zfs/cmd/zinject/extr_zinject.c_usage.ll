; ModuleID = '/home/carl/AnghaBench/zfs/cmd/zinject/extr_zinject.c_usage.c'
source_filename = "/home/carl/AnghaBench/zfs/cmd/zinject/extr_zinject.c_usage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4605 x i8] c"usage:\0A\0A\09zinject\0A\0A\09\09List all active injection records.\0A\0A\09zinject -c <id|all>\0A\0A\09\09Clear the particular record (if given a numeric ID), or\0A\09\09all records if 'all' is specified.\0A\0A\09zinject -p <function name> pool\0A\09\09Inject a panic fault at the specified function. Only \0A\09\09functions which call spa_vdev_config_exit(), or \0A\09\09spa_vdev_exit() will trigger a panic.\0A\0A\09zinject -d device [-e errno] [-L <nvlist|uber|pad1|pad2>] [-F]\0A\09\09[-T <read|write|free|claim|all>] [-f frequency] pool\0A\0A\09\09Inject a fault into a particular device or the device's\0A\09\09label.  Label injection can either be 'nvlist', 'uber',\0A \09\09'pad1', or 'pad2'.\0A\09\09'errno' can be 'nxio' (the default), 'io', 'dtl', or\0A\09\09'corrupt' (bit flip).\0A\09\09'frequency' is a value between 0.0001 and 100.0 that limits\0A\09\09device error injection to a percentage of the IOs.\0A\0A\09zinject -d device -A <degrade|fault> -D <delay secs> pool\0A\09\09Perform a specific action on a particular device.\0A\0A\09zinject -d device -D latency:lanes pool\0A\0A\09\09Add an artificial delay to IO requests on a particular\0A\09\09device, such that the requests take a minimum of 'latency'\0A\09\09milliseconds to complete. Each delay has an associated\0A\09\09number of 'lanes' which defines the number of concurrent\0A\09\09IO requests that can be processed.\0A\0A\09\09For example, with a single lane delay of 10 ms (-D 10:1),\0A\09\09the device will only be able to service a single IO request\0A\09\09at a time with each request taking 10 ms to complete. So,\0A\09\09if only a single request is submitted every 10 ms, the\0A\09\09average latency will be 10 ms; but if more than one request\0A\09\09is submitted every 10 ms, the average latency will be more\0A\09\09than 10 ms.\0A\0A\09\09Similarly, if a delay of 10 ms is specified to have two\0A\09\09lanes (-D 10:2), then the device will be able to service\0A\09\09two requests at a time, each with a minimum latency of\0A\09\0910 ms. So, if two requests are submitted every 10 ms, then\0A\09\09the average latency will be 10 ms; but if more than two\0A\09\09requests are submitted every 10 ms, the average latency\0A\09\09will be more than 10 ms.\0A\0A\09\09Also note, these delays are additive. So two invocations\0A\09\09of '-D 10:1', is roughly equivalent to a single invocation\0A\09\09of '-D 10:2'. This also means, one can specify multiple\0A\09\09lanes with differing target latencies. For example, an\0A\09\09invocation of '-D 10:1' followed by '-D 25:2' will\0A\09\09create 3 lanes on the device; one lane with a latency\0A\09\09of 10 ms and two lanes with a 25 ms latency.\0A\0A\09zinject -I [-s <seconds> | -g <txgs>] pool\0A\09\09Cause the pool to stop writing blocks yet not\0A\09\09report errors for a duration.  Simulates buggy hardware\0A\09\09that fails to honor cache flush requests.\0A\09\09Default duration is 30 seconds.  The machine is panicked\0A\09\09at the end of the duration.\0A\0A\09zinject -b objset:object:level:blkid pool\0A\0A\09\09Inject an error into pool 'pool' with the numeric bookmark\0A\09\09specified by the remaining tuple.  Each number is in\0A\09\09hexadecimal, and only one block can be specified.\0A\0A\09zinject [-q] <-t type> [-C dvas] [-e errno] [-l level]\0A\09\09[-r range] [-a] [-m] [-u] [-f freq] <object>\0A\0A\09\09Inject an error into the object specified by the '-t' option\0A\09\09and the object descriptor.  The 'object' parameter is\0A\09\09interpreted depending on the '-t' option.\0A\0A\09\09-q\09Quiet mode.  Only print out the handler number added.\0A\09\09-e\09Inject a specific error.  Must be one of 'io',\0A\09\09\09'checksum', 'decompress', or 'decrypt'.  Default is 'io'.\0A\09\09-C\09Inject the given error only into specific DVAs. The\0A\09\09\09DVAs should be specified as a list of 0-indexed DVAs\0A\09\09\09separated by commas (ex. '0,2').\0A\09\09-l\09Inject error at a particular block level. Default is 0.\0A\09\09-m\09Automatically remount underlying filesystem.\0A\09\09-r\09Inject error over a particular logical range of an\0A\09\09\09object.  Will be translated to the appropriate blkid\0A\09\09\09range according to the object's properties.\0A\09\09-a\09Flush the ARC cache.  Can be specified without any\0A\09\09\09associated object.\0A\09\09-u\09Unload the associated pool.  Can be specified with only\0A\09\09\09a pool object.\0A\09\09-f\09Only inject errors a fraction of the time.  Expressed as\0A\09\09\09a percentage between 0.0001 and 100.\0A\0A\09-t data\09\09Inject an error into the plain file contents of a\0A\09\09\09file.  The object must be specified as a complete path\0A\09\09\09to a file on a ZFS filesystem.\0A\0A\09-t dnode\09Inject an error into the metadnode in the block\0A\09\09\09corresponding to the dnode for a file or directory.  The\0A\09\09\09'-r' option is incompatible with this mode.  The object\0A\09\09\09is specified as a complete path to a file or directory\0A\09\09\09on a ZFS filesystem.\0A\0A\09-t <mos>\09Inject errors into the MOS for objects of the given\0A\09\09\09type.  Valid types are: mos, mosdir, config, bpobj,\0A\09\09\09spacemap, metaslab, errlog.  The only valid <object> is\0A\09\09\09the poolname.\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @usage() #0 {
  %1 = call i32 @printf(i8* getelementptr inbounds ([4605 x i8], [4605 x i8]* @.str, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
