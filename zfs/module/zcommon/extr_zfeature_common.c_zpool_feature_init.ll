; ModuleID = '/home/carl/AnghaBench/zfs/module/zcommon/extr_zfeature_common.c_zpool_feature_init.c'
source_filename = "/home/carl/AnghaBench/zfs/module/zcommon/extr_zfeature_common.c_zpool_feature_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SPA_FEATURE_ASYNC_DESTROY = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [26 x i8] c"com.delphix:async_destroy\00", align 1
@.str.1 = private unnamed_addr constant [14 x i8] c"async_destroy\00", align 1
@.str.2 = private unnamed_addr constant [36 x i8] c"Destroy filesystems asynchronously.\00", align 1
@ZFEATURE_FLAG_READONLY_COMPAT = common dso_local global i32 0, align 4
@ZFEATURE_TYPE_BOOLEAN = common dso_local global i32 0, align 4
@SPA_FEATURE_EMPTY_BPOBJ = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [24 x i8] c"com.delphix:empty_bpobj\00", align 1
@.str.4 = private unnamed_addr constant [12 x i8] c"empty_bpobj\00", align 1
@.str.5 = private unnamed_addr constant [26 x i8] c"Snapshots use less space.\00", align 1
@SPA_FEATURE_LZ4_COMPRESS = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [25 x i8] c"org.illumos:lz4_compress\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"lz4_compress\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"LZ4 compression algorithm support.\00", align 1
@ZFEATURE_FLAG_ACTIVATE_ON_ENABLE = common dso_local global i32 0, align 4
@SPA_FEATURE_MULTI_VDEV_CRASH_DUMP = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [33 x i8] c"com.joyent:multi_vdev_crash_dump\00", align 1
@.str.10 = private unnamed_addr constant [22 x i8] c"multi_vdev_crash_dump\00", align 1
@.str.11 = private unnamed_addr constant [36 x i8] c"Crash dumps to multiple vdev pools.\00", align 1
@SPA_FEATURE_SPACEMAP_HISTOGRAM = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [31 x i8] c"com.delphix:spacemap_histogram\00", align 1
@.str.13 = private unnamed_addr constant [19 x i8] c"spacemap_histogram\00", align 1
@.str.14 = private unnamed_addr constant [37 x i8] c"Spacemaps maintain space histograms.\00", align 1
@.str.15 = private unnamed_addr constant [24 x i8] c"com.delphix:enabled_txg\00", align 1
@.str.16 = private unnamed_addr constant [12 x i8] c"enabled_txg\00", align 1
@.str.17 = private unnamed_addr constant [41 x i8] c"Record txg at which a feature is enabled\00", align 1
@zpool_feature_init.hole_birth_deps = internal constant [2 x i32] [i32 131, i32 129], align 4
@SPA_FEATURE_HOLE_BIRTH = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [23 x i8] c"com.delphix:hole_birth\00", align 1
@.str.19 = private unnamed_addr constant [11 x i8] c"hole_birth\00", align 1
@.str.20 = private unnamed_addr constant [48 x i8] c"Retain hole birth txg for more precise zfs send\00", align 1
@ZFEATURE_FLAG_MOS = common dso_local global i32 0, align 4
@SPA_FEATURE_POOL_CHECKPOINT = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [29 x i8] c"com.delphix:zpool_checkpoint\00", align 1
@.str.22 = private unnamed_addr constant [17 x i8] c"zpool_checkpoint\00", align 1
@.str.23 = private unnamed_addr constant [55 x i8] c"Pool state can be checkpointed, allowing rewind later.\00", align 1
@.str.24 = private unnamed_addr constant [24 x i8] c"com.delphix:spacemap_v2\00", align 1
@.str.25 = private unnamed_addr constant [12 x i8] c"spacemap_v2\00", align 1
@.str.26 = private unnamed_addr constant [59 x i8] c"Space maps representing large segments are more efficient.\00", align 1
@.str.27 = private unnamed_addr constant [31 x i8] c"com.delphix:extensible_dataset\00", align 1
@.str.28 = private unnamed_addr constant [19 x i8] c"extensible_dataset\00", align 1
@.str.29 = private unnamed_addr constant [56 x i8] c"Enhanced dataset functionality, used by other features.\00", align 1
@zpool_feature_init.bookmarks_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@.str.30 = private unnamed_addr constant [22 x i8] c"com.delphix:bookmarks\00", align 1
@.str.31 = private unnamed_addr constant [10 x i8] c"bookmarks\00", align 1
@.str.32 = private unnamed_addr constant [23 x i8] c"\22zfs bookmark\22 command\00", align 1
@zpool_feature_init.filesystem_limits_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_FS_SS_LIMIT = common dso_local global i32 0, align 4
@.str.33 = private unnamed_addr constant [29 x i8] c"com.joyent:filesystem_limits\00", align 1
@.str.34 = private unnamed_addr constant [18 x i8] c"filesystem_limits\00", align 1
@.str.35 = private unnamed_addr constant [32 x i8] c"Filesystem and snapshot limits.\00", align 1
@SPA_FEATURE_EMBEDDED_DATA = common dso_local global i32 0, align 4
@.str.36 = private unnamed_addr constant [26 x i8] c"com.delphix:embedded_data\00", align 1
@.str.37 = private unnamed_addr constant [14 x i8] c"embedded_data\00", align 1
@.str.38 = private unnamed_addr constant [53 x i8] c"Blocks which compress very well use even less space.\00", align 1
@zpool_feature_init.livelist_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_LIVELIST = common dso_local global i32 0, align 4
@.str.39 = private unnamed_addr constant [21 x i8] c"com.delphix:livelist\00", align 1
@.str.40 = private unnamed_addr constant [9 x i8] c"livelist\00", align 1
@.str.41 = private unnamed_addr constant [37 x i8] c"Improved clone deletion performance.\00", align 1
@zpool_feature_init.log_spacemap_deps = internal constant [2 x i32] [i32 128, i32 129], align 4
@SPA_FEATURE_LOG_SPACEMAP = common dso_local global i32 0, align 4
@.str.42 = private unnamed_addr constant [25 x i8] c"com.delphix:log_spacemap\00", align 1
@.str.43 = private unnamed_addr constant [13 x i8] c"log_spacemap\00", align 1
@.str.44 = private unnamed_addr constant [71 x i8] c"Log metaslab changes on a single spacemap and flush them periodically.\00", align 1
@zpool_feature_init.large_blocks_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_LARGE_BLOCKS = common dso_local global i32 0, align 4
@.str.45 = private unnamed_addr constant [26 x i8] c"org.open-zfs:large_blocks\00", align 1
@.str.46 = private unnamed_addr constant [13 x i8] c"large_blocks\00", align 1
@.str.47 = private unnamed_addr constant [38 x i8] c"Support for blocks larger than 128KB.\00", align 1
@ZFEATURE_FLAG_PER_DATASET = common dso_local global i32 0, align 4
@zpool_feature_init.large_dnode_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_LARGE_DNODE = common dso_local global i32 0, align 4
@.str.48 = private unnamed_addr constant [27 x i8] c"org.zfsonlinux:large_dnode\00", align 1
@.str.49 = private unnamed_addr constant [12 x i8] c"large_dnode\00", align 1
@.str.50 = private unnamed_addr constant [33 x i8] c"Variable on-disk size of dnodes.\00", align 1
@zpool_feature_init.sha512_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_SHA512 = common dso_local global i32 0, align 4
@.str.51 = private unnamed_addr constant [19 x i8] c"org.illumos:sha512\00", align 1
@.str.52 = private unnamed_addr constant [7 x i8] c"sha512\00", align 1
@.str.53 = private unnamed_addr constant [28 x i8] c"SHA-512/256 hash algorithm.\00", align 1
@zpool_feature_init.skein_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_SKEIN = common dso_local global i32 0, align 4
@.str.54 = private unnamed_addr constant [18 x i8] c"org.illumos:skein\00", align 1
@.str.55 = private unnamed_addr constant [6 x i8] c"skein\00", align 1
@.str.56 = private unnamed_addr constant [22 x i8] c"Skein hash algorithm.\00", align 1
@zpool_feature_init.edonr_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_EDONR = common dso_local global i32 0, align 4
@.str.57 = private unnamed_addr constant [18 x i8] c"org.illumos:edonr\00", align 1
@.str.58 = private unnamed_addr constant [6 x i8] c"edonr\00", align 1
@.str.59 = private unnamed_addr constant [23 x i8] c"Edon-R hash algorithm.\00", align 1
@zpool_feature_init.redact_books_deps = internal constant [4 x i32] [i32 133, i32 130, i32 134, i32 129], align 16
@SPA_FEATURE_REDACTION_BOOKMARKS = common dso_local global i32 0, align 4
@.str.60 = private unnamed_addr constant [32 x i8] c"com.delphix:redaction_bookmarks\00", align 1
@.str.61 = private unnamed_addr constant [20 x i8] c"redaction_bookmarks\00", align 1
@.str.62 = private unnamed_addr constant [78 x i8] c"Support for bookmarks which store redaction lists for zfs redacted send/recv.\00", align 1
@zpool_feature_init.redact_datasets_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_REDACTED_DATASETS = common dso_local global i32 0, align 4
@.str.63 = private unnamed_addr constant [30 x i8] c"com.delphix:redacted_datasets\00", align 1
@.str.64 = private unnamed_addr constant [18 x i8] c"redacted_datasets\00", align 1
@.str.65 = private unnamed_addr constant [81 x i8] c"Support for redacted datasets, produced by receiving a redacted zfs send stream.\00", align 1
@ZFEATURE_TYPE_UINT64_ARRAY = common dso_local global i32 0, align 4
@zpool_feature_init.bookmark_written_deps = internal constant [4 x i32] [i32 133, i32 130, i32 134, i32 129], align 16
@SPA_FEATURE_BOOKMARK_WRITTEN = common dso_local global i32 0, align 4
@.str.66 = private unnamed_addr constant [29 x i8] c"com.delphix:bookmark_written\00", align 1
@.str.67 = private unnamed_addr constant [17 x i8] c"bookmark_written\00", align 1
@.str.68 = private unnamed_addr constant [165 x i8] c"Additional accounting, enabling the written#<bookmark> property(space written since a bookmark), and estimates of send stream sizes for incrementals from bookmarks.\00", align 1
@.str.69 = private unnamed_addr constant [27 x i8] c"com.delphix:device_removal\00", align 1
@.str.70 = private unnamed_addr constant [15 x i8] c"device_removal\00", align 1
@.str.71 = private unnamed_addr constant [60 x i8] c"Top-level vdevs can be removed, reducing logical pool size.\00", align 1
@zpool_feature_init.obsolete_counts_deps = internal constant [3 x i32] [i32 130, i32 132, i32 129], align 4
@SPA_FEATURE_OBSOLETE_COUNTS = common dso_local global i32 0, align 4
@.str.72 = private unnamed_addr constant [28 x i8] c"com.delphix:obsolete_counts\00", align 1
@.str.73 = private unnamed_addr constant [16 x i8] c"obsolete_counts\00", align 1
@.str.74 = private unnamed_addr constant [79 x i8] c"Reduce memory used by removed devices when their blocks are freed or remapped.\00", align 1
@zpool_feature_init.userobj_accounting_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_USEROBJ_ACCOUNTING = common dso_local global i32 0, align 4
@.str.75 = private unnamed_addr constant [34 x i8] c"org.zfsonlinux:userobj_accounting\00", align 1
@.str.76 = private unnamed_addr constant [19 x i8] c"userobj_accounting\00", align 1
@.str.77 = private unnamed_addr constant [30 x i8] c"User/Group object accounting.\00", align 1
@zpool_feature_init.bookmark_v2_deps = internal constant [3 x i32] [i32 130, i32 134, i32 129], align 4
@.str.78 = private unnamed_addr constant [22 x i8] c"com.datto:bookmark_v2\00", align 1
@.str.79 = private unnamed_addr constant [12 x i8] c"bookmark_v2\00", align 1
@.str.80 = private unnamed_addr constant [29 x i8] c"Support for larger bookmarks\00", align 1
@zpool_feature_init.encryption_deps = internal constant [3 x i32] [i32 130, i32 133, i32 129], align 4
@SPA_FEATURE_ENCRYPTION = common dso_local global i32 0, align 4
@.str.81 = private unnamed_addr constant [21 x i8] c"com.datto:encryption\00", align 1
@.str.82 = private unnamed_addr constant [11 x i8] c"encryption\00", align 1
@.str.83 = private unnamed_addr constant [37 x i8] c"Support for dataset level encryption\00", align 1
@zpool_feature_init.project_quota_deps = internal constant [2 x i32] [i32 130, i32 129], align 4
@SPA_FEATURE_PROJECT_QUOTA = common dso_local global i32 0, align 4
@.str.84 = private unnamed_addr constant [29 x i8] c"org.zfsonlinux:project_quota\00", align 1
@.str.85 = private unnamed_addr constant [14 x i8] c"project_quota\00", align 1
@.str.86 = private unnamed_addr constant [45 x i8] c"space/object accounting based on project ID.\00", align 1
@SPA_FEATURE_ALLOCATION_CLASSES = common dso_local global i32 0, align 4
@.str.87 = private unnamed_addr constant [34 x i8] c"org.zfsonlinux:allocation_classes\00", align 1
@.str.88 = private unnamed_addr constant [19 x i8] c"allocation_classes\00", align 1
@.str.89 = private unnamed_addr constant [41 x i8] c"Support for separate allocation classes.\00", align 1
@SPA_FEATURE_RESILVER_DEFER = common dso_local global i32 0, align 4
@.str.90 = private unnamed_addr constant [25 x i8] c"com.datto:resilver_defer\00", align 1
@.str.91 = private unnamed_addr constant [15 x i8] c"resilver_defer\00", align 1
@.str.92 = private unnamed_addr constant [65 x i8] c"Support for deferring new resilvers when one is already running.\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @zpool_feature_init() #0 {
  %1 = load i32, i32* @SPA_FEATURE_ASYNC_DESTROY, align 4
  %2 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %3 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %4 = call i32 @zfeature_register(i32 %1, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.2, i64 0, i64 0), i32 %2, i32 %3, i32* null)
  %5 = load i32, i32* @SPA_FEATURE_EMPTY_BPOBJ, align 4
  %6 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %7 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %8 = call i32 @zfeature_register(i32 %5, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.4, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.5, i64 0, i64 0), i32 %6, i32 %7, i32* null)
  %9 = load i32, i32* @SPA_FEATURE_LZ4_COMPRESS, align 4
  %10 = load i32, i32* @ZFEATURE_FLAG_ACTIVATE_ON_ENABLE, align 4
  %11 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %12 = call i32 @zfeature_register(i32 %9, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0), i32 %10, i32 %11, i32* null)
  %13 = load i32, i32* @SPA_FEATURE_MULTI_VDEV_CRASH_DUMP, align 4
  %14 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %15 = call i32 @zfeature_register(i32 %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.10, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.11, i64 0, i64 0), i32 0, i32 %14, i32* null)
  %16 = load i32, i32* @SPA_FEATURE_SPACEMAP_HISTOGRAM, align 4
  %17 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %18 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %19 = call i32 @zfeature_register(i32 %16, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.14, i64 0, i64 0), i32 %17, i32 %18, i32* null)
  %20 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %21 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %22 = call i32 @zfeature_register(i32 131, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.17, i64 0, i64 0), i32 %20, i32 %21, i32* null)
  %23 = load i32, i32* @SPA_FEATURE_HOLE_BIRTH, align 4
  %24 = load i32, i32* @ZFEATURE_FLAG_MOS, align 4
  %25 = load i32, i32* @ZFEATURE_FLAG_ACTIVATE_ON_ENABLE, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %28 = call i32 @zfeature_register(i32 %23, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.19, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.20, i64 0, i64 0), i32 %26, i32 %27, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.hole_birth_deps, i64 0, i64 0))
  %29 = load i32, i32* @SPA_FEATURE_POOL_CHECKPOINT, align 4
  %30 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %31 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %32 = call i32 @zfeature_register(i32 %29, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.21, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.23, i64 0, i64 0), i32 %30, i32 %31, i32* null)
  %33 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %34 = load i32, i32* @ZFEATURE_FLAG_ACTIVATE_ON_ENABLE, align 4
  %35 = or i32 %33, %34
  %36 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %37 = call i32 @zfeature_register(i32 128, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.25, i64 0, i64 0), i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.26, i64 0, i64 0), i32 %35, i32 %36, i32* null)
  %38 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %39 = call i32 @zfeature_register(i32 130, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.28, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.29, i64 0, i64 0), i32 0, i32 %38, i32* null)
  %40 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %41 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %42 = call i32 @zfeature_register(i32 134, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.30, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.32, i64 0, i64 0), i32 %40, i32 %41, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.bookmarks_deps, i64 0, i64 0))
  %43 = load i32, i32* @SPA_FEATURE_FS_SS_LIMIT, align 4
  %44 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %45 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %46 = call i32 @zfeature_register(i32 %43, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.34, i64 0, i64 0), i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.35, i64 0, i64 0), i32 %44, i32 %45, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.filesystem_limits_deps, i64 0, i64 0))
  %47 = load i32, i32* @SPA_FEATURE_EMBEDDED_DATA, align 4
  %48 = load i32, i32* @ZFEATURE_FLAG_MOS, align 4
  %49 = load i32, i32* @ZFEATURE_FLAG_ACTIVATE_ON_ENABLE, align 4
  %50 = or i32 %48, %49
  %51 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %52 = call i32 @zfeature_register(i32 %47, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.37, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.38, i64 0, i64 0), i32 %50, i32 %51, i32* null)
  %53 = load i32, i32* @SPA_FEATURE_LIVELIST, align 4
  %54 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %55 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %56 = call i32 @zfeature_register(i32 %53, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.39, i64 0, i64 0), i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.41, i64 0, i64 0), i32 %54, i32 %55, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.livelist_deps, i64 0, i64 0))
  %57 = load i32, i32* @SPA_FEATURE_LOG_SPACEMAP, align 4
  %58 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %59 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %60 = call i32 @zfeature_register(i32 %57, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.43, i64 0, i64 0), i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.44, i64 0, i64 0), i32 %58, i32 %59, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.log_spacemap_deps, i64 0, i64 0))
  %61 = load i32, i32* @SPA_FEATURE_LARGE_BLOCKS, align 4
  %62 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %63 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %64 = call i32 @zfeature_register(i32 %61, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.45, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.47, i64 0, i64 0), i32 %62, i32 %63, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.large_blocks_deps, i64 0, i64 0))
  %65 = load i32, i32* @SPA_FEATURE_LARGE_DNODE, align 4
  %66 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %67 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %68 = call i32 @zfeature_register(i32 %65, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.50, i64 0, i64 0), i32 %66, i32 %67, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.large_dnode_deps, i64 0, i64 0))
  %69 = load i32, i32* @SPA_FEATURE_SHA512, align 4
  %70 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %71 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %72 = call i32 @zfeature_register(i32 %69, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.53, i64 0, i64 0), i32 %70, i32 %71, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.sha512_deps, i64 0, i64 0))
  %73 = load i32, i32* @SPA_FEATURE_SKEIN, align 4
  %74 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %75 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %76 = call i32 @zfeature_register(i32 %73, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.55, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.56, i64 0, i64 0), i32 %74, i32 %75, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.skein_deps, i64 0, i64 0))
  %77 = load i32, i32* @SPA_FEATURE_EDONR, align 4
  %78 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %79 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %80 = call i32 @zfeature_register(i32 %77, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.58, i64 0, i64 0), i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.59, i64 0, i64 0), i32 %78, i32 %79, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.edonr_deps, i64 0, i64 0))
  %81 = load i32, i32* @SPA_FEATURE_REDACTION_BOOKMARKS, align 4
  %82 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %83 = call i32 @zfeature_register(i32 %81, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.60, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str.62, i64 0, i64 0), i32 0, i32 %82, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @zpool_feature_init.redact_books_deps, i64 0, i64 0))
  %84 = load i32, i32* @SPA_FEATURE_REDACTED_DATASETS, align 4
  %85 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %86 = load i32, i32* @ZFEATURE_TYPE_UINT64_ARRAY, align 4
  %87 = call i32 @zfeature_register(i32 %84, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.64, i64 0, i64 0), i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.65, i64 0, i64 0), i32 %85, i32 %86, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.redact_datasets_deps, i64 0, i64 0))
  %88 = load i32, i32* @SPA_FEATURE_BOOKMARK_WRITTEN, align 4
  %89 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %90 = call i32 @zfeature_register(i32 %88, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.66, i64 0, i64 0), i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([165 x i8], [165 x i8]* @.str.68, i64 0, i64 0), i32 0, i32 %89, i32* getelementptr inbounds ([4 x i32], [4 x i32]* @zpool_feature_init.bookmark_written_deps, i64 0, i64 0))
  %91 = load i32, i32* @ZFEATURE_FLAG_MOS, align 4
  %92 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %93 = call i32 @zfeature_register(i32 132, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.70, i64 0, i64 0), i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.71, i64 0, i64 0), i32 %91, i32 %92, i32* null)
  %94 = load i32, i32* @SPA_FEATURE_OBSOLETE_COUNTS, align 4
  %95 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %96 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %97 = call i32 @zfeature_register(i32 %94, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.72, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.73, i64 0, i64 0), i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.74, i64 0, i64 0), i32 %95, i32 %96, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @zpool_feature_init.obsolete_counts_deps, i64 0, i64 0))
  %98 = load i32, i32* @SPA_FEATURE_USEROBJ_ACCOUNTING, align 4
  %99 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %100 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %101 = or i32 %99, %100
  %102 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %103 = call i32 @zfeature_register(i32 %98, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.75, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.77, i64 0, i64 0), i32 %101, i32 %102, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.userobj_accounting_deps, i64 0, i64 0))
  %104 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %105 = call i32 @zfeature_register(i32 133, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.78, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.79, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.80, i64 0, i64 0), i32 0, i32 %104, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @zpool_feature_init.bookmark_v2_deps, i64 0, i64 0))
  %106 = load i32, i32* @SPA_FEATURE_ENCRYPTION, align 4
  %107 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %108 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %109 = call i32 @zfeature_register(i32 %106, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.81, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.83, i64 0, i64 0), i32 %107, i32 %108, i32* getelementptr inbounds ([3 x i32], [3 x i32]* @zpool_feature_init.encryption_deps, i64 0, i64 0))
  %110 = load i32, i32* @SPA_FEATURE_PROJECT_QUOTA, align 4
  %111 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %112 = load i32, i32* @ZFEATURE_FLAG_PER_DATASET, align 4
  %113 = or i32 %111, %112
  %114 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %115 = call i32 @zfeature_register(i32 %110, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.84, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.86, i64 0, i64 0), i32 %113, i32 %114, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @zpool_feature_init.project_quota_deps, i64 0, i64 0))
  %116 = load i32, i32* @SPA_FEATURE_ALLOCATION_CLASSES, align 4
  %117 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %118 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %119 = call i32 @zfeature_register(i32 %116, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.87, i64 0, i64 0), i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.88, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.89, i64 0, i64 0), i32 %117, i32 %118, i32* null)
  %120 = load i32, i32* @SPA_FEATURE_RESILVER_DEFER, align 4
  %121 = load i32, i32* @ZFEATURE_FLAG_READONLY_COMPAT, align 4
  %122 = load i32, i32* @ZFEATURE_TYPE_BOOLEAN, align 4
  %123 = call i32 @zfeature_register(i32 %120, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.90, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.91, i64 0, i64 0), i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.92, i64 0, i64 0), i32 %121, i32 %122, i32* null)
  ret void
}

declare dso_local i32 @zfeature_register(i32, i8*, i8*, i8*, i32, i32, i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
