; ModuleID = '/home/carl/AnghaBench/xhyve/src/extr_acpi.c_basl_fwrite_fadt.c'
source_filename = "/home/carl/AnghaBench/xhyve/src/extr_acpi.c_basl_fwrite_fadt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"/*\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c" * bhyve FADT template\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c" */\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"[0004]\09\09Signature : \22FACP\22\0A\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"[0004]\09\09Table Length : 0000010C\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"[0001]\09\09Revision : 05\0A\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"[0001]\09\09Checksum : 00\0A\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"[0006]\09\09Oem ID : \22BHYVE \22\0A\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"[0008]\09\09Oem Table ID : \22BVFACP  \22\0A\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"[0004]\09\09Oem Revision : 00000001\0A\00", align 1
@.str.10 = private unnamed_addr constant [34 x i8] c"[0004]\09\09Asl Compiler ID : \22xxxx\22\0A\00", align 1
@.str.11 = private unnamed_addr constant [42 x i8] c"[0004]\09\09Asl Compiler Revision : 00000000\0A\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [29 x i8] c"[0004]\09\09FACS Address : %08X\0A\00", align 1
@basl_acpi_base = common dso_local global i64 0, align 8
@FACS_OFFSET = common dso_local global i64 0, align 8
@.str.14 = private unnamed_addr constant [29 x i8] c"[0004]\09\09DSDT Address : %08X\0A\00", align 1
@DSDT_OFFSET = common dso_local global i64 0, align 8
@.str.15 = private unnamed_addr constant [20 x i8] c"[0001]\09\09Model : 01\0A\00", align 1
@.str.16 = private unnamed_addr constant [39 x i8] c"[0001]\09\09PM Profile : 00 [Unspecified]\0A\00", align 1
@.str.17 = private unnamed_addr constant [30 x i8] c"[0002]\09\09SCI Interrupt : %04X\0A\00", align 1
@SCI_INT = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [33 x i8] c"[0004]\09\09SMI Command Port : %08X\0A\00", align 1
@SMI_CMD = common dso_local global i32 0, align 4
@.str.19 = private unnamed_addr constant [34 x i8] c"[0001]\09\09ACPI Enable Value : %02X\0A\00", align 1
@BHYVE_ACPI_ENABLE = common dso_local global i32 0, align 4
@.str.20 = private unnamed_addr constant [35 x i8] c"[0001]\09\09ACPI Disable Value : %02X\0A\00", align 1
@BHYVE_ACPI_DISABLE = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [29 x i8] c"[0001]\09\09S4BIOS Command : 00\0A\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"[0001]\09\09P-State Control : 00\0A\00", align 1
@.str.23 = private unnamed_addr constant [41 x i8] c"[0004]\09\09PM1A Event Block Address : %08X\0A\00", align 1
@PM1A_EVT_ADDR = common dso_local global i32 0, align 4
@.str.24 = private unnamed_addr constant [45 x i8] c"[0004]\09\09PM1B Event Block Address : 00000000\0A\00", align 1
@.str.25 = private unnamed_addr constant [43 x i8] c"[0004]\09\09PM1A Control Block Address : %08X\0A\00", align 1
@PM1A_CNT_ADDR = common dso_local global i32 0, align 4
@.str.26 = private unnamed_addr constant [47 x i8] c"[0004]\09\09PM1B Control Block Address : 00000000\0A\00", align 1
@.str.27 = private unnamed_addr constant [46 x i8] c"[0004]\09\09PM2 Control Block Address : 00000000\0A\00", align 1
@.str.28 = private unnamed_addr constant [39 x i8] c"[0004]\09\09PM Timer Block Address : %08X\0A\00", align 1
@IO_PMTMR = common dso_local global i32 0, align 4
@.str.29 = private unnamed_addr constant [39 x i8] c"[0004]\09\09GPE0 Block Address : 00000000\0A\00", align 1
@.str.30 = private unnamed_addr constant [39 x i8] c"[0004]\09\09GPE1 Block Address : 00000000\0A\00", align 1
@.str.31 = private unnamed_addr constant [37 x i8] c"[0001]\09\09PM1 Event Block Length : 04\0A\00", align 1
@.str.32 = private unnamed_addr constant [39 x i8] c"[0001]\09\09PM1 Control Block Length : 02\0A\00", align 1
@.str.33 = private unnamed_addr constant [39 x i8] c"[0001]\09\09PM2 Control Block Length : 00\0A\00", align 1
@.str.34 = private unnamed_addr constant [36 x i8] c"[0001]\09\09PM Timer Block Length : 04\0A\00", align 1
@.str.35 = private unnamed_addr constant [32 x i8] c"[0001]\09\09GPE0 Block Length : 00\0A\00", align 1
@.str.36 = private unnamed_addr constant [32 x i8] c"[0001]\09\09GPE1 Block Length : 00\0A\00", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"[0001]\09\09GPE1 Base Offset : 00\0A\00", align 1
@.str.38 = private unnamed_addr constant [27 x i8] c"[0001]\09\09_CST Support : 00\0A\00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"[0002]\09\09C2 Latency : 0000\0A\00", align 1
@.str.40 = private unnamed_addr constant [27 x i8] c"[0002]\09\09C3 Latency : 0000\0A\00", align 1
@.str.41 = private unnamed_addr constant [31 x i8] c"[0002]\09\09CPU Cache Size : 0000\0A\00", align 1
@.str.42 = private unnamed_addr constant [35 x i8] c"[0002]\09\09Cache Flush Stride : 0000\0A\00", align 1
@.str.43 = private unnamed_addr constant [32 x i8] c"[0001]\09\09Duty Cycle Offset : 00\0A\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"[0001]\09\09Duty Cycle Width : 00\0A\00", align 1
@.str.45 = private unnamed_addr constant [34 x i8] c"[0001]\09\09RTC Day Alarm Index : 00\0A\00", align 1
@.str.46 = private unnamed_addr constant [36 x i8] c"[0001]\09\09RTC Month Alarm Index : 00\0A\00", align 1
@.str.47 = private unnamed_addr constant [32 x i8] c"[0001]\09\09RTC Century Index : 32\0A\00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"[0002]\09\09Boot Flags (decoded below) : 0000\0A\00", align 1
@.str.49 = private unnamed_addr constant [38 x i8] c"\09\09\09Legacy Devices Supported (V2) : 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [41 x i8] c"\09\09\098042 Present on ports 60/64 (V2) : 0\0A\00", align 1
@.str.51 = private unnamed_addr constant [29 x i8] c"\09\09\09VGA Not Present (V4) : 1\0A\00", align 1
@.str.52 = private unnamed_addr constant [31 x i8] c"\09\09\09MSI Not Supported (V4) : 0\0A\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"\09\09\09PCIe ASPM Not Supported (V4) : 1\0A\00", align 1
@.str.54 = private unnamed_addr constant [34 x i8] c"\09\09\09CMOS RTC Not Present (V5) : 0\0A\00", align 1
@.str.55 = private unnamed_addr constant [23 x i8] c"[0001]\09\09Reserved : 00\0A\00", align 1
@.str.56 = private unnamed_addr constant [42 x i8] c"[0004]\09\09Flags (decoded below) : 00000000\0A\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c"\09\09\09WBINVD instruction is operational (V1) : 1\0A\00", align 1
@.str.58 = private unnamed_addr constant [39 x i8] c"\09\09\09WBINVD flushes all caches (V1) : 0\0A\00", align 1
@.str.59 = private unnamed_addr constant [33 x i8] c"\09\09\09All CPUs support C1 (V1) : 1\0A\00", align 1
@.str.60 = private unnamed_addr constant [35 x i8] c"\09\09\09C2 works on MP system (V1) : 0\0A\00", align 1
@.str.61 = private unnamed_addr constant [41 x i8] c"\09\09\09Control Method Power Button (V1) : 0\0A\00", align 1
@.str.62 = private unnamed_addr constant [41 x i8] c"\09\09\09Control Method Sleep Button (V1) : 1\0A\00", align 1
@.str.63 = private unnamed_addr constant [45 x i8] c"\09\09\09RTC wake not in fixed reg space (V1) : 0\0A\00", align 1
@.str.64 = private unnamed_addr constant [41 x i8] c"\09\09\09RTC can wake system from S4 (V1) : 0\0A\00", align 1
@.str.65 = private unnamed_addr constant [29 x i8] c"\09\09\0932-bit PM Timer (V1) : 1\0A\00", align 1
@.str.66 = private unnamed_addr constant [31 x i8] c"\09\09\09Docking Supported (V1) : 0\0A\00", align 1
@.str.67 = private unnamed_addr constant [38 x i8] c"\09\09\09Reset Register Supported (V2) : 1\0A\00", align 1
@.str.68 = private unnamed_addr constant [25 x i8] c"\09\09\09Sealed Case (V3) : 0\0A\00", align 1
@.str.69 = private unnamed_addr constant [33 x i8] c"\09\09\09Headless - No Video (V3) : 1\0A\00", align 1
@.str.70 = private unnamed_addr constant [45 x i8] c"\09\09\09Use native instr after SLP_TYPx (V3) : 0\0A\00", align 1
@.str.71 = private unnamed_addr constant [39 x i8] c"\09\09\09PCIEXP_WAK Bits Supported (V4) : 0\0A\00", align 1
@.str.72 = private unnamed_addr constant [32 x i8] c"\09\09\09Use Platform Timer (V4) : 0\0A\00", align 1
@.str.73 = private unnamed_addr constant [38 x i8] c"\09\09\09RTC_STS valid on S4 wake (V4) : 0\0A\00", align 1
@.str.74 = private unnamed_addr constant [37 x i8] c"\09\09\09Remote Power-on capable (V4) : 0\0A\00", align 1
@.str.75 = private unnamed_addr constant [36 x i8] c"\09\09\09Use APIC Cluster Model (V4) : 0\0A\00", align 1
@.str.76 = private unnamed_addr constant [48 x i8] c"\09\09\09Use APIC Physical Destination Mode (V4) : 1\0A\00", align 1
@.str.77 = private unnamed_addr constant [30 x i8] c"\09\09\09Hardware Reduced (V5) : 0\0A\00", align 1
@.str.78 = private unnamed_addr constant [31 x i8] c"\09\09\09Low Power S0 Idle (V5) : 0\0A\00", align 1
@.str.79 = private unnamed_addr constant [54 x i8] c"[0012]\09\09Reset Register : [Generic Address Structure]\0A\00", align 1
@.str.80 = private unnamed_addr constant [34 x i8] c"[0001]\09\09Space ID : 01 [SystemIO]\0A\00", align 1
@.str.81 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 08\0A\00", align 1
@.str.82 = private unnamed_addr constant [25 x i8] c"[0001]\09\09Bit Offset : 00\0A\00", align 1
@.str.83 = private unnamed_addr constant [51 x i8] c"[0001]\09\09Encoded Access Width : 01 [Byte Access:8]\0A\00", align 1
@.str.84 = private unnamed_addr constant [36 x i8] c"[0008]\09\09Address : 0000000000000CF9\0A\00", align 1
@.str.85 = private unnamed_addr constant [35 x i8] c"[0001]\09\09Value to cause reset : 06\0A\00", align 1
@.str.86 = private unnamed_addr constant [41 x i8] c"[0002]\09\09ARM Flags (decoded below): 0000\0A\00", align 1
@.str.87 = private unnamed_addr constant [23 x i8] c"\09\09\09PSCI Compliant : 0\0A\00", align 1
@.str.88 = private unnamed_addr constant [30 x i8] c"\09\09\09Must use HVC for PSCI : 0\0A\00", align 1
@.str.89 = private unnamed_addr constant [34 x i8] c"[0001]\09\09FADT Minor Revision : 01\0A\00", align 1
@.str.90 = private unnamed_addr constant [37 x i8] c"[0008]\09\09FACS Address : 00000000%08X\0A\00", align 1
@.str.91 = private unnamed_addr constant [37 x i8] c"[0008]\09\09DSDT Address : 00000000%08X\0A\00", align 1
@.str.92 = private unnamed_addr constant [56 x i8] c"[0012]\09\09PM1A Event Block : [Generic Address Structure]\0A\00", align 1
@.str.93 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 20\0A\00", align 1
@.str.94 = private unnamed_addr constant [52 x i8] c"[0001]\09\09Encoded Access Width : 02 [Word Access:16]\0A\00", align 1
@.str.95 = private unnamed_addr constant [32 x i8] c"[0008]\09\09Address : 00000000%08X\0A\00", align 1
@.str.96 = private unnamed_addr constant [56 x i8] c"[0012]\09\09PM1B Event Block : [Generic Address Structure]\0A\00", align 1
@.str.97 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 00\0A\00", align 1
@.str.98 = private unnamed_addr constant [54 x i8] c"[0001]\09\09Encoded Access Width : 00 [Undefined/Legacy]\0A\00", align 1
@.str.99 = private unnamed_addr constant [36 x i8] c"[0008]\09\09Address : 0000000000000000\0A\00", align 1
@.str.100 = private unnamed_addr constant [58 x i8] c"[0012]\09\09PM1A Control Block : [Generic Address Structure]\0A\00", align 1
@.str.101 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 10\0A\00", align 1
@.str.102 = private unnamed_addr constant [58 x i8] c"[0012]\09\09PM1B Control Block : [Generic Address Structure]\0A\00", align 1
@.str.103 = private unnamed_addr constant [57 x i8] c"[0012]\09\09PM2 Control Block : [Generic Address Structure]\0A\00", align 1
@.str.104 = private unnamed_addr constant [54 x i8] c"[0012]\09\09PM Timer Block : [Generic Address Structure]\0A\00", align 1
@.str.105 = private unnamed_addr constant [53 x i8] c"[0001]\09\09Encoded Access Width : 03 [DWord Access:32]\0A\00", align 1
@.str.106 = private unnamed_addr constant [50 x i8] c"[0012]\09\09GPE0 Block : [Generic Address Structure]\0A\00", align 1
@.str.107 = private unnamed_addr constant [50 x i8] c"[0012]\09\09GPE1 Block : [Generic Address Structure]\0A\00", align 1
@.str.108 = private unnamed_addr constant [62 x i8] c"[0012]\09\09Sleep Control Register : [Generic Address Structure]\0A\00", align 1
@.str.109 = private unnamed_addr constant [61 x i8] c"[0012]\09\09Sleep Status Register : [Generic Address Structure]\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32*)* @basl_fwrite_fadt to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @basl_fwrite_fadt(i32* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  %4 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i32 0, i32* %4, align 4
  %5 = load i32*, i32** %3, align 8
  %6 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %5, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %7 = load i32*, i32** %3, align 8
  %8 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %7, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %9 = load i32*, i32** %3, align 8
  %10 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %11 = load i32*, i32** %3, align 8
  %12 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %11, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %13 = load i32*, i32** %3, align 8
  %14 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %13, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  %15 = load i32*, i32** %3, align 8
  %16 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %15, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  %17 = load i32*, i32** %3, align 8
  %18 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %17, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0))
  %19 = load i32*, i32** %3, align 8
  %20 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %19, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0))
  %21 = load i32*, i32** %3, align 8
  %22 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %21, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0))
  %23 = load i32*, i32** %3, align 8
  %24 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %23, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0))
  %25 = load i32*, i32** %3, align 8
  %26 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %25, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.10, i64 0, i64 0))
  %27 = load i32*, i32** %3, align 8
  %28 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %27, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0))
  %29 = load i32*, i32** %3, align 8
  %30 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %29, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %31 = load i32*, i32** %3, align 8
  %32 = load i64, i64* @basl_acpi_base, align 8
  %33 = load i64, i64* @FACS_OFFSET, align 8
  %34 = add nsw i64 %32, %33
  %35 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %31, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.13, i64 0, i64 0), i64 %34)
  %36 = load i32*, i32** %3, align 8
  %37 = load i64, i64* @basl_acpi_base, align 8
  %38 = load i64, i64* @DSDT_OFFSET, align 8
  %39 = add nsw i64 %37, %38
  %40 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %36, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14, i64 0, i64 0), i64 %39)
  %41 = load i32*, i32** %3, align 8
  %42 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %41, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0))
  %43 = load i32*, i32** %3, align 8
  %44 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %43, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16, i64 0, i64 0))
  %45 = load i32*, i32** %3, align 8
  %46 = load i32, i32* @SCI_INT, align 4
  %47 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %45, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i64 0, i64 0), i32 %46)
  %48 = load i32*, i32** %3, align 8
  %49 = load i32, i32* @SMI_CMD, align 4
  %50 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %48, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18, i64 0, i64 0), i32 %49)
  %51 = load i32*, i32** %3, align 8
  %52 = load i32, i32* @BHYVE_ACPI_ENABLE, align 4
  %53 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %51, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 %52)
  %54 = load i32*, i32** %3, align 8
  %55 = load i32, i32* @BHYVE_ACPI_DISABLE, align 4
  %56 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %54, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.20, i64 0, i64 0), i32 %55)
  %57 = load i32*, i32** %3, align 8
  %58 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %57, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.21, i64 0, i64 0))
  %59 = load i32*, i32** %3, align 8
  %60 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %59, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0))
  %61 = load i32*, i32** %3, align 8
  %62 = load i32, i32* @PM1A_EVT_ADDR, align 4
  %63 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %61, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.23, i64 0, i64 0), i32 %62)
  %64 = load i32*, i32** %3, align 8
  %65 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %64, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.24, i64 0, i64 0))
  %66 = load i32*, i32** %3, align 8
  %67 = load i32, i32* @PM1A_CNT_ADDR, align 4
  %68 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %66, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.25, i64 0, i64 0), i32 %67)
  %69 = load i32*, i32** %3, align 8
  %70 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %69, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.26, i64 0, i64 0))
  %71 = load i32*, i32** %3, align 8
  %72 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %71, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27, i64 0, i64 0))
  %73 = load i32*, i32** %3, align 8
  %74 = load i32, i32* @IO_PMTMR, align 4
  %75 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %73, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i64 0, i64 0), i32 %74)
  %76 = load i32*, i32** %3, align 8
  %77 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %76, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.29, i64 0, i64 0))
  %78 = load i32*, i32** %3, align 8
  %79 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %78, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.30, i64 0, i64 0))
  %80 = load i32*, i32** %3, align 8
  %81 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %80, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.31, i64 0, i64 0))
  %82 = load i32*, i32** %3, align 8
  %83 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %82, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.32, i64 0, i64 0))
  %84 = load i32*, i32** %3, align 8
  %85 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %84, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.33, i64 0, i64 0))
  %86 = load i32*, i32** %3, align 8
  %87 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %86, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.34, i64 0, i64 0))
  %88 = load i32*, i32** %3, align 8
  %89 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %88, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.35, i64 0, i64 0))
  %90 = load i32*, i32** %3, align 8
  %91 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %90, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.36, i64 0, i64 0))
  %92 = load i32*, i32** %3, align 8
  %93 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %92, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.37, i64 0, i64 0))
  %94 = load i32*, i32** %3, align 8
  %95 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %94, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.38, i64 0, i64 0))
  %96 = load i32*, i32** %3, align 8
  %97 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %96, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0))
  %98 = load i32*, i32** %3, align 8
  %99 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %98, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.40, i64 0, i64 0))
  %100 = load i32*, i32** %3, align 8
  %101 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %100, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.41, i64 0, i64 0))
  %102 = load i32*, i32** %3, align 8
  %103 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %102, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.42, i64 0, i64 0))
  %104 = load i32*, i32** %3, align 8
  %105 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %104, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.43, i64 0, i64 0))
  %106 = load i32*, i32** %3, align 8
  %107 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %106, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.44, i64 0, i64 0))
  %108 = load i32*, i32** %3, align 8
  %109 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %108, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.45, i64 0, i64 0))
  %110 = load i32*, i32** %3, align 8
  %111 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %110, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.46, i64 0, i64 0))
  %112 = load i32*, i32** %3, align 8
  %113 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %112, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.47, i64 0, i64 0))
  %114 = load i32*, i32** %3, align 8
  %115 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %114, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0))
  %116 = load i32*, i32** %3, align 8
  %117 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %116, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.49, i64 0, i64 0))
  %118 = load i32*, i32** %3, align 8
  %119 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %118, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.50, i64 0, i64 0))
  %120 = load i32*, i32** %3, align 8
  %121 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %120, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.51, i64 0, i64 0))
  %122 = load i32*, i32** %3, align 8
  %123 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %122, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.52, i64 0, i64 0))
  %124 = load i32*, i32** %3, align 8
  %125 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %124, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.53, i64 0, i64 0))
  %126 = load i32*, i32** %3, align 8
  %127 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %126, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.54, i64 0, i64 0))
  %128 = load i32*, i32** %3, align 8
  %129 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %128, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.55, i64 0, i64 0))
  %130 = load i32*, i32** %3, align 8
  %131 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %130, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.56, i64 0, i64 0))
  %132 = load i32*, i32** %3, align 8
  %133 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %132, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0))
  %134 = load i32*, i32** %3, align 8
  %135 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %134, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.58, i64 0, i64 0))
  %136 = load i32*, i32** %3, align 8
  %137 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %136, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.59, i64 0, i64 0))
  %138 = load i32*, i32** %3, align 8
  %139 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %138, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.60, i64 0, i64 0))
  %140 = load i32*, i32** %3, align 8
  %141 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %140, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.61, i64 0, i64 0))
  %142 = load i32*, i32** %3, align 8
  %143 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %142, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.62, i64 0, i64 0))
  %144 = load i32*, i32** %3, align 8
  %145 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %144, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.63, i64 0, i64 0))
  %146 = load i32*, i32** %3, align 8
  %147 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %146, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.64, i64 0, i64 0))
  %148 = load i32*, i32** %3, align 8
  %149 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %148, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.65, i64 0, i64 0))
  %150 = load i32*, i32** %3, align 8
  %151 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %150, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.66, i64 0, i64 0))
  %152 = load i32*, i32** %3, align 8
  %153 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %152, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.67, i64 0, i64 0))
  %154 = load i32*, i32** %3, align 8
  %155 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %154, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.68, i64 0, i64 0))
  %156 = load i32*, i32** %3, align 8
  %157 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %156, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.69, i64 0, i64 0))
  %158 = load i32*, i32** %3, align 8
  %159 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %158, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.70, i64 0, i64 0))
  %160 = load i32*, i32** %3, align 8
  %161 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %160, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.71, i64 0, i64 0))
  %162 = load i32*, i32** %3, align 8
  %163 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %162, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.72, i64 0, i64 0))
  %164 = load i32*, i32** %3, align 8
  %165 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %164, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.73, i64 0, i64 0))
  %166 = load i32*, i32** %3, align 8
  %167 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %166, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.74, i64 0, i64 0))
  %168 = load i32*, i32** %3, align 8
  %169 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %168, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.75, i64 0, i64 0))
  %170 = load i32*, i32** %3, align 8
  %171 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %170, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.76, i64 0, i64 0))
  %172 = load i32*, i32** %3, align 8
  %173 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %172, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.77, i64 0, i64 0))
  %174 = load i32*, i32** %3, align 8
  %175 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %174, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.78, i64 0, i64 0))
  %176 = load i32*, i32** %3, align 8
  %177 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %176, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %178 = load i32*, i32** %3, align 8
  %179 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %178, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.79, i64 0, i64 0))
  %180 = load i32*, i32** %3, align 8
  %181 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %180, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %182 = load i32*, i32** %3, align 8
  %183 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %182, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %184 = load i32*, i32** %3, align 8
  %185 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %184, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %186 = load i32*, i32** %3, align 8
  %187 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %186, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %188 = load i32*, i32** %3, align 8
  %189 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %188, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.84, i64 0, i64 0))
  %190 = load i32*, i32** %3, align 8
  %191 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %190, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %192 = load i32*, i32** %3, align 8
  %193 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %192, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.85, i64 0, i64 0))
  %194 = load i32*, i32** %3, align 8
  %195 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %194, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.86, i64 0, i64 0))
  %196 = load i32*, i32** %3, align 8
  %197 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %196, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.87, i64 0, i64 0))
  %198 = load i32*, i32** %3, align 8
  %199 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %198, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.88, i64 0, i64 0))
  %200 = load i32*, i32** %3, align 8
  %201 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %200, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.89, i64 0, i64 0))
  %202 = load i32*, i32** %3, align 8
  %203 = load i64, i64* @basl_acpi_base, align 8
  %204 = load i64, i64* @FACS_OFFSET, align 8
  %205 = add nsw i64 %203, %204
  %206 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %202, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.90, i64 0, i64 0), i64 %205)
  %207 = load i32*, i32** %3, align 8
  %208 = load i64, i64* @basl_acpi_base, align 8
  %209 = load i64, i64* @DSDT_OFFSET, align 8
  %210 = add nsw i64 %208, %209
  %211 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %207, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.91, i64 0, i64 0), i64 %210)
  %212 = load i32*, i32** %3, align 8
  %213 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %212, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.92, i64 0, i64 0))
  %214 = load i32*, i32** %3, align 8
  %215 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %214, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %216 = load i32*, i32** %3, align 8
  %217 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %216, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.93, i64 0, i64 0))
  %218 = load i32*, i32** %3, align 8
  %219 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %218, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %220 = load i32*, i32** %3, align 8
  %221 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %220, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.94, i64 0, i64 0))
  %222 = load i32*, i32** %3, align 8
  %223 = load i32, i32* @PM1A_EVT_ADDR, align 4
  %224 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %222, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.95, i64 0, i64 0), i32 %223)
  %225 = load i32*, i32** %3, align 8
  %226 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %225, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %227 = load i32*, i32** %3, align 8
  %228 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %227, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.96, i64 0, i64 0))
  %229 = load i32*, i32** %3, align 8
  %230 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %229, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %231 = load i32*, i32** %3, align 8
  %232 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %231, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %233 = load i32*, i32** %3, align 8
  %234 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %233, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %235 = load i32*, i32** %3, align 8
  %236 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %235, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %237 = load i32*, i32** %3, align 8
  %238 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %237, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %239 = load i32*, i32** %3, align 8
  %240 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %239, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %241 = load i32*, i32** %3, align 8
  %242 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %241, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.100, i64 0, i64 0))
  %243 = load i32*, i32** %3, align 8
  %244 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %243, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %245 = load i32*, i32** %3, align 8
  %246 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %245, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.101, i64 0, i64 0))
  %247 = load i32*, i32** %3, align 8
  %248 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %247, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %249 = load i32*, i32** %3, align 8
  %250 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %249, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.94, i64 0, i64 0))
  %251 = load i32*, i32** %3, align 8
  %252 = load i32, i32* @PM1A_CNT_ADDR, align 4
  %253 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %251, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.95, i64 0, i64 0), i32 %252)
  %254 = load i32*, i32** %3, align 8
  %255 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %254, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %256 = load i32*, i32** %3, align 8
  %257 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %256, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.102, i64 0, i64 0))
  %258 = load i32*, i32** %3, align 8
  %259 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %258, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %260 = load i32*, i32** %3, align 8
  %261 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %260, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %262 = load i32*, i32** %3, align 8
  %263 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %262, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %264 = load i32*, i32** %3, align 8
  %265 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %264, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %266 = load i32*, i32** %3, align 8
  %267 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %266, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %268 = load i32*, i32** %3, align 8
  %269 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %268, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %270 = load i32*, i32** %3, align 8
  %271 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %270, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.103, i64 0, i64 0))
  %272 = load i32*, i32** %3, align 8
  %273 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %272, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %274 = load i32*, i32** %3, align 8
  %275 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %274, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %276 = load i32*, i32** %3, align 8
  %277 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %276, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %278 = load i32*, i32** %3, align 8
  %279 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %278, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %280 = load i32*, i32** %3, align 8
  %281 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %280, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %282 = load i32*, i32** %3, align 8
  %283 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %282, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %284 = load i32*, i32** %3, align 8
  %285 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %284, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.104, i64 0, i64 0))
  %286 = load i32*, i32** %3, align 8
  %287 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %286, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %288 = load i32*, i32** %3, align 8
  %289 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %288, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.93, i64 0, i64 0))
  %290 = load i32*, i32** %3, align 8
  %291 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %290, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %292 = load i32*, i32** %3, align 8
  %293 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %292, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.105, i64 0, i64 0))
  %294 = load i32*, i32** %3, align 8
  %295 = load i32, i32* @IO_PMTMR, align 4
  %296 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %294, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.95, i64 0, i64 0), i32 %295)
  %297 = load i32*, i32** %3, align 8
  %298 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %297, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %299 = load i32*, i32** %3, align 8
  %300 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %299, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.106, i64 0, i64 0))
  %301 = load i32*, i32** %3, align 8
  %302 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %301, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %303 = load i32*, i32** %3, align 8
  %304 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %303, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %305 = load i32*, i32** %3, align 8
  %306 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %305, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %307 = load i32*, i32** %3, align 8
  %308 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %307, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %309 = load i32*, i32** %3, align 8
  %310 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %309, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %311 = load i32*, i32** %3, align 8
  %312 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %311, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %313 = load i32*, i32** %3, align 8
  %314 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %313, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.107, i64 0, i64 0))
  %315 = load i32*, i32** %3, align 8
  %316 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %315, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %317 = load i32*, i32** %3, align 8
  %318 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %317, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %319 = load i32*, i32** %3, align 8
  %320 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %319, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %321 = load i32*, i32** %3, align 8
  %322 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %321, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %323 = load i32*, i32** %3, align 8
  %324 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %323, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %325 = load i32*, i32** %3, align 8
  %326 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %325, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %327 = load i32*, i32** %3, align 8
  %328 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %327, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.108, i64 0, i64 0))
  %329 = load i32*, i32** %3, align 8
  %330 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %329, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %331 = load i32*, i32** %3, align 8
  %332 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %331, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %333 = load i32*, i32** %3, align 8
  %334 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %333, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %335 = load i32*, i32** %3, align 8
  %336 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %335, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %337 = load i32*, i32** %3, align 8
  %338 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %337, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %339 = load i32*, i32** %3, align 8
  %340 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %339, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %341 = load i32*, i32** %3, align 8
  %342 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %341, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.109, i64 0, i64 0))
  %343 = load i32*, i32** %3, align 8
  %344 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %343, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %345 = load i32*, i32** %3, align 8
  %346 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %345, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %347 = load i32*, i32** %3, align 8
  %348 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %347, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %349 = load i32*, i32** %3, align 8
  %350 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %349, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %351 = load i32*, i32** %3, align 8
  %352 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %351, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %353 = load i32*, i32** %3, align 8
  %354 = call i32 @EFFLUSH(i32* %353)
  store i32 0, i32* %2, align 4
  br label %357

355:                                              ; No predecessors!
  %356 = load i32, i32* @errno, align 4
  store i32 %356, i32* %2, align 4
  br label %357

357:                                              ; preds = %355, %1
  %358 = load i32, i32* %2, align 4
  ret i32 %358
}

declare dso_local i32 @EFPRINTF(i32*, i8*, ...) #1

declare dso_local i32 @EFFLUSH(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
