; ModuleID = '/home/carl/AnghaBench/lab/q3map2/q3map2/extr_shaders.c_WriteMapShaderFile.c'
source_filename = "/home/carl/AnghaBench/lab/q3map2/q3map2/extr_shaders.c_WriteMapShaderFile.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { i64, i8*, i8* }

@mapShaderFile = common dso_local global i8* null, align 8
@numShaderInfo = common dso_local global i32 0, align 4
@shaderInfo = common dso_local global %struct.TYPE_3__* null, align 8
@SYS_VRB = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [28 x i8] c"--- WriteMapShaderFile ---\0A\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"Writing %s\00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@SYS_WRN = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [56 x i8] c"WARNING: Unable to open map shader file %s for writing\0A\00", align 1
@.str.4 = private unnamed_addr constant [122 x i8] c"// Custom shader file for %s.bsp\0A// Generated by Q3Map2 (ydnar)\0A// Do not edit! This file is overwritten on recompiles.\0A\0A\00", align 1
@mapName = common dso_local global i8* null, align 8
@qfalse = common dso_local global i64 0, align 8
@.str.5 = private unnamed_addr constant [6 x i8] c"%s%s\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.7 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.8 = private unnamed_addr constant [28 x i8] c"%9d custom shaders emitted\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @WriteMapShaderFile() #0 {
  %1 = alloca i32*, align 8
  %2 = alloca %struct.TYPE_3__*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = load i8*, i8** @mapShaderFile, align 8
  %6 = getelementptr inbounds i8, i8* %5, i64 0
  %7 = load i8, i8* %6, align 1
  %8 = sext i8 %7 to i32
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %10, label %11

10:                                               ; preds = %0
  br label %105

11:                                               ; preds = %0
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %12

12:                                               ; preds = %26, %11
  %13 = load i32, i32* %3, align 4
  %14 = load i32, i32* @numShaderInfo, align 4
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %16, label %29

16:                                               ; preds = %12
  %17 = load %struct.TYPE_3__*, %struct.TYPE_3__** @shaderInfo, align 8
  %18 = load i32, i32* %3, align 4
  %19 = sext i32 %18 to i64
  %20 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %17, i64 %19
  %21 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = icmp ne i64 %22, 0
  br i1 %23, label %24, label %25

24:                                               ; preds = %16
  br label %29

25:                                               ; preds = %16
  br label %26

26:                                               ; preds = %25
  %27 = load i32, i32* %3, align 4
  %28 = add nsw i32 %27, 1
  store i32 %28, i32* %3, align 4
  br label %12

29:                                               ; preds = %24, %12
  %30 = load i32, i32* %3, align 4
  %31 = load i32, i32* @numShaderInfo, align 4
  %32 = icmp eq i32 %30, %31
  br i1 %32, label %33, label %34

33:                                               ; preds = %29
  br label %105

34:                                               ; preds = %29
  %35 = load i32, i32* @SYS_VRB, align 4
  %36 = call i32 (i32, i8*, ...) @Sys_FPrintf(i32 %35, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %37 = load i32, i32* @SYS_VRB, align 4
  %38 = load i8*, i8** @mapShaderFile, align 8
  %39 = call i32 (i32, i8*, ...) @Sys_FPrintf(i32 %37, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i8* %38)
  %40 = load i8*, i8** @mapShaderFile, align 8
  %41 = call i32* @fopen(i8* %40, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0))
  store i32* %41, i32** %1, align 8
  %42 = load i32*, i32** %1, align 8
  %43 = icmp eq i32* %42, null
  br i1 %43, label %44, label %48

44:                                               ; preds = %34
  %45 = load i32, i32* @SYS_WRN, align 4
  %46 = load i8*, i8** @mapShaderFile, align 8
  %47 = call i32 (i32, i8*, ...) @Sys_FPrintf(i32 %45, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.3, i64 0, i64 0), i8* %46)
  br label %105

48:                                               ; preds = %34
  %49 = load i32*, i32** %1, align 8
  %50 = load i8*, i8** @mapName, align 8
  %51 = call i32 (i32*, i8*, i8*, ...) @fprintf(i32* %49, i8* getelementptr inbounds ([122 x i8], [122 x i8]* @.str.4, i64 0, i64 0), i8* %50)
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  br label %52

52:                                               ; preds = %93, %48
  %53 = load i32, i32* %3, align 4
  %54 = load i32, i32* @numShaderInfo, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %96

56:                                               ; preds = %52
  %57 = load %struct.TYPE_3__*, %struct.TYPE_3__** @shaderInfo, align 8
  %58 = load i32, i32* %3, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %57, i64 %59
  store %struct.TYPE_3__* %60, %struct.TYPE_3__** %2, align 8
  %61 = load %struct.TYPE_3__*, %struct.TYPE_3__** %2, align 8
  %62 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %61, i32 0, i32 0
  %63 = load i64, i64* %62, align 8
  %64 = load i64, i64* @qfalse, align 8
  %65 = icmp eq i64 %63, %64
  br i1 %65, label %79, label %66

66:                                               ; preds = %56
  %67 = load %struct.TYPE_3__*, %struct.TYPE_3__** %2, align 8
  %68 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %67, i32 0, i32 1
  %69 = load i8*, i8** %68, align 8
  %70 = icmp eq i8* %69, null
  br i1 %70, label %79, label %71

71:                                               ; preds = %66
  %72 = load %struct.TYPE_3__*, %struct.TYPE_3__** %2, align 8
  %73 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %72, i32 0, i32 1
  %74 = load i8*, i8** %73, align 8
  %75 = getelementptr inbounds i8, i8* %74, i64 0
  %76 = load i8, i8* %75, align 1
  %77 = sext i8 %76 to i32
  %78 = icmp eq i32 %77, 0
  br i1 %78, label %79, label %80

79:                                               ; preds = %71, %66, %56
  br label %93

80:                                               ; preds = %71
  %81 = load i32, i32* %4, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %4, align 4
  %83 = load i32*, i32** %1, align 8
  %84 = load %struct.TYPE_3__*, %struct.TYPE_3__** %2, align 8
  %85 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %84, i32 0, i32 2
  %86 = load i8*, i8** %85, align 8
  %87 = load %struct.TYPE_3__*, %struct.TYPE_3__** %2, align 8
  %88 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %87, i32 0, i32 1
  %89 = load i8*, i8** %88, align 8
  %90 = call i32 (i32*, i8*, i8*, ...) @fprintf(i32* %83, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i8* %86, i8* %89)
  %91 = load i32, i32* @SYS_VRB, align 4
  %92 = call i32 (i32, i8*, ...) @Sys_FPrintf(i32 %91, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  br label %93

93:                                               ; preds = %80, %79
  %94 = load i32, i32* %3, align 4
  %95 = add nsw i32 %94, 1
  store i32 %95, i32* %3, align 4
  br label %52

96:                                               ; preds = %52
  %97 = load i32*, i32** %1, align 8
  %98 = call i32 @fflush(i32* %97)
  %99 = load i32*, i32** %1, align 8
  %100 = call i32 @fclose(i32* %99)
  %101 = load i32, i32* @SYS_VRB, align 4
  %102 = call i32 (i32, i8*, ...) @Sys_FPrintf(i32 %101, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.7, i64 0, i64 0))
  %103 = load i32, i32* %4, align 4
  %104 = call i32 @Sys_Printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.8, i64 0, i64 0), i32 %103)
  br label %105

105:                                              ; preds = %96, %44, %33, %10
  ret void
}

declare dso_local i32 @Sys_FPrintf(i32, i8*, ...) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, i8*, ...) #1

declare dso_local i32 @fflush(i32*) #1

declare dso_local i32 @fclose(i32*) #1

declare dso_local i32 @Sys_Printf(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
