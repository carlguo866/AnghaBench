; ModuleID = '/home/carl/AnghaBench/lab/q3map2/q3map2/extr_convert_ase.c_ConvertBSPToASE.c'
source_filename = "/home/carl/AnghaBench/lab/q3map2/q3map2/extr_convert_ase.c_ConvertBSPToASE.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [28 x i8] c"--- Convert BSP to ASE ---\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c".ase\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"writing %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c".bsp\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Open failed on %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [26 x i8] c"*3DSMAX_ASCIIEXPORT\09200\0D\0A\00", align 1
@.str.7 = private unnamed_addr constant [62 x i8] c"*COMMENT\09\22Generated by Q3Map2 (ydnar) -convert -format ase\22\0D\0A\00", align 1
@.str.8 = private unnamed_addr constant [11 x i8] c"*SCENE\09{\0D\0A\00", align 1
@.str.9 = private unnamed_addr constant [24 x i8] c"\09*SCENE_FILENAME\09\22%s\22\0D\0A\00", align 1
@.str.10 = private unnamed_addr constant [23 x i8] c"\09*SCENE_FIRSTFRAME\090\0D\0A\00", align 1
@.str.11 = private unnamed_addr constant [24 x i8] c"\09*SCENE_LASTFRAME\09100\0D\0A\00", align 1
@.str.12 = private unnamed_addr constant [24 x i8] c"\09*SCENE_FRAMESPEED\0930\0D\0A\00", align 1
@.str.13 = private unnamed_addr constant [28 x i8] c"\09*SCENE_TICKSPERFRAME\09160\0D\0A\00", align 1
@.str.14 = private unnamed_addr constant [49 x i8] c"\09*SCENE_BACKGROUND_STATIC\090.0000\090.0000\090.0000\0D\0A\00", align 1
@.str.15 = private unnamed_addr constant [46 x i8] c"\09*SCENE_AMBIENT_STATIC\090.0000\090.0000\090.0000\0D\0A\00", align 1
@.str.16 = private unnamed_addr constant [4 x i8] c"}\0D\0A\00", align 1
@.str.17 = private unnamed_addr constant [19 x i8] c"*MATERIAL_LIST\09{\0D\0A\00", align 1
@.str.18 = private unnamed_addr constant [22 x i8] c"\09*MATERIAL_COUNT\09%d\0D\0A\00", align 1
@numBSPShaders = common dso_local global i32 0, align 4
@bspShaders = common dso_local global i32* null, align 8
@numEntities = common dso_local global i32 0, align 4
@entities = common dso_local global i32* null, align 8
@.str.19 = private unnamed_addr constant [6 x i8] c"model\00", align 1
@bspModels = common dso_local global i32* null, align 8
@.str.20 = private unnamed_addr constant [7 x i8] c"origin\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ConvertBSPToASE(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i8*, align 8
  %11 = alloca [1024 x i8], align 16
  %12 = alloca [1024 x i8], align 16
  store i8* %0, i8** %2, align 8
  %13 = call i32 (i8*, ...) @Sys_Printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %14 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %15 = load i8*, i8** %2, align 8
  %16 = call i32 @strcpy(i8* %14, i8* %15)
  %17 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %18 = call i32 @StripExtension(i8* %17)
  %19 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %20 = call i32 @strcat(i8* %19, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0))
  %21 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %22 = call i32 (i8*, ...) @Sys_Printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* %21)
  %23 = load i8*, i8** %2, align 8
  %24 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %25 = call i32 @ExtractFileBase(i8* %23, i8* %24)
  %26 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %27 = call i32 @strcat(i8* %26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %28 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %29 = call i32* @fopen(i8* %28, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  store i32* %29, i32** %5, align 8
  %30 = load i32*, i32** %5, align 8
  %31 = icmp eq i32* %30, null
  br i1 %31, label %32, label %35

32:                                               ; preds = %1
  %33 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %34 = call i32 @Error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i8* %33)
  br label %35

35:                                               ; preds = %32, %1
  %36 = load i32*, i32** %5, align 8
  %37 = call i32 (i32*, i8*, ...) @fprintf(i32* %36, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.6, i64 0, i64 0))
  %38 = load i32*, i32** %5, align 8
  %39 = call i32 (i32*, i8*, ...) @fprintf(i32* %38, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.7, i64 0, i64 0))
  %40 = load i32*, i32** %5, align 8
  %41 = call i32 (i32*, i8*, ...) @fprintf(i32* %40, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.8, i64 0, i64 0))
  %42 = load i32*, i32** %5, align 8
  %43 = getelementptr inbounds [1024 x i8], [1024 x i8]* %12, i64 0, i64 0
  %44 = call i32 (i32*, i8*, ...) @fprintf(i32* %42, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.9, i64 0, i64 0), i8* %43)
  %45 = load i32*, i32** %5, align 8
  %46 = call i32 (i32*, i8*, ...) @fprintf(i32* %45, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.10, i64 0, i64 0))
  %47 = load i32*, i32** %5, align 8
  %48 = call i32 (i32*, i8*, ...) @fprintf(i32* %47, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.11, i64 0, i64 0))
  %49 = load i32*, i32** %5, align 8
  %50 = call i32 (i32*, i8*, ...) @fprintf(i32* %49, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0))
  %51 = load i32*, i32** %5, align 8
  %52 = call i32 (i32*, i8*, ...) @fprintf(i32* %51, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.13, i64 0, i64 0))
  %53 = load i32*, i32** %5, align 8
  %54 = call i32 (i32*, i8*, ...) @fprintf(i32* %53, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.14, i64 0, i64 0))
  %55 = load i32*, i32** %5, align 8
  %56 = call i32 (i32*, i8*, ...) @fprintf(i32* %55, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.15, i64 0, i64 0))
  %57 = load i32*, i32** %5, align 8
  %58 = call i32 (i32*, i8*, ...) @fprintf(i32* %57, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0))
  %59 = load i32*, i32** %5, align 8
  %60 = call i32 (i32*, i8*, ...) @fprintf(i32* %59, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.17, i64 0, i64 0))
  %61 = load i32*, i32** %5, align 8
  %62 = load i32, i32* @numBSPShaders, align 4
  %63 = call i32 (i32*, i8*, ...) @fprintf(i32* %61, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.18, i64 0, i64 0), i32 %62)
  store i32 0, i32* %3, align 4
  br label %64

64:                                               ; preds = %77, %35
  %65 = load i32, i32* %3, align 4
  %66 = load i32, i32* @numBSPShaders, align 4
  %67 = icmp slt i32 %65, %66
  br i1 %67, label %68, label %80

68:                                               ; preds = %64
  %69 = load i32*, i32** @bspShaders, align 8
  %70 = load i32, i32* %3, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds i32, i32* %69, i64 %71
  store i32* %72, i32** %6, align 8
  %73 = load i32*, i32** %5, align 8
  %74 = load i32*, i32** %6, align 8
  %75 = load i32, i32* %3, align 4
  %76 = call i32 @ConvertShader(i32* %73, i32* %74, i32 %75)
  br label %77

77:                                               ; preds = %68
  %78 = load i32, i32* %3, align 4
  %79 = add nsw i32 %78, 1
  store i32 %79, i32* %3, align 4
  br label %64

80:                                               ; preds = %64
  %81 = load i32*, i32** %5, align 8
  %82 = call i32 (i32*, i8*, ...) @fprintf(i32* %81, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.16, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %83

83:                                               ; preds = %133, %80
  %84 = load i32, i32* %3, align 4
  %85 = load i32, i32* @numEntities, align 4
  %86 = icmp slt i32 %84, %85
  br i1 %86, label %87, label %136

87:                                               ; preds = %83
  %88 = load i32*, i32** @entities, align 8
  %89 = load i32, i32* %3, align 4
  %90 = sext i32 %89 to i64
  %91 = getelementptr inbounds i32, i32* %88, i64 %90
  store i32* %91, i32** %8, align 8
  %92 = load i32, i32* %3, align 4
  %93 = icmp eq i32 %92, 0
  br i1 %93, label %94, label %95

94:                                               ; preds = %87
  store i32 0, i32* %4, align 4
  br label %108

95:                                               ; preds = %87
  %96 = load i32*, i32** %8, align 8
  %97 = call i8* @ValueForKey(i32* %96, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0))
  store i8* %97, i8** %10, align 8
  %98 = load i8*, i8** %10, align 8
  %99 = getelementptr inbounds i8, i8* %98, i64 0
  %100 = load i8, i8* %99, align 1
  %101 = sext i8 %100 to i32
  %102 = icmp ne i32 %101, 42
  br i1 %102, label %103, label %104

103:                                              ; preds = %95
  br label %133

104:                                              ; preds = %95
  %105 = load i8*, i8** %10, align 8
  %106 = getelementptr inbounds i8, i8* %105, i64 1
  %107 = call i32 @atoi(i8* %106)
  store i32 %107, i32* %4, align 4
  br label %108

108:                                              ; preds = %104, %94
  %109 = load i32*, i32** @bspModels, align 8
  %110 = load i32, i32* %4, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds i32, i32* %109, i64 %111
  store i32* %112, i32** %7, align 8
  %113 = load i32*, i32** %8, align 8
  %114 = call i8* @ValueForKey(i32* %113, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i64 0, i64 0))
  store i8* %114, i8** %10, align 8
  %115 = load i8*, i8** %10, align 8
  %116 = getelementptr inbounds i8, i8* %115, i64 0
  %117 = load i8, i8* %116, align 1
  %118 = sext i8 %117 to i32
  %119 = icmp eq i32 %118, 0
  br i1 %119, label %120, label %123

120:                                              ; preds = %108
  %121 = load i32, i32* %9, align 4
  %122 = call i32 @VectorClear(i32 %121)
  br label %127

123:                                              ; preds = %108
  %124 = load i32*, i32** %8, align 8
  %125 = load i32, i32* %9, align 4
  %126 = call i32 @GetVectorForKey(i32* %124, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.20, i64 0, i64 0), i32 %125)
  br label %127

127:                                              ; preds = %123, %120
  %128 = load i32*, i32** %5, align 8
  %129 = load i32*, i32** %7, align 8
  %130 = load i32, i32* %4, align 4
  %131 = load i32, i32* %9, align 4
  %132 = call i32 @ConvertModel(i32* %128, i32* %129, i32 %130, i32 %131)
  br label %133

133:                                              ; preds = %127, %103
  %134 = load i32, i32* %3, align 4
  %135 = add nsw i32 %134, 1
  store i32 %135, i32* %3, align 4
  br label %83

136:                                              ; preds = %83
  %137 = load i32*, i32** %5, align 8
  %138 = call i32 @fclose(i32* %137)
  ret i32 0
}

declare dso_local i32 @Sys_Printf(i8*, ...) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @StripExtension(i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @ExtractFileBase(i8*, i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @Error(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @ConvertShader(i32*, i32*, i32) #1

declare dso_local i8* @ValueForKey(i32*, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @VectorClear(i32) #1

declare dso_local i32 @GetVectorForKey(i32*, i8*, i32) #1

declare dso_local i32 @ConvertModel(i32*, i32*, i32, i32) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
