; ModuleID = '/home/carl/AnghaBench/lab/q3map2/q3map2/extr_convert_map.c_ConvertBSPToMap.c'
source_filename = "/home/carl/AnghaBench/lab/q3map2/q3map2/extr_convert_map.c_ConvertBSPToMap.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [28 x i8] c"--- Convert BSP to MAP ---\0A\00", align 1
@.str.1 = private unnamed_addr constant [15 x i8] c"_converted.map\00", align 1
@.str.2 = private unnamed_addr constant [12 x i8] c"writing %s\0A\00", align 1
@.str.3 = private unnamed_addr constant [5 x i8] c".bsp\00", align 1
@.str.4 = private unnamed_addr constant [3 x i8] c"wb\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"Open failed on %s\0A\00", align 1
@.str.6 = private unnamed_addr constant [53 x i8] c"// Generated by Q3Map2 (ydnar) -convert -format map\0A\00", align 1
@numEntities = common dso_local global i32 0, align 4
@entities = common dso_local global i32* null, align 8
@.str.7 = private unnamed_addr constant [14 x i8] c"// entity %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [3 x i8] c"{\0A\00", align 1
@.str.9 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"model\00", align 1
@bspModels = common dso_local global i32* null, align 8
@.str.11 = private unnamed_addr constant [7 x i8] c"origin\00", align 1
@.str.12 = private unnamed_addr constant [4 x i8] c"}\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @ConvertBSPToMap(i8* %0) #0 {
  %2 = alloca i8*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  %10 = alloca [1024 x i8], align 16
  %11 = alloca [1024 x i8], align 16
  store i8* %0, i8** %2, align 8
  %12 = call i32 (i8*, ...) @Sys_Printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str, i64 0, i64 0))
  %13 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %14 = load i8*, i8** %2, align 8
  %15 = call i32 @strcpy(i8* %13, i8* %14)
  %16 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %17 = call i32 @StripExtension(i8* %16)
  %18 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %19 = call i32 @strcat(i8* %18, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.1, i64 0, i64 0))
  %20 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %21 = call i32 (i8*, ...) @Sys_Printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.2, i64 0, i64 0), i8* %20)
  %22 = load i8*, i8** %2, align 8
  %23 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %24 = call i32 @ExtractFileBase(i8* %22, i8* %23)
  %25 = getelementptr inbounds [1024 x i8], [1024 x i8]* %11, i64 0, i64 0
  %26 = call i32 @strcat(i8* %25, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.3, i64 0, i64 0))
  %27 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %28 = call i32* @fopen(i8* %27, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0))
  store i32* %28, i32** %5, align 8
  %29 = load i32*, i32** %5, align 8
  %30 = icmp eq i32* %29, null
  br i1 %30, label %31, label %34

31:                                               ; preds = %1
  %32 = getelementptr inbounds [1024 x i8], [1024 x i8]* %10, i64 0, i64 0
  %33 = call i32 @Error(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0), i8* %32)
  br label %34

34:                                               ; preds = %31, %1
  %35 = load i32*, i32** %5, align 8
  %36 = call i32 (i32*, i8*, ...) @fprintf(i32* %35, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %3, align 4
  br label %37

37:                                               ; preds = %104, %34
  %38 = load i32, i32* %3, align 4
  %39 = load i32, i32* @numEntities, align 4
  %40 = icmp slt i32 %38, %39
  br i1 %40, label %41, label %107

41:                                               ; preds = %37
  %42 = load i32*, i32** @entities, align 8
  %43 = load i32, i32* %3, align 4
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %42, i64 %44
  store i32* %45, i32** %7, align 8
  %46 = load i32*, i32** %5, align 8
  %47 = load i32, i32* %3, align 4
  %48 = call i32 (i32*, i8*, ...) @fprintf(i32* %46, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.7, i64 0, i64 0), i32 %47)
  %49 = load i32*, i32** %5, align 8
  %50 = call i32 (i32*, i8*, ...) @fprintf(i32* %49, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.8, i64 0, i64 0))
  %51 = load i32*, i32** %5, align 8
  %52 = load i32*, i32** %7, align 8
  %53 = call i32 @ConvertEPairs(i32* %51, i32* %52)
  %54 = load i32*, i32** %5, align 8
  %55 = call i32 (i32*, i8*, ...) @fprintf(i32* %54, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.9, i64 0, i64 0))
  %56 = load i32, i32* %3, align 4
  %57 = icmp eq i32 %56, 0
  br i1 %57, label %58, label %59

58:                                               ; preds = %41
  store i32 0, i32* %4, align 4
  br label %73

59:                                               ; preds = %41
  %60 = load i32*, i32** %7, align 8
  %61 = call i8* @ValueForKey(i32* %60, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0))
  store i8* %61, i8** %9, align 8
  %62 = load i8*, i8** %9, align 8
  %63 = getelementptr inbounds i8, i8* %62, i64 0
  %64 = load i8, i8* %63, align 1
  %65 = sext i8 %64 to i32
  %66 = icmp eq i32 %65, 42
  br i1 %66, label %67, label %71

67:                                               ; preds = %59
  %68 = load i8*, i8** %9, align 8
  %69 = getelementptr inbounds i8, i8* %68, i64 1
  %70 = call i32 @atoi(i8* %69)
  store i32 %70, i32* %4, align 4
  br label %72

71:                                               ; preds = %59
  store i32 -1, i32* %4, align 4
  br label %72

72:                                               ; preds = %71, %67
  br label %73

73:                                               ; preds = %72, %58
  %74 = load i32, i32* %4, align 4
  %75 = icmp sge i32 %74, 0
  br i1 %75, label %76, label %101

76:                                               ; preds = %73
  %77 = load i32*, i32** @bspModels, align 8
  %78 = load i32, i32* %4, align 4
  %79 = sext i32 %78 to i64
  %80 = getelementptr inbounds i32, i32* %77, i64 %79
  store i32* %80, i32** %6, align 8
  %81 = load i32*, i32** %7, align 8
  %82 = call i8* @ValueForKey(i32* %81, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0))
  store i8* %82, i8** %9, align 8
  %83 = load i8*, i8** %9, align 8
  %84 = getelementptr inbounds i8, i8* %83, i64 0
  %85 = load i8, i8* %84, align 1
  %86 = sext i8 %85 to i32
  %87 = icmp eq i32 %86, 0
  br i1 %87, label %88, label %91

88:                                               ; preds = %76
  %89 = load i32, i32* %8, align 4
  %90 = call i32 @VectorClear(i32 %89)
  br label %95

91:                                               ; preds = %76
  %92 = load i32*, i32** %7, align 8
  %93 = load i32, i32* %8, align 4
  %94 = call i32 @GetVectorForKey(i32* %92, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11, i64 0, i64 0), i32 %93)
  br label %95

95:                                               ; preds = %91, %88
  %96 = load i32*, i32** %5, align 8
  %97 = load i32*, i32** %6, align 8
  %98 = load i32, i32* %4, align 4
  %99 = load i32, i32* %8, align 4
  %100 = call i32 @ConvertModel(i32* %96, i32* %97, i32 %98, i32 %99)
  br label %101

101:                                              ; preds = %95, %73
  %102 = load i32*, i32** %5, align 8
  %103 = call i32 (i32*, i8*, ...) @fprintf(i32* %102, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.12, i64 0, i64 0))
  br label %104

104:                                              ; preds = %101
  %105 = load i32, i32* %3, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %3, align 4
  br label %37

107:                                              ; preds = %37
  %108 = load i32*, i32** %5, align 8
  %109 = call i32 @fclose(i32* %108)
  ret i32 0
}

declare dso_local i32 @Sys_Printf(i8*, ...) #1

declare dso_local i32 @strcpy(i8*, i8*) #1

declare dso_local i32 @StripExtension(i8*) #1

declare dso_local i32 @strcat(i8*, i8*) #1

declare dso_local i32 @ExtractFileBase(i8*, i8*) #1

declare dso_local i32* @fopen(i8*, i8*) #1

declare dso_local i32 @Error(i8*, i8*) #1

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @ConvertEPairs(i32*, i32*) #1

declare dso_local i8* @ValueForKey(i32*, i8*) #1

declare dso_local i32 @atoi(i8*) #1

declare dso_local i32 @VectorClear(i32) #1

declare dso_local i32 @GetVectorForKey(i32*, i8*, i32) #1

declare dso_local i32 @ConvertModel(i32*, i32*, i32, i32) #1

declare dso_local i32 @fclose(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
