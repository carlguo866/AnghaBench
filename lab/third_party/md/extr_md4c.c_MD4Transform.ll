; ModuleID = '/home/carl/AnghaBench/lab/third_party/md/extr_md4c.c_MD4Transform.c'
source_filename = "/home/carl/AnghaBench/lab/third_party/md/extr_md4c.c_MD4Transform.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@S11 = common dso_local global i32 0, align 4
@S12 = common dso_local global i32 0, align 4
@S13 = common dso_local global i32 0, align 4
@S14 = common dso_local global i32 0, align 4
@S21 = common dso_local global i32 0, align 4
@S22 = common dso_local global i32 0, align 4
@S23 = common dso_local global i32 0, align 4
@S24 = common dso_local global i32 0, align 4
@S31 = common dso_local global i32 0, align 4
@S32 = common dso_local global i32 0, align 4
@S33 = common dso_local global i32 0, align 4
@S34 = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i64*, i8*)* @MD4Transform to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @MD4Transform(i64* %0, i8* %1) #0 {
  %3 = alloca i64*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca [16 x i64], align 16
  store i64* %0, i64** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = load i64*, i64** %3, align 8
  %11 = getelementptr inbounds i64, i64* %10, i64 0
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %5, align 8
  %13 = load i64*, i64** %3, align 8
  %14 = getelementptr inbounds i64, i64* %13, i64 1
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %6, align 8
  %16 = load i64*, i64** %3, align 8
  %17 = getelementptr inbounds i64, i64* %16, i64 2
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %7, align 8
  %19 = load i64*, i64** %3, align 8
  %20 = getelementptr inbounds i64, i64* %19, i64 3
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %8, align 8
  %22 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 0
  %23 = load i8*, i8** %4, align 8
  %24 = call i32 @Decode(i64* %22, i8* %23, i32 64)
  %25 = load i64, i64* %5, align 8
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %7, align 8
  %28 = load i64, i64* %8, align 8
  %29 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 0
  %30 = load i64, i64* %29, align 16
  %31 = load i32, i32* @S11, align 4
  %32 = call i32 @FF(i64 %25, i64 %26, i64 %27, i64 %28, i64 %30, i32 %31)
  %33 = load i64, i64* %8, align 8
  %34 = load i64, i64* %5, align 8
  %35 = load i64, i64* %6, align 8
  %36 = load i64, i64* %7, align 8
  %37 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 1
  %38 = load i64, i64* %37, align 8
  %39 = load i32, i32* @S12, align 4
  %40 = call i32 @FF(i64 %33, i64 %34, i64 %35, i64 %36, i64 %38, i32 %39)
  %41 = load i64, i64* %7, align 8
  %42 = load i64, i64* %8, align 8
  %43 = load i64, i64* %5, align 8
  %44 = load i64, i64* %6, align 8
  %45 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 2
  %46 = load i64, i64* %45, align 16
  %47 = load i32, i32* @S13, align 4
  %48 = call i32 @FF(i64 %41, i64 %42, i64 %43, i64 %44, i64 %46, i32 %47)
  %49 = load i64, i64* %6, align 8
  %50 = load i64, i64* %7, align 8
  %51 = load i64, i64* %8, align 8
  %52 = load i64, i64* %5, align 8
  %53 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 3
  %54 = load i64, i64* %53, align 8
  %55 = load i32, i32* @S14, align 4
  %56 = call i32 @FF(i64 %49, i64 %50, i64 %51, i64 %52, i64 %54, i32 %55)
  %57 = load i64, i64* %5, align 8
  %58 = load i64, i64* %6, align 8
  %59 = load i64, i64* %7, align 8
  %60 = load i64, i64* %8, align 8
  %61 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 4
  %62 = load i64, i64* %61, align 16
  %63 = load i32, i32* @S11, align 4
  %64 = call i32 @FF(i64 %57, i64 %58, i64 %59, i64 %60, i64 %62, i32 %63)
  %65 = load i64, i64* %8, align 8
  %66 = load i64, i64* %5, align 8
  %67 = load i64, i64* %6, align 8
  %68 = load i64, i64* %7, align 8
  %69 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 5
  %70 = load i64, i64* %69, align 8
  %71 = load i32, i32* @S12, align 4
  %72 = call i32 @FF(i64 %65, i64 %66, i64 %67, i64 %68, i64 %70, i32 %71)
  %73 = load i64, i64* %7, align 8
  %74 = load i64, i64* %8, align 8
  %75 = load i64, i64* %5, align 8
  %76 = load i64, i64* %6, align 8
  %77 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 6
  %78 = load i64, i64* %77, align 16
  %79 = load i32, i32* @S13, align 4
  %80 = call i32 @FF(i64 %73, i64 %74, i64 %75, i64 %76, i64 %78, i32 %79)
  %81 = load i64, i64* %6, align 8
  %82 = load i64, i64* %7, align 8
  %83 = load i64, i64* %8, align 8
  %84 = load i64, i64* %5, align 8
  %85 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 7
  %86 = load i64, i64* %85, align 8
  %87 = load i32, i32* @S14, align 4
  %88 = call i32 @FF(i64 %81, i64 %82, i64 %83, i64 %84, i64 %86, i32 %87)
  %89 = load i64, i64* %5, align 8
  %90 = load i64, i64* %6, align 8
  %91 = load i64, i64* %7, align 8
  %92 = load i64, i64* %8, align 8
  %93 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 8
  %94 = load i64, i64* %93, align 16
  %95 = load i32, i32* @S11, align 4
  %96 = call i32 @FF(i64 %89, i64 %90, i64 %91, i64 %92, i64 %94, i32 %95)
  %97 = load i64, i64* %8, align 8
  %98 = load i64, i64* %5, align 8
  %99 = load i64, i64* %6, align 8
  %100 = load i64, i64* %7, align 8
  %101 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 9
  %102 = load i64, i64* %101, align 8
  %103 = load i32, i32* @S12, align 4
  %104 = call i32 @FF(i64 %97, i64 %98, i64 %99, i64 %100, i64 %102, i32 %103)
  %105 = load i64, i64* %7, align 8
  %106 = load i64, i64* %8, align 8
  %107 = load i64, i64* %5, align 8
  %108 = load i64, i64* %6, align 8
  %109 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 10
  %110 = load i64, i64* %109, align 16
  %111 = load i32, i32* @S13, align 4
  %112 = call i32 @FF(i64 %105, i64 %106, i64 %107, i64 %108, i64 %110, i32 %111)
  %113 = load i64, i64* %6, align 8
  %114 = load i64, i64* %7, align 8
  %115 = load i64, i64* %8, align 8
  %116 = load i64, i64* %5, align 8
  %117 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 11
  %118 = load i64, i64* %117, align 8
  %119 = load i32, i32* @S14, align 4
  %120 = call i32 @FF(i64 %113, i64 %114, i64 %115, i64 %116, i64 %118, i32 %119)
  %121 = load i64, i64* %5, align 8
  %122 = load i64, i64* %6, align 8
  %123 = load i64, i64* %7, align 8
  %124 = load i64, i64* %8, align 8
  %125 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 12
  %126 = load i64, i64* %125, align 16
  %127 = load i32, i32* @S11, align 4
  %128 = call i32 @FF(i64 %121, i64 %122, i64 %123, i64 %124, i64 %126, i32 %127)
  %129 = load i64, i64* %8, align 8
  %130 = load i64, i64* %5, align 8
  %131 = load i64, i64* %6, align 8
  %132 = load i64, i64* %7, align 8
  %133 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 13
  %134 = load i64, i64* %133, align 8
  %135 = load i32, i32* @S12, align 4
  %136 = call i32 @FF(i64 %129, i64 %130, i64 %131, i64 %132, i64 %134, i32 %135)
  %137 = load i64, i64* %7, align 8
  %138 = load i64, i64* %8, align 8
  %139 = load i64, i64* %5, align 8
  %140 = load i64, i64* %6, align 8
  %141 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 14
  %142 = load i64, i64* %141, align 16
  %143 = load i32, i32* @S13, align 4
  %144 = call i32 @FF(i64 %137, i64 %138, i64 %139, i64 %140, i64 %142, i32 %143)
  %145 = load i64, i64* %6, align 8
  %146 = load i64, i64* %7, align 8
  %147 = load i64, i64* %8, align 8
  %148 = load i64, i64* %5, align 8
  %149 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 15
  %150 = load i64, i64* %149, align 8
  %151 = load i32, i32* @S14, align 4
  %152 = call i32 @FF(i64 %145, i64 %146, i64 %147, i64 %148, i64 %150, i32 %151)
  %153 = load i64, i64* %5, align 8
  %154 = load i64, i64* %6, align 8
  %155 = load i64, i64* %7, align 8
  %156 = load i64, i64* %8, align 8
  %157 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 0
  %158 = load i64, i64* %157, align 16
  %159 = load i32, i32* @S21, align 4
  %160 = call i32 @GG(i64 %153, i64 %154, i64 %155, i64 %156, i64 %158, i32 %159)
  %161 = load i64, i64* %8, align 8
  %162 = load i64, i64* %5, align 8
  %163 = load i64, i64* %6, align 8
  %164 = load i64, i64* %7, align 8
  %165 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 4
  %166 = load i64, i64* %165, align 16
  %167 = load i32, i32* @S22, align 4
  %168 = call i32 @GG(i64 %161, i64 %162, i64 %163, i64 %164, i64 %166, i32 %167)
  %169 = load i64, i64* %7, align 8
  %170 = load i64, i64* %8, align 8
  %171 = load i64, i64* %5, align 8
  %172 = load i64, i64* %6, align 8
  %173 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 8
  %174 = load i64, i64* %173, align 16
  %175 = load i32, i32* @S23, align 4
  %176 = call i32 @GG(i64 %169, i64 %170, i64 %171, i64 %172, i64 %174, i32 %175)
  %177 = load i64, i64* %6, align 8
  %178 = load i64, i64* %7, align 8
  %179 = load i64, i64* %8, align 8
  %180 = load i64, i64* %5, align 8
  %181 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 12
  %182 = load i64, i64* %181, align 16
  %183 = load i32, i32* @S24, align 4
  %184 = call i32 @GG(i64 %177, i64 %178, i64 %179, i64 %180, i64 %182, i32 %183)
  %185 = load i64, i64* %5, align 8
  %186 = load i64, i64* %6, align 8
  %187 = load i64, i64* %7, align 8
  %188 = load i64, i64* %8, align 8
  %189 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 1
  %190 = load i64, i64* %189, align 8
  %191 = load i32, i32* @S21, align 4
  %192 = call i32 @GG(i64 %185, i64 %186, i64 %187, i64 %188, i64 %190, i32 %191)
  %193 = load i64, i64* %8, align 8
  %194 = load i64, i64* %5, align 8
  %195 = load i64, i64* %6, align 8
  %196 = load i64, i64* %7, align 8
  %197 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 5
  %198 = load i64, i64* %197, align 8
  %199 = load i32, i32* @S22, align 4
  %200 = call i32 @GG(i64 %193, i64 %194, i64 %195, i64 %196, i64 %198, i32 %199)
  %201 = load i64, i64* %7, align 8
  %202 = load i64, i64* %8, align 8
  %203 = load i64, i64* %5, align 8
  %204 = load i64, i64* %6, align 8
  %205 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 9
  %206 = load i64, i64* %205, align 8
  %207 = load i32, i32* @S23, align 4
  %208 = call i32 @GG(i64 %201, i64 %202, i64 %203, i64 %204, i64 %206, i32 %207)
  %209 = load i64, i64* %6, align 8
  %210 = load i64, i64* %7, align 8
  %211 = load i64, i64* %8, align 8
  %212 = load i64, i64* %5, align 8
  %213 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 13
  %214 = load i64, i64* %213, align 8
  %215 = load i32, i32* @S24, align 4
  %216 = call i32 @GG(i64 %209, i64 %210, i64 %211, i64 %212, i64 %214, i32 %215)
  %217 = load i64, i64* %5, align 8
  %218 = load i64, i64* %6, align 8
  %219 = load i64, i64* %7, align 8
  %220 = load i64, i64* %8, align 8
  %221 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 2
  %222 = load i64, i64* %221, align 16
  %223 = load i32, i32* @S21, align 4
  %224 = call i32 @GG(i64 %217, i64 %218, i64 %219, i64 %220, i64 %222, i32 %223)
  %225 = load i64, i64* %8, align 8
  %226 = load i64, i64* %5, align 8
  %227 = load i64, i64* %6, align 8
  %228 = load i64, i64* %7, align 8
  %229 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 6
  %230 = load i64, i64* %229, align 16
  %231 = load i32, i32* @S22, align 4
  %232 = call i32 @GG(i64 %225, i64 %226, i64 %227, i64 %228, i64 %230, i32 %231)
  %233 = load i64, i64* %7, align 8
  %234 = load i64, i64* %8, align 8
  %235 = load i64, i64* %5, align 8
  %236 = load i64, i64* %6, align 8
  %237 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 10
  %238 = load i64, i64* %237, align 16
  %239 = load i32, i32* @S23, align 4
  %240 = call i32 @GG(i64 %233, i64 %234, i64 %235, i64 %236, i64 %238, i32 %239)
  %241 = load i64, i64* %6, align 8
  %242 = load i64, i64* %7, align 8
  %243 = load i64, i64* %8, align 8
  %244 = load i64, i64* %5, align 8
  %245 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 14
  %246 = load i64, i64* %245, align 16
  %247 = load i32, i32* @S24, align 4
  %248 = call i32 @GG(i64 %241, i64 %242, i64 %243, i64 %244, i64 %246, i32 %247)
  %249 = load i64, i64* %5, align 8
  %250 = load i64, i64* %6, align 8
  %251 = load i64, i64* %7, align 8
  %252 = load i64, i64* %8, align 8
  %253 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 3
  %254 = load i64, i64* %253, align 8
  %255 = load i32, i32* @S21, align 4
  %256 = call i32 @GG(i64 %249, i64 %250, i64 %251, i64 %252, i64 %254, i32 %255)
  %257 = load i64, i64* %8, align 8
  %258 = load i64, i64* %5, align 8
  %259 = load i64, i64* %6, align 8
  %260 = load i64, i64* %7, align 8
  %261 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 7
  %262 = load i64, i64* %261, align 8
  %263 = load i32, i32* @S22, align 4
  %264 = call i32 @GG(i64 %257, i64 %258, i64 %259, i64 %260, i64 %262, i32 %263)
  %265 = load i64, i64* %7, align 8
  %266 = load i64, i64* %8, align 8
  %267 = load i64, i64* %5, align 8
  %268 = load i64, i64* %6, align 8
  %269 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 11
  %270 = load i64, i64* %269, align 8
  %271 = load i32, i32* @S23, align 4
  %272 = call i32 @GG(i64 %265, i64 %266, i64 %267, i64 %268, i64 %270, i32 %271)
  %273 = load i64, i64* %6, align 8
  %274 = load i64, i64* %7, align 8
  %275 = load i64, i64* %8, align 8
  %276 = load i64, i64* %5, align 8
  %277 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 15
  %278 = load i64, i64* %277, align 8
  %279 = load i32, i32* @S24, align 4
  %280 = call i32 @GG(i64 %273, i64 %274, i64 %275, i64 %276, i64 %278, i32 %279)
  %281 = load i64, i64* %5, align 8
  %282 = load i64, i64* %6, align 8
  %283 = load i64, i64* %7, align 8
  %284 = load i64, i64* %8, align 8
  %285 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 0
  %286 = load i64, i64* %285, align 16
  %287 = load i32, i32* @S31, align 4
  %288 = call i32 @HH(i64 %281, i64 %282, i64 %283, i64 %284, i64 %286, i32 %287)
  %289 = load i64, i64* %8, align 8
  %290 = load i64, i64* %5, align 8
  %291 = load i64, i64* %6, align 8
  %292 = load i64, i64* %7, align 8
  %293 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 8
  %294 = load i64, i64* %293, align 16
  %295 = load i32, i32* @S32, align 4
  %296 = call i32 @HH(i64 %289, i64 %290, i64 %291, i64 %292, i64 %294, i32 %295)
  %297 = load i64, i64* %7, align 8
  %298 = load i64, i64* %8, align 8
  %299 = load i64, i64* %5, align 8
  %300 = load i64, i64* %6, align 8
  %301 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 4
  %302 = load i64, i64* %301, align 16
  %303 = load i32, i32* @S33, align 4
  %304 = call i32 @HH(i64 %297, i64 %298, i64 %299, i64 %300, i64 %302, i32 %303)
  %305 = load i64, i64* %6, align 8
  %306 = load i64, i64* %7, align 8
  %307 = load i64, i64* %8, align 8
  %308 = load i64, i64* %5, align 8
  %309 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 12
  %310 = load i64, i64* %309, align 16
  %311 = load i32, i32* @S34, align 4
  %312 = call i32 @HH(i64 %305, i64 %306, i64 %307, i64 %308, i64 %310, i32 %311)
  %313 = load i64, i64* %5, align 8
  %314 = load i64, i64* %6, align 8
  %315 = load i64, i64* %7, align 8
  %316 = load i64, i64* %8, align 8
  %317 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 2
  %318 = load i64, i64* %317, align 16
  %319 = load i32, i32* @S31, align 4
  %320 = call i32 @HH(i64 %313, i64 %314, i64 %315, i64 %316, i64 %318, i32 %319)
  %321 = load i64, i64* %8, align 8
  %322 = load i64, i64* %5, align 8
  %323 = load i64, i64* %6, align 8
  %324 = load i64, i64* %7, align 8
  %325 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 10
  %326 = load i64, i64* %325, align 16
  %327 = load i32, i32* @S32, align 4
  %328 = call i32 @HH(i64 %321, i64 %322, i64 %323, i64 %324, i64 %326, i32 %327)
  %329 = load i64, i64* %7, align 8
  %330 = load i64, i64* %8, align 8
  %331 = load i64, i64* %5, align 8
  %332 = load i64, i64* %6, align 8
  %333 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 6
  %334 = load i64, i64* %333, align 16
  %335 = load i32, i32* @S33, align 4
  %336 = call i32 @HH(i64 %329, i64 %330, i64 %331, i64 %332, i64 %334, i32 %335)
  %337 = load i64, i64* %6, align 8
  %338 = load i64, i64* %7, align 8
  %339 = load i64, i64* %8, align 8
  %340 = load i64, i64* %5, align 8
  %341 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 14
  %342 = load i64, i64* %341, align 16
  %343 = load i32, i32* @S34, align 4
  %344 = call i32 @HH(i64 %337, i64 %338, i64 %339, i64 %340, i64 %342, i32 %343)
  %345 = load i64, i64* %5, align 8
  %346 = load i64, i64* %6, align 8
  %347 = load i64, i64* %7, align 8
  %348 = load i64, i64* %8, align 8
  %349 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 1
  %350 = load i64, i64* %349, align 8
  %351 = load i32, i32* @S31, align 4
  %352 = call i32 @HH(i64 %345, i64 %346, i64 %347, i64 %348, i64 %350, i32 %351)
  %353 = load i64, i64* %8, align 8
  %354 = load i64, i64* %5, align 8
  %355 = load i64, i64* %6, align 8
  %356 = load i64, i64* %7, align 8
  %357 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 9
  %358 = load i64, i64* %357, align 8
  %359 = load i32, i32* @S32, align 4
  %360 = call i32 @HH(i64 %353, i64 %354, i64 %355, i64 %356, i64 %358, i32 %359)
  %361 = load i64, i64* %7, align 8
  %362 = load i64, i64* %8, align 8
  %363 = load i64, i64* %5, align 8
  %364 = load i64, i64* %6, align 8
  %365 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 5
  %366 = load i64, i64* %365, align 8
  %367 = load i32, i32* @S33, align 4
  %368 = call i32 @HH(i64 %361, i64 %362, i64 %363, i64 %364, i64 %366, i32 %367)
  %369 = load i64, i64* %6, align 8
  %370 = load i64, i64* %7, align 8
  %371 = load i64, i64* %8, align 8
  %372 = load i64, i64* %5, align 8
  %373 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 13
  %374 = load i64, i64* %373, align 8
  %375 = load i32, i32* @S34, align 4
  %376 = call i32 @HH(i64 %369, i64 %370, i64 %371, i64 %372, i64 %374, i32 %375)
  %377 = load i64, i64* %5, align 8
  %378 = load i64, i64* %6, align 8
  %379 = load i64, i64* %7, align 8
  %380 = load i64, i64* %8, align 8
  %381 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 3
  %382 = load i64, i64* %381, align 8
  %383 = load i32, i32* @S31, align 4
  %384 = call i32 @HH(i64 %377, i64 %378, i64 %379, i64 %380, i64 %382, i32 %383)
  %385 = load i64, i64* %8, align 8
  %386 = load i64, i64* %5, align 8
  %387 = load i64, i64* %6, align 8
  %388 = load i64, i64* %7, align 8
  %389 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 11
  %390 = load i64, i64* %389, align 8
  %391 = load i32, i32* @S32, align 4
  %392 = call i32 @HH(i64 %385, i64 %386, i64 %387, i64 %388, i64 %390, i32 %391)
  %393 = load i64, i64* %7, align 8
  %394 = load i64, i64* %8, align 8
  %395 = load i64, i64* %5, align 8
  %396 = load i64, i64* %6, align 8
  %397 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 7
  %398 = load i64, i64* %397, align 8
  %399 = load i32, i32* @S33, align 4
  %400 = call i32 @HH(i64 %393, i64 %394, i64 %395, i64 %396, i64 %398, i32 %399)
  %401 = load i64, i64* %6, align 8
  %402 = load i64, i64* %7, align 8
  %403 = load i64, i64* %8, align 8
  %404 = load i64, i64* %5, align 8
  %405 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 15
  %406 = load i64, i64* %405, align 8
  %407 = load i32, i32* @S34, align 4
  %408 = call i32 @HH(i64 %401, i64 %402, i64 %403, i64 %404, i64 %406, i32 %407)
  %409 = load i64, i64* %5, align 8
  %410 = load i64*, i64** %3, align 8
  %411 = getelementptr inbounds i64, i64* %410, i64 0
  %412 = load i64, i64* %411, align 8
  %413 = add nsw i64 %412, %409
  store i64 %413, i64* %411, align 8
  %414 = load i64, i64* %6, align 8
  %415 = load i64*, i64** %3, align 8
  %416 = getelementptr inbounds i64, i64* %415, i64 1
  %417 = load i64, i64* %416, align 8
  %418 = add nsw i64 %417, %414
  store i64 %418, i64* %416, align 8
  %419 = load i64, i64* %7, align 8
  %420 = load i64*, i64** %3, align 8
  %421 = getelementptr inbounds i64, i64* %420, i64 2
  %422 = load i64, i64* %421, align 8
  %423 = add nsw i64 %422, %419
  store i64 %423, i64* %421, align 8
  %424 = load i64, i64* %8, align 8
  %425 = load i64*, i64** %3, align 8
  %426 = getelementptr inbounds i64, i64* %425, i64 3
  %427 = load i64, i64* %426, align 8
  %428 = add nsw i64 %427, %424
  store i64 %428, i64* %426, align 8
  %429 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 0
  %430 = ptrtoint i64* %429 to i32
  %431 = call i32 @MD4_memset(i32 %430, i32 0, i32 128)
  ret void
}

declare dso_local i32 @Decode(i64*, i8*, i32) #1

declare dso_local i32 @FF(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @GG(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @HH(i64, i64, i64, i64, i64, i32) #1

declare dso_local i32 @MD4_memset(i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
