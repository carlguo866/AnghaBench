; ModuleID = '/home/carl/AnghaBench/ish/jit/extr_offsets.c_cpu.c'
source_filename = "/home/carl/AnghaBench/ish/jit/extr_offsets.c_cpu.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@CPU = common dso_local global i32 0, align 4
@cpu_state = common dso_local global i32 0, align 4
@eax = common dso_local global i32 0, align 4
@ebx = common dso_local global i32 0, align 4
@ecx = common dso_local global i32 0, align 4
@edx = common dso_local global i32 0, align 4
@esi = common dso_local global i32 0, align 4
@edi = common dso_local global i32 0, align 4
@ebp = common dso_local global i32 0, align 4
@esp = common dso_local global i32 0, align 4
@ax = common dso_local global i32 0, align 4
@bx = common dso_local global i32 0, align 4
@cx = common dso_local global i32 0, align 4
@dx = common dso_local global i32 0, align 4
@si = common dso_local global i32 0, align 4
@di = common dso_local global i32 0, align 4
@bp = common dso_local global i32 0, align 4
@sp = common dso_local global i32 0, align 4
@eip = common dso_local global i32 0, align 4
@gs = common dso_local global i32 0, align 4
@tls_ptr = common dso_local global i32 0, align 4
@eflags = common dso_local global i32 0, align 4
@of = common dso_local global i32 0, align 4
@cf = common dso_local global i32 0, align 4
@res = common dso_local global i32 0, align 4
@op1 = common dso_local global i32 0, align 4
@op2 = common dso_local global i32 0, align 4
@flags_res = common dso_local global i32 0, align 4
@df_offset = common dso_local global i32 0, align 4
@fsw = common dso_local global i32 0, align 4
@xmm = common dso_local global i32 0, align 4
@PF_RES = common dso_local global i32 0, align 4
@ZF_RES = common dso_local global i32 0, align 4
@SF_RES = common dso_local global i32 0, align 4
@AF_OPS = common dso_local global i32 0, align 4
@PF_FLAG = common dso_local global i32 0, align 4
@AF_FLAG = common dso_local global i32 0, align 4
@ZF_FLAG = common dso_local global i32 0, align 4
@SF_FLAG = common dso_local global i32 0, align 4
@DF_FLAG = common dso_local global i32 0, align 4
@LOCAL = common dso_local global i32 0, align 4
@jit_frame = common dso_local global i32 0, align 4
@value = common dso_local global i32 0, align 4
@value_addr = common dso_local global i32 0, align 4
@last_block = common dso_local global i32 0, align 4
@ret_cache = common dso_local global i32 0, align 4
@segfault_addr = common dso_local global i32 0, align 4
@segfault_type = common dso_local global i32 0, align 4
@MEM_READ = common dso_local global i32 0, align 4
@MEM_WRITE = common dso_local global i32 0, align 4
@JIT_BLOCK = common dso_local global i32 0, align 4
@jit_block = common dso_local global i32 0, align 4
@code = common dso_local global i32 0, align 4
@TLB = common dso_local global i32 0, align 4
@tlb = common dso_local global i32 0, align 4
@entries = common dso_local global i32 0, align 4
@dirty_page = common dso_local global i32 0, align 4
@TLB_ENTRY = common dso_local global i32 0, align 4
@tlb_entry = common dso_local global i32 0, align 4
@page = common dso_local global i32 0, align 4
@page_if_writable = common dso_local global i32 0, align 4
@data_minus_addr = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @cpu() #0 {
  %1 = load i32, i32* @CPU, align 4
  %2 = load i32, i32* @cpu_state, align 4
  %3 = load i32, i32* @eax, align 4
  %4 = call i32 @OFFSET(i32 %1, i32 %2, i32 %3)
  %5 = load i32, i32* @CPU, align 4
  %6 = load i32, i32* @cpu_state, align 4
  %7 = load i32, i32* @ebx, align 4
  %8 = call i32 @OFFSET(i32 %5, i32 %6, i32 %7)
  %9 = load i32, i32* @CPU, align 4
  %10 = load i32, i32* @cpu_state, align 4
  %11 = load i32, i32* @ecx, align 4
  %12 = call i32 @OFFSET(i32 %9, i32 %10, i32 %11)
  %13 = load i32, i32* @CPU, align 4
  %14 = load i32, i32* @cpu_state, align 4
  %15 = load i32, i32* @edx, align 4
  %16 = call i32 @OFFSET(i32 %13, i32 %14, i32 %15)
  %17 = load i32, i32* @CPU, align 4
  %18 = load i32, i32* @cpu_state, align 4
  %19 = load i32, i32* @esi, align 4
  %20 = call i32 @OFFSET(i32 %17, i32 %18, i32 %19)
  %21 = load i32, i32* @CPU, align 4
  %22 = load i32, i32* @cpu_state, align 4
  %23 = load i32, i32* @edi, align 4
  %24 = call i32 @OFFSET(i32 %21, i32 %22, i32 %23)
  %25 = load i32, i32* @CPU, align 4
  %26 = load i32, i32* @cpu_state, align 4
  %27 = load i32, i32* @ebp, align 4
  %28 = call i32 @OFFSET(i32 %25, i32 %26, i32 %27)
  %29 = load i32, i32* @CPU, align 4
  %30 = load i32, i32* @cpu_state, align 4
  %31 = load i32, i32* @esp, align 4
  %32 = call i32 @OFFSET(i32 %29, i32 %30, i32 %31)
  %33 = load i32, i32* @CPU, align 4
  %34 = load i32, i32* @cpu_state, align 4
  %35 = load i32, i32* @ax, align 4
  %36 = call i32 @OFFSET(i32 %33, i32 %34, i32 %35)
  %37 = load i32, i32* @CPU, align 4
  %38 = load i32, i32* @cpu_state, align 4
  %39 = load i32, i32* @bx, align 4
  %40 = call i32 @OFFSET(i32 %37, i32 %38, i32 %39)
  %41 = load i32, i32* @CPU, align 4
  %42 = load i32, i32* @cpu_state, align 4
  %43 = load i32, i32* @cx, align 4
  %44 = call i32 @OFFSET(i32 %41, i32 %42, i32 %43)
  %45 = load i32, i32* @CPU, align 4
  %46 = load i32, i32* @cpu_state, align 4
  %47 = load i32, i32* @dx, align 4
  %48 = call i32 @OFFSET(i32 %45, i32 %46, i32 %47)
  %49 = load i32, i32* @CPU, align 4
  %50 = load i32, i32* @cpu_state, align 4
  %51 = load i32, i32* @si, align 4
  %52 = call i32 @OFFSET(i32 %49, i32 %50, i32 %51)
  %53 = load i32, i32* @CPU, align 4
  %54 = load i32, i32* @cpu_state, align 4
  %55 = load i32, i32* @di, align 4
  %56 = call i32 @OFFSET(i32 %53, i32 %54, i32 %55)
  %57 = load i32, i32* @CPU, align 4
  %58 = load i32, i32* @cpu_state, align 4
  %59 = load i32, i32* @bp, align 4
  %60 = call i32 @OFFSET(i32 %57, i32 %58, i32 %59)
  %61 = load i32, i32* @CPU, align 4
  %62 = load i32, i32* @cpu_state, align 4
  %63 = load i32, i32* @sp, align 4
  %64 = call i32 @OFFSET(i32 %61, i32 %62, i32 %63)
  %65 = load i32, i32* @CPU, align 4
  %66 = load i32, i32* @cpu_state, align 4
  %67 = load i32, i32* @eip, align 4
  %68 = call i32 @OFFSET(i32 %65, i32 %66, i32 %67)
  %69 = load i32, i32* @CPU, align 4
  %70 = load i32, i32* @cpu_state, align 4
  %71 = load i32, i32* @gs, align 4
  %72 = call i32 @OFFSET(i32 %69, i32 %70, i32 %71)
  %73 = load i32, i32* @CPU, align 4
  %74 = load i32, i32* @cpu_state, align 4
  %75 = load i32, i32* @tls_ptr, align 4
  %76 = call i32 @OFFSET(i32 %73, i32 %74, i32 %75)
  %77 = load i32, i32* @CPU, align 4
  %78 = load i32, i32* @cpu_state, align 4
  %79 = load i32, i32* @eflags, align 4
  %80 = call i32 @OFFSET(i32 %77, i32 %78, i32 %79)
  %81 = load i32, i32* @CPU, align 4
  %82 = load i32, i32* @cpu_state, align 4
  %83 = load i32, i32* @of, align 4
  %84 = call i32 @OFFSET(i32 %81, i32 %82, i32 %83)
  %85 = load i32, i32* @CPU, align 4
  %86 = load i32, i32* @cpu_state, align 4
  %87 = load i32, i32* @cf, align 4
  %88 = call i32 @OFFSET(i32 %85, i32 %86, i32 %87)
  %89 = load i32, i32* @CPU, align 4
  %90 = load i32, i32* @cpu_state, align 4
  %91 = load i32, i32* @res, align 4
  %92 = call i32 @OFFSET(i32 %89, i32 %90, i32 %91)
  %93 = load i32, i32* @CPU, align 4
  %94 = load i32, i32* @cpu_state, align 4
  %95 = load i32, i32* @op1, align 4
  %96 = call i32 @OFFSET(i32 %93, i32 %94, i32 %95)
  %97 = load i32, i32* @CPU, align 4
  %98 = load i32, i32* @cpu_state, align 4
  %99 = load i32, i32* @op2, align 4
  %100 = call i32 @OFFSET(i32 %97, i32 %98, i32 %99)
  %101 = load i32, i32* @CPU, align 4
  %102 = load i32, i32* @cpu_state, align 4
  %103 = load i32, i32* @flags_res, align 4
  %104 = call i32 @OFFSET(i32 %101, i32 %102, i32 %103)
  %105 = load i32, i32* @CPU, align 4
  %106 = load i32, i32* @cpu_state, align 4
  %107 = load i32, i32* @df_offset, align 4
  %108 = call i32 @OFFSET(i32 %105, i32 %106, i32 %107)
  %109 = load i32, i32* @CPU, align 4
  %110 = load i32, i32* @cpu_state, align 4
  %111 = load i32, i32* @fsw, align 4
  %112 = call i32 @OFFSET(i32 %109, i32 %110, i32 %111)
  %113 = load i32, i32* @CPU, align 4
  %114 = load i32, i32* @cpu_state, align 4
  %115 = load i32, i32* @xmm, align 4
  %116 = call i32 @OFFSET(i32 %113, i32 %114, i32 %115)
  %117 = load i32, i32* @PF_RES, align 4
  %118 = call i32 @MACRO(i32 %117)
  %119 = load i32, i32* @ZF_RES, align 4
  %120 = call i32 @MACRO(i32 %119)
  %121 = load i32, i32* @SF_RES, align 4
  %122 = call i32 @MACRO(i32 %121)
  %123 = load i32, i32* @AF_OPS, align 4
  %124 = call i32 @MACRO(i32 %123)
  %125 = load i32, i32* @PF_FLAG, align 4
  %126 = call i32 @MACRO(i32 %125)
  %127 = load i32, i32* @AF_FLAG, align 4
  %128 = call i32 @MACRO(i32 %127)
  %129 = load i32, i32* @ZF_FLAG, align 4
  %130 = call i32 @MACRO(i32 %129)
  %131 = load i32, i32* @SF_FLAG, align 4
  %132 = call i32 @MACRO(i32 %131)
  %133 = load i32, i32* @DF_FLAG, align 4
  %134 = call i32 @MACRO(i32 %133)
  %135 = load i32, i32* @LOCAL, align 4
  %136 = load i32, i32* @jit_frame, align 4
  %137 = load i32, i32* @bp, align 4
  %138 = call i32 @OFFSET(i32 %135, i32 %136, i32 %137)
  %139 = load i32, i32* @LOCAL, align 4
  %140 = load i32, i32* @jit_frame, align 4
  %141 = load i32, i32* @value, align 4
  %142 = call i32 @OFFSET(i32 %139, i32 %140, i32 %141)
  %143 = load i32, i32* @LOCAL, align 4
  %144 = load i32, i32* @jit_frame, align 4
  %145 = load i32, i32* @value_addr, align 4
  %146 = call i32 @OFFSET(i32 %143, i32 %144, i32 %145)
  %147 = load i32, i32* @LOCAL, align 4
  %148 = load i32, i32* @jit_frame, align 4
  %149 = load i32, i32* @last_block, align 4
  %150 = call i32 @OFFSET(i32 %147, i32 %148, i32 %149)
  %151 = load i32, i32* @LOCAL, align 4
  %152 = load i32, i32* @jit_frame, align 4
  %153 = load i32, i32* @ret_cache, align 4
  %154 = call i32 @OFFSET(i32 %151, i32 %152, i32 %153)
  %155 = load i32, i32* @CPU, align 4
  %156 = load i32, i32* @cpu_state, align 4
  %157 = load i32, i32* @segfault_addr, align 4
  %158 = call i32 @OFFSET(i32 %155, i32 %156, i32 %157)
  %159 = load i32, i32* @CPU, align 4
  %160 = load i32, i32* @cpu_state, align 4
  %161 = load i32, i32* @segfault_type, align 4
  %162 = call i32 @OFFSET(i32 %159, i32 %160, i32 %161)
  %163 = load i32, i32* @MEM_READ, align 4
  %164 = call i32 @MACRO(i32 %163)
  %165 = load i32, i32* @MEM_WRITE, align 4
  %166 = call i32 @MACRO(i32 %165)
  %167 = load i32, i32* @JIT_BLOCK, align 4
  %168 = load i32, i32* @jit_block, align 4
  %169 = load i32, i32* @code, align 4
  %170 = call i32 @OFFSET(i32 %167, i32 %168, i32 %169)
  %171 = load i32, i32* @TLB, align 4
  %172 = load i32, i32* @tlb, align 4
  %173 = load i32, i32* @entries, align 4
  %174 = call i32 @OFFSET(i32 %171, i32 %172, i32 %173)
  %175 = load i32, i32* @TLB, align 4
  %176 = load i32, i32* @tlb, align 4
  %177 = load i32, i32* @dirty_page, align 4
  %178 = call i32 @OFFSET(i32 %175, i32 %176, i32 %177)
  %179 = load i32, i32* @TLB_ENTRY, align 4
  %180 = load i32, i32* @tlb_entry, align 4
  %181 = load i32, i32* @page, align 4
  %182 = call i32 @OFFSET(i32 %179, i32 %180, i32 %181)
  %183 = load i32, i32* @TLB_ENTRY, align 4
  %184 = load i32, i32* @tlb_entry, align 4
  %185 = load i32, i32* @page_if_writable, align 4
  %186 = call i32 @OFFSET(i32 %183, i32 %184, i32 %185)
  %187 = load i32, i32* @TLB_ENTRY, align 4
  %188 = load i32, i32* @tlb_entry, align 4
  %189 = load i32, i32* @data_minus_addr, align 4
  %190 = call i32 @OFFSET(i32 %187, i32 %188, i32 %189)
  ret void
}

declare dso_local i32 @OFFSET(i32, i32, i32) #1

declare dso_local i32 @MACRO(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
