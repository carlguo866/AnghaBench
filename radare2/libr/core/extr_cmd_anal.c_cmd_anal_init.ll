; ModuleID = '/home/carl/AnghaBench/radare2/libr/core/extr_cmd_anal.c_cmd_anal_init.c'
source_filename = "/home/carl/AnghaBench/radare2/libr/core/extr_cmd_anal.c_cmd_anal_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@a = common dso_local global i32 0, align 4
@aa = common dso_local global i32 0, align 4
@aar = common dso_local global i32 0, align 4
@ab = common dso_local global i32 0, align 4
@ac = common dso_local global i32 0, align 4
@ad = common dso_local global i32 0, align 4
@ae = common dso_local global i32 0, align 4
@aea = common dso_local global i32 0, align 4
@aec = common dso_local global i32 0, align 4
@aep = common dso_local global i32 0, align 4
@af = common dso_local global i32 0, align 4
@afb = common dso_local global i32 0, align 4
@afc = common dso_local global i32 0, align 4
@afC = common dso_local global i32 0, align 4
@afi = common dso_local global i32 0, align 4
@afl = common dso_local global i32 0, align 4
@afll = common dso_local global i32 0, align 4
@afn = common dso_local global i32 0, align 4
@aft = common dso_local global i32 0, align 4
@afv = common dso_local global i32 0, align 4
@afvb = common dso_local global i32 0, align 4
@afvr = common dso_local global i32 0, align 4
@afvs = common dso_local global i32 0, align 4
@ag = common dso_local global i32 0, align 4
@age = common dso_local global i32 0, align 4
@agn = common dso_local global i32 0, align 4
@ah = common dso_local global i32 0, align 4
@ahi = common dso_local global i32 0, align 4
@ao = common dso_local global i32 0, align 4
@ar = common dso_local global i32 0, align 4
@ara = common dso_local global i32 0, align 4
@arw = common dso_local global i32 0, align 4
@as = common dso_local global i32 0, align 4
@ax = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32*)* @cmd_anal_init to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cmd_anal_init(i32* %0) #0 {
  %2 = alloca i32*, align 8
  store i32* %0, i32** %2, align 8
  %3 = load i32*, i32** %2, align 8
  %4 = load i32, i32* @a, align 4
  %5 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %3, i32 %4)
  %6 = load i32*, i32** %2, align 8
  %7 = load i32, i32* @aa, align 4
  %8 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %6, i32 %7)
  %9 = load i32*, i32** %2, align 8
  %10 = load i32, i32* @aar, align 4
  %11 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %9, i32 %10)
  %12 = load i32*, i32** %2, align 8
  %13 = load i32, i32* @ab, align 4
  %14 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %12, i32 %13)
  %15 = load i32*, i32** %2, align 8
  %16 = load i32, i32* @ac, align 4
  %17 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %15, i32 %16)
  %18 = load i32*, i32** %2, align 8
  %19 = load i32, i32* @ad, align 4
  %20 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %18, i32 %19)
  %21 = load i32*, i32** %2, align 8
  %22 = load i32, i32* @ae, align 4
  %23 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %21, i32 %22)
  %24 = load i32*, i32** %2, align 8
  %25 = load i32, i32* @aea, align 4
  %26 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %24, i32 %25)
  %27 = load i32*, i32** %2, align 8
  %28 = load i32, i32* @aec, align 4
  %29 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %27, i32 %28)
  %30 = load i32*, i32** %2, align 8
  %31 = load i32, i32* @aep, align 4
  %32 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %30, i32 %31)
  %33 = load i32*, i32** %2, align 8
  %34 = load i32, i32* @af, align 4
  %35 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %33, i32 %34)
  %36 = load i32*, i32** %2, align 8
  %37 = load i32, i32* @afb, align 4
  %38 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %36, i32 %37)
  %39 = load i32*, i32** %2, align 8
  %40 = load i32, i32* @afc, align 4
  %41 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %39, i32 %40)
  %42 = load i32*, i32** %2, align 8
  %43 = load i32, i32* @afC, align 4
  %44 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %42, i32 %43)
  %45 = load i32*, i32** %2, align 8
  %46 = load i32, i32* @afi, align 4
  %47 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %45, i32 %46)
  %48 = load i32*, i32** %2, align 8
  %49 = load i32, i32* @afl, align 4
  %50 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %48, i32 %49)
  %51 = load i32*, i32** %2, align 8
  %52 = load i32, i32* @afll, align 4
  %53 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %51, i32 %52)
  %54 = load i32*, i32** %2, align 8
  %55 = load i32, i32* @afn, align 4
  %56 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %54, i32 %55)
  %57 = load i32*, i32** %2, align 8
  %58 = load i32, i32* @aft, align 4
  %59 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %57, i32 %58)
  %60 = load i32*, i32** %2, align 8
  %61 = load i32, i32* @afv, align 4
  %62 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %60, i32 %61)
  %63 = load i32*, i32** %2, align 8
  %64 = load i32, i32* @afvb, align 4
  %65 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %63, i32 %64)
  %66 = load i32*, i32** %2, align 8
  %67 = load i32, i32* @afvr, align 4
  %68 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %66, i32 %67)
  %69 = load i32*, i32** %2, align 8
  %70 = load i32, i32* @afvs, align 4
  %71 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %69, i32 %70)
  %72 = load i32*, i32** %2, align 8
  %73 = load i32, i32* @ag, align 4
  %74 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %72, i32 %73)
  %75 = load i32*, i32** %2, align 8
  %76 = load i32, i32* @age, align 4
  %77 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %75, i32 %76)
  %78 = load i32*, i32** %2, align 8
  %79 = load i32, i32* @agn, align 4
  %80 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %78, i32 %79)
  %81 = load i32*, i32** %2, align 8
  %82 = load i32, i32* @ah, align 4
  %83 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %81, i32 %82)
  %84 = load i32*, i32** %2, align 8
  %85 = load i32, i32* @ahi, align 4
  %86 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %84, i32 %85)
  %87 = load i32*, i32** %2, align 8
  %88 = load i32, i32* @ao, align 4
  %89 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %87, i32 %88)
  %90 = load i32*, i32** %2, align 8
  %91 = load i32, i32* @ar, align 4
  %92 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %90, i32 %91)
  %93 = load i32*, i32** %2, align 8
  %94 = load i32, i32* @ara, align 4
  %95 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %93, i32 %94)
  %96 = load i32*, i32** %2, align 8
  %97 = load i32, i32* @arw, align 4
  %98 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %96, i32 %97)
  %99 = load i32*, i32** %2, align 8
  %100 = load i32, i32* @as, align 4
  %101 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %99, i32 %100)
  %102 = load i32*, i32** %2, align 8
  %103 = load i32, i32* @ax, align 4
  %104 = call i32 @DEFINE_CMD_DESCRIPTOR(i32* %102, i32 %103)
  ret void
}

declare dso_local i32 @DEFINE_CMD_DESCRIPTOR(i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
