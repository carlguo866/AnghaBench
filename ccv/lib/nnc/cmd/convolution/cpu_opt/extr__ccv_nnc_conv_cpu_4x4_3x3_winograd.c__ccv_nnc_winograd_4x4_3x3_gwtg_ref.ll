; ModuleID = '/home/carl/AnghaBench/ccv/lib/nnc/cmd/convolution/cpu_opt/extr__ccv_nnc_conv_cpu_4x4_3x3_winograd.c__ccv_nnc_winograd_4x4_3x3_gwtg_ref.c'
source_filename = "/home/carl/AnghaBench/ccv/lib/nnc/cmd/convolution/cpu_opt/extr__ccv_nnc_conv_cpu_4x4_3x3_winograd.c__ccv_nnc_winograd_4x4_3x3_gwtg_ref.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@llvm.used = appending global [1 x i8*] [i8* bitcast (void (float*, i32, float*)* @_ccv_nnc_winograd_4x4_3x3_gwtg_ref to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @_ccv_nnc_winograd_4x4_3x3_gwtg_ref(float* %0, i32 %1, float* %2) #0 {
  %4 = alloca float*, align 8
  %5 = alloca i32, align 4
  %6 = alloca float*, align 8
  %7 = alloca i32, align 4
  %8 = alloca [18 x float], align 16
  store float* %0, float** %4, align 8
  store i32 %1, i32* %5, align 4
  store float* %2, float** %6, align 8
  store i32 0, i32* %7, align 4
  br label %9

9:                                                ; preds = %865, %3
  %10 = load i32, i32* %7, align 4
  %11 = load i32, i32* %5, align 4
  %12 = icmp slt i32 %10, %11
  br i1 %12, label %13, label %868

13:                                               ; preds = %9
  %14 = load float*, float** %4, align 8
  %15 = load i32, i32* %7, align 4
  %16 = sext i32 %15 to i64
  %17 = getelementptr inbounds float, float* %14, i64 %16
  %18 = load float, float* %17, align 4
  %19 = fdiv float %18, 4.000000e+00
  %20 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 0
  store float %19, float* %20, align 16
  %21 = load float*, float** %4, align 8
  %22 = load i32, i32* %5, align 4
  %23 = load i32, i32* %7, align 4
  %24 = add nsw i32 %22, %23
  %25 = sext i32 %24 to i64
  %26 = getelementptr inbounds float, float* %21, i64 %25
  %27 = load float, float* %26, align 4
  %28 = fdiv float %27, 4.000000e+00
  %29 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 1
  store float %28, float* %29, align 4
  %30 = load float*, float** %4, align 8
  %31 = load i32, i32* %5, align 4
  %32 = mul nsw i32 2, %31
  %33 = load i32, i32* %7, align 4
  %34 = add nsw i32 %32, %33
  %35 = sext i32 %34 to i64
  %36 = getelementptr inbounds float, float* %30, i64 %35
  %37 = load float, float* %36, align 4
  %38 = fdiv float %37, 4.000000e+00
  %39 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 2
  store float %38, float* %39, align 8
  %40 = load float*, float** %4, align 8
  %41 = load i32, i32* %7, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds float, float* %40, i64 %42
  %44 = load float, float* %43, align 4
  %45 = load float*, float** %4, align 8
  %46 = load i32, i32* %5, align 4
  %47 = mul nsw i32 3, %46
  %48 = load i32, i32* %7, align 4
  %49 = add nsw i32 %47, %48
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds float, float* %45, i64 %50
  %52 = load float, float* %51, align 4
  %53 = fadd float %44, %52
  %54 = load float*, float** %4, align 8
  %55 = load i32, i32* %5, align 4
  %56 = mul nsw i32 6, %55
  %57 = load i32, i32* %7, align 4
  %58 = add nsw i32 %56, %57
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds float, float* %54, i64 %59
  %61 = load float, float* %60, align 4
  %62 = fadd float %53, %61
  %63 = fneg float %62
  %64 = fdiv float %63, 6.000000e+00
  %65 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 3
  store float %64, float* %65, align 4
  %66 = load float*, float** %4, align 8
  %67 = load i32, i32* %5, align 4
  %68 = load i32, i32* %7, align 4
  %69 = add nsw i32 %67, %68
  %70 = sext i32 %69 to i64
  %71 = getelementptr inbounds float, float* %66, i64 %70
  %72 = load float, float* %71, align 4
  %73 = load float*, float** %4, align 8
  %74 = load i32, i32* %5, align 4
  %75 = mul nsw i32 4, %74
  %76 = load i32, i32* %7, align 4
  %77 = add nsw i32 %75, %76
  %78 = sext i32 %77 to i64
  %79 = getelementptr inbounds float, float* %73, i64 %78
  %80 = load float, float* %79, align 4
  %81 = fadd float %72, %80
  %82 = load float*, float** %4, align 8
  %83 = load i32, i32* %5, align 4
  %84 = mul nsw i32 7, %83
  %85 = load i32, i32* %7, align 4
  %86 = add nsw i32 %84, %85
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds float, float* %82, i64 %87
  %89 = load float, float* %88, align 4
  %90 = fadd float %81, %89
  %91 = fneg float %90
  %92 = fdiv float %91, 6.000000e+00
  %93 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 4
  store float %92, float* %93, align 16
  %94 = load float*, float** %4, align 8
  %95 = load i32, i32* %5, align 4
  %96 = mul nsw i32 2, %95
  %97 = load i32, i32* %7, align 4
  %98 = add nsw i32 %96, %97
  %99 = sext i32 %98 to i64
  %100 = getelementptr inbounds float, float* %94, i64 %99
  %101 = load float, float* %100, align 4
  %102 = load float*, float** %4, align 8
  %103 = load i32, i32* %5, align 4
  %104 = mul nsw i32 5, %103
  %105 = load i32, i32* %7, align 4
  %106 = add nsw i32 %104, %105
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds float, float* %102, i64 %107
  %109 = load float, float* %108, align 4
  %110 = fadd float %101, %109
  %111 = load float*, float** %4, align 8
  %112 = load i32, i32* %5, align 4
  %113 = mul nsw i32 8, %112
  %114 = load i32, i32* %7, align 4
  %115 = add nsw i32 %113, %114
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds float, float* %111, i64 %116
  %118 = load float, float* %117, align 4
  %119 = fadd float %110, %118
  %120 = fneg float %119
  %121 = fdiv float %120, 6.000000e+00
  %122 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 5
  store float %121, float* %122, align 4
  %123 = load float*, float** %4, align 8
  %124 = load i32, i32* %7, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds float, float* %123, i64 %125
  %127 = load float, float* %126, align 4
  %128 = fneg float %127
  %129 = load float*, float** %4, align 8
  %130 = load i32, i32* %5, align 4
  %131 = mul nsw i32 3, %130
  %132 = load i32, i32* %7, align 4
  %133 = add nsw i32 %131, %132
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds float, float* %129, i64 %134
  %136 = load float, float* %135, align 4
  %137 = fadd float %128, %136
  %138 = load float*, float** %4, align 8
  %139 = load i32, i32* %5, align 4
  %140 = mul nsw i32 6, %139
  %141 = load i32, i32* %7, align 4
  %142 = add nsw i32 %140, %141
  %143 = sext i32 %142 to i64
  %144 = getelementptr inbounds float, float* %138, i64 %143
  %145 = load float, float* %144, align 4
  %146 = fsub float %137, %145
  %147 = fdiv float %146, 6.000000e+00
  %148 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 6
  store float %147, float* %148, align 8
  %149 = load float*, float** %4, align 8
  %150 = load i32, i32* %5, align 4
  %151 = load i32, i32* %7, align 4
  %152 = add nsw i32 %150, %151
  %153 = sext i32 %152 to i64
  %154 = getelementptr inbounds float, float* %149, i64 %153
  %155 = load float, float* %154, align 4
  %156 = fneg float %155
  %157 = load float*, float** %4, align 8
  %158 = load i32, i32* %5, align 4
  %159 = mul nsw i32 4, %158
  %160 = load i32, i32* %7, align 4
  %161 = add nsw i32 %159, %160
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds float, float* %157, i64 %162
  %164 = load float, float* %163, align 4
  %165 = fadd float %156, %164
  %166 = load float*, float** %4, align 8
  %167 = load i32, i32* %5, align 4
  %168 = mul nsw i32 7, %167
  %169 = load i32, i32* %7, align 4
  %170 = add nsw i32 %168, %169
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds float, float* %166, i64 %171
  %173 = load float, float* %172, align 4
  %174 = fsub float %165, %173
  %175 = fdiv float %174, 6.000000e+00
  %176 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 7
  store float %175, float* %176, align 4
  %177 = load float*, float** %4, align 8
  %178 = load i32, i32* %5, align 4
  %179 = mul nsw i32 2, %178
  %180 = load i32, i32* %7, align 4
  %181 = add nsw i32 %179, %180
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds float, float* %177, i64 %182
  %184 = load float, float* %183, align 4
  %185 = fneg float %184
  %186 = load float*, float** %4, align 8
  %187 = load i32, i32* %5, align 4
  %188 = mul nsw i32 5, %187
  %189 = load i32, i32* %7, align 4
  %190 = add nsw i32 %188, %189
  %191 = sext i32 %190 to i64
  %192 = getelementptr inbounds float, float* %186, i64 %191
  %193 = load float, float* %192, align 4
  %194 = fadd float %185, %193
  %195 = load float*, float** %4, align 8
  %196 = load i32, i32* %5, align 4
  %197 = mul nsw i32 8, %196
  %198 = load i32, i32* %7, align 4
  %199 = add nsw i32 %197, %198
  %200 = sext i32 %199 to i64
  %201 = getelementptr inbounds float, float* %195, i64 %200
  %202 = load float, float* %201, align 4
  %203 = fsub float %194, %202
  %204 = fdiv float %203, 6.000000e+00
  %205 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 8
  store float %204, float* %205, align 16
  %206 = load float*, float** %4, align 8
  %207 = load i32, i32* %7, align 4
  %208 = sext i32 %207 to i64
  %209 = getelementptr inbounds float, float* %206, i64 %208
  %210 = load float, float* %209, align 4
  %211 = load float*, float** %4, align 8
  %212 = load i32, i32* %5, align 4
  %213 = mul nsw i32 3, %212
  %214 = load i32, i32* %7, align 4
  %215 = add nsw i32 %213, %214
  %216 = sext i32 %215 to i64
  %217 = getelementptr inbounds float, float* %211, i64 %216
  %218 = load float, float* %217, align 4
  %219 = fmul float 2.000000e+00, %218
  %220 = fadd float %210, %219
  %221 = load float*, float** %4, align 8
  %222 = load i32, i32* %5, align 4
  %223 = mul nsw i32 6, %222
  %224 = load i32, i32* %7, align 4
  %225 = add nsw i32 %223, %224
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds float, float* %221, i64 %226
  %228 = load float, float* %227, align 4
  %229 = fmul float 4.000000e+00, %228
  %230 = fadd float %220, %229
  %231 = fdiv float %230, 2.400000e+01
  %232 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 9
  store float %231, float* %232, align 4
  %233 = load float*, float** %4, align 8
  %234 = load i32, i32* %5, align 4
  %235 = load i32, i32* %7, align 4
  %236 = add nsw i32 %234, %235
  %237 = sext i32 %236 to i64
  %238 = getelementptr inbounds float, float* %233, i64 %237
  %239 = load float, float* %238, align 4
  %240 = load float*, float** %4, align 8
  %241 = load i32, i32* %5, align 4
  %242 = mul nsw i32 4, %241
  %243 = load i32, i32* %7, align 4
  %244 = add nsw i32 %242, %243
  %245 = sext i32 %244 to i64
  %246 = getelementptr inbounds float, float* %240, i64 %245
  %247 = load float, float* %246, align 4
  %248 = fmul float 2.000000e+00, %247
  %249 = fadd float %239, %248
  %250 = load float*, float** %4, align 8
  %251 = load i32, i32* %5, align 4
  %252 = mul nsw i32 7, %251
  %253 = load i32, i32* %7, align 4
  %254 = add nsw i32 %252, %253
  %255 = sext i32 %254 to i64
  %256 = getelementptr inbounds float, float* %250, i64 %255
  %257 = load float, float* %256, align 4
  %258 = fmul float 4.000000e+00, %257
  %259 = fadd float %249, %258
  %260 = fdiv float %259, 2.400000e+01
  %261 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 10
  store float %260, float* %261, align 8
  %262 = load float*, float** %4, align 8
  %263 = load i32, i32* %5, align 4
  %264 = mul nsw i32 2, %263
  %265 = load i32, i32* %7, align 4
  %266 = add nsw i32 %264, %265
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds float, float* %262, i64 %267
  %269 = load float, float* %268, align 4
  %270 = load float*, float** %4, align 8
  %271 = load i32, i32* %5, align 4
  %272 = mul nsw i32 5, %271
  %273 = load i32, i32* %7, align 4
  %274 = add nsw i32 %272, %273
  %275 = sext i32 %274 to i64
  %276 = getelementptr inbounds float, float* %270, i64 %275
  %277 = load float, float* %276, align 4
  %278 = fmul float 2.000000e+00, %277
  %279 = fadd float %269, %278
  %280 = load float*, float** %4, align 8
  %281 = load i32, i32* %5, align 4
  %282 = mul nsw i32 8, %281
  %283 = load i32, i32* %7, align 4
  %284 = add nsw i32 %282, %283
  %285 = sext i32 %284 to i64
  %286 = getelementptr inbounds float, float* %280, i64 %285
  %287 = load float, float* %286, align 4
  %288 = fmul float 4.000000e+00, %287
  %289 = fadd float %279, %288
  %290 = fdiv float %289, 2.400000e+01
  %291 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 11
  store float %290, float* %291, align 4
  %292 = load float*, float** %4, align 8
  %293 = load i32, i32* %7, align 4
  %294 = sext i32 %293 to i64
  %295 = getelementptr inbounds float, float* %292, i64 %294
  %296 = load float, float* %295, align 4
  %297 = load float*, float** %4, align 8
  %298 = load i32, i32* %5, align 4
  %299 = mul nsw i32 3, %298
  %300 = load i32, i32* %7, align 4
  %301 = add nsw i32 %299, %300
  %302 = sext i32 %301 to i64
  %303 = getelementptr inbounds float, float* %297, i64 %302
  %304 = load float, float* %303, align 4
  %305 = fmul float 2.000000e+00, %304
  %306 = fsub float %296, %305
  %307 = load float*, float** %4, align 8
  %308 = load i32, i32* %5, align 4
  %309 = mul nsw i32 6, %308
  %310 = load i32, i32* %7, align 4
  %311 = add nsw i32 %309, %310
  %312 = sext i32 %311 to i64
  %313 = getelementptr inbounds float, float* %307, i64 %312
  %314 = load float, float* %313, align 4
  %315 = fmul float 4.000000e+00, %314
  %316 = fadd float %306, %315
  %317 = fdiv float %316, 2.400000e+01
  %318 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 12
  store float %317, float* %318, align 16
  %319 = load float*, float** %4, align 8
  %320 = load i32, i32* %5, align 4
  %321 = load i32, i32* %7, align 4
  %322 = add nsw i32 %320, %321
  %323 = sext i32 %322 to i64
  %324 = getelementptr inbounds float, float* %319, i64 %323
  %325 = load float, float* %324, align 4
  %326 = load float*, float** %4, align 8
  %327 = load i32, i32* %5, align 4
  %328 = mul nsw i32 4, %327
  %329 = load i32, i32* %7, align 4
  %330 = add nsw i32 %328, %329
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds float, float* %326, i64 %331
  %333 = load float, float* %332, align 4
  %334 = fmul float 2.000000e+00, %333
  %335 = fsub float %325, %334
  %336 = load float*, float** %4, align 8
  %337 = load i32, i32* %5, align 4
  %338 = mul nsw i32 7, %337
  %339 = load i32, i32* %7, align 4
  %340 = add nsw i32 %338, %339
  %341 = sext i32 %340 to i64
  %342 = getelementptr inbounds float, float* %336, i64 %341
  %343 = load float, float* %342, align 4
  %344 = fmul float 4.000000e+00, %343
  %345 = fadd float %335, %344
  %346 = fdiv float %345, 2.400000e+01
  %347 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 13
  store float %346, float* %347, align 4
  %348 = load float*, float** %4, align 8
  %349 = load i32, i32* %5, align 4
  %350 = mul nsw i32 2, %349
  %351 = load i32, i32* %7, align 4
  %352 = add nsw i32 %350, %351
  %353 = sext i32 %352 to i64
  %354 = getelementptr inbounds float, float* %348, i64 %353
  %355 = load float, float* %354, align 4
  %356 = load float*, float** %4, align 8
  %357 = load i32, i32* %5, align 4
  %358 = mul nsw i32 5, %357
  %359 = load i32, i32* %7, align 4
  %360 = add nsw i32 %358, %359
  %361 = sext i32 %360 to i64
  %362 = getelementptr inbounds float, float* %356, i64 %361
  %363 = load float, float* %362, align 4
  %364 = fmul float 2.000000e+00, %363
  %365 = fsub float %355, %364
  %366 = load float*, float** %4, align 8
  %367 = load i32, i32* %5, align 4
  %368 = mul nsw i32 8, %367
  %369 = load i32, i32* %7, align 4
  %370 = add nsw i32 %368, %369
  %371 = sext i32 %370 to i64
  %372 = getelementptr inbounds float, float* %366, i64 %371
  %373 = load float, float* %372, align 4
  %374 = fmul float 4.000000e+00, %373
  %375 = fadd float %365, %374
  %376 = fdiv float %375, 2.400000e+01
  %377 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 14
  store float %376, float* %377, align 8
  %378 = load float*, float** %4, align 8
  %379 = load i32, i32* %5, align 4
  %380 = mul nsw i32 6, %379
  %381 = load i32, i32* %7, align 4
  %382 = add nsw i32 %380, %381
  %383 = sext i32 %382 to i64
  %384 = getelementptr inbounds float, float* %378, i64 %383
  %385 = load float, float* %384, align 4
  %386 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 15
  store float %385, float* %386, align 4
  %387 = load float*, float** %4, align 8
  %388 = load i32, i32* %5, align 4
  %389 = mul nsw i32 7, %388
  %390 = load i32, i32* %7, align 4
  %391 = add nsw i32 %389, %390
  %392 = sext i32 %391 to i64
  %393 = getelementptr inbounds float, float* %387, i64 %392
  %394 = load float, float* %393, align 4
  %395 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 16
  store float %394, float* %395, align 16
  %396 = load float*, float** %4, align 8
  %397 = load i32, i32* %5, align 4
  %398 = mul nsw i32 8, %397
  %399 = load i32, i32* %7, align 4
  %400 = add nsw i32 %398, %399
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds float, float* %396, i64 %401
  %403 = load float, float* %402, align 4
  %404 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 17
  store float %403, float* %404, align 4
  %405 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 0
  %406 = load float, float* %405, align 16
  %407 = fdiv float %406, 4.000000e+00
  %408 = load float*, float** %6, align 8
  %409 = getelementptr inbounds float, float* %408, i64 0
  store float %407, float* %409, align 4
  %410 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 0
  %411 = load float, float* %410, align 16
  %412 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 1
  %413 = load float, float* %412, align 4
  %414 = fadd float %411, %413
  %415 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 2
  %416 = load float, float* %415, align 8
  %417 = fadd float %414, %416
  %418 = fneg float %417
  %419 = fdiv float %418, 6.000000e+00
  %420 = load float*, float** %6, align 8
  %421 = load i32, i32* %5, align 4
  %422 = sext i32 %421 to i64
  %423 = getelementptr inbounds float, float* %420, i64 %422
  store float %419, float* %423, align 4
  %424 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 0
  %425 = load float, float* %424, align 16
  %426 = fneg float %425
  %427 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 1
  %428 = load float, float* %427, align 4
  %429 = fadd float %426, %428
  %430 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 2
  %431 = load float, float* %430, align 8
  %432 = fsub float %429, %431
  %433 = fdiv float %432, 6.000000e+00
  %434 = load float*, float** %6, align 8
  %435 = load i32, i32* %5, align 4
  %436 = mul nsw i32 2, %435
  %437 = sext i32 %436 to i64
  %438 = getelementptr inbounds float, float* %434, i64 %437
  store float %433, float* %438, align 4
  %439 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 0
  %440 = load float, float* %439, align 16
  %441 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 1
  %442 = load float, float* %441, align 4
  %443 = fmul float 2.000000e+00, %442
  %444 = fadd float %440, %443
  %445 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 2
  %446 = load float, float* %445, align 8
  %447 = fmul float 4.000000e+00, %446
  %448 = fadd float %444, %447
  %449 = fdiv float %448, 2.400000e+01
  %450 = load float*, float** %6, align 8
  %451 = load i32, i32* %5, align 4
  %452 = mul nsw i32 3, %451
  %453 = sext i32 %452 to i64
  %454 = getelementptr inbounds float, float* %450, i64 %453
  store float %449, float* %454, align 4
  %455 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 0
  %456 = load float, float* %455, align 16
  %457 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 1
  %458 = load float, float* %457, align 4
  %459 = fmul float 2.000000e+00, %458
  %460 = fsub float %456, %459
  %461 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 2
  %462 = load float, float* %461, align 8
  %463 = fmul float 4.000000e+00, %462
  %464 = fadd float %460, %463
  %465 = fdiv float %464, 2.400000e+01
  %466 = load float*, float** %6, align 8
  %467 = load i32, i32* %5, align 4
  %468 = mul nsw i32 4, %467
  %469 = sext i32 %468 to i64
  %470 = getelementptr inbounds float, float* %466, i64 %469
  store float %465, float* %470, align 4
  %471 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 2
  %472 = load float, float* %471, align 8
  %473 = load float*, float** %6, align 8
  %474 = load i32, i32* %5, align 4
  %475 = mul nsw i32 5, %474
  %476 = sext i32 %475 to i64
  %477 = getelementptr inbounds float, float* %473, i64 %476
  store float %472, float* %477, align 4
  %478 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 3
  %479 = load float, float* %478, align 4
  %480 = fdiv float %479, 4.000000e+00
  %481 = load float*, float** %6, align 8
  %482 = load i32, i32* %5, align 4
  %483 = mul nsw i32 6, %482
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds float, float* %481, i64 %484
  store float %480, float* %485, align 4
  %486 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 3
  %487 = load float, float* %486, align 4
  %488 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 4
  %489 = load float, float* %488, align 16
  %490 = fadd float %487, %489
  %491 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 5
  %492 = load float, float* %491, align 4
  %493 = fadd float %490, %492
  %494 = fneg float %493
  %495 = fdiv float %494, 6.000000e+00
  %496 = load float*, float** %6, align 8
  %497 = load i32, i32* %5, align 4
  %498 = mul nsw i32 7, %497
  %499 = sext i32 %498 to i64
  %500 = getelementptr inbounds float, float* %496, i64 %499
  store float %495, float* %500, align 4
  %501 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 3
  %502 = load float, float* %501, align 4
  %503 = fneg float %502
  %504 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 4
  %505 = load float, float* %504, align 16
  %506 = fadd float %503, %505
  %507 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 5
  %508 = load float, float* %507, align 4
  %509 = fsub float %506, %508
  %510 = fdiv float %509, 6.000000e+00
  %511 = load float*, float** %6, align 8
  %512 = load i32, i32* %5, align 4
  %513 = mul nsw i32 8, %512
  %514 = sext i32 %513 to i64
  %515 = getelementptr inbounds float, float* %511, i64 %514
  store float %510, float* %515, align 4
  %516 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 3
  %517 = load float, float* %516, align 4
  %518 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 4
  %519 = load float, float* %518, align 16
  %520 = fmul float 2.000000e+00, %519
  %521 = fadd float %517, %520
  %522 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 5
  %523 = load float, float* %522, align 4
  %524 = fmul float 4.000000e+00, %523
  %525 = fadd float %521, %524
  %526 = fdiv float %525, 2.400000e+01
  %527 = load float*, float** %6, align 8
  %528 = load i32, i32* %5, align 4
  %529 = mul nsw i32 9, %528
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds float, float* %527, i64 %530
  store float %526, float* %531, align 4
  %532 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 3
  %533 = load float, float* %532, align 4
  %534 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 4
  %535 = load float, float* %534, align 16
  %536 = fmul float 2.000000e+00, %535
  %537 = fsub float %533, %536
  %538 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 5
  %539 = load float, float* %538, align 4
  %540 = fmul float 4.000000e+00, %539
  %541 = fadd float %537, %540
  %542 = fdiv float %541, 2.400000e+01
  %543 = load float*, float** %6, align 8
  %544 = load i32, i32* %5, align 4
  %545 = mul nsw i32 10, %544
  %546 = sext i32 %545 to i64
  %547 = getelementptr inbounds float, float* %543, i64 %546
  store float %542, float* %547, align 4
  %548 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 5
  %549 = load float, float* %548, align 4
  %550 = load float*, float** %6, align 8
  %551 = load i32, i32* %5, align 4
  %552 = mul nsw i32 11, %551
  %553 = sext i32 %552 to i64
  %554 = getelementptr inbounds float, float* %550, i64 %553
  store float %549, float* %554, align 4
  %555 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 6
  %556 = load float, float* %555, align 8
  %557 = fdiv float %556, 4.000000e+00
  %558 = load float*, float** %6, align 8
  %559 = load i32, i32* %5, align 4
  %560 = mul nsw i32 12, %559
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds float, float* %558, i64 %561
  store float %557, float* %562, align 4
  %563 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 6
  %564 = load float, float* %563, align 8
  %565 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 7
  %566 = load float, float* %565, align 4
  %567 = fadd float %564, %566
  %568 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 8
  %569 = load float, float* %568, align 16
  %570 = fadd float %567, %569
  %571 = fneg float %570
  %572 = fdiv float %571, 6.000000e+00
  %573 = load float*, float** %6, align 8
  %574 = load i32, i32* %5, align 4
  %575 = mul nsw i32 13, %574
  %576 = sext i32 %575 to i64
  %577 = getelementptr inbounds float, float* %573, i64 %576
  store float %572, float* %577, align 4
  %578 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 6
  %579 = load float, float* %578, align 8
  %580 = fneg float %579
  %581 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 7
  %582 = load float, float* %581, align 4
  %583 = fadd float %580, %582
  %584 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 8
  %585 = load float, float* %584, align 16
  %586 = fsub float %583, %585
  %587 = fdiv float %586, 6.000000e+00
  %588 = load float*, float** %6, align 8
  %589 = load i32, i32* %5, align 4
  %590 = mul nsw i32 14, %589
  %591 = sext i32 %590 to i64
  %592 = getelementptr inbounds float, float* %588, i64 %591
  store float %587, float* %592, align 4
  %593 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 6
  %594 = load float, float* %593, align 8
  %595 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 7
  %596 = load float, float* %595, align 4
  %597 = fmul float 2.000000e+00, %596
  %598 = fadd float %594, %597
  %599 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 8
  %600 = load float, float* %599, align 16
  %601 = fmul float 4.000000e+00, %600
  %602 = fadd float %598, %601
  %603 = fdiv float %602, 2.400000e+01
  %604 = load float*, float** %6, align 8
  %605 = load i32, i32* %5, align 4
  %606 = mul nsw i32 15, %605
  %607 = sext i32 %606 to i64
  %608 = getelementptr inbounds float, float* %604, i64 %607
  store float %603, float* %608, align 4
  %609 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 6
  %610 = load float, float* %609, align 8
  %611 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 7
  %612 = load float, float* %611, align 4
  %613 = fmul float 2.000000e+00, %612
  %614 = fsub float %610, %613
  %615 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 8
  %616 = load float, float* %615, align 16
  %617 = fmul float 4.000000e+00, %616
  %618 = fadd float %614, %617
  %619 = fdiv float %618, 2.400000e+01
  %620 = load float*, float** %6, align 8
  %621 = load i32, i32* %5, align 4
  %622 = mul nsw i32 16, %621
  %623 = sext i32 %622 to i64
  %624 = getelementptr inbounds float, float* %620, i64 %623
  store float %619, float* %624, align 4
  %625 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 8
  %626 = load float, float* %625, align 16
  %627 = load float*, float** %6, align 8
  %628 = load i32, i32* %5, align 4
  %629 = mul nsw i32 17, %628
  %630 = sext i32 %629 to i64
  %631 = getelementptr inbounds float, float* %627, i64 %630
  store float %626, float* %631, align 4
  %632 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 9
  %633 = load float, float* %632, align 4
  %634 = fdiv float %633, 4.000000e+00
  %635 = load float*, float** %6, align 8
  %636 = load i32, i32* %5, align 4
  %637 = mul nsw i32 18, %636
  %638 = sext i32 %637 to i64
  %639 = getelementptr inbounds float, float* %635, i64 %638
  store float %634, float* %639, align 4
  %640 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 9
  %641 = load float, float* %640, align 4
  %642 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 10
  %643 = load float, float* %642, align 8
  %644 = fadd float %641, %643
  %645 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 11
  %646 = load float, float* %645, align 4
  %647 = fadd float %644, %646
  %648 = fneg float %647
  %649 = fdiv float %648, 6.000000e+00
  %650 = load float*, float** %6, align 8
  %651 = load i32, i32* %5, align 4
  %652 = mul nsw i32 19, %651
  %653 = sext i32 %652 to i64
  %654 = getelementptr inbounds float, float* %650, i64 %653
  store float %649, float* %654, align 4
  %655 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 9
  %656 = load float, float* %655, align 4
  %657 = fneg float %656
  %658 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 10
  %659 = load float, float* %658, align 8
  %660 = fadd float %657, %659
  %661 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 11
  %662 = load float, float* %661, align 4
  %663 = fsub float %660, %662
  %664 = fdiv float %663, 6.000000e+00
  %665 = load float*, float** %6, align 8
  %666 = load i32, i32* %5, align 4
  %667 = mul nsw i32 20, %666
  %668 = sext i32 %667 to i64
  %669 = getelementptr inbounds float, float* %665, i64 %668
  store float %664, float* %669, align 4
  %670 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 9
  %671 = load float, float* %670, align 4
  %672 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 10
  %673 = load float, float* %672, align 8
  %674 = fmul float 2.000000e+00, %673
  %675 = fadd float %671, %674
  %676 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 11
  %677 = load float, float* %676, align 4
  %678 = fmul float 4.000000e+00, %677
  %679 = fadd float %675, %678
  %680 = fdiv float %679, 2.400000e+01
  %681 = load float*, float** %6, align 8
  %682 = load i32, i32* %5, align 4
  %683 = mul nsw i32 21, %682
  %684 = sext i32 %683 to i64
  %685 = getelementptr inbounds float, float* %681, i64 %684
  store float %680, float* %685, align 4
  %686 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 9
  %687 = load float, float* %686, align 4
  %688 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 10
  %689 = load float, float* %688, align 8
  %690 = fmul float 2.000000e+00, %689
  %691 = fsub float %687, %690
  %692 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 11
  %693 = load float, float* %692, align 4
  %694 = fmul float 4.000000e+00, %693
  %695 = fadd float %691, %694
  %696 = fdiv float %695, 2.400000e+01
  %697 = load float*, float** %6, align 8
  %698 = load i32, i32* %5, align 4
  %699 = mul nsw i32 22, %698
  %700 = sext i32 %699 to i64
  %701 = getelementptr inbounds float, float* %697, i64 %700
  store float %696, float* %701, align 4
  %702 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 11
  %703 = load float, float* %702, align 4
  %704 = load float*, float** %6, align 8
  %705 = load i32, i32* %5, align 4
  %706 = mul nsw i32 23, %705
  %707 = sext i32 %706 to i64
  %708 = getelementptr inbounds float, float* %704, i64 %707
  store float %703, float* %708, align 4
  %709 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 12
  %710 = load float, float* %709, align 16
  %711 = fdiv float %710, 4.000000e+00
  %712 = load float*, float** %6, align 8
  %713 = load i32, i32* %5, align 4
  %714 = mul nsw i32 24, %713
  %715 = sext i32 %714 to i64
  %716 = getelementptr inbounds float, float* %712, i64 %715
  store float %711, float* %716, align 4
  %717 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 12
  %718 = load float, float* %717, align 16
  %719 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 13
  %720 = load float, float* %719, align 4
  %721 = fadd float %718, %720
  %722 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 14
  %723 = load float, float* %722, align 8
  %724 = fadd float %721, %723
  %725 = fneg float %724
  %726 = fdiv float %725, 6.000000e+00
  %727 = load float*, float** %6, align 8
  %728 = load i32, i32* %5, align 4
  %729 = mul nsw i32 25, %728
  %730 = sext i32 %729 to i64
  %731 = getelementptr inbounds float, float* %727, i64 %730
  store float %726, float* %731, align 4
  %732 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 12
  %733 = load float, float* %732, align 16
  %734 = fneg float %733
  %735 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 13
  %736 = load float, float* %735, align 4
  %737 = fadd float %734, %736
  %738 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 14
  %739 = load float, float* %738, align 8
  %740 = fsub float %737, %739
  %741 = fdiv float %740, 6.000000e+00
  %742 = load float*, float** %6, align 8
  %743 = load i32, i32* %5, align 4
  %744 = mul nsw i32 26, %743
  %745 = sext i32 %744 to i64
  %746 = getelementptr inbounds float, float* %742, i64 %745
  store float %741, float* %746, align 4
  %747 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 12
  %748 = load float, float* %747, align 16
  %749 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 13
  %750 = load float, float* %749, align 4
  %751 = fmul float 2.000000e+00, %750
  %752 = fadd float %748, %751
  %753 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 14
  %754 = load float, float* %753, align 8
  %755 = fmul float 4.000000e+00, %754
  %756 = fadd float %752, %755
  %757 = fdiv float %756, 2.400000e+01
  %758 = load float*, float** %6, align 8
  %759 = load i32, i32* %5, align 4
  %760 = mul nsw i32 27, %759
  %761 = sext i32 %760 to i64
  %762 = getelementptr inbounds float, float* %758, i64 %761
  store float %757, float* %762, align 4
  %763 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 12
  %764 = load float, float* %763, align 16
  %765 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 13
  %766 = load float, float* %765, align 4
  %767 = fmul float 2.000000e+00, %766
  %768 = fsub float %764, %767
  %769 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 14
  %770 = load float, float* %769, align 8
  %771 = fmul float 4.000000e+00, %770
  %772 = fadd float %768, %771
  %773 = fdiv float %772, 2.400000e+01
  %774 = load float*, float** %6, align 8
  %775 = load i32, i32* %5, align 4
  %776 = mul nsw i32 28, %775
  %777 = sext i32 %776 to i64
  %778 = getelementptr inbounds float, float* %774, i64 %777
  store float %773, float* %778, align 4
  %779 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 14
  %780 = load float, float* %779, align 8
  %781 = load float*, float** %6, align 8
  %782 = load i32, i32* %5, align 4
  %783 = mul nsw i32 29, %782
  %784 = sext i32 %783 to i64
  %785 = getelementptr inbounds float, float* %781, i64 %784
  store float %780, float* %785, align 4
  %786 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 15
  %787 = load float, float* %786, align 4
  %788 = fdiv float %787, 4.000000e+00
  %789 = load float*, float** %6, align 8
  %790 = load i32, i32* %5, align 4
  %791 = mul nsw i32 30, %790
  %792 = sext i32 %791 to i64
  %793 = getelementptr inbounds float, float* %789, i64 %792
  store float %788, float* %793, align 4
  %794 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 15
  %795 = load float, float* %794, align 4
  %796 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 16
  %797 = load float, float* %796, align 16
  %798 = fadd float %795, %797
  %799 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 17
  %800 = load float, float* %799, align 4
  %801 = fadd float %798, %800
  %802 = fneg float %801
  %803 = fdiv float %802, 6.000000e+00
  %804 = load float*, float** %6, align 8
  %805 = load i32, i32* %5, align 4
  %806 = mul nsw i32 31, %805
  %807 = sext i32 %806 to i64
  %808 = getelementptr inbounds float, float* %804, i64 %807
  store float %803, float* %808, align 4
  %809 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 15
  %810 = load float, float* %809, align 4
  %811 = fneg float %810
  %812 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 16
  %813 = load float, float* %812, align 16
  %814 = fadd float %811, %813
  %815 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 17
  %816 = load float, float* %815, align 4
  %817 = fsub float %814, %816
  %818 = fdiv float %817, 6.000000e+00
  %819 = load float*, float** %6, align 8
  %820 = load i32, i32* %5, align 4
  %821 = mul nsw i32 32, %820
  %822 = sext i32 %821 to i64
  %823 = getelementptr inbounds float, float* %819, i64 %822
  store float %818, float* %823, align 4
  %824 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 15
  %825 = load float, float* %824, align 4
  %826 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 16
  %827 = load float, float* %826, align 16
  %828 = fmul float 2.000000e+00, %827
  %829 = fadd float %825, %828
  %830 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 17
  %831 = load float, float* %830, align 4
  %832 = fmul float 4.000000e+00, %831
  %833 = fadd float %829, %832
  %834 = fdiv float %833, 2.400000e+01
  %835 = load float*, float** %6, align 8
  %836 = load i32, i32* %5, align 4
  %837 = mul nsw i32 33, %836
  %838 = sext i32 %837 to i64
  %839 = getelementptr inbounds float, float* %835, i64 %838
  store float %834, float* %839, align 4
  %840 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 15
  %841 = load float, float* %840, align 4
  %842 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 16
  %843 = load float, float* %842, align 16
  %844 = fmul float 2.000000e+00, %843
  %845 = fsub float %841, %844
  %846 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 17
  %847 = load float, float* %846, align 4
  %848 = fmul float 4.000000e+00, %847
  %849 = fadd float %845, %848
  %850 = fdiv float %849, 2.400000e+01
  %851 = load float*, float** %6, align 8
  %852 = load i32, i32* %5, align 4
  %853 = mul nsw i32 34, %852
  %854 = sext i32 %853 to i64
  %855 = getelementptr inbounds float, float* %851, i64 %854
  store float %850, float* %855, align 4
  %856 = getelementptr inbounds [18 x float], [18 x float]* %8, i64 0, i64 17
  %857 = load float, float* %856, align 4
  %858 = load float*, float** %6, align 8
  %859 = load i32, i32* %5, align 4
  %860 = mul nsw i32 35, %859
  %861 = sext i32 %860 to i64
  %862 = getelementptr inbounds float, float* %858, i64 %861
  store float %857, float* %862, align 4
  %863 = load float*, float** %6, align 8
  %864 = getelementptr inbounds float, float* %863, i32 1
  store float* %864, float** %6, align 8
  br label %865

865:                                              ; preds = %13
  %866 = load i32, i32* %7, align 4
  %867 = add nsw i32 %866, 1
  store i32 %867, i32* %7, align 4
  br label %9

868:                                              ; preds = %9
  ret void
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
