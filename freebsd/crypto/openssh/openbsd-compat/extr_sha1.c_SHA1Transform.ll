; ModuleID = '/home/carl/AnghaBench/freebsd/crypto/openssh/openbsd-compat/extr_sha1.c_SHA1Transform.c'
source_filename = "/home/carl/AnghaBench/freebsd/crypto/openssh/openbsd-compat/extr_sha1.c_SHA1Transform.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@SHA1_BLOCK_LENGTH = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @SHA1Transform(i64* %0, i32* %1) #0 {
  %3 = alloca i64*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca i8*, align 8
  %11 = alloca i64, align 8
  %12 = alloca i32*, align 8
  store i64* %0, i64** %3, align 8
  store i32* %1, i32** %4, align 8
  %13 = load i32, i32* @SHA1_BLOCK_LENGTH, align 4
  %14 = zext i32 %13 to i64
  %15 = load i32, i32* @SHA1_BLOCK_LENGTH, align 4
  %16 = zext i32 %15 to i64
  %17 = call i8* @llvm.stacksave()
  store i8* %17, i8** %10, align 8
  %18 = alloca i32, i64 %16, align 16
  store i64 %16, i64* %11, align 8
  store i32* %18, i32** %12, align 8
  %19 = load i32*, i32** %12, align 8
  %20 = load i32*, i32** %4, align 8
  %21 = load i32, i32* @SHA1_BLOCK_LENGTH, align 4
  %22 = call i32 @memcpy(i32* %19, i32* %20, i32 %21)
  %23 = load i64*, i64** %3, align 8
  %24 = getelementptr inbounds i64, i64* %23, i64 0
  %25 = load i64, i64* %24, align 8
  store i64 %25, i64* %5, align 8
  %26 = load i64*, i64** %3, align 8
  %27 = getelementptr inbounds i64, i64* %26, i64 1
  %28 = load i64, i64* %27, align 8
  store i64 %28, i64* %6, align 8
  %29 = load i64*, i64** %3, align 8
  %30 = getelementptr inbounds i64, i64* %29, i64 2
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* %7, align 8
  %32 = load i64*, i64** %3, align 8
  %33 = getelementptr inbounds i64, i64* %32, i64 3
  %34 = load i64, i64* %33, align 8
  store i64 %34, i64* %8, align 8
  %35 = load i64*, i64** %3, align 8
  %36 = getelementptr inbounds i64, i64* %35, i64 4
  %37 = load i64, i64* %36, align 8
  store i64 %37, i64* %9, align 8
  %38 = load i64, i64* %5, align 8
  %39 = load i64, i64* %6, align 8
  %40 = load i64, i64* %7, align 8
  %41 = load i64, i64* %8, align 8
  %42 = load i64, i64* %9, align 8
  %43 = call i32 @R0(i64 %38, i64 %39, i64 %40, i64 %41, i64 %42, i32 0)
  %44 = load i64, i64* %9, align 8
  %45 = load i64, i64* %5, align 8
  %46 = load i64, i64* %6, align 8
  %47 = load i64, i64* %7, align 8
  %48 = load i64, i64* %8, align 8
  %49 = call i32 @R0(i64 %44, i64 %45, i64 %46, i64 %47, i64 %48, i32 1)
  %50 = load i64, i64* %8, align 8
  %51 = load i64, i64* %9, align 8
  %52 = load i64, i64* %5, align 8
  %53 = load i64, i64* %6, align 8
  %54 = load i64, i64* %7, align 8
  %55 = call i32 @R0(i64 %50, i64 %51, i64 %52, i64 %53, i64 %54, i32 2)
  %56 = load i64, i64* %7, align 8
  %57 = load i64, i64* %8, align 8
  %58 = load i64, i64* %9, align 8
  %59 = load i64, i64* %5, align 8
  %60 = load i64, i64* %6, align 8
  %61 = call i32 @R0(i64 %56, i64 %57, i64 %58, i64 %59, i64 %60, i32 3)
  %62 = load i64, i64* %6, align 8
  %63 = load i64, i64* %7, align 8
  %64 = load i64, i64* %8, align 8
  %65 = load i64, i64* %9, align 8
  %66 = load i64, i64* %5, align 8
  %67 = call i32 @R0(i64 %62, i64 %63, i64 %64, i64 %65, i64 %66, i32 4)
  %68 = load i64, i64* %5, align 8
  %69 = load i64, i64* %6, align 8
  %70 = load i64, i64* %7, align 8
  %71 = load i64, i64* %8, align 8
  %72 = load i64, i64* %9, align 8
  %73 = call i32 @R0(i64 %68, i64 %69, i64 %70, i64 %71, i64 %72, i32 5)
  %74 = load i64, i64* %9, align 8
  %75 = load i64, i64* %5, align 8
  %76 = load i64, i64* %6, align 8
  %77 = load i64, i64* %7, align 8
  %78 = load i64, i64* %8, align 8
  %79 = call i32 @R0(i64 %74, i64 %75, i64 %76, i64 %77, i64 %78, i32 6)
  %80 = load i64, i64* %8, align 8
  %81 = load i64, i64* %9, align 8
  %82 = load i64, i64* %5, align 8
  %83 = load i64, i64* %6, align 8
  %84 = load i64, i64* %7, align 8
  %85 = call i32 @R0(i64 %80, i64 %81, i64 %82, i64 %83, i64 %84, i32 7)
  %86 = load i64, i64* %7, align 8
  %87 = load i64, i64* %8, align 8
  %88 = load i64, i64* %9, align 8
  %89 = load i64, i64* %5, align 8
  %90 = load i64, i64* %6, align 8
  %91 = call i32 @R0(i64 %86, i64 %87, i64 %88, i64 %89, i64 %90, i32 8)
  %92 = load i64, i64* %6, align 8
  %93 = load i64, i64* %7, align 8
  %94 = load i64, i64* %8, align 8
  %95 = load i64, i64* %9, align 8
  %96 = load i64, i64* %5, align 8
  %97 = call i32 @R0(i64 %92, i64 %93, i64 %94, i64 %95, i64 %96, i32 9)
  %98 = load i64, i64* %5, align 8
  %99 = load i64, i64* %6, align 8
  %100 = load i64, i64* %7, align 8
  %101 = load i64, i64* %8, align 8
  %102 = load i64, i64* %9, align 8
  %103 = call i32 @R0(i64 %98, i64 %99, i64 %100, i64 %101, i64 %102, i32 10)
  %104 = load i64, i64* %9, align 8
  %105 = load i64, i64* %5, align 8
  %106 = load i64, i64* %6, align 8
  %107 = load i64, i64* %7, align 8
  %108 = load i64, i64* %8, align 8
  %109 = call i32 @R0(i64 %104, i64 %105, i64 %106, i64 %107, i64 %108, i32 11)
  %110 = load i64, i64* %8, align 8
  %111 = load i64, i64* %9, align 8
  %112 = load i64, i64* %5, align 8
  %113 = load i64, i64* %6, align 8
  %114 = load i64, i64* %7, align 8
  %115 = call i32 @R0(i64 %110, i64 %111, i64 %112, i64 %113, i64 %114, i32 12)
  %116 = load i64, i64* %7, align 8
  %117 = load i64, i64* %8, align 8
  %118 = load i64, i64* %9, align 8
  %119 = load i64, i64* %5, align 8
  %120 = load i64, i64* %6, align 8
  %121 = call i32 @R0(i64 %116, i64 %117, i64 %118, i64 %119, i64 %120, i32 13)
  %122 = load i64, i64* %6, align 8
  %123 = load i64, i64* %7, align 8
  %124 = load i64, i64* %8, align 8
  %125 = load i64, i64* %9, align 8
  %126 = load i64, i64* %5, align 8
  %127 = call i32 @R0(i64 %122, i64 %123, i64 %124, i64 %125, i64 %126, i32 14)
  %128 = load i64, i64* %5, align 8
  %129 = load i64, i64* %6, align 8
  %130 = load i64, i64* %7, align 8
  %131 = load i64, i64* %8, align 8
  %132 = load i64, i64* %9, align 8
  %133 = call i32 @R0(i64 %128, i64 %129, i64 %130, i64 %131, i64 %132, i32 15)
  %134 = load i64, i64* %9, align 8
  %135 = load i64, i64* %5, align 8
  %136 = load i64, i64* %6, align 8
  %137 = load i64, i64* %7, align 8
  %138 = load i64, i64* %8, align 8
  %139 = call i32 @R1(i64 %134, i64 %135, i64 %136, i64 %137, i64 %138, i32 16)
  %140 = load i64, i64* %8, align 8
  %141 = load i64, i64* %9, align 8
  %142 = load i64, i64* %5, align 8
  %143 = load i64, i64* %6, align 8
  %144 = load i64, i64* %7, align 8
  %145 = call i32 @R1(i64 %140, i64 %141, i64 %142, i64 %143, i64 %144, i32 17)
  %146 = load i64, i64* %7, align 8
  %147 = load i64, i64* %8, align 8
  %148 = load i64, i64* %9, align 8
  %149 = load i64, i64* %5, align 8
  %150 = load i64, i64* %6, align 8
  %151 = call i32 @R1(i64 %146, i64 %147, i64 %148, i64 %149, i64 %150, i32 18)
  %152 = load i64, i64* %6, align 8
  %153 = load i64, i64* %7, align 8
  %154 = load i64, i64* %8, align 8
  %155 = load i64, i64* %9, align 8
  %156 = load i64, i64* %5, align 8
  %157 = call i32 @R1(i64 %152, i64 %153, i64 %154, i64 %155, i64 %156, i32 19)
  %158 = load i64, i64* %5, align 8
  %159 = load i64, i64* %6, align 8
  %160 = load i64, i64* %7, align 8
  %161 = load i64, i64* %8, align 8
  %162 = load i64, i64* %9, align 8
  %163 = call i32 @R2(i64 %158, i64 %159, i64 %160, i64 %161, i64 %162, i32 20)
  %164 = load i64, i64* %9, align 8
  %165 = load i64, i64* %5, align 8
  %166 = load i64, i64* %6, align 8
  %167 = load i64, i64* %7, align 8
  %168 = load i64, i64* %8, align 8
  %169 = call i32 @R2(i64 %164, i64 %165, i64 %166, i64 %167, i64 %168, i32 21)
  %170 = load i64, i64* %8, align 8
  %171 = load i64, i64* %9, align 8
  %172 = load i64, i64* %5, align 8
  %173 = load i64, i64* %6, align 8
  %174 = load i64, i64* %7, align 8
  %175 = call i32 @R2(i64 %170, i64 %171, i64 %172, i64 %173, i64 %174, i32 22)
  %176 = load i64, i64* %7, align 8
  %177 = load i64, i64* %8, align 8
  %178 = load i64, i64* %9, align 8
  %179 = load i64, i64* %5, align 8
  %180 = load i64, i64* %6, align 8
  %181 = call i32 @R2(i64 %176, i64 %177, i64 %178, i64 %179, i64 %180, i32 23)
  %182 = load i64, i64* %6, align 8
  %183 = load i64, i64* %7, align 8
  %184 = load i64, i64* %8, align 8
  %185 = load i64, i64* %9, align 8
  %186 = load i64, i64* %5, align 8
  %187 = call i32 @R2(i64 %182, i64 %183, i64 %184, i64 %185, i64 %186, i32 24)
  %188 = load i64, i64* %5, align 8
  %189 = load i64, i64* %6, align 8
  %190 = load i64, i64* %7, align 8
  %191 = load i64, i64* %8, align 8
  %192 = load i64, i64* %9, align 8
  %193 = call i32 @R2(i64 %188, i64 %189, i64 %190, i64 %191, i64 %192, i32 25)
  %194 = load i64, i64* %9, align 8
  %195 = load i64, i64* %5, align 8
  %196 = load i64, i64* %6, align 8
  %197 = load i64, i64* %7, align 8
  %198 = load i64, i64* %8, align 8
  %199 = call i32 @R2(i64 %194, i64 %195, i64 %196, i64 %197, i64 %198, i32 26)
  %200 = load i64, i64* %8, align 8
  %201 = load i64, i64* %9, align 8
  %202 = load i64, i64* %5, align 8
  %203 = load i64, i64* %6, align 8
  %204 = load i64, i64* %7, align 8
  %205 = call i32 @R2(i64 %200, i64 %201, i64 %202, i64 %203, i64 %204, i32 27)
  %206 = load i64, i64* %7, align 8
  %207 = load i64, i64* %8, align 8
  %208 = load i64, i64* %9, align 8
  %209 = load i64, i64* %5, align 8
  %210 = load i64, i64* %6, align 8
  %211 = call i32 @R2(i64 %206, i64 %207, i64 %208, i64 %209, i64 %210, i32 28)
  %212 = load i64, i64* %6, align 8
  %213 = load i64, i64* %7, align 8
  %214 = load i64, i64* %8, align 8
  %215 = load i64, i64* %9, align 8
  %216 = load i64, i64* %5, align 8
  %217 = call i32 @R2(i64 %212, i64 %213, i64 %214, i64 %215, i64 %216, i32 29)
  %218 = load i64, i64* %5, align 8
  %219 = load i64, i64* %6, align 8
  %220 = load i64, i64* %7, align 8
  %221 = load i64, i64* %8, align 8
  %222 = load i64, i64* %9, align 8
  %223 = call i32 @R2(i64 %218, i64 %219, i64 %220, i64 %221, i64 %222, i32 30)
  %224 = load i64, i64* %9, align 8
  %225 = load i64, i64* %5, align 8
  %226 = load i64, i64* %6, align 8
  %227 = load i64, i64* %7, align 8
  %228 = load i64, i64* %8, align 8
  %229 = call i32 @R2(i64 %224, i64 %225, i64 %226, i64 %227, i64 %228, i32 31)
  %230 = load i64, i64* %8, align 8
  %231 = load i64, i64* %9, align 8
  %232 = load i64, i64* %5, align 8
  %233 = load i64, i64* %6, align 8
  %234 = load i64, i64* %7, align 8
  %235 = call i32 @R2(i64 %230, i64 %231, i64 %232, i64 %233, i64 %234, i32 32)
  %236 = load i64, i64* %7, align 8
  %237 = load i64, i64* %8, align 8
  %238 = load i64, i64* %9, align 8
  %239 = load i64, i64* %5, align 8
  %240 = load i64, i64* %6, align 8
  %241 = call i32 @R2(i64 %236, i64 %237, i64 %238, i64 %239, i64 %240, i32 33)
  %242 = load i64, i64* %6, align 8
  %243 = load i64, i64* %7, align 8
  %244 = load i64, i64* %8, align 8
  %245 = load i64, i64* %9, align 8
  %246 = load i64, i64* %5, align 8
  %247 = call i32 @R2(i64 %242, i64 %243, i64 %244, i64 %245, i64 %246, i32 34)
  %248 = load i64, i64* %5, align 8
  %249 = load i64, i64* %6, align 8
  %250 = load i64, i64* %7, align 8
  %251 = load i64, i64* %8, align 8
  %252 = load i64, i64* %9, align 8
  %253 = call i32 @R2(i64 %248, i64 %249, i64 %250, i64 %251, i64 %252, i32 35)
  %254 = load i64, i64* %9, align 8
  %255 = load i64, i64* %5, align 8
  %256 = load i64, i64* %6, align 8
  %257 = load i64, i64* %7, align 8
  %258 = load i64, i64* %8, align 8
  %259 = call i32 @R2(i64 %254, i64 %255, i64 %256, i64 %257, i64 %258, i32 36)
  %260 = load i64, i64* %8, align 8
  %261 = load i64, i64* %9, align 8
  %262 = load i64, i64* %5, align 8
  %263 = load i64, i64* %6, align 8
  %264 = load i64, i64* %7, align 8
  %265 = call i32 @R2(i64 %260, i64 %261, i64 %262, i64 %263, i64 %264, i32 37)
  %266 = load i64, i64* %7, align 8
  %267 = load i64, i64* %8, align 8
  %268 = load i64, i64* %9, align 8
  %269 = load i64, i64* %5, align 8
  %270 = load i64, i64* %6, align 8
  %271 = call i32 @R2(i64 %266, i64 %267, i64 %268, i64 %269, i64 %270, i32 38)
  %272 = load i64, i64* %6, align 8
  %273 = load i64, i64* %7, align 8
  %274 = load i64, i64* %8, align 8
  %275 = load i64, i64* %9, align 8
  %276 = load i64, i64* %5, align 8
  %277 = call i32 @R2(i64 %272, i64 %273, i64 %274, i64 %275, i64 %276, i32 39)
  %278 = load i64, i64* %5, align 8
  %279 = load i64, i64* %6, align 8
  %280 = load i64, i64* %7, align 8
  %281 = load i64, i64* %8, align 8
  %282 = load i64, i64* %9, align 8
  %283 = call i32 @R3(i64 %278, i64 %279, i64 %280, i64 %281, i64 %282, i32 40)
  %284 = load i64, i64* %9, align 8
  %285 = load i64, i64* %5, align 8
  %286 = load i64, i64* %6, align 8
  %287 = load i64, i64* %7, align 8
  %288 = load i64, i64* %8, align 8
  %289 = call i32 @R3(i64 %284, i64 %285, i64 %286, i64 %287, i64 %288, i32 41)
  %290 = load i64, i64* %8, align 8
  %291 = load i64, i64* %9, align 8
  %292 = load i64, i64* %5, align 8
  %293 = load i64, i64* %6, align 8
  %294 = load i64, i64* %7, align 8
  %295 = call i32 @R3(i64 %290, i64 %291, i64 %292, i64 %293, i64 %294, i32 42)
  %296 = load i64, i64* %7, align 8
  %297 = load i64, i64* %8, align 8
  %298 = load i64, i64* %9, align 8
  %299 = load i64, i64* %5, align 8
  %300 = load i64, i64* %6, align 8
  %301 = call i32 @R3(i64 %296, i64 %297, i64 %298, i64 %299, i64 %300, i32 43)
  %302 = load i64, i64* %6, align 8
  %303 = load i64, i64* %7, align 8
  %304 = load i64, i64* %8, align 8
  %305 = load i64, i64* %9, align 8
  %306 = load i64, i64* %5, align 8
  %307 = call i32 @R3(i64 %302, i64 %303, i64 %304, i64 %305, i64 %306, i32 44)
  %308 = load i64, i64* %5, align 8
  %309 = load i64, i64* %6, align 8
  %310 = load i64, i64* %7, align 8
  %311 = load i64, i64* %8, align 8
  %312 = load i64, i64* %9, align 8
  %313 = call i32 @R3(i64 %308, i64 %309, i64 %310, i64 %311, i64 %312, i32 45)
  %314 = load i64, i64* %9, align 8
  %315 = load i64, i64* %5, align 8
  %316 = load i64, i64* %6, align 8
  %317 = load i64, i64* %7, align 8
  %318 = load i64, i64* %8, align 8
  %319 = call i32 @R3(i64 %314, i64 %315, i64 %316, i64 %317, i64 %318, i32 46)
  %320 = load i64, i64* %8, align 8
  %321 = load i64, i64* %9, align 8
  %322 = load i64, i64* %5, align 8
  %323 = load i64, i64* %6, align 8
  %324 = load i64, i64* %7, align 8
  %325 = call i32 @R3(i64 %320, i64 %321, i64 %322, i64 %323, i64 %324, i32 47)
  %326 = load i64, i64* %7, align 8
  %327 = load i64, i64* %8, align 8
  %328 = load i64, i64* %9, align 8
  %329 = load i64, i64* %5, align 8
  %330 = load i64, i64* %6, align 8
  %331 = call i32 @R3(i64 %326, i64 %327, i64 %328, i64 %329, i64 %330, i32 48)
  %332 = load i64, i64* %6, align 8
  %333 = load i64, i64* %7, align 8
  %334 = load i64, i64* %8, align 8
  %335 = load i64, i64* %9, align 8
  %336 = load i64, i64* %5, align 8
  %337 = call i32 @R3(i64 %332, i64 %333, i64 %334, i64 %335, i64 %336, i32 49)
  %338 = load i64, i64* %5, align 8
  %339 = load i64, i64* %6, align 8
  %340 = load i64, i64* %7, align 8
  %341 = load i64, i64* %8, align 8
  %342 = load i64, i64* %9, align 8
  %343 = call i32 @R3(i64 %338, i64 %339, i64 %340, i64 %341, i64 %342, i32 50)
  %344 = load i64, i64* %9, align 8
  %345 = load i64, i64* %5, align 8
  %346 = load i64, i64* %6, align 8
  %347 = load i64, i64* %7, align 8
  %348 = load i64, i64* %8, align 8
  %349 = call i32 @R3(i64 %344, i64 %345, i64 %346, i64 %347, i64 %348, i32 51)
  %350 = load i64, i64* %8, align 8
  %351 = load i64, i64* %9, align 8
  %352 = load i64, i64* %5, align 8
  %353 = load i64, i64* %6, align 8
  %354 = load i64, i64* %7, align 8
  %355 = call i32 @R3(i64 %350, i64 %351, i64 %352, i64 %353, i64 %354, i32 52)
  %356 = load i64, i64* %7, align 8
  %357 = load i64, i64* %8, align 8
  %358 = load i64, i64* %9, align 8
  %359 = load i64, i64* %5, align 8
  %360 = load i64, i64* %6, align 8
  %361 = call i32 @R3(i64 %356, i64 %357, i64 %358, i64 %359, i64 %360, i32 53)
  %362 = load i64, i64* %6, align 8
  %363 = load i64, i64* %7, align 8
  %364 = load i64, i64* %8, align 8
  %365 = load i64, i64* %9, align 8
  %366 = load i64, i64* %5, align 8
  %367 = call i32 @R3(i64 %362, i64 %363, i64 %364, i64 %365, i64 %366, i32 54)
  %368 = load i64, i64* %5, align 8
  %369 = load i64, i64* %6, align 8
  %370 = load i64, i64* %7, align 8
  %371 = load i64, i64* %8, align 8
  %372 = load i64, i64* %9, align 8
  %373 = call i32 @R3(i64 %368, i64 %369, i64 %370, i64 %371, i64 %372, i32 55)
  %374 = load i64, i64* %9, align 8
  %375 = load i64, i64* %5, align 8
  %376 = load i64, i64* %6, align 8
  %377 = load i64, i64* %7, align 8
  %378 = load i64, i64* %8, align 8
  %379 = call i32 @R3(i64 %374, i64 %375, i64 %376, i64 %377, i64 %378, i32 56)
  %380 = load i64, i64* %8, align 8
  %381 = load i64, i64* %9, align 8
  %382 = load i64, i64* %5, align 8
  %383 = load i64, i64* %6, align 8
  %384 = load i64, i64* %7, align 8
  %385 = call i32 @R3(i64 %380, i64 %381, i64 %382, i64 %383, i64 %384, i32 57)
  %386 = load i64, i64* %7, align 8
  %387 = load i64, i64* %8, align 8
  %388 = load i64, i64* %9, align 8
  %389 = load i64, i64* %5, align 8
  %390 = load i64, i64* %6, align 8
  %391 = call i32 @R3(i64 %386, i64 %387, i64 %388, i64 %389, i64 %390, i32 58)
  %392 = load i64, i64* %6, align 8
  %393 = load i64, i64* %7, align 8
  %394 = load i64, i64* %8, align 8
  %395 = load i64, i64* %9, align 8
  %396 = load i64, i64* %5, align 8
  %397 = call i32 @R3(i64 %392, i64 %393, i64 %394, i64 %395, i64 %396, i32 59)
  %398 = load i64, i64* %5, align 8
  %399 = load i64, i64* %6, align 8
  %400 = load i64, i64* %7, align 8
  %401 = load i64, i64* %8, align 8
  %402 = load i64, i64* %9, align 8
  %403 = call i32 @R4(i64 %398, i64 %399, i64 %400, i64 %401, i64 %402, i32 60)
  %404 = load i64, i64* %9, align 8
  %405 = load i64, i64* %5, align 8
  %406 = load i64, i64* %6, align 8
  %407 = load i64, i64* %7, align 8
  %408 = load i64, i64* %8, align 8
  %409 = call i32 @R4(i64 %404, i64 %405, i64 %406, i64 %407, i64 %408, i32 61)
  %410 = load i64, i64* %8, align 8
  %411 = load i64, i64* %9, align 8
  %412 = load i64, i64* %5, align 8
  %413 = load i64, i64* %6, align 8
  %414 = load i64, i64* %7, align 8
  %415 = call i32 @R4(i64 %410, i64 %411, i64 %412, i64 %413, i64 %414, i32 62)
  %416 = load i64, i64* %7, align 8
  %417 = load i64, i64* %8, align 8
  %418 = load i64, i64* %9, align 8
  %419 = load i64, i64* %5, align 8
  %420 = load i64, i64* %6, align 8
  %421 = call i32 @R4(i64 %416, i64 %417, i64 %418, i64 %419, i64 %420, i32 63)
  %422 = load i64, i64* %6, align 8
  %423 = load i64, i64* %7, align 8
  %424 = load i64, i64* %8, align 8
  %425 = load i64, i64* %9, align 8
  %426 = load i64, i64* %5, align 8
  %427 = call i32 @R4(i64 %422, i64 %423, i64 %424, i64 %425, i64 %426, i32 64)
  %428 = load i64, i64* %5, align 8
  %429 = load i64, i64* %6, align 8
  %430 = load i64, i64* %7, align 8
  %431 = load i64, i64* %8, align 8
  %432 = load i64, i64* %9, align 8
  %433 = call i32 @R4(i64 %428, i64 %429, i64 %430, i64 %431, i64 %432, i32 65)
  %434 = load i64, i64* %9, align 8
  %435 = load i64, i64* %5, align 8
  %436 = load i64, i64* %6, align 8
  %437 = load i64, i64* %7, align 8
  %438 = load i64, i64* %8, align 8
  %439 = call i32 @R4(i64 %434, i64 %435, i64 %436, i64 %437, i64 %438, i32 66)
  %440 = load i64, i64* %8, align 8
  %441 = load i64, i64* %9, align 8
  %442 = load i64, i64* %5, align 8
  %443 = load i64, i64* %6, align 8
  %444 = load i64, i64* %7, align 8
  %445 = call i32 @R4(i64 %440, i64 %441, i64 %442, i64 %443, i64 %444, i32 67)
  %446 = load i64, i64* %7, align 8
  %447 = load i64, i64* %8, align 8
  %448 = load i64, i64* %9, align 8
  %449 = load i64, i64* %5, align 8
  %450 = load i64, i64* %6, align 8
  %451 = call i32 @R4(i64 %446, i64 %447, i64 %448, i64 %449, i64 %450, i32 68)
  %452 = load i64, i64* %6, align 8
  %453 = load i64, i64* %7, align 8
  %454 = load i64, i64* %8, align 8
  %455 = load i64, i64* %9, align 8
  %456 = load i64, i64* %5, align 8
  %457 = call i32 @R4(i64 %452, i64 %453, i64 %454, i64 %455, i64 %456, i32 69)
  %458 = load i64, i64* %5, align 8
  %459 = load i64, i64* %6, align 8
  %460 = load i64, i64* %7, align 8
  %461 = load i64, i64* %8, align 8
  %462 = load i64, i64* %9, align 8
  %463 = call i32 @R4(i64 %458, i64 %459, i64 %460, i64 %461, i64 %462, i32 70)
  %464 = load i64, i64* %9, align 8
  %465 = load i64, i64* %5, align 8
  %466 = load i64, i64* %6, align 8
  %467 = load i64, i64* %7, align 8
  %468 = load i64, i64* %8, align 8
  %469 = call i32 @R4(i64 %464, i64 %465, i64 %466, i64 %467, i64 %468, i32 71)
  %470 = load i64, i64* %8, align 8
  %471 = load i64, i64* %9, align 8
  %472 = load i64, i64* %5, align 8
  %473 = load i64, i64* %6, align 8
  %474 = load i64, i64* %7, align 8
  %475 = call i32 @R4(i64 %470, i64 %471, i64 %472, i64 %473, i64 %474, i32 72)
  %476 = load i64, i64* %7, align 8
  %477 = load i64, i64* %8, align 8
  %478 = load i64, i64* %9, align 8
  %479 = load i64, i64* %5, align 8
  %480 = load i64, i64* %6, align 8
  %481 = call i32 @R4(i64 %476, i64 %477, i64 %478, i64 %479, i64 %480, i32 73)
  %482 = load i64, i64* %6, align 8
  %483 = load i64, i64* %7, align 8
  %484 = load i64, i64* %8, align 8
  %485 = load i64, i64* %9, align 8
  %486 = load i64, i64* %5, align 8
  %487 = call i32 @R4(i64 %482, i64 %483, i64 %484, i64 %485, i64 %486, i32 74)
  %488 = load i64, i64* %5, align 8
  %489 = load i64, i64* %6, align 8
  %490 = load i64, i64* %7, align 8
  %491 = load i64, i64* %8, align 8
  %492 = load i64, i64* %9, align 8
  %493 = call i32 @R4(i64 %488, i64 %489, i64 %490, i64 %491, i64 %492, i32 75)
  %494 = load i64, i64* %9, align 8
  %495 = load i64, i64* %5, align 8
  %496 = load i64, i64* %6, align 8
  %497 = load i64, i64* %7, align 8
  %498 = load i64, i64* %8, align 8
  %499 = call i32 @R4(i64 %494, i64 %495, i64 %496, i64 %497, i64 %498, i32 76)
  %500 = load i64, i64* %8, align 8
  %501 = load i64, i64* %9, align 8
  %502 = load i64, i64* %5, align 8
  %503 = load i64, i64* %6, align 8
  %504 = load i64, i64* %7, align 8
  %505 = call i32 @R4(i64 %500, i64 %501, i64 %502, i64 %503, i64 %504, i32 77)
  %506 = load i64, i64* %7, align 8
  %507 = load i64, i64* %8, align 8
  %508 = load i64, i64* %9, align 8
  %509 = load i64, i64* %5, align 8
  %510 = load i64, i64* %6, align 8
  %511 = call i32 @R4(i64 %506, i64 %507, i64 %508, i64 %509, i64 %510, i32 78)
  %512 = load i64, i64* %6, align 8
  %513 = load i64, i64* %7, align 8
  %514 = load i64, i64* %8, align 8
  %515 = load i64, i64* %9, align 8
  %516 = load i64, i64* %5, align 8
  %517 = call i32 @R4(i64 %512, i64 %513, i64 %514, i64 %515, i64 %516, i32 79)
  %518 = load i64, i64* %5, align 8
  %519 = load i64*, i64** %3, align 8
  %520 = getelementptr inbounds i64, i64* %519, i64 0
  %521 = load i64, i64* %520, align 8
  %522 = add nsw i64 %521, %518
  store i64 %522, i64* %520, align 8
  %523 = load i64, i64* %6, align 8
  %524 = load i64*, i64** %3, align 8
  %525 = getelementptr inbounds i64, i64* %524, i64 1
  %526 = load i64, i64* %525, align 8
  %527 = add nsw i64 %526, %523
  store i64 %527, i64* %525, align 8
  %528 = load i64, i64* %7, align 8
  %529 = load i64*, i64** %3, align 8
  %530 = getelementptr inbounds i64, i64* %529, i64 2
  %531 = load i64, i64* %530, align 8
  %532 = add nsw i64 %531, %528
  store i64 %532, i64* %530, align 8
  %533 = load i64, i64* %8, align 8
  %534 = load i64*, i64** %3, align 8
  %535 = getelementptr inbounds i64, i64* %534, i64 3
  %536 = load i64, i64* %535, align 8
  %537 = add nsw i64 %536, %533
  store i64 %537, i64* %535, align 8
  %538 = load i64, i64* %9, align 8
  %539 = load i64*, i64** %3, align 8
  %540 = getelementptr inbounds i64, i64* %539, i64 4
  %541 = load i64, i64* %540, align 8
  %542 = add nsw i64 %541, %538
  store i64 %542, i64* %540, align 8
  store i64 0, i64* %9, align 8
  store i64 0, i64* %8, align 8
  store i64 0, i64* %7, align 8
  store i64 0, i64* %6, align 8
  store i64 0, i64* %5, align 8
  %543 = load i8*, i8** %10, align 8
  call void @llvm.stackrestore(i8* %543)
  ret void
}

; Function Attrs: nounwind
declare i8* @llvm.stacksave() #1

declare dso_local i32 @memcpy(i32*, i32*, i32) #2

declare dso_local i32 @R0(i64, i64, i64, i64, i64, i32) #2

declare dso_local i32 @R1(i64, i64, i64, i64, i64, i32) #2

declare dso_local i32 @R2(i64, i64, i64, i64, i64, i32) #2

declare dso_local i32 @R3(i64, i64, i64, i64, i64, i32) #2

declare dso_local i32 @R4(i64, i64, i64, i64, i64, i32) #2

; Function Attrs: nounwind
declare void @llvm.stackrestore(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
