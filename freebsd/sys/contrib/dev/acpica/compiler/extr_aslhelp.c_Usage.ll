; ModuleID = '/home/carl/AnghaBench/freebsd/sys/contrib/dev/acpica/compiler/extr_aslhelp.c_Usage.c'
source_filename = "/home/carl/AnghaBench/freebsd/sys/contrib/dev/acpica/compiler/extr_aslhelp.c_Usage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ASL_COMPILER_NAME = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [5 x i8] c"%s\0A\0A\00", align 1
@ASL_COMPLIANCE = common dso_local global i8* null, align 8
@.str.1 = private unnamed_addr constant [23 x i8] c"iasl [Options] [Files]\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"\0AGeneral:\0A\00", align 1
@.str.3 = private unnamed_addr constant [11 x i8] c"-@  <file>\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"Specify command file\00", align 1
@.str.5 = private unnamed_addr constant [10 x i8] c"-I  <dir>\00", align 1
@.str.6 = private unnamed_addr constant [37 x i8] c"Specify additional include directory\00", align 1
@.str.7 = private unnamed_addr constant [13 x i8] c"-p  <prefix>\00", align 1
@.str.8 = private unnamed_addr constant [50 x i8] c"Specify path/filename prefix for all output files\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"-v\00", align 1
@.str.10 = private unnamed_addr constant [25 x i8] c"Display compiler version\00", align 1
@.str.11 = private unnamed_addr constant [4 x i8] c"-vo\00", align 1
@.str.12 = private unnamed_addr constant [29 x i8] c"Enable optimization comments\00", align 1
@.str.13 = private unnamed_addr constant [4 x i8] c"-vs\00", align 1
@.str.14 = private unnamed_addr constant [15 x i8] c"Disable signon\00", align 1
@.str.15 = private unnamed_addr constant [8 x i8] c"\0AHelp:\0A\00", align 1
@.str.16 = private unnamed_addr constant [3 x i8] c"-h\00", align 1
@.str.17 = private unnamed_addr constant [13 x i8] c"This message\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"-hc\00", align 1
@.str.19 = private unnamed_addr constant [50 x i8] c"Display operators allowed in constant expressions\00", align 1
@.str.20 = private unnamed_addr constant [4 x i8] c"-hd\00", align 1
@.str.21 = private unnamed_addr constant [56 x i8] c"Info for obtaining and disassembling binary ACPI tables\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"-hf\00", align 1
@.str.23 = private unnamed_addr constant [44 x i8] c"Display help for output filename generation\00", align 1
@.str.24 = private unnamed_addr constant [4 x i8] c"-hr\00", align 1
@.str.25 = private unnamed_addr constant [35 x i8] c"Display ACPI reserved method names\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"-ht\00", align 1
@.str.27 = private unnamed_addr constant [45 x i8] c"Display currently supported ACPI table names\00", align 1
@.str.28 = private unnamed_addr constant [16 x i8] c"\0APreprocessor:\0A\00", align 1
@.str.29 = private unnamed_addr constant [12 x i8] c"-D <symbol>\00", align 1
@.str.30 = private unnamed_addr constant [35 x i8] c"Define symbol for preprocessor use\00", align 1
@.str.31 = private unnamed_addr constant [4 x i8] c"-li\00", align 1
@.str.32 = private unnamed_addr constant [38 x i8] c"Create preprocessed output file (*.i)\00", align 1
@.str.33 = private unnamed_addr constant [3 x i8] c"-P\00", align 1
@.str.34 = private unnamed_addr constant [58 x i8] c"Preprocess only and create preprocessor output file (*.i)\00", align 1
@.str.35 = private unnamed_addr constant [4 x i8] c"-Pn\00", align 1
@.str.36 = private unnamed_addr constant [21 x i8] c"Disable preprocessor\00", align 1
@.str.37 = private unnamed_addr constant [33 x i8] c"\0AErrors, Warnings, and Remarks:\0A\00", align 1
@.str.38 = private unnamed_addr constant [4 x i8] c"-va\00", align 1
@.str.39 = private unnamed_addr constant [36 x i8] c"Disable all errors/warnings/remarks\00", align 1
@.str.40 = private unnamed_addr constant [4 x i8] c"-ve\00", align 1
@.str.41 = private unnamed_addr constant [49 x i8] c"Report only errors (ignore warnings and remarks)\00", align 1
@.str.42 = private unnamed_addr constant [4 x i8] c"-vi\00", align 1
@.str.43 = private unnamed_addr constant [51 x i8] c"Less verbose errors and warnings for use with IDEs\00", align 1
@.str.44 = private unnamed_addr constant [4 x i8] c"-vr\00", align 1
@.str.45 = private unnamed_addr constant [16 x i8] c"Disable remarks\00", align 1
@.str.46 = private unnamed_addr constant [16 x i8] c"-vw <messageid>\00", align 1
@.str.47 = private unnamed_addr constant [41 x i8] c"Ignore specific error, warning or remark\00", align 1
@.str.48 = private unnamed_addr constant [16 x i8] c"-vx <messageid>\00", align 1
@.str.49 = private unnamed_addr constant [44 x i8] c"Expect a specific warning, remark, or error\00", align 1
@.str.50 = private unnamed_addr constant [11 x i8] c"-w <1|2|3>\00", align 1
@.str.51 = private unnamed_addr constant [28 x i8] c"Set warning reporting level\00", align 1
@.str.52 = private unnamed_addr constant [4 x i8] c"-we\00", align 1
@.str.53 = private unnamed_addr constant [26 x i8] c"Report warnings as errors\00", align 1
@.str.54 = private unnamed_addr constant [16 x i8] c"-ww <messageid>\00", align 1
@.str.55 = private unnamed_addr constant [43 x i8] c"Report specific warning or remark as error\00", align 1
@.str.56 = private unnamed_addr constant [35 x i8] c"\0AAML Bytecode Generation (*.aml):\0A\00", align 1
@.str.57 = private unnamed_addr constant [4 x i8] c"-oa\00", align 1
@.str.58 = private unnamed_addr constant [47 x i8] c"Disable all optimizations (compatibility mode)\00", align 1
@.str.59 = private unnamed_addr constant [4 x i8] c"-of\00", align 1
@.str.60 = private unnamed_addr constant [25 x i8] c"Disable constant folding\00", align 1
@.str.61 = private unnamed_addr constant [4 x i8] c"-oi\00", align 1
@.str.62 = private unnamed_addr constant [46 x i8] c"Disable integer optimization to Zero/One/Ones\00", align 1
@.str.63 = private unnamed_addr constant [4 x i8] c"-on\00", align 1
@.str.64 = private unnamed_addr constant [44 x i8] c"Disable named reference string optimization\00", align 1
@.str.65 = private unnamed_addr constant [4 x i8] c"-ot\00", align 1
@.str.66 = private unnamed_addr constant [21 x i8] c"Disable typechecking\00", align 1
@.str.67 = private unnamed_addr constant [4 x i8] c"-cr\00", align 1
@.str.68 = private unnamed_addr constant [43 x i8] c"Disable Resource Descriptor error checking\00", align 1
@.str.69 = private unnamed_addr constant [4 x i8] c"-in\00", align 1
@.str.70 = private unnamed_addr constant [22 x i8] c"Ignore NoOp operators\00", align 1
@.str.71 = private unnamed_addr constant [14 x i8] c"-r <revision>\00", align 1
@.str.72 = private unnamed_addr constant [39 x i8] c"Override table header Revision (1-255)\00", align 1
@.str.73 = private unnamed_addr constant [12 x i8] c"\0AListings:\0A\00", align 1
@.str.74 = private unnamed_addr constant [3 x i8] c"-l\00", align 1
@.str.75 = private unnamed_addr constant [55 x i8] c"Create mixed listing file (ASL source and AML) (*.lst)\00", align 1
@.str.76 = private unnamed_addr constant [4 x i8] c"-lm\00", align 1
@.str.77 = private unnamed_addr constant [41 x i8] c"Create hardware summary map file (*.map)\00", align 1
@.str.78 = private unnamed_addr constant [4 x i8] c"-ln\00", align 1
@.str.79 = private unnamed_addr constant [30 x i8] c"Create namespace file (*.nsp)\00", align 1
@.str.80 = private unnamed_addr constant [4 x i8] c"-ls\00", align 1
@.str.81 = private unnamed_addr constant [56 x i8] c"Create combined source file (expanded includes) (*.src)\00", align 1
@.str.82 = private unnamed_addr constant [4 x i8] c"-lx\00", align 1
@.str.83 = private unnamed_addr constant [36 x i8] c"Create cross-reference file (*.xrf)\00", align 1
@.str.84 = private unnamed_addr constant [36 x i8] c"\0AFirmware Support - C Text Output:\0A\00", align 1
@.str.85 = private unnamed_addr constant [4 x i8] c"-tc\00", align 1
@.str.86 = private unnamed_addr constant [34 x i8] c"Create hex AML table in C (*.hex)\00", align 1
@.str.87 = private unnamed_addr constant [4 x i8] c"-sc\00", align 1
@.str.88 = private unnamed_addr constant [39 x i8] c"Create named hex AML arrays in C (*.c)\00", align 1
@.str.89 = private unnamed_addr constant [4 x i8] c"-ic\00", align 1
@.str.90 = private unnamed_addr constant [47 x i8] c"Create include file in C for -sc symbols (*.h)\00", align 1
@.str.91 = private unnamed_addr constant [4 x i8] c"-so\00", align 1
@.str.92 = private unnamed_addr constant [52 x i8] c"Create namespace AML offset table in C (*.offset.h)\00", align 1
@.str.93 = private unnamed_addr constant [44 x i8] c"\0AFirmware Support - Assembler Text Output:\0A\00", align 1
@.str.94 = private unnamed_addr constant [4 x i8] c"-ta\00", align 1
@.str.95 = private unnamed_addr constant [42 x i8] c"Create hex AML table in assembler (*.hex)\00", align 1
@.str.96 = private unnamed_addr constant [4 x i8] c"-sa\00", align 1
@.str.97 = private unnamed_addr constant [49 x i8] c"Create named hex AML arrays in assembler (*.asm)\00", align 1
@.str.98 = private unnamed_addr constant [4 x i8] c"-ia\00", align 1
@.str.99 = private unnamed_addr constant [57 x i8] c"Create include file in assembler for -sa symbols (*.inc)\00", align 1
@.str.100 = private unnamed_addr constant [38 x i8] c"\0AFirmware Support - ASL Text Output:\0A\00", align 1
@.str.101 = private unnamed_addr constant [4 x i8] c"-ts\00", align 1
@.str.102 = private unnamed_addr constant [52 x i8] c"Create hex AML table in ASL (Buffer object) (*.hex)\00", align 1
@.str.103 = private unnamed_addr constant [32 x i8] c"\0ALegacy-ASL to ASL+ Converter:\0A\00", align 1
@.str.104 = private unnamed_addr constant [11 x i8] c"-ca <file>\00", align 1
@.str.105 = private unnamed_addr constant [48 x i8] c"Convert legacy-ASL source file to new ASL+ file\00", align 1
@.str.106 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@.str.107 = private unnamed_addr constant [54 x i8] c"  (Original comments are passed through to ASL+ file)\00", align 1
@.str.108 = private unnamed_addr constant [23 x i8] c"\0AData Table Compiler:\0A\00", align 1
@.str.109 = private unnamed_addr constant [4 x i8] c"-tp\00", align 1
@.str.110 = private unnamed_addr constant [41 x i8] c"Compile tables with flex/bison prototype\00", align 1
@.str.111 = private unnamed_addr constant [3 x i8] c"-G\00", align 1
@.str.112 = private unnamed_addr constant [53 x i8] c"Compile custom table that contains generic operators\00", align 1
@.str.113 = private unnamed_addr constant [18 x i8] c"-T <sig list>|ALL\00", align 1
@.str.114 = private unnamed_addr constant [41 x i8] c"Create ACPI table template/example files\00", align 1
@.str.115 = private unnamed_addr constant [11 x i8] c"-T <count>\00", align 1
@.str.116 = private unnamed_addr constant [41 x i8] c"Emit DSDT and <count> SSDTs to same file\00", align 1
@.str.117 = private unnamed_addr constant [4 x i8] c"-vt\00", align 1
@.str.118 = private unnamed_addr constant [49 x i8] c"Create verbose template files (full disassembly)\00", align 1
@.str.119 = private unnamed_addr constant [20 x i8] c"\0AAML Disassembler:\0A\00", align 1
@.str.120 = private unnamed_addr constant [16 x i8] c"-d  <f1 f2 ...>\00", align 1
@.str.121 = private unnamed_addr constant [57 x i8] c"Disassemble or decode binary ACPI tables to file (*.dsl)\00", align 1
@.str.122 = private unnamed_addr constant [50 x i8] c"  (Optional, file type is automatically detected)\00", align 1
@.str.123 = private unnamed_addr constant [16 x i8] c"-da <f1 f2 ...>\00", align 1
@.str.124 = private unnamed_addr constant [50 x i8] c"Disassemble multiple tables from single namespace\00", align 1
@.str.125 = private unnamed_addr constant [4 x i8] c"-db\00", align 1
@.str.126 = private unnamed_addr constant [47 x i8] c"Do not translate Buffers to Resource Templates\00", align 1
@.str.127 = private unnamed_addr constant [16 x i8] c"-dc <f1 f2 ...>\00", align 1
@.str.128 = private unnamed_addr constant [43 x i8] c"Disassemble AML and immediately compile it\00", align 1
@.str.129 = private unnamed_addr constant [53 x i8] c"  (Obtain DSDT from current system if no input file)\00", align 1
@.str.130 = private unnamed_addr constant [4 x i8] c"-df\00", align 1
@.str.131 = private unnamed_addr constant [54 x i8] c"Force disassembler to assume table contains valid AML\00", align 1
@.str.132 = private unnamed_addr constant [4 x i8] c"-dl\00", align 1
@.str.133 = private unnamed_addr constant [49 x i8] c"Emit legacy ASL code only (no C-style operators)\00", align 1
@.str.134 = private unnamed_addr constant [16 x i8] c"-e  <f1 f2 ...>\00", align 1
@.str.135 = private unnamed_addr constant [53 x i8] c"Include ACPI table(s) for external symbol resolution\00", align 1
@.str.136 = private unnamed_addr constant [11 x i8] c"-fe <file>\00", align 1
@.str.137 = private unnamed_addr constant [41 x i8] c"Specify external symbol declaration file\00", align 1
@.str.138 = private unnamed_addr constant [20 x i8] c"Ignore NoOp opcodes\00", align 1
@.str.139 = private unnamed_addr constant [38 x i8] c"Disassemble to mixed ASL and AML code\00", align 1
@.str.140 = private unnamed_addr constant [56 x i8] c"Dump binary table data in hex format within output file\00", align 1
@.str.141 = private unnamed_addr constant [17 x i8] c"\0ADebug Options:\0A\00", align 1
@.str.142 = private unnamed_addr constant [4 x i8] c"-bc\00", align 1
@.str.143 = private unnamed_addr constant [36 x i8] c"Create converter debug file (*.cdb)\00", align 1
@.str.144 = private unnamed_addr constant [4 x i8] c"-bf\00", align 1
@.str.145 = private unnamed_addr constant [40 x i8] c"Create debug file (full output) (*.txt)\00", align 1
@.str.146 = private unnamed_addr constant [4 x i8] c"-bs\00", align 1
@.str.147 = private unnamed_addr constant [44 x i8] c"Create debug file (parse tree only) (*.txt)\00", align 1
@.str.148 = private unnamed_addr constant [12 x i8] c"-bp <depth>\00", align 1
@.str.149 = private unnamed_addr constant [21 x i8] c"Prune ASL parse tree\00", align 1
@.str.150 = private unnamed_addr constant [11 x i8] c"-bt <type>\00", align 1
@.str.151 = private unnamed_addr constant [45 x i8] c"Object type to be pruned from the parse tree\00", align 1
@.str.152 = private unnamed_addr constant [3 x i8] c"-f\00", align 1
@.str.153 = private unnamed_addr constant [52 x i8] c"Ignore errors, force creation of AML output file(s)\00", align 1
@.str.154 = private unnamed_addr constant [10 x i8] c"-m <size>\00", align 1
@.str.155 = private unnamed_addr constant [42 x i8] c"Set internal line buffer size (in Kbytes)\00", align 1
@.str.156 = private unnamed_addr constant [3 x i8] c"-n\00", align 1
@.str.157 = private unnamed_addr constant [33 x i8] c"Parse only, no output generation\00", align 1
@.str.158 = private unnamed_addr constant [4 x i8] c"-oc\00", align 1
@.str.159 = private unnamed_addr constant [37 x i8] c"Display compile times and statistics\00", align 1
@.str.160 = private unnamed_addr constant [11 x i8] c"-x <level>\00", align 1
@.str.161 = private unnamed_addr constant [33 x i8] c"Set debug level for trace output\00", align 1
@.str.162 = private unnamed_addr constant [3 x i8] c"-z\00", align 1
@.str.163 = private unnamed_addr constant [45 x i8] c"Do not insert new compiler ID for DataTables\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @Usage() #0 {
  %1 = load i32, i32* @ASL_COMPILER_NAME, align 4
  %2 = call i8* @ACPI_COMMON_SIGNON(i32 %1)
  %3 = call i32 (i8*, ...) @printf(i8* %2)
  %4 = load i8*, i8** @ASL_COMPLIANCE, align 8
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* %4)
  %6 = call i32 @ACPI_USAGE_HEADER(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.1, i64 0, i64 0))
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %8 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.3, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0))
  %9 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.5, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.6, i64 0, i64 0))
  %10 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.7, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.8, i64 0, i64 0))
  %11 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.10, i64 0, i64 0))
  %12 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.12, i64 0, i64 0))
  %13 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.14, i64 0, i64 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.15, i64 0, i64 0))
  %15 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.16, i64 0, i64 0), i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.17, i64 0, i64 0))
  %16 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.19, i64 0, i64 0))
  %17 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.20, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.21, i64 0, i64 0))
  %18 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.23, i64 0, i64 0))
  %19 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.24, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.25, i64 0, i64 0))
  %20 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.27, i64 0, i64 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.28, i64 0, i64 0))
  %22 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.29, i64 0, i64 0), i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.30, i64 0, i64 0))
  %23 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.31, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.32, i64 0, i64 0))
  %24 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33, i64 0, i64 0), i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.34, i64 0, i64 0))
  %25 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.36, i64 0, i64 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.37, i64 0, i64 0))
  %27 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.38, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.39, i64 0, i64 0))
  %28 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.40, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.41, i64 0, i64 0))
  %29 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.42, i64 0, i64 0), i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.43, i64 0, i64 0))
  %30 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.44, i64 0, i64 0), i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.45, i64 0, i64 0))
  %31 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.46, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.47, i64 0, i64 0))
  %32 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.48, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.49, i64 0, i64 0))
  %33 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.51, i64 0, i64 0))
  %34 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52, i64 0, i64 0), i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.53, i64 0, i64 0))
  %35 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.54, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.55, i64 0, i64 0))
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.56, i64 0, i64 0))
  %37 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.57, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.58, i64 0, i64 0))
  %38 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.59, i64 0, i64 0), i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.60, i64 0, i64 0))
  %39 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.61, i64 0, i64 0), i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.62, i64 0, i64 0))
  %40 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.63, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.64, i64 0, i64 0))
  %41 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.65, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.66, i64 0, i64 0))
  %42 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.67, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.68, i64 0, i64 0))
  %43 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.70, i64 0, i64 0))
  %44 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.71, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.72, i64 0, i64 0))
  %45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.73, i64 0, i64 0))
  %46 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.75, i64 0, i64 0))
  %47 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.76, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.77, i64 0, i64 0))
  %48 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.78, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.79, i64 0, i64 0))
  %49 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.80, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.81, i64 0, i64 0))
  %50 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.82, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.83, i64 0, i64 0))
  %51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.84, i64 0, i64 0))
  %52 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.85, i64 0, i64 0), i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.86, i64 0, i64 0))
  %53 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.87, i64 0, i64 0), i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.88, i64 0, i64 0))
  %54 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.89, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.90, i64 0, i64 0))
  %55 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.91, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.92, i64 0, i64 0))
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.93, i64 0, i64 0))
  %57 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.94, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.95, i64 0, i64 0))
  %58 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.97, i64 0, i64 0))
  %59 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.98, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.99, i64 0, i64 0))
  %60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.100, i64 0, i64 0))
  %61 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.101, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.102, i64 0, i64 0))
  %62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.103, i64 0, i64 0))
  %63 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.104, i64 0, i64 0), i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.105, i64 0, i64 0))
  %64 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.107, i64 0, i64 0))
  %65 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.108, i64 0, i64 0))
  %66 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.109, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.110, i64 0, i64 0))
  %67 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.111, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.112, i64 0, i64 0))
  %68 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.113, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.114, i64 0, i64 0))
  %69 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.115, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.116, i64 0, i64 0))
  %70 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.117, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.118, i64 0, i64 0))
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.119, i64 0, i64 0))
  %72 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.120, i64 0, i64 0), i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.121, i64 0, i64 0))
  %73 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.122, i64 0, i64 0))
  %74 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.123, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.124, i64 0, i64 0))
  %75 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.125, i64 0, i64 0), i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.126, i64 0, i64 0))
  %76 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.127, i64 0, i64 0), i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.128, i64 0, i64 0))
  %77 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.106, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.129, i64 0, i64 0))
  %78 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.130, i64 0, i64 0), i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.131, i64 0, i64 0))
  %79 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.132, i64 0, i64 0), i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.133, i64 0, i64 0))
  %80 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.134, i64 0, i64 0), i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.135, i64 0, i64 0))
  %81 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.136, i64 0, i64 0), i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.137, i64 0, i64 0))
  %82 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.69, i64 0, i64 0), i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.138, i64 0, i64 0))
  %83 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.74, i64 0, i64 0), i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.139, i64 0, i64 0))
  %84 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.117, i64 0, i64 0), i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.140, i64 0, i64 0))
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.141, i64 0, i64 0))
  %86 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.142, i64 0, i64 0), i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.143, i64 0, i64 0))
  %87 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.144, i64 0, i64 0), i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.145, i64 0, i64 0))
  %88 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.146, i64 0, i64 0), i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.147, i64 0, i64 0))
  %89 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.148, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.149, i64 0, i64 0))
  %90 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.150, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.151, i64 0, i64 0))
  %91 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.152, i64 0, i64 0), i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.153, i64 0, i64 0))
  %92 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.154, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.155, i64 0, i64 0))
  %93 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.156, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.157, i64 0, i64 0))
  %94 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.158, i64 0, i64 0), i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.159, i64 0, i64 0))
  %95 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.160, i64 0, i64 0), i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.161, i64 0, i64 0))
  %96 = call i32 @ACPI_OPTION(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.162, i64 0, i64 0), i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.163, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i8* @ACPI_COMMON_SIGNON(i32) #1

declare dso_local i32 @ACPI_USAGE_HEADER(i8*) #1

declare dso_local i32 @ACPI_OPTION(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
