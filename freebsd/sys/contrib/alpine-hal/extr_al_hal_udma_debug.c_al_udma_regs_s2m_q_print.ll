; ModuleID = '/home/carl/AnghaBench/freebsd/sys/contrib/alpine-hal/extr_al_hal_udma_debug.c_al_udma_regs_s2m_q_print.c'
source_filename = "/home/carl/AnghaBench/freebsd/sys/contrib/alpine-hal/extr_al_hal_udma_debug.c_al_udma_regs_s2m_q_print.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.al_udma = type { %struct.TYPE_6__* }
%struct.TYPE_6__ = type { %struct.TYPE_5__ }
%struct.TYPE_5__ = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }

@.str = private unnamed_addr constant [24 x i8] c"S2M Q[%d] status regs:\0A\00", align 1
@.str.1 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.2 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@s2m = common dso_local global i32 0, align 4
@sel_pref_fifo_status = common dso_local global i32 0, align 4
@sel_comp_fifo_status = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [17 x i8] c"S2M Q[%d] regs:\0A\00", align 1
@s2m_q = common dso_local global i32* null, align 8
@cfg = common dso_local global i32 0, align 4
@status = common dso_local global i32 0, align 4
@rdrbp_low = common dso_local global i32 0, align 4
@rdrbp_high = common dso_local global i32 0, align 4
@rdrl = common dso_local global i32 0, align 4
@rdrhp = common dso_local global i32 0, align 4
@rdrtp = common dso_local global i32 0, align 4
@rdcp = common dso_local global i32 0, align 4
@rcrbp_low = common dso_local global i32 0, align 4
@rcrbp_high = common dso_local global i32 0, align 4
@rcrhp = common dso_local global i32 0, align 4
@rcrhp_internal = common dso_local global i32 0, align 4
@comp_cfg = common dso_local global i32 0, align 4
@comp_cfg_2 = common dso_local global i32 0, align 4
@pkt_cfg = common dso_local global i32 0, align 4
@qos_cfg = common dso_local global i32 0, align 4
@q_rx_pkt = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.al_udma*, i64)* @al_udma_regs_s2m_q_print to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @al_udma_regs_s2m_q_print(%struct.al_udma* %0, i64 %1) #0 {
  %3 = alloca %struct.al_udma*, align 8
  %4 = alloca i64, align 8
  store %struct.al_udma* %0, %struct.al_udma** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load i64, i64* %4, align 8
  %6 = call i32 @al_dbg(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i64 %5)
  %7 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %8 = getelementptr inbounds %struct.al_udma, %struct.al_udma* %7, i32 0, i32 0
  %9 = load %struct.TYPE_6__*, %struct.TYPE_6__** %8, align 8
  %10 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %9, i32 0, i32 0
  %11 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 0
  %12 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %11, i32 0, i32 0
  %13 = load i64, i64* %4, align 8
  %14 = call i32 @al_reg_write32(i32* %12, i64 %13)
  %15 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %16 = load i32, i32* @s2m, align 4
  %17 = load i32, i32* @s2m, align 4
  %18 = load i32, i32* @sel_pref_fifo_status, align 4
  %19 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %15, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %16, i32 %17, i32 %18)
  %20 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %21 = load i32, i32* @s2m, align 4
  %22 = load i32, i32* @s2m, align 4
  %23 = load i32, i32* @sel_comp_fifo_status, align 4
  %24 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %20, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %21, i32 %22, i32 %23)
  %25 = load i64, i64* %4, align 8
  %26 = call i32 @al_dbg(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i64 %25)
  %27 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %28 = load i32, i32* @s2m, align 4
  %29 = load i32*, i32** @s2m_q, align 8
  %30 = load i64, i64* %4, align 8
  %31 = getelementptr inbounds i32, i32* %29, i64 %30
  %32 = load i32, i32* %31, align 4
  %33 = load i32, i32* @cfg, align 4
  %34 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %27, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %28, i32 %32, i32 %33)
  %35 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %36 = load i32, i32* @s2m, align 4
  %37 = load i32*, i32** @s2m_q, align 8
  %38 = load i64, i64* %4, align 8
  %39 = getelementptr inbounds i32, i32* %37, i64 %38
  %40 = load i32, i32* %39, align 4
  %41 = load i32, i32* @status, align 4
  %42 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %35, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %36, i32 %40, i32 %41)
  %43 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %44 = load i32, i32* @s2m, align 4
  %45 = load i32*, i32** @s2m_q, align 8
  %46 = load i64, i64* %4, align 8
  %47 = getelementptr inbounds i32, i32* %45, i64 %46
  %48 = load i32, i32* %47, align 4
  %49 = load i32, i32* @rdrbp_low, align 4
  %50 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %43, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %44, i32 %48, i32 %49)
  %51 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %52 = load i32, i32* @s2m, align 4
  %53 = load i32*, i32** @s2m_q, align 8
  %54 = load i64, i64* %4, align 8
  %55 = getelementptr inbounds i32, i32* %53, i64 %54
  %56 = load i32, i32* %55, align 4
  %57 = load i32, i32* @rdrbp_high, align 4
  %58 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %52, i32 %56, i32 %57)
  %59 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %60 = load i32, i32* @s2m, align 4
  %61 = load i32*, i32** @s2m_q, align 8
  %62 = load i64, i64* %4, align 8
  %63 = getelementptr inbounds i32, i32* %61, i64 %62
  %64 = load i32, i32* %63, align 4
  %65 = load i32, i32* @rdrl, align 4
  %66 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %59, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %60, i32 %64, i32 %65)
  %67 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %68 = load i32, i32* @s2m, align 4
  %69 = load i32*, i32** @s2m_q, align 8
  %70 = load i64, i64* %4, align 8
  %71 = getelementptr inbounds i32, i32* %69, i64 %70
  %72 = load i32, i32* %71, align 4
  %73 = load i32, i32* @rdrhp, align 4
  %74 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %67, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %68, i32 %72, i32 %73)
  %75 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %76 = load i32, i32* @s2m, align 4
  %77 = load i32*, i32** @s2m_q, align 8
  %78 = load i64, i64* %4, align 8
  %79 = getelementptr inbounds i32, i32* %77, i64 %78
  %80 = load i32, i32* %79, align 4
  %81 = load i32, i32* @rdrtp, align 4
  %82 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %75, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %76, i32 %80, i32 %81)
  %83 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %84 = load i32, i32* @s2m, align 4
  %85 = load i32*, i32** @s2m_q, align 8
  %86 = load i64, i64* %4, align 8
  %87 = getelementptr inbounds i32, i32* %85, i64 %86
  %88 = load i32, i32* %87, align 4
  %89 = load i32, i32* @rdcp, align 4
  %90 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %83, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %84, i32 %88, i32 %89)
  %91 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %92 = load i32, i32* @s2m, align 4
  %93 = load i32*, i32** @s2m_q, align 8
  %94 = load i64, i64* %4, align 8
  %95 = getelementptr inbounds i32, i32* %93, i64 %94
  %96 = load i32, i32* %95, align 4
  %97 = load i32, i32* @rcrbp_low, align 4
  %98 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %91, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %92, i32 %96, i32 %97)
  %99 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %100 = load i32, i32* @s2m, align 4
  %101 = load i32*, i32** @s2m_q, align 8
  %102 = load i64, i64* %4, align 8
  %103 = getelementptr inbounds i32, i32* %101, i64 %102
  %104 = load i32, i32* %103, align 4
  %105 = load i32, i32* @rcrbp_high, align 4
  %106 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %99, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %100, i32 %104, i32 %105)
  %107 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %108 = load i32, i32* @s2m, align 4
  %109 = load i32*, i32** @s2m_q, align 8
  %110 = load i64, i64* %4, align 8
  %111 = getelementptr inbounds i32, i32* %109, i64 %110
  %112 = load i32, i32* %111, align 4
  %113 = load i32, i32* @rcrhp, align 4
  %114 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %107, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %108, i32 %112, i32 %113)
  %115 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %116 = load i32, i32* @s2m, align 4
  %117 = load i32*, i32** @s2m_q, align 8
  %118 = load i64, i64* %4, align 8
  %119 = getelementptr inbounds i32, i32* %117, i64 %118
  %120 = load i32, i32* %119, align 4
  %121 = load i32, i32* @rcrhp_internal, align 4
  %122 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %116, i32 %120, i32 %121)
  %123 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %124 = load i32, i32* @s2m, align 4
  %125 = load i32*, i32** @s2m_q, align 8
  %126 = load i64, i64* %4, align 8
  %127 = getelementptr inbounds i32, i32* %125, i64 %126
  %128 = load i32, i32* %127, align 4
  %129 = load i32, i32* @comp_cfg, align 4
  %130 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %123, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %124, i32 %128, i32 %129)
  %131 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %132 = load i32, i32* @s2m, align 4
  %133 = load i32*, i32** @s2m_q, align 8
  %134 = load i64, i64* %4, align 8
  %135 = getelementptr inbounds i32, i32* %133, i64 %134
  %136 = load i32, i32* %135, align 4
  %137 = load i32, i32* @comp_cfg_2, align 4
  %138 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %131, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %132, i32 %136, i32 %137)
  %139 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %140 = load i32, i32* @s2m, align 4
  %141 = load i32*, i32** @s2m_q, align 8
  %142 = load i64, i64* %4, align 8
  %143 = getelementptr inbounds i32, i32* %141, i64 %142
  %144 = load i32, i32* %143, align 4
  %145 = load i32, i32* @pkt_cfg, align 4
  %146 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %139, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %140, i32 %144, i32 %145)
  %147 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %148 = load i32, i32* @s2m, align 4
  %149 = load i32*, i32** @s2m_q, align 8
  %150 = load i64, i64* %4, align 8
  %151 = getelementptr inbounds i32, i32* %149, i64 %150
  %152 = load i32, i32* %151, align 4
  %153 = load i32, i32* @qos_cfg, align 4
  %154 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %147, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %148, i32 %152, i32 %153)
  %155 = load %struct.al_udma*, %struct.al_udma** %3, align 8
  %156 = load i32, i32* @s2m, align 4
  %157 = load i32*, i32** @s2m_q, align 8
  %158 = load i64, i64* %4, align 8
  %159 = getelementptr inbounds i32, i32* %157, i64 %158
  %160 = load i32, i32* %159, align 4
  %161 = load i32, i32* @q_rx_pkt, align 4
  %162 = call i32 @AL_UDMA_PRINT_REG(%struct.al_udma* %155, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.1, i64 0, i64 0), i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i32 %156, i32 %160, i32 %161)
  ret void
}

declare dso_local i32 @al_dbg(i8*, i64) #1

declare dso_local i32 @al_reg_write32(i32*, i64) #1

declare dso_local i32 @AL_UDMA_PRINT_REG(%struct.al_udma*, i8*, i8*, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
