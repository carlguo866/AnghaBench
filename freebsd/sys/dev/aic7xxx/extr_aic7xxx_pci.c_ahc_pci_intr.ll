; ModuleID = '/home/carl/AnghaBench/freebsd/sys/dev/aic7xxx/extr_aic7xxx_pci.c_ahc_pci_intr.c'
source_filename = "/home/carl/AnghaBench/freebsd/sys/dev/aic7xxx/extr_aic7xxx_pci.c_ahc_pci_intr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.ahc_softc = type { i32, i64, i32, i32 }

@ERROR = common dso_local global i32 0, align 4
@PCIERRSTAT = common dso_local global i32 0, align 4
@PCIR_STATUS = common dso_local global i64 0, align 8
@DPE = common dso_local global i32 0, align 4
@AHC_DISABLE_PCI_PERR = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [43 x i8] c"%s: PCI error Interrupt at seqaddr = 0x%x\0A\00", align 1
@SEQADDR0 = common dso_local global i32 0, align 4
@SEQADDR1 = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [67 x i8] c"%s: Data Parity Error Detected during address or write data phase\0A\00", align 1
@SSE = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [34 x i8] c"%s: Signal System Error Detected\0A\00", align 1
@RMA = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [29 x i8] c"%s: Received a Master Abort\0A\00", align 1
@RTA = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [29 x i8] c"%s: Received a Target Abort\0A\00", align 1
@STA = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [29 x i8] c"%s: Signaled a Target Abort\0A\00", align 1
@DPR = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [51 x i8] c"%s: Data Parity Error has been reported via PERR#\0A\00", align 1
@.str.7 = private unnamed_addr constant [54 x i8] c"%s: Latched PCIERR interrupt with no status bits set\0A\00", align 1
@CLRINT = common dso_local global i32 0, align 4
@CLRPARERR = common dso_local global i32 0, align 4
@AHC_PCI_TARGET_PERR_THRESH = common dso_local global i64 0, align 8
@.str.8 = private unnamed_addr constant [293 x i8] c"%s: WARNING WARNING WARNING WARNING\0A%s: Too many PCI parity errors observed as a target.\0A%s: Some device on this PCI bus is generating bad parity.\0A%s: This is an error *observed by*, not *generated by*, %s.\0A%s: PCI parity error checking has been disabled.\0A%s: WARNING WARNING WARNING WARNING\0A\00", align 1
@FAILDIS = common dso_local global i32 0, align 4
@SEQCTL = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.ahc_softc*)* @ahc_pci_intr to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ahc_pci_intr(%struct.ahc_softc* %0) #0 {
  %2 = alloca %struct.ahc_softc*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store %struct.ahc_softc* %0, %struct.ahc_softc** %2, align 8
  %5 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %6 = load i32, i32* @ERROR, align 4
  %7 = call i32 @ahc_inb(%struct.ahc_softc* %5, i32 %6)
  store i32 %7, i32* %3, align 4
  %8 = load i32, i32* %3, align 4
  %9 = load i32, i32* @PCIERRSTAT, align 4
  %10 = and i32 %8, %9
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

12:                                               ; preds = %1
  br label %188

13:                                               ; preds = %1
  %14 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %15 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %14, i32 0, i32 3
  %16 = load i32, i32* %15, align 4
  %17 = load i64, i64* @PCIR_STATUS, align 8
  %18 = add nsw i64 %17, 1
  %19 = call i32 @aic_pci_read_config(i32 %16, i64 %18, i32 1)
  store i32 %19, i32* %4, align 4
  %20 = load i32, i32* %4, align 4
  %21 = load i32, i32* @DPE, align 4
  %22 = xor i32 %21, -1
  %23 = and i32 %20, %22
  %24 = icmp ne i32 %23, 0
  br i1 %24, label %32, label %25

25:                                               ; preds = %13
  %26 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %27 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %26, i32 0, i32 0
  %28 = load i32, i32* %27, align 8
  %29 = load i32, i32* @AHC_DISABLE_PCI_PERR, align 4
  %30 = and i32 %28, %29
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %32, label %44

32:                                               ; preds = %25, %13
  %33 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %34 = call i8* @ahc_name(%struct.ahc_softc* %33)
  %35 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %36 = load i32, i32* @SEQADDR0, align 4
  %37 = call i32 @ahc_inb(%struct.ahc_softc* %35, i32 %36)
  %38 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %39 = load i32, i32* @SEQADDR1, align 4
  %40 = call i32 @ahc_inb(%struct.ahc_softc* %38, i32 %39)
  %41 = shl i32 %40, 8
  %42 = or i32 %37, %41
  %43 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i64 0, i64 0), i8* %34, i32 %42)
  br label %44

44:                                               ; preds = %32, %25
  %45 = load i32, i32* %4, align 4
  %46 = load i32, i32* @DPE, align 4
  %47 = and i32 %45, %46
  %48 = icmp ne i32 %47, 0
  br i1 %48, label %49, label %64

49:                                               ; preds = %44
  %50 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %51 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %50, i32 0, i32 0
  %52 = load i32, i32* %51, align 8
  %53 = load i32, i32* @AHC_DISABLE_PCI_PERR, align 4
  %54 = and i32 %52, %53
  %55 = icmp eq i32 %54, 0
  br i1 %55, label %56, label %64

56:                                               ; preds = %49
  %57 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %58 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %57, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = add nsw i64 %59, 1
  store i64 %60, i64* %58, align 8
  %61 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %62 = call i8* @ahc_name(%struct.ahc_softc* %61)
  %63 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str.1, i64 0, i64 0), i8* %62)
  br label %64

64:                                               ; preds = %56, %49, %44
  %65 = load i32, i32* %4, align 4
  %66 = load i32, i32* @SSE, align 4
  %67 = and i32 %65, %66
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %69, label %73

69:                                               ; preds = %64
  %70 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %71 = call i8* @ahc_name(%struct.ahc_softc* %70)
  %72 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0), i8* %71)
  br label %73

73:                                               ; preds = %69, %64
  %74 = load i32, i32* %4, align 4
  %75 = load i32, i32* @RMA, align 4
  %76 = and i32 %74, %75
  %77 = icmp ne i32 %76, 0
  br i1 %77, label %78, label %82

78:                                               ; preds = %73
  %79 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %80 = call i8* @ahc_name(%struct.ahc_softc* %79)
  %81 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.3, i64 0, i64 0), i8* %80)
  br label %82

82:                                               ; preds = %78, %73
  %83 = load i32, i32* %4, align 4
  %84 = load i32, i32* @RTA, align 4
  %85 = and i32 %83, %84
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %87, label %91

87:                                               ; preds = %82
  %88 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %89 = call i8* @ahc_name(%struct.ahc_softc* %88)
  %90 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.4, i64 0, i64 0), i8* %89)
  br label %91

91:                                               ; preds = %87, %82
  %92 = load i32, i32* %4, align 4
  %93 = load i32, i32* @STA, align 4
  %94 = and i32 %92, %93
  %95 = icmp ne i32 %94, 0
  br i1 %95, label %96, label %100

96:                                               ; preds = %91
  %97 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %98 = call i8* @ahc_name(%struct.ahc_softc* %97)
  %99 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i8* %98)
  br label %100

100:                                              ; preds = %96, %91
  %101 = load i32, i32* %4, align 4
  %102 = load i32, i32* @DPR, align 4
  %103 = and i32 %101, %102
  %104 = icmp ne i32 %103, 0
  br i1 %104, label %105, label %109

105:                                              ; preds = %100
  %106 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %107 = call i8* @ahc_name(%struct.ahc_softc* %106)
  %108 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.6, i64 0, i64 0), i8* %107)
  br label %109

109:                                              ; preds = %105, %100
  %110 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %111 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %110, i32 0, i32 3
  %112 = load i32, i32* %111, align 4
  %113 = load i64, i64* @PCIR_STATUS, align 8
  %114 = add nsw i64 %113, 1
  %115 = load i32, i32* %4, align 4
  %116 = call i32 @aic_pci_write_config(i32 %112, i64 %114, i32 %115, i32 1)
  %117 = load i32, i32* %4, align 4
  %118 = load i32, i32* @DPE, align 4
  %119 = load i32, i32* @SSE, align 4
  %120 = or i32 %118, %119
  %121 = load i32, i32* @RMA, align 4
  %122 = or i32 %120, %121
  %123 = load i32, i32* @RTA, align 4
  %124 = or i32 %122, %123
  %125 = load i32, i32* @STA, align 4
  %126 = or i32 %124, %125
  %127 = load i32, i32* @DPR, align 4
  %128 = or i32 %126, %127
  %129 = and i32 %117, %128
  %130 = icmp eq i32 %129, 0
  br i1 %130, label %131, label %135

131:                                              ; preds = %109
  %132 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %133 = call i8* @ahc_name(%struct.ahc_softc* %132)
  %134 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.7, i64 0, i64 0), i8* %133)
  br label %140

135:                                              ; preds = %109
  %136 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %137 = load i32, i32* @CLRINT, align 4
  %138 = load i32, i32* @CLRPARERR, align 4
  %139 = call i32 @ahc_outb(%struct.ahc_softc* %136, i32 %137, i32 %138)
  br label %140

140:                                              ; preds = %135, %131
  %141 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %142 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %141, i32 0, i32 1
  %143 = load i64, i64* %142, align 8
  %144 = load i64, i64* @AHC_PCI_TARGET_PERR_THRESH, align 8
  %145 = icmp sgt i64 %143, %144
  br i1 %145, label %146, label %185

146:                                              ; preds = %140
  %147 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %148 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %147, i32 0, i32 0
  %149 = load i32, i32* %148, align 8
  %150 = load i32, i32* @AHC_DISABLE_PCI_PERR, align 4
  %151 = and i32 %149, %150
  %152 = icmp eq i32 %151, 0
  br i1 %152, label %153, label %185

153:                                              ; preds = %146
  %154 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %155 = call i8* @ahc_name(%struct.ahc_softc* %154)
  %156 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %157 = call i8* @ahc_name(%struct.ahc_softc* %156)
  %158 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %159 = call i8* @ahc_name(%struct.ahc_softc* %158)
  %160 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %161 = call i8* @ahc_name(%struct.ahc_softc* %160)
  %162 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %163 = call i8* @ahc_name(%struct.ahc_softc* %162)
  %164 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %165 = call i8* @ahc_name(%struct.ahc_softc* %164)
  %166 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %167 = call i8* @ahc_name(%struct.ahc_softc* %166)
  %168 = call i32 (i8*, i8*, ...) @printf(i8* getelementptr inbounds ([293 x i8], [293 x i8]* @.str.8, i64 0, i64 0), i8* %155, i8* %157, i8* %159, i8* %161, i8* %163, i8* %165, i8* %167)
  %169 = load i32, i32* @FAILDIS, align 4
  %170 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %171 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %170, i32 0, i32 2
  %172 = load i32, i32* %171, align 8
  %173 = or i32 %172, %169
  store i32 %173, i32* %171, align 8
  %174 = load i32, i32* @AHC_DISABLE_PCI_PERR, align 4
  %175 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %176 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %175, i32 0, i32 0
  %177 = load i32, i32* %176, align 8
  %178 = or i32 %177, %174
  store i32 %178, i32* %176, align 8
  %179 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %180 = load i32, i32* @SEQCTL, align 4
  %181 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %182 = getelementptr inbounds %struct.ahc_softc, %struct.ahc_softc* %181, i32 0, i32 2
  %183 = load i32, i32* %182, align 8
  %184 = call i32 @ahc_outb(%struct.ahc_softc* %179, i32 %180, i32 %183)
  br label %185

185:                                              ; preds = %153, %146, %140
  %186 = load %struct.ahc_softc*, %struct.ahc_softc** %2, align 8
  %187 = call i32 @ahc_unpause(%struct.ahc_softc* %186)
  br label %188

188:                                              ; preds = %185, %12
  ret void
}

declare dso_local i32 @ahc_inb(%struct.ahc_softc*, i32) #1

declare dso_local i32 @aic_pci_read_config(i32, i64, i32) #1

declare dso_local i32 @printf(i8*, i8*, ...) #1

declare dso_local i8* @ahc_name(%struct.ahc_softc*) #1

declare dso_local i32 @aic_pci_write_config(i32, i64, i32, i32) #1

declare dso_local i32 @ahc_outb(%struct.ahc_softc*, i32, i32) #1

declare dso_local i32 @ahc_unpause(%struct.ahc_softc*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
