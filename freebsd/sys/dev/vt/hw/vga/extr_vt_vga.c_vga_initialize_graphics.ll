; ModuleID = '/home/carl/AnghaBench/freebsd/sys/dev/vt/hw/vga/extr_vt_vga.c_vga_initialize_graphics.c'
source_filename = "/home/carl/AnghaBench/freebsd/sys/dev/vt/hw/vga/extr_vt_vga.c_vga_initialize_graphics.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vt_device = type { %struct.vga_softc* }
%struct.vga_softc = type { i32 }

@VGA_GEN_MISC_OUTPUT_W = common dso_local global i32 0, align 4
@VGA_GEN_MO_VSP = common dso_local global i32 0, align 4
@VGA_GEN_MO_HSP = common dso_local global i32 0, align 4
@VGA_GEN_MO_PB = common dso_local global i32 0, align 4
@VGA_GEN_MO_ER = common dso_local global i32 0, align 4
@VGA_GEN_MO_IOA = common dso_local global i32 0, align 4
@VGA_SEQ_ADDRESS = common dso_local global i32 0, align 4
@VGA_SEQ_CLOCKING_MODE = common dso_local global i32 0, align 4
@VGA_SEQ_DATA = common dso_local global i32 0, align 4
@VGA_SEQ_CM_89 = common dso_local global i32 0, align 4
@VGA_SEQ_MEMORY_MODE = common dso_local global i32 0, align 4
@VGA_SEQ_MM_OE = common dso_local global i32 0, align 4
@VGA_SEQ_MM_EM = common dso_local global i32 0, align 4
@VGA_GC_ADDRESS = common dso_local global i32 0, align 4
@VGA_GC_MISCELLANEOUS = common dso_local global i32 0, align 4
@VGA_GC_DATA = common dso_local global i32 0, align 4
@VGA_GC_MISC_GA = common dso_local global i32 0, align 4
@VGA_CRTC_ADDRESS = common dso_local global i32 0, align 4
@VGA_CRTC_HORIZ_TOTAL = common dso_local global i32 0, align 4
@VGA_CRTC_DATA = common dso_local global i32 0, align 4
@VGA_CRTC_HORIZ_DISP_END = common dso_local global i32 0, align 4
@VGA_CRTC_START_HORIZ_BLANK = common dso_local global i32 0, align 4
@VGA_CRTC_END_HORIZ_BLANK = common dso_local global i32 0, align 4
@VGA_CRTC_EHB_CR = common dso_local global i32 0, align 4
@VGA_CRTC_START_HORIZ_RETRACE = common dso_local global i32 0, align 4
@VGA_CRTC_END_HORIZ_RETRACE = common dso_local global i32 0, align 4
@VGA_CRTC_EHR_EHB = common dso_local global i32 0, align 4
@VGA_CRTC_VERT_TOTAL = common dso_local global i32 0, align 4
@VGA_CRTC_OVERFLOW = common dso_local global i32 0, align 4
@VGA_CRTC_OF_VT9 = common dso_local global i32 0, align 4
@VGA_CRTC_OF_LC8 = common dso_local global i32 0, align 4
@VGA_CRTC_OF_VBS8 = common dso_local global i32 0, align 4
@VGA_CRTC_OF_VRS8 = common dso_local global i32 0, align 4
@VGA_CRTC_OF_VDE8 = common dso_local global i32 0, align 4
@VGA_CRTC_MAX_SCAN_LINE = common dso_local global i32 0, align 4
@VGA_CRTC_MSL_LC9 = common dso_local global i32 0, align 4
@VGA_CRTC_VERT_RETRACE_START = common dso_local global i32 0, align 4
@VGA_CRTC_VERT_RETRACE_END = common dso_local global i32 0, align 4
@VGA_CRTC_VERT_DISPLAY_END = common dso_local global i32 0, align 4
@VGA_CRTC_OFFSET = common dso_local global i32 0, align 4
@VGA_CRTC_START_VERT_BLANK = common dso_local global i32 0, align 4
@VGA_CRTC_END_VERT_BLANK = common dso_local global i32 0, align 4
@VGA_CRTC_MODE_CONTROL = common dso_local global i32 0, align 4
@VGA_CRTC_MC_WB = common dso_local global i32 0, align 4
@VGA_CRTC_MC_AW = common dso_local global i32 0, align 4
@VGA_CRTC_MC_SRS = common dso_local global i32 0, align 4
@VGA_CRTC_MC_CMS = common dso_local global i32 0, align 4
@VGA_CRTC_LINE_COMPARE = common dso_local global i32 0, align 4
@VGA_GEN_FEATURE_CTRL_W = common dso_local global i32 0, align 4
@VGA_SEQ_MAP_MASK = common dso_local global i32 0, align 4
@VGA_SEQ_MM_EM3 = common dso_local global i32 0, align 4
@VGA_SEQ_MM_EM2 = common dso_local global i32 0, align 4
@VGA_SEQ_MM_EM1 = common dso_local global i32 0, align 4
@VGA_SEQ_MM_EM0 = common dso_local global i32 0, align 4
@VGA_SEQ_CHAR_MAP_SELECT = common dso_local global i32 0, align 4
@VGA_GC_SET_RESET = common dso_local global i32 0, align 4
@VGA_GC_ENABLE_SET_RESET = common dso_local global i32 0, align 4
@VGA_GC_COLOR_COMPARE = common dso_local global i32 0, align 4
@VGA_GC_DATA_ROTATE = common dso_local global i32 0, align 4
@VGA_GC_READ_MAP_SELECT = common dso_local global i32 0, align 4
@VGA_GC_MODE = common dso_local global i32 0, align 4
@VGA_GC_COLOR_DONT_CARE = common dso_local global i32 0, align 4
@VGA_GC_BIT_MASK = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.vt_device*)* @vga_initialize_graphics to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @vga_initialize_graphics(%struct.vt_device* %0) #0 {
  %2 = alloca %struct.vt_device*, align 8
  %3 = alloca %struct.vga_softc*, align 8
  store %struct.vt_device* %0, %struct.vt_device** %2, align 8
  %4 = load %struct.vt_device*, %struct.vt_device** %2, align 8
  %5 = getelementptr inbounds %struct.vt_device, %struct.vt_device* %4, i32 0, i32 0
  %6 = load %struct.vga_softc*, %struct.vga_softc** %5, align 8
  store %struct.vga_softc* %6, %struct.vga_softc** %3, align 8
  %7 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %8 = load i32, i32* @VGA_GEN_MISC_OUTPUT_W, align 4
  %9 = load i32, i32* @VGA_GEN_MO_VSP, align 4
  %10 = load i32, i32* @VGA_GEN_MO_HSP, align 4
  %11 = or i32 %9, %10
  %12 = load i32, i32* @VGA_GEN_MO_PB, align 4
  %13 = or i32 %11, %12
  %14 = load i32, i32* @VGA_GEN_MO_ER, align 4
  %15 = or i32 %13, %14
  %16 = load i32, i32* @VGA_GEN_MO_IOA, align 4
  %17 = or i32 %15, %16
  %18 = call i32 @REG_WRITE1(%struct.vga_softc* %7, i32 %8, i32 %17)
  %19 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %20 = load i32, i32* @VGA_SEQ_ADDRESS, align 4
  %21 = load i32, i32* @VGA_SEQ_CLOCKING_MODE, align 4
  %22 = call i32 @REG_WRITE1(%struct.vga_softc* %19, i32 %20, i32 %21)
  %23 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %24 = load i32, i32* @VGA_SEQ_DATA, align 4
  %25 = load i32, i32* @VGA_SEQ_CM_89, align 4
  %26 = call i32 @REG_WRITE1(%struct.vga_softc* %23, i32 %24, i32 %25)
  %27 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %28 = load i32, i32* @VGA_SEQ_ADDRESS, align 4
  %29 = load i32, i32* @VGA_SEQ_MEMORY_MODE, align 4
  %30 = call i32 @REG_WRITE1(%struct.vga_softc* %27, i32 %28, i32 %29)
  %31 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %32 = load i32, i32* @VGA_SEQ_DATA, align 4
  %33 = load i32, i32* @VGA_SEQ_MM_OE, align 4
  %34 = load i32, i32* @VGA_SEQ_MM_EM, align 4
  %35 = or i32 %33, %34
  %36 = call i32 @REG_WRITE1(%struct.vga_softc* %31, i32 %32, i32 %35)
  %37 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %38 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %39 = load i32, i32* @VGA_GC_MISCELLANEOUS, align 4
  %40 = call i32 @REG_WRITE1(%struct.vga_softc* %37, i32 %38, i32 %39)
  %41 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %42 = load i32, i32* @VGA_GC_DATA, align 4
  %43 = load i32, i32* @VGA_GC_MISC_GA, align 4
  %44 = add nsw i32 4, %43
  %45 = call i32 @REG_WRITE1(%struct.vga_softc* %41, i32 %42, i32 %44)
  %46 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %47 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %48 = load i32, i32* @VGA_CRTC_HORIZ_TOTAL, align 4
  %49 = call i32 @REG_WRITE1(%struct.vga_softc* %46, i32 %47, i32 %48)
  %50 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %51 = load i32, i32* @VGA_CRTC_DATA, align 4
  %52 = call i32 @REG_WRITE1(%struct.vga_softc* %50, i32 %51, i32 95)
  %53 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %54 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %55 = load i32, i32* @VGA_CRTC_HORIZ_DISP_END, align 4
  %56 = call i32 @REG_WRITE1(%struct.vga_softc* %53, i32 %54, i32 %55)
  %57 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %58 = load i32, i32* @VGA_CRTC_DATA, align 4
  %59 = call i32 @REG_WRITE1(%struct.vga_softc* %57, i32 %58, i32 79)
  %60 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %61 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %62 = load i32, i32* @VGA_CRTC_START_HORIZ_BLANK, align 4
  %63 = call i32 @REG_WRITE1(%struct.vga_softc* %60, i32 %61, i32 %62)
  %64 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %65 = load i32, i32* @VGA_CRTC_DATA, align 4
  %66 = call i32 @REG_WRITE1(%struct.vga_softc* %64, i32 %65, i32 80)
  %67 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %68 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %69 = load i32, i32* @VGA_CRTC_END_HORIZ_BLANK, align 4
  %70 = call i32 @REG_WRITE1(%struct.vga_softc* %67, i32 %68, i32 %69)
  %71 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %72 = load i32, i32* @VGA_CRTC_DATA, align 4
  %73 = load i32, i32* @VGA_CRTC_EHB_CR, align 4
  %74 = add nsw i32 %73, 2
  %75 = call i32 @REG_WRITE1(%struct.vga_softc* %71, i32 %72, i32 %74)
  %76 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %77 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %78 = load i32, i32* @VGA_CRTC_START_HORIZ_RETRACE, align 4
  %79 = call i32 @REG_WRITE1(%struct.vga_softc* %76, i32 %77, i32 %78)
  %80 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %81 = load i32, i32* @VGA_CRTC_DATA, align 4
  %82 = call i32 @REG_WRITE1(%struct.vga_softc* %80, i32 %81, i32 84)
  %83 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %84 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %85 = load i32, i32* @VGA_CRTC_END_HORIZ_RETRACE, align 4
  %86 = call i32 @REG_WRITE1(%struct.vga_softc* %83, i32 %84, i32 %85)
  %87 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %88 = load i32, i32* @VGA_CRTC_DATA, align 4
  %89 = load i32, i32* @VGA_CRTC_EHR_EHB, align 4
  %90 = add nsw i32 %89, 0
  %91 = call i32 @REG_WRITE1(%struct.vga_softc* %87, i32 %88, i32 %90)
  %92 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %93 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %94 = load i32, i32* @VGA_CRTC_VERT_TOTAL, align 4
  %95 = call i32 @REG_WRITE1(%struct.vga_softc* %92, i32 %93, i32 %94)
  %96 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %97 = load i32, i32* @VGA_CRTC_DATA, align 4
  %98 = call i32 @REG_WRITE1(%struct.vga_softc* %96, i32 %97, i32 11)
  %99 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %100 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %101 = load i32, i32* @VGA_CRTC_OVERFLOW, align 4
  %102 = call i32 @REG_WRITE1(%struct.vga_softc* %99, i32 %100, i32 %101)
  %103 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %104 = load i32, i32* @VGA_CRTC_DATA, align 4
  %105 = load i32, i32* @VGA_CRTC_OF_VT9, align 4
  %106 = load i32, i32* @VGA_CRTC_OF_LC8, align 4
  %107 = or i32 %105, %106
  %108 = load i32, i32* @VGA_CRTC_OF_VBS8, align 4
  %109 = or i32 %107, %108
  %110 = load i32, i32* @VGA_CRTC_OF_VRS8, align 4
  %111 = or i32 %109, %110
  %112 = load i32, i32* @VGA_CRTC_OF_VDE8, align 4
  %113 = or i32 %111, %112
  %114 = call i32 @REG_WRITE1(%struct.vga_softc* %103, i32 %104, i32 %113)
  %115 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %116 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %117 = load i32, i32* @VGA_CRTC_MAX_SCAN_LINE, align 4
  %118 = call i32 @REG_WRITE1(%struct.vga_softc* %115, i32 %116, i32 %117)
  %119 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %120 = load i32, i32* @VGA_CRTC_DATA, align 4
  %121 = load i32, i32* @VGA_CRTC_MSL_LC9, align 4
  %122 = call i32 @REG_WRITE1(%struct.vga_softc* %119, i32 %120, i32 %121)
  %123 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %124 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %125 = load i32, i32* @VGA_CRTC_VERT_RETRACE_START, align 4
  %126 = call i32 @REG_WRITE1(%struct.vga_softc* %123, i32 %124, i32 %125)
  %127 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %128 = load i32, i32* @VGA_CRTC_DATA, align 4
  %129 = call i32 @REG_WRITE1(%struct.vga_softc* %127, i32 %128, i32 234)
  %130 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %131 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %132 = load i32, i32* @VGA_CRTC_VERT_RETRACE_END, align 4
  %133 = call i32 @REG_WRITE1(%struct.vga_softc* %130, i32 %131, i32 %132)
  %134 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %135 = load i32, i32* @VGA_CRTC_DATA, align 4
  %136 = call i32 @REG_WRITE1(%struct.vga_softc* %134, i32 %135, i32 12)
  %137 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %138 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %139 = load i32, i32* @VGA_CRTC_VERT_DISPLAY_END, align 4
  %140 = call i32 @REG_WRITE1(%struct.vga_softc* %137, i32 %138, i32 %139)
  %141 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %142 = load i32, i32* @VGA_CRTC_DATA, align 4
  %143 = call i32 @REG_WRITE1(%struct.vga_softc* %141, i32 %142, i32 223)
  %144 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %145 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %146 = load i32, i32* @VGA_CRTC_OFFSET, align 4
  %147 = call i32 @REG_WRITE1(%struct.vga_softc* %144, i32 %145, i32 %146)
  %148 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %149 = load i32, i32* @VGA_CRTC_DATA, align 4
  %150 = call i32 @REG_WRITE1(%struct.vga_softc* %148, i32 %149, i32 40)
  %151 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %152 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %153 = load i32, i32* @VGA_CRTC_START_VERT_BLANK, align 4
  %154 = call i32 @REG_WRITE1(%struct.vga_softc* %151, i32 %152, i32 %153)
  %155 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %156 = load i32, i32* @VGA_CRTC_DATA, align 4
  %157 = call i32 @REG_WRITE1(%struct.vga_softc* %155, i32 %156, i32 231)
  %158 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %159 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %160 = load i32, i32* @VGA_CRTC_END_VERT_BLANK, align 4
  %161 = call i32 @REG_WRITE1(%struct.vga_softc* %158, i32 %159, i32 %160)
  %162 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %163 = load i32, i32* @VGA_CRTC_DATA, align 4
  %164 = call i32 @REG_WRITE1(%struct.vga_softc* %162, i32 %163, i32 4)
  %165 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %166 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %167 = load i32, i32* @VGA_CRTC_MODE_CONTROL, align 4
  %168 = call i32 @REG_WRITE1(%struct.vga_softc* %165, i32 %166, i32 %167)
  %169 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %170 = load i32, i32* @VGA_CRTC_DATA, align 4
  %171 = load i32, i32* @VGA_CRTC_MC_WB, align 4
  %172 = load i32, i32* @VGA_CRTC_MC_AW, align 4
  %173 = or i32 %171, %172
  %174 = load i32, i32* @VGA_CRTC_MC_SRS, align 4
  %175 = or i32 %173, %174
  %176 = load i32, i32* @VGA_CRTC_MC_CMS, align 4
  %177 = or i32 %175, %176
  %178 = call i32 @REG_WRITE1(%struct.vga_softc* %169, i32 %170, i32 %177)
  %179 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %180 = load i32, i32* @VGA_CRTC_ADDRESS, align 4
  %181 = load i32, i32* @VGA_CRTC_LINE_COMPARE, align 4
  %182 = call i32 @REG_WRITE1(%struct.vga_softc* %179, i32 %180, i32 %181)
  %183 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %184 = load i32, i32* @VGA_CRTC_DATA, align 4
  %185 = call i32 @REG_WRITE1(%struct.vga_softc* %183, i32 %184, i32 255)
  %186 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %187 = load i32, i32* @VGA_GEN_FEATURE_CTRL_W, align 4
  %188 = call i32 @REG_WRITE1(%struct.vga_softc* %186, i32 %187, i32 0)
  %189 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %190 = load i32, i32* @VGA_SEQ_ADDRESS, align 4
  %191 = load i32, i32* @VGA_SEQ_MAP_MASK, align 4
  %192 = call i32 @REG_WRITE1(%struct.vga_softc* %189, i32 %190, i32 %191)
  %193 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %194 = load i32, i32* @VGA_SEQ_DATA, align 4
  %195 = load i32, i32* @VGA_SEQ_MM_EM3, align 4
  %196 = load i32, i32* @VGA_SEQ_MM_EM2, align 4
  %197 = or i32 %195, %196
  %198 = load i32, i32* @VGA_SEQ_MM_EM1, align 4
  %199 = or i32 %197, %198
  %200 = load i32, i32* @VGA_SEQ_MM_EM0, align 4
  %201 = or i32 %199, %200
  %202 = call i32 @REG_WRITE1(%struct.vga_softc* %193, i32 %194, i32 %201)
  %203 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %204 = load i32, i32* @VGA_SEQ_ADDRESS, align 4
  %205 = load i32, i32* @VGA_SEQ_CHAR_MAP_SELECT, align 4
  %206 = call i32 @REG_WRITE1(%struct.vga_softc* %203, i32 %204, i32 %205)
  %207 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %208 = load i32, i32* @VGA_SEQ_DATA, align 4
  %209 = call i32 @REG_WRITE1(%struct.vga_softc* %207, i32 %208, i32 0)
  %210 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %211 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %212 = load i32, i32* @VGA_GC_SET_RESET, align 4
  %213 = call i32 @REG_WRITE1(%struct.vga_softc* %210, i32 %211, i32 %212)
  %214 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %215 = load i32, i32* @VGA_GC_DATA, align 4
  %216 = call i32 @REG_WRITE1(%struct.vga_softc* %214, i32 %215, i32 0)
  %217 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %218 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %219 = load i32, i32* @VGA_GC_ENABLE_SET_RESET, align 4
  %220 = call i32 @REG_WRITE1(%struct.vga_softc* %217, i32 %218, i32 %219)
  %221 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %222 = load i32, i32* @VGA_GC_DATA, align 4
  %223 = call i32 @REG_WRITE1(%struct.vga_softc* %221, i32 %222, i32 15)
  %224 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %225 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %226 = load i32, i32* @VGA_GC_COLOR_COMPARE, align 4
  %227 = call i32 @REG_WRITE1(%struct.vga_softc* %224, i32 %225, i32 %226)
  %228 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %229 = load i32, i32* @VGA_GC_DATA, align 4
  %230 = call i32 @REG_WRITE1(%struct.vga_softc* %228, i32 %229, i32 0)
  %231 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %232 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %233 = load i32, i32* @VGA_GC_DATA_ROTATE, align 4
  %234 = call i32 @REG_WRITE1(%struct.vga_softc* %231, i32 %232, i32 %233)
  %235 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %236 = load i32, i32* @VGA_GC_DATA, align 4
  %237 = call i32 @REG_WRITE1(%struct.vga_softc* %235, i32 %236, i32 0)
  %238 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %239 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %240 = load i32, i32* @VGA_GC_READ_MAP_SELECT, align 4
  %241 = call i32 @REG_WRITE1(%struct.vga_softc* %238, i32 %239, i32 %240)
  %242 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %243 = load i32, i32* @VGA_GC_DATA, align 4
  %244 = call i32 @REG_WRITE1(%struct.vga_softc* %242, i32 %243, i32 0)
  %245 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %246 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %247 = load i32, i32* @VGA_GC_MODE, align 4
  %248 = call i32 @REG_WRITE1(%struct.vga_softc* %245, i32 %246, i32 %247)
  %249 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %250 = load i32, i32* @VGA_GC_DATA, align 4
  %251 = call i32 @REG_WRITE1(%struct.vga_softc* %249, i32 %250, i32 0)
  %252 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %253 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %254 = load i32, i32* @VGA_GC_COLOR_DONT_CARE, align 4
  %255 = call i32 @REG_WRITE1(%struct.vga_softc* %252, i32 %253, i32 %254)
  %256 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %257 = load i32, i32* @VGA_GC_DATA, align 4
  %258 = call i32 @REG_WRITE1(%struct.vga_softc* %256, i32 %257, i32 15)
  %259 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %260 = load i32, i32* @VGA_GC_ADDRESS, align 4
  %261 = load i32, i32* @VGA_GC_BIT_MASK, align 4
  %262 = call i32 @REG_WRITE1(%struct.vga_softc* %259, i32 %260, i32 %261)
  %263 = load %struct.vga_softc*, %struct.vga_softc** %3, align 8
  %264 = load i32, i32* @VGA_GC_DATA, align 4
  %265 = call i32 @REG_WRITE1(%struct.vga_softc* %263, i32 %264, i32 255)
  ret void
}

declare dso_local i32 @REG_WRITE1(%struct.vga_softc*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
