; ModuleID = '/home/carl/AnghaBench/freebsd/usr.sbin/bhyve/extr_acpi.c_basl_fwrite_fadt.c'
source_filename = "/home/carl/AnghaBench/freebsd/usr.sbin/bhyve/extr_acpi.c_basl_fwrite_fadt.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [4 x i8] c"/*\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c" * bhyve FADT template\0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c" */\0A\00", align 1
@.str.3 = private unnamed_addr constant [28 x i8] c"[0004]\09\09Signature : \22FACP\22\0A\00", align 1
@.str.4 = private unnamed_addr constant [33 x i8] c"[0004]\09\09Table Length : 0000010C\0A\00", align 1
@.str.5 = private unnamed_addr constant [23 x i8] c"[0001]\09\09Revision : 05\0A\00", align 1
@.str.6 = private unnamed_addr constant [23 x i8] c"[0001]\09\09Checksum : 00\0A\00", align 1
@.str.7 = private unnamed_addr constant [27 x i8] c"[0006]\09\09Oem ID : \22BHYVE \22\0A\00", align 1
@.str.8 = private unnamed_addr constant [35 x i8] c"[0008]\09\09Oem Table ID : \22BVFACP  \22\0A\00", align 1
@.str.9 = private unnamed_addr constant [33 x i8] c"[0004]\09\09Oem Revision : 00000001\0A\00", align 1
@.str.10 = private unnamed_addr constant [34 x i8] c"[0004]\09\09Asl Compiler ID : \22xxxx\22\0A\00", align 1
@.str.11 = private unnamed_addr constant [42 x i8] c"[0004]\09\09Asl Compiler Revision : 00000000\0A\00", align 1
@.str.12 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.13 = private unnamed_addr constant [29 x i8] c"[0004]\09\09FACS Address : %08X\0A\00", align 1
@basl_acpi_base = common dso_local global i64 0, align 8
@FACS_OFFSET = common dso_local global i64 0, align 8
@.str.14 = private unnamed_addr constant [29 x i8] c"[0004]\09\09DSDT Address : %08X\0A\00", align 1
@DSDT_OFFSET = common dso_local global i64 0, align 8
@.str.15 = private unnamed_addr constant [20 x i8] c"[0001]\09\09Model : 01\0A\00", align 1
@.str.16 = private unnamed_addr constant [39 x i8] c"[0001]\09\09PM Profile : 00 [Unspecified]\0A\00", align 1
@.str.17 = private unnamed_addr constant [30 x i8] c"[0002]\09\09SCI Interrupt : %04X\0A\00", align 1
@SCI_INT = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [33 x i8] c"[0004]\09\09SMI Command Port : %08X\0A\00", align 1
@SMI_CMD = common dso_local global i32 0, align 4
@.str.19 = private unnamed_addr constant [34 x i8] c"[0001]\09\09ACPI Enable Value : %02X\0A\00", align 1
@BHYVE_ACPI_ENABLE = common dso_local global i32 0, align 4
@.str.20 = private unnamed_addr constant [35 x i8] c"[0001]\09\09ACPI Disable Value : %02X\0A\00", align 1
@BHYVE_ACPI_DISABLE = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [29 x i8] c"[0001]\09\09S4BIOS Command : 00\0A\00", align 1
@.str.22 = private unnamed_addr constant [30 x i8] c"[0001]\09\09P-State Control : 00\0A\00", align 1
@.str.23 = private unnamed_addr constant [41 x i8] c"[0004]\09\09PM1A Event Block Address : %08X\0A\00", align 1
@PM1A_EVT_ADDR = common dso_local global i32 0, align 4
@.str.24 = private unnamed_addr constant [45 x i8] c"[0004]\09\09PM1B Event Block Address : 00000000\0A\00", align 1
@.str.25 = private unnamed_addr constant [43 x i8] c"[0004]\09\09PM1A Control Block Address : %08X\0A\00", align 1
@PM1A_CNT_ADDR = common dso_local global i32 0, align 4
@.str.26 = private unnamed_addr constant [47 x i8] c"[0004]\09\09PM1B Control Block Address : 00000000\0A\00", align 1
@.str.27 = private unnamed_addr constant [46 x i8] c"[0004]\09\09PM2 Control Block Address : 00000000\0A\00", align 1
@.str.28 = private unnamed_addr constant [39 x i8] c"[0004]\09\09PM Timer Block Address : %08X\0A\00", align 1
@IO_PMTMR = common dso_local global i32 0, align 4
@.str.29 = private unnamed_addr constant [39 x i8] c"[0004]\09\09GPE0 Block Address : 00000000\0A\00", align 1
@.str.30 = private unnamed_addr constant [39 x i8] c"[0004]\09\09GPE1 Block Address : 00000000\0A\00", align 1
@.str.31 = private unnamed_addr constant [37 x i8] c"[0001]\09\09PM1 Event Block Length : 04\0A\00", align 1
@.str.32 = private unnamed_addr constant [39 x i8] c"[0001]\09\09PM1 Control Block Length : 02\0A\00", align 1
@.str.33 = private unnamed_addr constant [39 x i8] c"[0001]\09\09PM2 Control Block Length : 00\0A\00", align 1
@.str.34 = private unnamed_addr constant [36 x i8] c"[0001]\09\09PM Timer Block Length : 04\0A\00", align 1
@.str.35 = private unnamed_addr constant [32 x i8] c"[0001]\09\09GPE0 Block Length : 00\0A\00", align 1
@.str.36 = private unnamed_addr constant [32 x i8] c"[0001]\09\09GPE1 Block Length : 00\0A\00", align 1
@.str.37 = private unnamed_addr constant [31 x i8] c"[0001]\09\09GPE1 Base Offset : 00\0A\00", align 1
@.str.38 = private unnamed_addr constant [27 x i8] c"[0001]\09\09_CST Support : 00\0A\00", align 1
@.str.39 = private unnamed_addr constant [27 x i8] c"[0002]\09\09C2 Latency : 0000\0A\00", align 1
@.str.40 = private unnamed_addr constant [27 x i8] c"[0002]\09\09C3 Latency : 0000\0A\00", align 1
@.str.41 = private unnamed_addr constant [31 x i8] c"[0002]\09\09CPU Cache Size : 0000\0A\00", align 1
@.str.42 = private unnamed_addr constant [35 x i8] c"[0002]\09\09Cache Flush Stride : 0000\0A\00", align 1
@.str.43 = private unnamed_addr constant [32 x i8] c"[0001]\09\09Duty Cycle Offset : 00\0A\00", align 1
@.str.44 = private unnamed_addr constant [31 x i8] c"[0001]\09\09Duty Cycle Width : 00\0A\00", align 1
@.str.45 = private unnamed_addr constant [34 x i8] c"[0001]\09\09RTC Day Alarm Index : 00\0A\00", align 1
@.str.46 = private unnamed_addr constant [36 x i8] c"[0001]\09\09RTC Month Alarm Index : 00\0A\00", align 1
@.str.47 = private unnamed_addr constant [32 x i8] c"[0001]\09\09RTC Century Index : 32\0A\00", align 1
@.str.48 = private unnamed_addr constant [43 x i8] c"[0002]\09\09Boot Flags (decoded below) : 0000\0A\00", align 1
@.str.49 = private unnamed_addr constant [38 x i8] c"\09\09\09Legacy Devices Supported (V2) : 0\0A\00", align 1
@.str.50 = private unnamed_addr constant [41 x i8] c"\09\09\098042 Present on ports 60/64 (V2) : 0\0A\00", align 1
@.str.51 = private unnamed_addr constant [29 x i8] c"\09\09\09VGA Not Present (V4) : 1\0A\00", align 1
@.str.52 = private unnamed_addr constant [31 x i8] c"\09\09\09MSI Not Supported (V4) : 0\0A\00", align 1
@.str.53 = private unnamed_addr constant [37 x i8] c"\09\09\09PCIe ASPM Not Supported (V4) : 1\0A\00", align 1
@.str.54 = private unnamed_addr constant [34 x i8] c"\09\09\09CMOS RTC Not Present (V5) : 0\0A\00", align 1
@.str.55 = private unnamed_addr constant [23 x i8] c"[0001]\09\09Reserved : 00\0A\00", align 1
@.str.56 = private unnamed_addr constant [42 x i8] c"[0004]\09\09Flags (decoded below) : 00000000\0A\00", align 1
@.str.57 = private unnamed_addr constant [47 x i8] c"\09\09\09WBINVD instruction is operational (V1) : 1\0A\00", align 1
@.str.58 = private unnamed_addr constant [39 x i8] c"\09\09\09WBINVD flushes all caches (V1) : 0\0A\00", align 1
@.str.59 = private unnamed_addr constant [33 x i8] c"\09\09\09All CPUs support C1 (V1) : 1\0A\00", align 1
@.str.60 = private unnamed_addr constant [35 x i8] c"\09\09\09C2 works on MP system (V1) : 0\0A\00", align 1
@.str.61 = private unnamed_addr constant [41 x i8] c"\09\09\09Control Method Power Button (V1) : 0\0A\00", align 1
@.str.62 = private unnamed_addr constant [41 x i8] c"\09\09\09Control Method Sleep Button (V1) : 1\0A\00", align 1
@.str.63 = private unnamed_addr constant [45 x i8] c"\09\09\09RTC wake not in fixed reg space (V1) : 0\0A\00", align 1
@.str.64 = private unnamed_addr constant [41 x i8] c"\09\09\09RTC can wake system from S4 (V1) : 0\0A\00", align 1
@.str.65 = private unnamed_addr constant [29 x i8] c"\09\09\0932-bit PM Timer (V1) : 1\0A\00", align 1
@.str.66 = private unnamed_addr constant [31 x i8] c"\09\09\09Docking Supported (V1) : 0\0A\00", align 1
@.str.67 = private unnamed_addr constant [38 x i8] c"\09\09\09Reset Register Supported (V2) : 1\0A\00", align 1
@.str.68 = private unnamed_addr constant [25 x i8] c"\09\09\09Sealed Case (V3) : 0\0A\00", align 1
@.str.69 = private unnamed_addr constant [33 x i8] c"\09\09\09Headless - No Video (V3) : 1\0A\00", align 1
@.str.70 = private unnamed_addr constant [45 x i8] c"\09\09\09Use native instr after SLP_TYPx (V3) : 0\0A\00", align 1
@.str.71 = private unnamed_addr constant [39 x i8] c"\09\09\09PCIEXP_WAK Bits Supported (V4) : 0\0A\00", align 1
@.str.72 = private unnamed_addr constant [32 x i8] c"\09\09\09Use Platform Timer (V4) : 0\0A\00", align 1
@.str.73 = private unnamed_addr constant [38 x i8] c"\09\09\09RTC_STS valid on S4 wake (V4) : 0\0A\00", align 1
@.str.74 = private unnamed_addr constant [37 x i8] c"\09\09\09Remote Power-on capable (V4) : 0\0A\00", align 1
@.str.75 = private unnamed_addr constant [36 x i8] c"\09\09\09Use APIC Cluster Model (V4) : 0\0A\00", align 1
@.str.76 = private unnamed_addr constant [48 x i8] c"\09\09\09Use APIC Physical Destination Mode (V4) : 1\0A\00", align 1
@.str.77 = private unnamed_addr constant [30 x i8] c"\09\09\09Hardware Reduced (V5) : 0\0A\00", align 1
@.str.78 = private unnamed_addr constant [31 x i8] c"\09\09\09Low Power S0 Idle (V5) : 0\0A\00", align 1
@.str.79 = private unnamed_addr constant [54 x i8] c"[0012]\09\09Reset Register : [Generic Address Structure]\0A\00", align 1
@.str.80 = private unnamed_addr constant [34 x i8] c"[0001]\09\09Space ID : 01 [SystemIO]\0A\00", align 1
@.str.81 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 08\0A\00", align 1
@.str.82 = private unnamed_addr constant [25 x i8] c"[0001]\09\09Bit Offset : 00\0A\00", align 1
@.str.83 = private unnamed_addr constant [51 x i8] c"[0001]\09\09Encoded Access Width : 01 [Byte Access:8]\0A\00", align 1
@.str.84 = private unnamed_addr constant [36 x i8] c"[0008]\09\09Address : 0000000000000CF9\0A\00", align 1
@.str.85 = private unnamed_addr constant [35 x i8] c"[0001]\09\09Value to cause reset : 06\0A\00", align 1
@.str.86 = private unnamed_addr constant [41 x i8] c"[0002]\09\09ARM Flags (decoded below): 0000\0A\00", align 1
@.str.87 = private unnamed_addr constant [23 x i8] c"\09\09\09PSCI Compliant : 0\0A\00", align 1
@.str.88 = private unnamed_addr constant [30 x i8] c"\09\09\09Must use HVC for PSCI : 0\0A\00", align 1
@.str.89 = private unnamed_addr constant [34 x i8] c"[0001]\09\09FADT Minor Revision : 01\0A\00", align 1
@.str.90 = private unnamed_addr constant [37 x i8] c"[0008]\09\09FACS Address : 00000000%08X\0A\00", align 1
@.str.91 = private unnamed_addr constant [37 x i8] c"[0008]\09\09DSDT Address : 00000000%08X\0A\00", align 1
@.str.92 = private unnamed_addr constant [56 x i8] c"[0012]\09\09PM1A Event Block : [Generic Address Structure]\0A\00", align 1
@.str.93 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 20\0A\00", align 1
@.str.94 = private unnamed_addr constant [52 x i8] c"[0001]\09\09Encoded Access Width : 02 [Word Access:16]\0A\00", align 1
@.str.95 = private unnamed_addr constant [32 x i8] c"[0008]\09\09Address : 00000000%08X\0A\00", align 1
@.str.96 = private unnamed_addr constant [56 x i8] c"[0012]\09\09PM1B Event Block : [Generic Address Structure]\0A\00", align 1
@.str.97 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 00\0A\00", align 1
@.str.98 = private unnamed_addr constant [54 x i8] c"[0001]\09\09Encoded Access Width : 00 [Undefined/Legacy]\0A\00", align 1
@.str.99 = private unnamed_addr constant [36 x i8] c"[0008]\09\09Address : 0000000000000000\0A\00", align 1
@.str.100 = private unnamed_addr constant [58 x i8] c"[0012]\09\09PM1A Control Block : [Generic Address Structure]\0A\00", align 1
@.str.101 = private unnamed_addr constant [24 x i8] c"[0001]\09\09Bit Width : 10\0A\00", align 1
@.str.102 = private unnamed_addr constant [58 x i8] c"[0012]\09\09PM1B Control Block : [Generic Address Structure]\0A\00", align 1
@.str.103 = private unnamed_addr constant [57 x i8] c"[0012]\09\09PM2 Control Block : [Generic Address Structure]\0A\00", align 1
@.str.104 = private unnamed_addr constant [54 x i8] c"[0012]\09\09PM Timer Block : [Generic Address Structure]\0A\00", align 1
@.str.105 = private unnamed_addr constant [53 x i8] c"[0001]\09\09Encoded Access Width : 03 [DWord Access:32]\0A\00", align 1
@.str.106 = private unnamed_addr constant [50 x i8] c"[0012]\09\09GPE0 Block : [Generic Address Structure]\0A\00", align 1
@.str.107 = private unnamed_addr constant [50 x i8] c"[0012]\09\09GPE1 Block : [Generic Address Structure]\0A\00", align 1
@.str.108 = private unnamed_addr constant [62 x i8] c"[0012]\09\09Sleep Control Register : [Generic Address Structure]\0A\00", align 1
@.str.109 = private unnamed_addr constant [61 x i8] c"[0012]\09\09Sleep Status Register : [Generic Address Structure]\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i32*)* @basl_fwrite_fadt to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @basl_fwrite_fadt(i32* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32*, align 8
  store i32* %0, i32** %3, align 8
  %4 = load i32*, i32** %3, align 8
  %5 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %4, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %6 = load i32*, i32** %3, align 8
  %7 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %6, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %8 = load i32*, i32** %3, align 8
  %9 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %8, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0))
  %10 = load i32*, i32** %3, align 8
  %11 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %10, i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0))
  %12 = load i32*, i32** %3, align 8
  %13 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %12, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.4, i64 0, i64 0))
  %14 = load i32*, i32** %3, align 8
  %15 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %14, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.5, i64 0, i64 0))
  %16 = load i32*, i32** %3, align 8
  %17 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %16, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.6, i64 0, i64 0))
  %18 = load i32*, i32** %3, align 8
  %19 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %18, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.7, i64 0, i64 0))
  %20 = load i32*, i32** %3, align 8
  %21 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %20, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.8, i64 0, i64 0))
  %22 = load i32*, i32** %3, align 8
  %23 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %22, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.9, i64 0, i64 0))
  %24 = load i32*, i32** %3, align 8
  %25 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %24, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.10, i64 0, i64 0))
  %26 = load i32*, i32** %3, align 8
  %27 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %26, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.11, i64 0, i64 0))
  %28 = load i32*, i32** %3, align 8
  %29 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %28, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %30 = load i32*, i32** %3, align 8
  %31 = load i64, i64* @basl_acpi_base, align 8
  %32 = load i64, i64* @FACS_OFFSET, align 8
  %33 = add nsw i64 %31, %32
  %34 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %30, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.13, i64 0, i64 0), i64 %33)
  %35 = load i32*, i32** %3, align 8
  %36 = load i64, i64* @basl_acpi_base, align 8
  %37 = load i64, i64* @DSDT_OFFSET, align 8
  %38 = add nsw i64 %36, %37
  %39 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %35, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14, i64 0, i64 0), i64 %38)
  %40 = load i32*, i32** %3, align 8
  %41 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %40, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0))
  %42 = load i32*, i32** %3, align 8
  %43 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %42, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.16, i64 0, i64 0))
  %44 = load i32*, i32** %3, align 8
  %45 = load i32, i32* @SCI_INT, align 4
  %46 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %44, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.17, i64 0, i64 0), i32 %45)
  %47 = load i32*, i32** %3, align 8
  %48 = load i32, i32* @SMI_CMD, align 4
  %49 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %47, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.18, i64 0, i64 0), i32 %48)
  %50 = load i32*, i32** %3, align 8
  %51 = load i32, i32* @BHYVE_ACPI_ENABLE, align 4
  %52 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %50, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.19, i64 0, i64 0), i32 %51)
  %53 = load i32*, i32** %3, align 8
  %54 = load i32, i32* @BHYVE_ACPI_DISABLE, align 4
  %55 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %53, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.20, i64 0, i64 0), i32 %54)
  %56 = load i32*, i32** %3, align 8
  %57 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %56, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.21, i64 0, i64 0))
  %58 = load i32*, i32** %3, align 8
  %59 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %58, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.22, i64 0, i64 0))
  %60 = load i32*, i32** %3, align 8
  %61 = load i32, i32* @PM1A_EVT_ADDR, align 4
  %62 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %60, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.23, i64 0, i64 0), i32 %61)
  %63 = load i32*, i32** %3, align 8
  %64 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %63, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.24, i64 0, i64 0))
  %65 = load i32*, i32** %3, align 8
  %66 = load i32, i32* @PM1A_CNT_ADDR, align 4
  %67 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %65, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.25, i64 0, i64 0), i32 %66)
  %68 = load i32*, i32** %3, align 8
  %69 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %68, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.26, i64 0, i64 0))
  %70 = load i32*, i32** %3, align 8
  %71 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %70, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.27, i64 0, i64 0))
  %72 = load i32*, i32** %3, align 8
  %73 = load i32, i32* @IO_PMTMR, align 4
  %74 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %72, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.28, i64 0, i64 0), i32 %73)
  %75 = load i32*, i32** %3, align 8
  %76 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %75, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.29, i64 0, i64 0))
  %77 = load i32*, i32** %3, align 8
  %78 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %77, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.30, i64 0, i64 0))
  %79 = load i32*, i32** %3, align 8
  %80 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %79, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.31, i64 0, i64 0))
  %81 = load i32*, i32** %3, align 8
  %82 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %81, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.32, i64 0, i64 0))
  %83 = load i32*, i32** %3, align 8
  %84 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %83, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.33, i64 0, i64 0))
  %85 = load i32*, i32** %3, align 8
  %86 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %85, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.34, i64 0, i64 0))
  %87 = load i32*, i32** %3, align 8
  %88 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %87, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.35, i64 0, i64 0))
  %89 = load i32*, i32** %3, align 8
  %90 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %89, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.36, i64 0, i64 0))
  %91 = load i32*, i32** %3, align 8
  %92 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %91, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.37, i64 0, i64 0))
  %93 = load i32*, i32** %3, align 8
  %94 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %93, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.38, i64 0, i64 0))
  %95 = load i32*, i32** %3, align 8
  %96 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %95, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.39, i64 0, i64 0))
  %97 = load i32*, i32** %3, align 8
  %98 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %97, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.40, i64 0, i64 0))
  %99 = load i32*, i32** %3, align 8
  %100 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %99, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.41, i64 0, i64 0))
  %101 = load i32*, i32** %3, align 8
  %102 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %101, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.42, i64 0, i64 0))
  %103 = load i32*, i32** %3, align 8
  %104 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %103, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.43, i64 0, i64 0))
  %105 = load i32*, i32** %3, align 8
  %106 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %105, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.44, i64 0, i64 0))
  %107 = load i32*, i32** %3, align 8
  %108 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %107, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.45, i64 0, i64 0))
  %109 = load i32*, i32** %3, align 8
  %110 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %109, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.46, i64 0, i64 0))
  %111 = load i32*, i32** %3, align 8
  %112 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %111, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.47, i64 0, i64 0))
  %113 = load i32*, i32** %3, align 8
  %114 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %113, i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.48, i64 0, i64 0))
  %115 = load i32*, i32** %3, align 8
  %116 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %115, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.49, i64 0, i64 0))
  %117 = load i32*, i32** %3, align 8
  %118 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %117, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.50, i64 0, i64 0))
  %119 = load i32*, i32** %3, align 8
  %120 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %119, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.51, i64 0, i64 0))
  %121 = load i32*, i32** %3, align 8
  %122 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %121, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.52, i64 0, i64 0))
  %123 = load i32*, i32** %3, align 8
  %124 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %123, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.53, i64 0, i64 0))
  %125 = load i32*, i32** %3, align 8
  %126 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %125, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.54, i64 0, i64 0))
  %127 = load i32*, i32** %3, align 8
  %128 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %127, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.55, i64 0, i64 0))
  %129 = load i32*, i32** %3, align 8
  %130 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %129, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.56, i64 0, i64 0))
  %131 = load i32*, i32** %3, align 8
  %132 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %131, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.57, i64 0, i64 0))
  %133 = load i32*, i32** %3, align 8
  %134 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %133, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.58, i64 0, i64 0))
  %135 = load i32*, i32** %3, align 8
  %136 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %135, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.59, i64 0, i64 0))
  %137 = load i32*, i32** %3, align 8
  %138 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %137, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.60, i64 0, i64 0))
  %139 = load i32*, i32** %3, align 8
  %140 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %139, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.61, i64 0, i64 0))
  %141 = load i32*, i32** %3, align 8
  %142 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %141, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.62, i64 0, i64 0))
  %143 = load i32*, i32** %3, align 8
  %144 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %143, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.63, i64 0, i64 0))
  %145 = load i32*, i32** %3, align 8
  %146 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %145, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.64, i64 0, i64 0))
  %147 = load i32*, i32** %3, align 8
  %148 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %147, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.65, i64 0, i64 0))
  %149 = load i32*, i32** %3, align 8
  %150 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %149, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.66, i64 0, i64 0))
  %151 = load i32*, i32** %3, align 8
  %152 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %151, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.67, i64 0, i64 0))
  %153 = load i32*, i32** %3, align 8
  %154 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %153, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.68, i64 0, i64 0))
  %155 = load i32*, i32** %3, align 8
  %156 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %155, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.69, i64 0, i64 0))
  %157 = load i32*, i32** %3, align 8
  %158 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %157, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.70, i64 0, i64 0))
  %159 = load i32*, i32** %3, align 8
  %160 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %159, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.71, i64 0, i64 0))
  %161 = load i32*, i32** %3, align 8
  %162 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %161, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.72, i64 0, i64 0))
  %163 = load i32*, i32** %3, align 8
  %164 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %163, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.73, i64 0, i64 0))
  %165 = load i32*, i32** %3, align 8
  %166 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %165, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.74, i64 0, i64 0))
  %167 = load i32*, i32** %3, align 8
  %168 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %167, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.75, i64 0, i64 0))
  %169 = load i32*, i32** %3, align 8
  %170 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %169, i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.76, i64 0, i64 0))
  %171 = load i32*, i32** %3, align 8
  %172 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %171, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.77, i64 0, i64 0))
  %173 = load i32*, i32** %3, align 8
  %174 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %173, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.78, i64 0, i64 0))
  %175 = load i32*, i32** %3, align 8
  %176 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %175, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %177 = load i32*, i32** %3, align 8
  %178 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %177, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.79, i64 0, i64 0))
  %179 = load i32*, i32** %3, align 8
  %180 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %179, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %181 = load i32*, i32** %3, align 8
  %182 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %181, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %183 = load i32*, i32** %3, align 8
  %184 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %183, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %185 = load i32*, i32** %3, align 8
  %186 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %185, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %187 = load i32*, i32** %3, align 8
  %188 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %187, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.84, i64 0, i64 0))
  %189 = load i32*, i32** %3, align 8
  %190 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %189, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %191 = load i32*, i32** %3, align 8
  %192 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %191, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.85, i64 0, i64 0))
  %193 = load i32*, i32** %3, align 8
  %194 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %193, i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.86, i64 0, i64 0))
  %195 = load i32*, i32** %3, align 8
  %196 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %195, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.87, i64 0, i64 0))
  %197 = load i32*, i32** %3, align 8
  %198 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %197, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.88, i64 0, i64 0))
  %199 = load i32*, i32** %3, align 8
  %200 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %199, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.89, i64 0, i64 0))
  %201 = load i32*, i32** %3, align 8
  %202 = load i64, i64* @basl_acpi_base, align 8
  %203 = load i64, i64* @FACS_OFFSET, align 8
  %204 = add nsw i64 %202, %203
  %205 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %201, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.90, i64 0, i64 0), i64 %204)
  %206 = load i32*, i32** %3, align 8
  %207 = load i64, i64* @basl_acpi_base, align 8
  %208 = load i64, i64* @DSDT_OFFSET, align 8
  %209 = add nsw i64 %207, %208
  %210 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %206, i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.91, i64 0, i64 0), i64 %209)
  %211 = load i32*, i32** %3, align 8
  %212 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %211, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.92, i64 0, i64 0))
  %213 = load i32*, i32** %3, align 8
  %214 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %213, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %215 = load i32*, i32** %3, align 8
  %216 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %215, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.93, i64 0, i64 0))
  %217 = load i32*, i32** %3, align 8
  %218 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %217, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %219 = load i32*, i32** %3, align 8
  %220 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %219, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.94, i64 0, i64 0))
  %221 = load i32*, i32** %3, align 8
  %222 = load i32, i32* @PM1A_EVT_ADDR, align 4
  %223 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %221, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.95, i64 0, i64 0), i32 %222)
  %224 = load i32*, i32** %3, align 8
  %225 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %224, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %226 = load i32*, i32** %3, align 8
  %227 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %226, i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.96, i64 0, i64 0))
  %228 = load i32*, i32** %3, align 8
  %229 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %228, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %230 = load i32*, i32** %3, align 8
  %231 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %230, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %232 = load i32*, i32** %3, align 8
  %233 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %232, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %234 = load i32*, i32** %3, align 8
  %235 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %234, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %236 = load i32*, i32** %3, align 8
  %237 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %236, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %238 = load i32*, i32** %3, align 8
  %239 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %238, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %240 = load i32*, i32** %3, align 8
  %241 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %240, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.100, i64 0, i64 0))
  %242 = load i32*, i32** %3, align 8
  %243 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %242, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %244 = load i32*, i32** %3, align 8
  %245 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %244, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.101, i64 0, i64 0))
  %246 = load i32*, i32** %3, align 8
  %247 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %246, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %248 = load i32*, i32** %3, align 8
  %249 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %248, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.94, i64 0, i64 0))
  %250 = load i32*, i32** %3, align 8
  %251 = load i32, i32* @PM1A_CNT_ADDR, align 4
  %252 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %250, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.95, i64 0, i64 0), i32 %251)
  %253 = load i32*, i32** %3, align 8
  %254 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %253, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %255 = load i32*, i32** %3, align 8
  %256 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %255, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.102, i64 0, i64 0))
  %257 = load i32*, i32** %3, align 8
  %258 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %257, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %259 = load i32*, i32** %3, align 8
  %260 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %259, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %261 = load i32*, i32** %3, align 8
  %262 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %261, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %263 = load i32*, i32** %3, align 8
  %264 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %263, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %265 = load i32*, i32** %3, align 8
  %266 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %265, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %267 = load i32*, i32** %3, align 8
  %268 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %267, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %269 = load i32*, i32** %3, align 8
  %270 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %269, i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.103, i64 0, i64 0))
  %271 = load i32*, i32** %3, align 8
  %272 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %271, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %273 = load i32*, i32** %3, align 8
  %274 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %273, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %275 = load i32*, i32** %3, align 8
  %276 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %275, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %277 = load i32*, i32** %3, align 8
  %278 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %277, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %279 = load i32*, i32** %3, align 8
  %280 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %279, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %281 = load i32*, i32** %3, align 8
  %282 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %281, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %283 = load i32*, i32** %3, align 8
  %284 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %283, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.104, i64 0, i64 0))
  %285 = load i32*, i32** %3, align 8
  %286 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %285, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %287 = load i32*, i32** %3, align 8
  %288 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %287, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.93, i64 0, i64 0))
  %289 = load i32*, i32** %3, align 8
  %290 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %289, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %291 = load i32*, i32** %3, align 8
  %292 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %291, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.105, i64 0, i64 0))
  %293 = load i32*, i32** %3, align 8
  %294 = load i32, i32* @IO_PMTMR, align 4
  %295 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %293, i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.95, i64 0, i64 0), i32 %294)
  %296 = load i32*, i32** %3, align 8
  %297 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %296, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %298 = load i32*, i32** %3, align 8
  %299 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %298, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.106, i64 0, i64 0))
  %300 = load i32*, i32** %3, align 8
  %301 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %300, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %302 = load i32*, i32** %3, align 8
  %303 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %302, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %304 = load i32*, i32** %3, align 8
  %305 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %304, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %306 = load i32*, i32** %3, align 8
  %307 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %306, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %308 = load i32*, i32** %3, align 8
  %309 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %308, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %310 = load i32*, i32** %3, align 8
  %311 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %310, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %312 = load i32*, i32** %3, align 8
  %313 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %312, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.107, i64 0, i64 0))
  %314 = load i32*, i32** %3, align 8
  %315 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %314, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %316 = load i32*, i32** %3, align 8
  %317 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %316, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.97, i64 0, i64 0))
  %318 = load i32*, i32** %3, align 8
  %319 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %318, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %320 = load i32*, i32** %3, align 8
  %321 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %320, i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.98, i64 0, i64 0))
  %322 = load i32*, i32** %3, align 8
  %323 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %322, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %324 = load i32*, i32** %3, align 8
  %325 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %324, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %326 = load i32*, i32** %3, align 8
  %327 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %326, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.108, i64 0, i64 0))
  %328 = load i32*, i32** %3, align 8
  %329 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %328, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %330 = load i32*, i32** %3, align 8
  %331 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %330, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %332 = load i32*, i32** %3, align 8
  %333 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %332, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %334 = load i32*, i32** %3, align 8
  %335 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %334, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %336 = load i32*, i32** %3, align 8
  %337 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %336, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %338 = load i32*, i32** %3, align 8
  %339 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %338, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.12, i64 0, i64 0))
  %340 = load i32*, i32** %3, align 8
  %341 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %340, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.109, i64 0, i64 0))
  %342 = load i32*, i32** %3, align 8
  %343 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %342, i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.80, i64 0, i64 0))
  %344 = load i32*, i32** %3, align 8
  %345 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %344, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.81, i64 0, i64 0))
  %346 = load i32*, i32** %3, align 8
  %347 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %346, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i64 0, i64 0))
  %348 = load i32*, i32** %3, align 8
  %349 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %348, i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.83, i64 0, i64 0))
  %350 = load i32*, i32** %3, align 8
  %351 = call i32 (i32*, i8*, ...) @EFPRINTF(i32* %350, i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.99, i64 0, i64 0))
  %352 = load i32*, i32** %3, align 8
  %353 = call i32 @EFFLUSH(i32* %352)
  store i32 0, i32* %2, align 4
  br label %356

354:                                              ; No predecessors!
  %355 = load i32, i32* @errno, align 4
  store i32 %355, i32* %2, align 4
  br label %356

356:                                              ; preds = %354, %1
  %357 = load i32, i32* %2, align 4
  ret i32 %357
}

declare dso_local i32 @EFPRINTF(i32*, i8*, ...) #1

declare dso_local i32 @EFFLUSH(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
