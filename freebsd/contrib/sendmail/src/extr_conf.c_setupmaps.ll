; ModuleID = '/home/carl/AnghaBench/freebsd/contrib/sendmail/src/extr_conf.c_setupmaps.c'
source_filename = "/home/carl/AnghaBench/freebsd/contrib/sendmail/src/extr_conf.c_setupmaps.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [5 x i8] c"host\00", align 1
@host_map_init = common dso_local global i32 0, align 4
@null_map_open = common dso_local global i32 0, align 4
@null_map_close = common dso_local global i32 0, align 4
@host_map_lookup = common dso_local global i32 0, align 4
@null_map_store = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [5 x i8] c"text\00", align 1
@MCF_ALIASOK = common dso_local global i32 0, align 4
@map_parseargs = common dso_local global i32 0, align 4
@text_map_open = common dso_local global i32 0, align 4
@text_map_lookup = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [5 x i8] c"stab\00", align 1
@MCF_ALIASONLY = common dso_local global i32 0, align 4
@stab_map_open = common dso_local global i32 0, align 4
@stab_map_lookup = common dso_local global i32 0, align 4
@stab_map_store = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [9 x i8] c"implicit\00", align 1
@MCF_REBUILDABLE = common dso_local global i32 0, align 4
@impl_map_open = common dso_local global i32 0, align 4
@impl_map_close = common dso_local global i32 0, align 4
@impl_map_lookup = common dso_local global i32 0, align 4
@impl_map_store = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [5 x i8] c"user\00", align 1
@MCF_OPTFILE = common dso_local global i32 0, align 4
@user_map_open = common dso_local global i32 0, align 4
@user_map_lookup = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [8 x i8] c"dequote\00", align 1
@dequote_init = common dso_local global i32 0, align 4
@dequote_map = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [8 x i8] c"program\00", align 1
@prog_map_lookup = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [9 x i8] c"sequence\00", align 1
@seq_map_parse = common dso_local global i32 0, align 4
@seq_map_lookup = common dso_local global i32 0, align 4
@seq_map_store = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [7 x i8] c"switch\00", align 1
@switch_map_open = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [5 x i8] c"null\00", align 1
@null_map_lookup = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [7 x i8] c"syslog\00", align 1
@syslog_map_parseargs = common dso_local global i32 0, align 4
@syslog_map_lookup = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [6 x i8] c"macro\00", align 1
@macro_map_lookup = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [6 x i8] c"arith\00", align 1
@arith_map_lookup = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [5 x i8] c"arpa\00", align 1
@arpa_map_lookup = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [6 x i8] c"bogus\00", align 1
@bogus_map_lookup = common dso_local global i32 0, align 4
@DB_VERSION_MAJOR = common dso_local global i32 0, align 4
@DB_VERSION_MINOR = common dso_local global i32 0, align 4
@DB_VERSION_PATCH = common dso_local global i32 0, align 4
@MCF_NOTPERSIST = common dso_local global i32 0, align 4
@bestmx_map_lookup = common dso_local global i32 0, align 4
@bt_map_open = common dso_local global i32 0, align 4
@db_map_close = common dso_local global i32 0, align 4
@db_map_lookup = common dso_local global i32 0, align 4
@db_map_store = common dso_local global i32 0, align 4
@dns_map_init = common dso_local global i32 0, align 4
@dns_map_lookup = common dso_local global i32 0, align 4
@dns_map_open = common dso_local global i32 0, align 4
@dns_map_parseargs = common dso_local global i32 0, align 4
@dprintf_map_lookup = common dso_local global i32 0, align 4
@dprintf_map_parseargs = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@hash_map_open = common dso_local global i32 0, align 4
@hes_map_close = common dso_local global i32 0, align 4
@hes_map_lookup = common dso_local global i32 0, align 4
@hes_map_open = common dso_local global i32 0, align 4
@ldapmap_close = common dso_local global i32 0, align 4
@ldapmap_lookup = common dso_local global i32 0, align 4
@ldapmap_open = common dso_local global i32 0, align 4
@ldapmap_parseargs = common dso_local global i32 0, align 4
@ndbm_map_close = common dso_local global i32 0, align 4
@ndbm_map_lookup = common dso_local global i32 0, align 4
@ndbm_map_open = common dso_local global i32 0, align 4
@ndbm_map_store = common dso_local global i32 0, align 4
@ni_map_lookup = common dso_local global i32 0, align 4
@ni_map_open = common dso_local global i32 0, align 4
@nis_map_lookup = common dso_local global i32 0, align 4
@nis_map_open = common dso_local global i32 0, align 4
@nisplus_map_lookup = common dso_local global i32 0, align 4
@nisplus_map_open = common dso_local global i32 0, align 4
@nsd_map_lookup = common dso_local global i32 0, align 4
@ph_map_close = common dso_local global i32 0, align 4
@ph_map_lookup = common dso_local global i32 0, align 4
@ph_map_open = common dso_local global i32 0, align 4
@ph_map_parseargs = common dso_local global i32 0, align 4
@regex_map_init = common dso_local global i32 0, align 4
@regex_map_lookup = common dso_local global i32 0, align 4
@socket_map_close = common dso_local global i32 0, align 4
@socket_map_lookup = common dso_local global i32 0, align 4
@socket_map_open = common dso_local global i32 0, align 4
@udb_map_lookup = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @setupmaps to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @setupmaps() #0 {
  %1 = alloca i32*, align 8
  %2 = load i32, i32* @host_map_init, align 4
  %3 = load i32, i32* @null_map_open, align 4
  %4 = load i32, i32* @null_map_close, align 4
  %5 = load i32, i32* @host_map_lookup, align 4
  %6 = load i32, i32* @null_map_store, align 4
  %7 = call i32 @MAPDEF(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i8* null, i32 0, i32 %2, i32 %3, i32 %4, i32 %5, i32 %6)
  %8 = load i32, i32* @MCF_ALIASOK, align 4
  %9 = load i32, i32* @map_parseargs, align 4
  %10 = load i32, i32* @text_map_open, align 4
  %11 = load i32, i32* @null_map_close, align 4
  %12 = load i32, i32* @text_map_lookup, align 4
  %13 = load i32, i32* @null_map_store, align 4
  %14 = call i32 @MAPDEF(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i8* null, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13)
  %15 = load i32, i32* @MCF_ALIASOK, align 4
  %16 = load i32, i32* @MCF_ALIASONLY, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @map_parseargs, align 4
  %19 = load i32, i32* @stab_map_open, align 4
  %20 = load i32, i32* @null_map_close, align 4
  %21 = load i32, i32* @stab_map_lookup, align 4
  %22 = load i32, i32* @stab_map_store, align 4
  %23 = call i32 @MAPDEF(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i64 0, i64 0), i8* null, i32 %17, i32 %18, i32 %19, i32 %20, i32 %21, i32 %22)
  %24 = load i32, i32* @MCF_ALIASOK, align 4
  %25 = load i32, i32* @MCF_ALIASONLY, align 4
  %26 = or i32 %24, %25
  %27 = load i32, i32* @MCF_REBUILDABLE, align 4
  %28 = or i32 %26, %27
  %29 = load i32, i32* @map_parseargs, align 4
  %30 = load i32, i32* @impl_map_open, align 4
  %31 = load i32, i32* @impl_map_close, align 4
  %32 = load i32, i32* @impl_map_lookup, align 4
  %33 = load i32, i32* @impl_map_store, align 4
  %34 = call i32 @MAPDEF(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i64 0, i64 0), i8* null, i32 %28, i32 %29, i32 %30, i32 %31, i32 %32, i32 %33)
  %35 = load i32, i32* @MCF_OPTFILE, align 4
  %36 = load i32, i32* @map_parseargs, align 4
  %37 = load i32, i32* @user_map_open, align 4
  %38 = load i32, i32* @null_map_close, align 4
  %39 = load i32, i32* @user_map_lookup, align 4
  %40 = load i32, i32* @null_map_store, align 4
  %41 = call i32 @MAPDEF(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0), i8* null, i32 %35, i32 %36, i32 %37, i32 %38, i32 %39, i32 %40)
  %42 = load i32, i32* @dequote_init, align 4
  %43 = load i32, i32* @null_map_open, align 4
  %44 = load i32, i32* @null_map_close, align 4
  %45 = load i32, i32* @dequote_map, align 4
  %46 = load i32, i32* @null_map_store, align 4
  %47 = call i32 @MAPDEF(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.5, i64 0, i64 0), i8* null, i32 0, i32 %42, i32 %43, i32 %44, i32 %45, i32 %46)
  %48 = load i32, i32* @MCF_ALIASOK, align 4
  %49 = load i32, i32* @map_parseargs, align 4
  %50 = load i32, i32* @null_map_open, align 4
  %51 = load i32, i32* @null_map_close, align 4
  %52 = load i32, i32* @prog_map_lookup, align 4
  %53 = load i32, i32* @null_map_store, align 4
  %54 = call i32 @MAPDEF(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i64 0, i64 0), i8* null, i32 %48, i32 %49, i32 %50, i32 %51, i32 %52, i32 %53)
  %55 = load i32, i32* @MCF_ALIASOK, align 4
  %56 = load i32, i32* @seq_map_parse, align 4
  %57 = load i32, i32* @null_map_open, align 4
  %58 = load i32, i32* @null_map_close, align 4
  %59 = load i32, i32* @seq_map_lookup, align 4
  %60 = load i32, i32* @seq_map_store, align 4
  %61 = call i32 @MAPDEF(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i64 0, i64 0), i8* null, i32 %55, i32 %56, i32 %57, i32 %58, i32 %59, i32 %60)
  %62 = load i32, i32* @MCF_ALIASOK, align 4
  %63 = load i32, i32* @map_parseargs, align 4
  %64 = load i32, i32* @switch_map_open, align 4
  %65 = load i32, i32* @null_map_close, align 4
  %66 = load i32, i32* @seq_map_lookup, align 4
  %67 = load i32, i32* @seq_map_store, align 4
  %68 = call i32 @MAPDEF(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.8, i64 0, i64 0), i8* null, i32 %62, i32 %63, i32 %64, i32 %65, i32 %66, i32 %67)
  %69 = load i32, i32* @MCF_ALIASOK, align 4
  %70 = load i32, i32* @MCF_OPTFILE, align 4
  %71 = or i32 %69, %70
  %72 = load i32, i32* @map_parseargs, align 4
  %73 = load i32, i32* @null_map_open, align 4
  %74 = load i32, i32* @null_map_close, align 4
  %75 = load i32, i32* @null_map_lookup, align 4
  %76 = load i32, i32* @null_map_store, align 4
  %77 = call i32 @MAPDEF(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i64 0, i64 0), i8* null, i32 %71, i32 %72, i32 %73, i32 %74, i32 %75, i32 %76)
  %78 = load i32, i32* @syslog_map_parseargs, align 4
  %79 = load i32, i32* @null_map_open, align 4
  %80 = load i32, i32* @null_map_close, align 4
  %81 = load i32, i32* @syslog_map_lookup, align 4
  %82 = load i32, i32* @null_map_store, align 4
  %83 = call i32 @MAPDEF(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.10, i64 0, i64 0), i8* null, i32 0, i32 %78, i32 %79, i32 %80, i32 %81, i32 %82)
  %84 = load i32, i32* @dequote_init, align 4
  %85 = load i32, i32* @null_map_open, align 4
  %86 = load i32, i32* @null_map_close, align 4
  %87 = load i32, i32* @macro_map_lookup, align 4
  %88 = load i32, i32* @null_map_store, align 4
  %89 = call i32 @MAPDEF(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.11, i64 0, i64 0), i8* null, i32 0, i32 %84, i32 %85, i32 %86, i32 %87, i32 %88)
  %90 = load i32, i32* @dequote_init, align 4
  %91 = load i32, i32* @null_map_open, align 4
  %92 = load i32, i32* @null_map_close, align 4
  %93 = load i32, i32* @arith_map_lookup, align 4
  %94 = load i32, i32* @null_map_store, align 4
  %95 = call i32 @MAPDEF(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0), i8* null, i32 0, i32 %90, i32 %91, i32 %92, i32 %93, i32 %94)
  %96 = load i32, i32* @dequote_init, align 4
  %97 = load i32, i32* @null_map_open, align 4
  %98 = load i32, i32* @null_map_close, align 4
  %99 = load i32, i32* @arpa_map_lookup, align 4
  %100 = load i32, i32* @null_map_store, align 4
  %101 = call i32 @MAPDEF(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13, i64 0, i64 0), i8* null, i32 0, i32 %96, i32 %97, i32 %98, i32 %99, i32 %100)
  %102 = call i64 @tTd(i32 38, i32 2)
  %103 = icmp ne i64 %102, 0
  br i1 %103, label %104, label %114

104:                                              ; preds = %0
  %105 = load i32, i32* @MCF_ALIASOK, align 4
  %106 = load i32, i32* @MCF_OPTFILE, align 4
  %107 = or i32 %105, %106
  %108 = load i32, i32* @map_parseargs, align 4
  %109 = load i32, i32* @null_map_open, align 4
  %110 = load i32, i32* @null_map_close, align 4
  %111 = load i32, i32* @bogus_map_lookup, align 4
  %112 = load i32, i32* @null_map_store, align 4
  %113 = call i32 @MAPDEF(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0), i8* null, i32 %107, i32 %108, i32 %109, i32 %110, i32 %111, i32 %112)
  br label %114

114:                                              ; preds = %104, %0
  ret void
}

declare dso_local i32 @MAPDEF(i8*, i8*, i32, i32, i32, i32, i32, i32) #1

declare dso_local i64 @tTd(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
