; ModuleID = '/home/carl/AnghaBench/freebsd/contrib/gdb/gdb/extr_corelow.c_core_open.c'
source_filename = "/home/carl/AnghaBench/freebsd/contrib/gdb/gdb/extr_corelow.c_core_open.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_4__ = type { i32, i32 }
%struct.cleanup = type { i32 }

@core_bfd = common dso_local global i32* null, align 8
@.str = private unnamed_addr constant [71 x i8] c"No core file specified.  (Use `detach' to stop debugging a core file.)\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"No core file specified.\00", align 1
@current_directory = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@O_BINARY = common dso_local global i32 0, align 4
@write_files = common dso_local global i64 0, align 8
@O_RDWR = common dso_local global i32 0, align 4
@O_RDONLY = common dso_local global i32 0, align 4
@gnutarget = common dso_local global i32 0, align 4
@bfd_core = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [28 x i8] c"\22%s\22 is not a core dump: %s\00", align 1
@core_ops = common dso_local global %struct.TYPE_4__ zeroinitializer, align 4
@core_gdbarch = common dso_local global i32 0, align 4
@core_vec = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [30 x i8] c"\22%s\22: Can't find sections: %s\00", align 1
@exec_bfd = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [29 x i8] c"Core was generated by `%s'.\0A\00", align 1
@.str.6 = private unnamed_addr constant [40 x i8] c"Program terminated with signal %d, %s.\0A\00", align 1
@add_to_thread_list = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [5 x i8] c".reg\00", align 1
@deprecated_selected_frame = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [90 x i8] c"you won't be able to access this core file until you terminate\0Ayour %s; do ``info files''\00", align 1
@target_longname = common dso_local global i32 0, align 4
@RETURN_MASK_ALL = common dso_local global i32 0, align 4
@solib_add_stub = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, i32)* @core_open to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @core_open(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i8*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.cleanup*, align 8
  %8 = alloca i8*, align 8
  %9 = alloca i32*, align 8
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %12 = load i32, i32* %4, align 4
  %13 = call i32 @target_preopen(i32 %12)
  %14 = load i8*, i8** %3, align 8
  %15 = icmp ne i8* %14, null
  br i1 %15, label %22, label %16

16:                                               ; preds = %2
  %17 = load i32*, i32** @core_bfd, align 8
  %18 = icmp ne i32* %17, null
  %19 = zext i1 %18 to i64
  %20 = select i1 %18, i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str, i64 0, i64 0), i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0)
  %21 = call i32 (i8*, ...) @error(i8* %20)
  br label %22

22:                                               ; preds = %16, %2
  %23 = load i8*, i8** %3, align 8
  %24 = call i8* @tilde_expand(i8* %23)
  store i8* %24, i8** %3, align 8
  %25 = load i8*, i8** %3, align 8
  %26 = getelementptr inbounds i8, i8* %25, i64 0
  %27 = load i8, i8* %26, align 1
  %28 = sext i8 %27 to i32
  %29 = icmp ne i32 %28, 47
  br i1 %29, label %30, label %37

30:                                               ; preds = %22
  %31 = load i32, i32* @current_directory, align 4
  %32 = load i8*, i8** %3, align 8
  %33 = call i8* @concat(i32 %31, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.2, i64 0, i64 0), i8* %32, i32* null)
  store i8* %33, i8** %8, align 8
  %34 = load i8*, i8** %3, align 8
  %35 = call i32 @xfree(i8* %34)
  %36 = load i8*, i8** %8, align 8
  store i8* %36, i8** %3, align 8
  br label %37

37:                                               ; preds = %30, %22
  %38 = load i8*, i8** %3, align 8
  %39 = call %struct.cleanup* @make_cleanup(i32 (i8*)* @xfree, i8* %38)
  store %struct.cleanup* %39, %struct.cleanup** %7, align 8
  %40 = load i8*, i8** %3, align 8
  %41 = load i32, i32* @O_BINARY, align 4
  %42 = load i64, i64* @write_files, align 8
  %43 = icmp ne i64 %42, 0
  br i1 %43, label %44, label %46

44:                                               ; preds = %37
  %45 = load i32, i32* @O_RDWR, align 4
  br label %48

46:                                               ; preds = %37
  %47 = load i32, i32* @O_RDONLY, align 4
  br label %48

48:                                               ; preds = %46, %44
  %49 = phi i32 [ %45, %44 ], [ %47, %46 ]
  %50 = or i32 %41, %49
  %51 = call i32 @open(i8* %40, i32 %50, i32 0)
  store i32 %51, i32* %11, align 4
  %52 = load i32, i32* %11, align 4
  %53 = icmp slt i32 %52, 0
  br i1 %53, label %54, label %57

54:                                               ; preds = %48
  %55 = load i8*, i8** %3, align 8
  %56 = call i32 @perror_with_name(i8* %55)
  br label %57

57:                                               ; preds = %54, %48
  %58 = load i8*, i8** %3, align 8
  %59 = load i32, i32* @gnutarget, align 4
  %60 = load i32, i32* %11, align 4
  %61 = call i32* @bfd_fdopenr(i8* %58, i32 %59, i32 %60)
  store i32* %61, i32** %9, align 8
  %62 = load i32*, i32** %9, align 8
  %63 = icmp eq i32* %62, null
  br i1 %63, label %64, label %67

64:                                               ; preds = %57
  %65 = load i8*, i8** %3, align 8
  %66 = call i32 @perror_with_name(i8* %65)
  br label %67

67:                                               ; preds = %64, %57
  %68 = load i32*, i32** %9, align 8
  %69 = load i32, i32* @bfd_core, align 4
  %70 = call i32 @bfd_check_format(i32* %68, i32 %69)
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %83, label %72

72:                                               ; preds = %67
  %73 = load i32*, i32** %9, align 8
  %74 = call i32 @gdb_check_format(i32* %73)
  %75 = icmp ne i32 %74, 0
  br i1 %75, label %83, label %76

76:                                               ; preds = %72
  %77 = load i32*, i32** %9, align 8
  %78 = call i32 @make_cleanup_bfd_close(i32* %77)
  %79 = load i8*, i8** %3, align 8
  %80 = call i32 (...) @bfd_get_error()
  %81 = call i8* @bfd_errmsg(i32 %80)
  %82 = call i32 (i8*, ...) @error(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.3, i64 0, i64 0), i8* %79, i8* %81)
  br label %83

83:                                               ; preds = %76, %72, %67
  %84 = load %struct.cleanup*, %struct.cleanup** %7, align 8
  %85 = call i32 @discard_cleanups(%struct.cleanup* %84)
  %86 = call i32 @unpush_target(%struct.TYPE_4__* @core_ops)
  %87 = load i32*, i32** %9, align 8
  store i32* %87, i32** @core_bfd, align 8
  %88 = call %struct.cleanup* @make_cleanup(i32 (i8*)* @core_close_cleanup, i8* null)
  store %struct.cleanup* %88, %struct.cleanup** %7, align 8
  %89 = load i32*, i32** @core_bfd, align 8
  %90 = call i32 @gdbarch_from_bfd(i32* %89)
  store i32 %90, i32* @core_gdbarch, align 4
  %91 = load i32*, i32** @core_bfd, align 8
  %92 = call i32 @sniff_core_bfd(i32* %91)
  store i32 %92, i32* @core_vec, align 4
  %93 = call i32 (...) @validate_files()
  %94 = load i32*, i32** @core_bfd, align 8
  %95 = call i64 @build_section_table(i32* %94, i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @core_ops, i32 0, i32 1), i32* getelementptr inbounds (%struct.TYPE_4__, %struct.TYPE_4__* @core_ops, i32 0, i32 0))
  %96 = icmp ne i64 %95, 0
  br i1 %96, label %97, label %103

97:                                               ; preds = %83
  %98 = load i32*, i32** @core_bfd, align 8
  %99 = call i8* @bfd_get_filename(i32* %98)
  %100 = call i32 (...) @bfd_get_error()
  %101 = call i8* @bfd_errmsg(i32 %100)
  %102 = call i32 (i8*, ...) @error(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.4, i64 0, i64 0), i8* %99, i8* %101)
  br label %103

103:                                              ; preds = %97, %83
  %104 = load i32, i32* @exec_bfd, align 4
  %105 = icmp ne i32 %104, 0
  br i1 %105, label %109, label %106

106:                                              ; preds = %103
  %107 = load i32*, i32** @core_bfd, align 8
  %108 = call i32 @set_gdbarch_from_file(i32* %107)
  br label %109

109:                                              ; preds = %106, %103
  %110 = call i32 @push_target(%struct.TYPE_4__* @core_ops)
  %111 = icmp ne i32 %110, 0
  %112 = xor i1 %111, true
  %113 = zext i1 %112 to i32
  store i32 %113, i32* %10, align 4
  %114 = load %struct.cleanup*, %struct.cleanup** %7, align 8
  %115 = call i32 @discard_cleanups(%struct.cleanup* %114)
  %116 = load i32*, i32** @core_bfd, align 8
  %117 = call i8* @bfd_core_file_failing_command(i32* %116)
  store i8* %117, i8** %5, align 8
  %118 = load i8*, i8** %5, align 8
  %119 = icmp ne i8* %118, null
  br i1 %119, label %120, label %123

120:                                              ; preds = %109
  %121 = load i8*, i8** %5, align 8
  %122 = call i32 (i8*, ...) @printf_filtered(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.5, i64 0, i64 0), i8* %121)
  br label %123

123:                                              ; preds = %120, %109
  %124 = load i32*, i32** @core_bfd, align 8
  %125 = call i32 @bfd_core_file_failing_signal(i32* %124)
  store i32 %125, i32* %6, align 4
  %126 = load i32, i32* %6, align 4
  %127 = icmp sgt i32 %126, 0
  br i1 %127, label %128, label %134

128:                                              ; preds = %123
  %129 = load i32, i32* %6, align 4
  %130 = load i32, i32* %6, align 4
  %131 = call i32 @target_signal_from_host(i32 %130)
  %132 = call i32 @target_signal_to_string(i32 %131)
  %133 = call i32 (i8*, ...) @printf_filtered(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.6, i64 0, i64 0), i32 %129, i32 %132)
  br label %134

134:                                              ; preds = %128, %123
  %135 = call i32 (...) @init_thread_list()
  %136 = load i32*, i32** @core_bfd, align 8
  %137 = load i32, i32* @add_to_thread_list, align 4
  %138 = load i32*, i32** @core_bfd, align 8
  %139 = call i32 @bfd_get_section_by_name(i32* %138, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0))
  %140 = call i32 @bfd_map_over_sections(i32* %136, i32 %137, i32 %139)
  %141 = load i32, i32* %10, align 4
  %142 = icmp ne i32 %141, 0
  br i1 %142, label %143, label %152

143:                                              ; preds = %134
  %144 = call i32 @target_fetch_registers(i32 -1)
  %145 = call i32 (...) @flush_cached_frames()
  %146 = call i32 (...) @get_current_frame()
  %147 = call i32 @select_frame(i32 %146)
  %148 = load i32, i32* @deprecated_selected_frame, align 4
  %149 = load i32, i32* @deprecated_selected_frame, align 4
  %150 = call i32 @frame_relative_level(i32 %149)
  %151 = call i32 @print_stack_frame(i32 %148, i32 %150, i32 1)
  br label %155

152:                                              ; preds = %134
  %153 = load i32, i32* @target_longname, align 4
  %154 = call i32 @warning(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.8, i64 0, i64 0), i32 %153)
  br label %155

155:                                              ; preds = %152, %143
  ret void
}

declare dso_local i32 @target_preopen(i32) #1

declare dso_local i32 @error(i8*, ...) #1

declare dso_local i8* @tilde_expand(i8*) #1

declare dso_local i8* @concat(i32, i8*, i8*, i32*) #1

declare dso_local i32 @xfree(i8*) #1

declare dso_local %struct.cleanup* @make_cleanup(i32 (i8*)*, i8*) #1

declare dso_local i32 @open(i8*, i32, i32) #1

declare dso_local i32 @perror_with_name(i8*) #1

declare dso_local i32* @bfd_fdopenr(i8*, i32, i32) #1

declare dso_local i32 @bfd_check_format(i32*, i32) #1

declare dso_local i32 @gdb_check_format(i32*) #1

declare dso_local i32 @make_cleanup_bfd_close(i32*) #1

declare dso_local i8* @bfd_errmsg(i32) #1

declare dso_local i32 @bfd_get_error(...) #1

declare dso_local i32 @discard_cleanups(%struct.cleanup*) #1

declare dso_local i32 @unpush_target(%struct.TYPE_4__*) #1

declare dso_local i32 @core_close_cleanup(i8*) #1

declare dso_local i32 @gdbarch_from_bfd(i32*) #1

declare dso_local i32 @sniff_core_bfd(i32*) #1

declare dso_local i32 @validate_files(...) #1

declare dso_local i64 @build_section_table(i32*, i32*, i32*) #1

declare dso_local i8* @bfd_get_filename(i32*) #1

declare dso_local i32 @set_gdbarch_from_file(i32*) #1

declare dso_local i32 @push_target(%struct.TYPE_4__*) #1

declare dso_local i8* @bfd_core_file_failing_command(i32*) #1

declare dso_local i32 @printf_filtered(i8*, ...) #1

declare dso_local i32 @bfd_core_file_failing_signal(i32*) #1

declare dso_local i32 @target_signal_to_string(i32) #1

declare dso_local i32 @target_signal_from_host(i32) #1

declare dso_local i32 @init_thread_list(...) #1

declare dso_local i32 @bfd_map_over_sections(i32*, i32, i32) #1

declare dso_local i32 @bfd_get_section_by_name(i32*, i8*) #1

declare dso_local i32 @target_fetch_registers(i32) #1

declare dso_local i32 @flush_cached_frames(...) #1

declare dso_local i32 @select_frame(i32) #1

declare dso_local i32 @get_current_frame(...) #1

declare dso_local i32 @print_stack_frame(i32, i32, i32) #1

declare dso_local i32 @frame_relative_level(i32) #1

declare dso_local i32 @warning(i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
