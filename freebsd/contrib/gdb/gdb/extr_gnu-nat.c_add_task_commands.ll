; ModuleID = '/home/carl/AnghaBench/freebsd/contrib/gdb/gdb/extr_gnu-nat.c_add_task_commands.c'
source_filename = "/home/carl/AnghaBench/freebsd/contrib/gdb/gdb/extr_gnu-nat.c_add_task_commands.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [6 x i8] c"pause\00", align 1
@class_run = common dso_local global i32 0, align 4
@set_thread_default_pause_cmd = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [224 x i8] c"Set whether the new threads are suspended while gdb has control.\0AThis property normally has no effect because the whole task is\0Asuspended, however, that may be disabled with \22set task pause off\22.\0AThe default value is \22off\22.\00", align 1
@set_thread_default_cmd_list = common dso_local global i32 0, align 4
@no_class = common dso_local global i32 0, align 4
@show_thread_default_pause_cmd = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [62 x i8] c"Show whether new threads are suspended while gdb has control.\00", align 1
@show_thread_default_cmd_list = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [4 x i8] c"run\00", align 1
@set_thread_default_run_cmd = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [72 x i8] c"Set whether new threads are allowed to run (once gdb has noticed them).\00", align 1
@show_thread_default_run_cmd = common dso_local global i32 0, align 4
@.str.5 = private unnamed_addr constant [73 x i8] c"Show whether new threads are allowed to run (once gdb has noticed them).\00", align 1
@.str.6 = private unnamed_addr constant [21 x i8] c"detach-suspend-count\00", align 1
@set_thread_default_detach_sc_cmd = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [60 x i8] c"Set the default detach-suspend-count value for new threads.\00", align 1
@show_thread_default_detach_sc_cmd = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [61 x i8] c"Show the default detach-suspend-count value for new threads.\00", align 1
@.str.9 = private unnamed_addr constant [8 x i8] c"signals\00", align 1
@set_signals_cmd = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [125 x i8] c"Set whether the inferior process's signals will be intercepted.\0AMach exceptions (such as breakpoint traps) are not affected.\00", align 1
@setlist = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [5 x i8] c"sigs\00", align 1
@show_signals_cmd = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [65 x i8] c"Show whether the inferior process's signals will be intercepted.\00", align 1
@showlist = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [14 x i8] c"signal-thread\00", align 1
@set_sig_thread_cmd = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [128 x i8] c"Set the thread that gdb thinks is the libc signal thread.\0AThis thread is run when delivering a signal to a non-stopped process.\00", align 1
@.str.15 = private unnamed_addr constant [10 x i8] c"sigthread\00", align 1
@show_sig_thread_cmd = common dso_local global i32 0, align 4
@.str.16 = private unnamed_addr constant [58 x i8] c"Set the thread that gdb thinks is the libc signal thread.\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"stopped\00", align 1
@set_stopped_cmd = common dso_local global i32 0, align 4
@.str.18 = private unnamed_addr constant [132 x i8] c"Set whether gdb thinks the inferior process is stopped as with SIGSTOP.\0AStopped process will be continued by sending them a signal.\00", align 1
@.str.19 = private unnamed_addr constant [73 x i8] c"Show whether gdb thinks the inferior process is stopped as with SIGSTOP.\00", align 1
@.str.20 = private unnamed_addr constant [11 x i8] c"exceptions\00", align 1
@set_exceptions_cmd = common dso_local global i32 0, align 4
@.str.21 = private unnamed_addr constant [147 x i8] c"Set whether exceptions in the inferior process will be trapped.\0AWhen exceptions are turned off, neither breakpoints nor single-stepping\0Awill work.\00", align 1
@.str.22 = private unnamed_addr constant [4 x i8] c"exc\00", align 1
@show_exceptions_cmd = common dso_local global i32 0, align 4
@.str.23 = private unnamed_addr constant [65 x i8] c"Show whether exceptions in the inferior process will be trapped.\00", align 1
@.str.24 = private unnamed_addr constant [5 x i8] c"task\00", align 1
@set_task_cmd = common dso_local global i32 0, align 4
@.str.25 = private unnamed_addr constant [44 x i8] c"Command prefix for setting task attributes.\00", align 1
@set_task_cmd_list = common dso_local global i32 0, align 4
@.str.26 = private unnamed_addr constant [10 x i8] c"set task \00", align 1
@show_task_cmd = common dso_local global i32 0, align 4
@.str.27 = private unnamed_addr constant [44 x i8] c"Command prefix for showing task attributes.\00", align 1
@show_task_cmd_list = common dso_local global i32 0, align 4
@.str.28 = private unnamed_addr constant [11 x i8] c"show task \00", align 1
@set_task_pause_cmd = common dso_local global i32 0, align 4
@.str.29 = private unnamed_addr constant [289 x i8] c"Set whether the task is suspended while gdb has control.\0AA value of \22on\22 takes effect immediately, otherwise nothing happens\0Auntil the next time the program is continued.\0AWhen setting this to \22off\22, \22set thread default pause on\22 can be\0Aused to pause individual threads by default instead.\00", align 1
@show_task_pause_cmd = common dso_local global i32 0, align 4
@.str.30 = private unnamed_addr constant [58 x i8] c"Show whether the task is suspended while gdb has control.\00", align 1
@set_task_detach_sc_cmd = common dso_local global i32 0, align 4
@.str.31 = private unnamed_addr constant [63 x i8] c"Set the suspend count will leave on the thread when detaching.\00", align 1
@show_task_detach_sc_cmd = common dso_local global i32 0, align 4
@.str.32 = private unnamed_addr constant [64 x i8] c"Show the suspend count will leave on the thread when detaching.\00", align 1
@.str.33 = private unnamed_addr constant [15 x i8] c"exception-port\00", align 1
@set_task_exc_port_cmd = common dso_local global i32 0, align 4
@.str.34 = private unnamed_addr constant [124 x i8] c"Set the task exception port to which we forward exceptions.\0AThe argument should be the value of the send right in the task.\00", align 1
@.str.35 = private unnamed_addr constant [5 x i8] c"excp\00", align 1
@.str.36 = private unnamed_addr constant [9 x i8] c"exc-port\00", align 1
@.str.37 = private unnamed_addr constant [12 x i8] c"noninvasive\00", align 1
@set_noninvasive_cmd = common dso_local global i32 0, align 4
@.str.38 = private unnamed_addr constant [154 x i8] c"Set task options so that we interfere as little as possible.\0AThis is the same as setting `task pause', `exceptions', and\0A`signals' to the opposite value.\00", align 1
@.str.39 = private unnamed_addr constant [12 x i8] c"send-rights\00", align 1
@class_info = common dso_local global i32 0, align 4
@info_send_rights_cmd = common dso_local global i32 0, align 4
@.str.40 = private unnamed_addr constant [46 x i8] c"Show information about the task's send rights\00", align 1
@infolist = common dso_local global i32 0, align 4
@.str.41 = private unnamed_addr constant [15 x i8] c"receive-rights\00", align 1
@info_recv_rights_cmd = common dso_local global i32 0, align 4
@.str.42 = private unnamed_addr constant [49 x i8] c"Show information about the task's receive rights\00", align 1
@.str.43 = private unnamed_addr constant [12 x i8] c"port-rights\00", align 1
@info_port_rights_cmd = common dso_local global i32 0, align 4
@.str.44 = private unnamed_addr constant [46 x i8] c"Show information about the task's port rights\00", align 1
@.str.45 = private unnamed_addr constant [10 x i8] c"port-sets\00", align 1
@info_port_sets_cmd = common dso_local global i32 0, align 4
@.str.46 = private unnamed_addr constant [44 x i8] c"Show information about the task's port sets\00", align 1
@.str.47 = private unnamed_addr constant [11 x i8] c"dead-names\00", align 1
@info_dead_names_cmd = common dso_local global i32 0, align 4
@.str.48 = private unnamed_addr constant [45 x i8] c"Show information about the task's dead names\00", align 1
@.str.49 = private unnamed_addr constant [6 x i8] c"ports\00", align 1
@.str.50 = private unnamed_addr constant [5 x i8] c"port\00", align 1
@.str.51 = private unnamed_addr constant [6 x i8] c"psets\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @add_task_commands to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @add_task_commands() #0 {
  %1 = load i32, i32* @class_run, align 4
  %2 = load i32, i32* @set_thread_default_pause_cmd, align 4
  %3 = call i32 @add_cmd(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 %1, i32 %2, i8* getelementptr inbounds ([224 x i8], [224 x i8]* @.str.1, i64 0, i64 0), i32* @set_thread_default_cmd_list)
  %4 = load i32, i32* @no_class, align 4
  %5 = load i32, i32* @show_thread_default_pause_cmd, align 4
  %6 = call i32 @add_cmd(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 %4, i32 %5, i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.2, i64 0, i64 0), i32* @show_thread_default_cmd_list)
  %7 = load i32, i32* @class_run, align 4
  %8 = load i32, i32* @set_thread_default_run_cmd, align 4
  %9 = call i32 @add_cmd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %7, i32 %8, i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.4, i64 0, i64 0), i32* @set_thread_default_cmd_list)
  %10 = load i32, i32* @no_class, align 4
  %11 = load i32, i32* @show_thread_default_run_cmd, align 4
  %12 = call i32 @add_cmd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.3, i64 0, i64 0), i32 %10, i32 %11, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.5, i64 0, i64 0), i32* @show_thread_default_cmd_list)
  %13 = load i32, i32* @class_run, align 4
  %14 = load i32, i32* @set_thread_default_detach_sc_cmd, align 4
  %15 = call i32 @add_cmd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %13, i32 %14, i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.7, i64 0, i64 0), i32* @set_thread_default_cmd_list)
  %16 = load i32, i32* @no_class, align 4
  %17 = load i32, i32* @show_thread_default_detach_sc_cmd, align 4
  %18 = call i32 @add_cmd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %16, i32 %17, i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.8, i64 0, i64 0), i32* @show_thread_default_cmd_list)
  %19 = load i32, i32* @class_run, align 4
  %20 = load i32, i32* @set_signals_cmd, align 4
  %21 = call i32 @add_cmd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 %19, i32 %20, i8* getelementptr inbounds ([125 x i8], [125 x i8]* @.str.10, i64 0, i64 0), i32* @setlist)
  %22 = load i32, i32* @class_run, align 4
  %23 = call i32 @add_alias_cmd(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 %22, i32 1, i32* @setlist)
  %24 = load i32, i32* @no_class, align 4
  %25 = load i32, i32* @show_signals_cmd, align 4
  %26 = call i32 @add_cmd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 %24, i32 %25, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.12, i64 0, i64 0), i32* @showlist)
  %27 = load i32, i32* @no_class, align 4
  %28 = call i32 @add_alias_cmd(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.11, i64 0, i64 0), i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.9, i64 0, i64 0), i32 %27, i32 1, i32* @showlist)
  %29 = load i32, i32* @class_run, align 4
  %30 = load i32, i32* @set_sig_thread_cmd, align 4
  %31 = call i32 @add_cmd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i32 %29, i32 %30, i8* getelementptr inbounds ([128 x i8], [128 x i8]* @.str.14, i64 0, i64 0), i32* @setlist)
  %32 = load i32, i32* @class_run, align 4
  %33 = call i32 @add_alias_cmd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i32 %32, i32 1, i32* @setlist)
  %34 = load i32, i32* @no_class, align 4
  %35 = load i32, i32* @show_sig_thread_cmd, align 4
  %36 = call i32 @add_cmd(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i32 %34, i32 %35, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.16, i64 0, i64 0), i32* @showlist)
  %37 = load i32, i32* @no_class, align 4
  %38 = call i32 @add_alias_cmd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15, i64 0, i64 0), i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.13, i64 0, i64 0), i32 %37, i32 1, i32* @showlist)
  %39 = load i32, i32* @class_run, align 4
  %40 = load i32, i32* @set_stopped_cmd, align 4
  %41 = call i32 @add_cmd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), i32 %39, i32 %40, i8* getelementptr inbounds ([132 x i8], [132 x i8]* @.str.18, i64 0, i64 0), i32* @setlist)
  %42 = load i32, i32* @no_class, align 4
  %43 = load i32, i32* @show_signals_cmd, align 4
  %44 = call i32 @add_cmd(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0), i32 %42, i32 %43, i8* getelementptr inbounds ([73 x i8], [73 x i8]* @.str.19, i64 0, i64 0), i32* @showlist)
  %45 = load i32, i32* @class_run, align 4
  %46 = load i32, i32* @set_exceptions_cmd, align 4
  %47 = call i32 @add_cmd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i32 %45, i32 %46, i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.21, i64 0, i64 0), i32* @setlist)
  %48 = load i32, i32* @class_run, align 4
  %49 = call i32 @add_alias_cmd(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.22, i64 0, i64 0), i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i32 %48, i32 1, i32* @setlist)
  %50 = load i32, i32* @no_class, align 4
  %51 = load i32, i32* @show_exceptions_cmd, align 4
  %52 = call i32 @add_cmd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.20, i64 0, i64 0), i32 %50, i32 %51, i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.23, i64 0, i64 0), i32* @showlist)
  %53 = load i32, i32* @no_class, align 4
  %54 = load i32, i32* @set_task_cmd, align 4
  %55 = call i32 @add_prefix_cmd(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0), i32 %53, i32 %54, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.25, i64 0, i64 0), i32* @set_task_cmd_list, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.26, i64 0, i64 0), i32 0, i32* @setlist)
  %56 = load i32, i32* @no_class, align 4
  %57 = load i32, i32* @show_task_cmd, align 4
  %58 = call i32 @add_prefix_cmd(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.24, i64 0, i64 0), i32 %56, i32 %57, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.27, i64 0, i64 0), i32* @show_task_cmd_list, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.28, i64 0, i64 0), i32 0, i32* @showlist)
  %59 = load i32, i32* @class_run, align 4
  %60 = load i32, i32* @set_task_pause_cmd, align 4
  %61 = call i32 @add_cmd(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 %59, i32 %60, i8* getelementptr inbounds ([289 x i8], [289 x i8]* @.str.29, i64 0, i64 0), i32* @set_task_cmd_list)
  %62 = load i32, i32* @no_class, align 4
  %63 = load i32, i32* @show_task_pause_cmd, align 4
  %64 = call i32 @add_cmd(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i64 0, i64 0), i32 %62, i32 %63, i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.30, i64 0, i64 0), i32* @show_task_cmd_list)
  %65 = load i32, i32* @class_run, align 4
  %66 = load i32, i32* @set_task_detach_sc_cmd, align 4
  %67 = call i32 @add_cmd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %65, i32 %66, i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.31, i64 0, i64 0), i32* @set_task_cmd_list)
  %68 = load i32, i32* @no_class, align 4
  %69 = load i32, i32* @show_task_detach_sc_cmd, align 4
  %70 = call i32 @add_cmd(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0), i32 %68, i32 %69, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.32, i64 0, i64 0), i32* @show_task_cmd_list)
  %71 = load i32, i32* @no_class, align 4
  %72 = load i32, i32* @set_task_exc_port_cmd, align 4
  %73 = call i32 @add_cmd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0), i32 %71, i32 %72, i8* getelementptr inbounds ([124 x i8], [124 x i8]* @.str.34, i64 0, i64 0), i32* @set_task_cmd_list)
  %74 = load i32, i32* @no_class, align 4
  %75 = call i32 @add_alias_cmd(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.35, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0), i32 %74, i32 1, i32* @set_task_cmd_list)
  %76 = load i32, i32* @no_class, align 4
  %77 = call i32 @add_alias_cmd(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.36, i64 0, i64 0), i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.33, i64 0, i64 0), i32 %76, i32 1, i32* @set_task_cmd_list)
  %78 = load i32, i32* @no_class, align 4
  %79 = load i32, i32* @set_noninvasive_cmd, align 4
  %80 = call i32 @add_cmd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.37, i64 0, i64 0), i32 %78, i32 %79, i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.38, i64 0, i64 0), i32* @setlist)
  %81 = load i32, i32* @class_info, align 4
  %82 = load i32, i32* @info_send_rights_cmd, align 4
  %83 = call i32 @add_cmd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.39, i64 0, i64 0), i32 %81, i32 %82, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.40, i64 0, i64 0), i32* @infolist)
  %84 = load i32, i32* @class_info, align 4
  %85 = load i32, i32* @info_recv_rights_cmd, align 4
  %86 = call i32 @add_cmd(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.41, i64 0, i64 0), i32 %84, i32 %85, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.42, i64 0, i64 0), i32* @infolist)
  %87 = load i32, i32* @class_info, align 4
  %88 = load i32, i32* @info_port_rights_cmd, align 4
  %89 = call i32 @add_cmd(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i64 0, i64 0), i32 %87, i32 %88, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.44, i64 0, i64 0), i32* @infolist)
  %90 = load i32, i32* @class_info, align 4
  %91 = load i32, i32* @info_port_sets_cmd, align 4
  %92 = call i32 @add_cmd(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i64 0, i64 0), i32 %90, i32 %91, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.46, i64 0, i64 0), i32* @infolist)
  %93 = load i32, i32* @class_info, align 4
  %94 = load i32, i32* @info_dead_names_cmd, align 4
  %95 = call i32 @add_cmd(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.47, i64 0, i64 0), i32 %93, i32 %94, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.48, i64 0, i64 0), i32* @infolist)
  %96 = call i32 @add_info_alias(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i64 0, i64 0), i32 1)
  %97 = call i32 @add_info_alias(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.50, i64 0, i64 0), i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.43, i64 0, i64 0), i32 1)
  %98 = call i32 @add_info_alias(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.51, i64 0, i64 0), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.45, i64 0, i64 0), i32 1)
  ret void
}

declare dso_local i32 @add_cmd(i8*, i32, i32, i8*, i32*) #1

declare dso_local i32 @add_alias_cmd(i8*, i8*, i32, i32, i32*) #1

declare dso_local i32 @add_prefix_cmd(i8*, i32, i32, i8*, i32*, i8*, i32, i32*) #1

declare dso_local i32 @add_info_alias(i8*, i8*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
