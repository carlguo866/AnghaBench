; ModuleID = '/home/carl/AnghaBench/freebsd/contrib/apr/tools/extr_gen_test_char.c_main.c'
source_filename = "/home/carl/AnghaBench/freebsd/contrib/apr/tools/extr_gen_test_char.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [404 x i8] c"/* this file is automatically generated by gen_test_char, do not edit. \22make include/private/apr_escape_test_char.h\22 to regenerate. */\0A#define T_ESCAPE_SHELL_CMD     (%u)\0A#define T_ESCAPE_PATH_SEGMENT  (%u)\0A#define T_OS_ESCAPE_PATH       (%u)\0A#define T_ESCAPE_ECHO          (%u)\0A#define T_ESCAPE_URLENCODED    (%u)\0A#define T_ESCAPE_XML           (%u)\0A\0Astatic const unsigned char test_char_table[256] = {\00", align 1
@T_ESCAPE_SHELL_CMD = common dso_local global i32 0, align 4
@T_ESCAPE_PATH_SEGMENT = common dso_local global i32 0, align 4
@T_OS_ESCAPE_PATH = common dso_local global i32 0, align 4
@T_ESCAPE_ECHO = common dso_local global i32 0, align 4
@T_ESCAPE_URLENCODED = common dso_local global i32 0, align 4
@T_ESCAPE_XML = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [6 x i8] c"\0A    \00", align 1
@.str.2 = private unnamed_addr constant [22 x i8] c"&;`'\22|*?~<>^()[]{}$\\\0A\00", align 1
@.str.3 = private unnamed_addr constant [17 x i8] c"$-_.+!*'(),:@&=~\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"$-_.+!*'(),:@&=/~\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c".-*_ \00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"<>&\22\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"%u%c\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"\0A};\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i8, align 1
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  %8 = load i32, i32* @T_ESCAPE_SHELL_CMD, align 4
  %9 = load i32, i32* @T_ESCAPE_PATH_SEGMENT, align 4
  %10 = load i32, i32* @T_OS_ESCAPE_PATH, align 4
  %11 = load i32, i32* @T_ESCAPE_ECHO, align 4
  %12 = load i32, i32* @T_ESCAPE_URLENCODED, align 4
  %13 = load i32, i32* @T_ESCAPE_XML, align 4
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([404 x i8], [404 x i8]* @.str, i64 0, i64 0), i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13)
  store i32 0, i32* %6, align 4
  br label %15

15:                                               ; preds = %120, %2
  %16 = load i32, i32* %6, align 4
  %17 = icmp ult i32 %16, 256
  br i1 %17, label %18, label %123

18:                                               ; preds = %15
  store i8 0, i8* %7, align 1
  %19 = load i32, i32* %6, align 4
  %20 = urem i32 %19, 20
  %21 = icmp eq i32 %20, 0
  br i1 %21, label %22, label %24

22:                                               ; preds = %18
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.1, i64 0, i64 0))
  br label %24

24:                                               ; preds = %22, %18
  %25 = load i32, i32* %6, align 4
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %27, label %37

27:                                               ; preds = %24
  %28 = load i32, i32* %6, align 4
  %29 = call i64 @strchr(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %28)
  %30 = icmp ne i64 %29, 0
  br i1 %30, label %31, label %37

31:                                               ; preds = %27
  %32 = load i32, i32* @T_ESCAPE_SHELL_CMD, align 4
  %33 = load i8, i8* %7, align 1
  %34 = zext i8 %33 to i32
  %35 = or i32 %34, %32
  %36 = trunc i32 %35 to i8
  store i8 %36, i8* %7, align 1
  br label %37

37:                                               ; preds = %31, %27, %24
  %38 = load i32, i32* %6, align 4
  %39 = call i32 @isalnum(i32 %38)
  %40 = icmp ne i32 %39, 0
  br i1 %40, label %51, label %41

41:                                               ; preds = %37
  %42 = load i32, i32* %6, align 4
  %43 = call i64 @strchr(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.3, i64 0, i64 0), i32 %42)
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %51, label %45

45:                                               ; preds = %41
  %46 = load i32, i32* @T_ESCAPE_PATH_SEGMENT, align 4
  %47 = load i8, i8* %7, align 1
  %48 = zext i8 %47 to i32
  %49 = or i32 %48, %46
  %50 = trunc i32 %49 to i8
  store i8 %50, i8* %7, align 1
  br label %51

51:                                               ; preds = %45, %41, %37
  %52 = load i32, i32* %6, align 4
  %53 = call i32 @isalnum(i32 %52)
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %65, label %55

55:                                               ; preds = %51
  %56 = load i32, i32* %6, align 4
  %57 = call i64 @strchr(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i32 %56)
  %58 = icmp ne i64 %57, 0
  br i1 %58, label %65, label %59

59:                                               ; preds = %55
  %60 = load i32, i32* @T_OS_ESCAPE_PATH, align 4
  %61 = load i8, i8* %7, align 1
  %62 = zext i8 %61 to i32
  %63 = or i32 %62, %60
  %64 = trunc i32 %63 to i8
  store i8 %64, i8* %7, align 1
  br label %65

65:                                               ; preds = %59, %55, %51
  %66 = load i32, i32* %6, align 4
  %67 = call i32 @isalnum(i32 %66)
  %68 = icmp ne i32 %67, 0
  br i1 %68, label %79, label %69

69:                                               ; preds = %65
  %70 = load i32, i32* %6, align 4
  %71 = call i64 @strchr(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i64 0, i64 0), i32 %70)
  %72 = icmp ne i64 %71, 0
  br i1 %72, label %79, label %73

73:                                               ; preds = %69
  %74 = load i32, i32* @T_ESCAPE_URLENCODED, align 4
  %75 = load i8, i8* %7, align 1
  %76 = zext i8 %75 to i32
  %77 = or i32 %76, %74
  %78 = trunc i32 %77 to i8
  store i8 %78, i8* %7, align 1
  br label %79

79:                                               ; preds = %73, %69, %65
  %80 = load i32, i32* %6, align 4
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %102

82:                                               ; preds = %79
  %83 = load i32, i32* %6, align 4
  %84 = call i32 @isprint(i32 %83)
  %85 = icmp ne i32 %84, 0
  br i1 %85, label %86, label %96

86:                                               ; preds = %82
  %87 = load i32, i32* %6, align 4
  %88 = icmp eq i32 %87, 34
  br i1 %88, label %96, label %89

89:                                               ; preds = %86
  %90 = load i32, i32* %6, align 4
  %91 = icmp eq i32 %90, 92
  br i1 %91, label %96, label %92

92:                                               ; preds = %89
  %93 = load i32, i32* %6, align 4
  %94 = call i64 @iscntrl(i32 %93)
  %95 = icmp ne i64 %94, 0
  br i1 %95, label %96, label %102

96:                                               ; preds = %92, %89, %86, %82
  %97 = load i32, i32* @T_ESCAPE_ECHO, align 4
  %98 = load i8, i8* %7, align 1
  %99 = zext i8 %98 to i32
  %100 = or i32 %99, %97
  %101 = trunc i32 %100 to i8
  store i8 %101, i8* %7, align 1
  br label %102

102:                                              ; preds = %96, %92, %79
  %103 = load i32, i32* %6, align 4
  %104 = call i64 @strchr(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0), i32 %103)
  %105 = icmp ne i64 %104, 0
  br i1 %105, label %106, label %112

106:                                              ; preds = %102
  %107 = load i32, i32* @T_ESCAPE_XML, align 4
  %108 = load i8, i8* %7, align 1
  %109 = zext i8 %108 to i32
  %110 = or i32 %109, %107
  %111 = trunc i32 %110 to i8
  store i8 %111, i8* %7, align 1
  br label %112

112:                                              ; preds = %106, %102
  %113 = load i8, i8* %7, align 1
  %114 = zext i8 %113 to i32
  %115 = load i32, i32* %6, align 4
  %116 = icmp ult i32 %115, 255
  %117 = zext i1 %116 to i64
  %118 = select i1 %116, i32 44, i32 32
  %119 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i64 0, i64 0), i32 %114, i32 %118)
  br label %120

120:                                              ; preds = %112
  %121 = load i32, i32* %6, align 4
  %122 = add i32 %121, 1
  store i32 %122, i32* %6, align 4
  br label %15

123:                                              ; preds = %15
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @strchr(i8*, i32) #1

declare dso_local i32 @isalnum(i32) #1

declare dso_local i32 @isprint(i32) #1

declare dso_local i64 @iscntrl(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
