; ModuleID = '/home/carl/AnghaBench/freebsd/contrib/binutils/binutils/extr_windmc.c_write_header.c'
source_filename = "/home/carl/AnghaBench/freebsd/contrib/binutils/binutils/extr_windmc.c_write_header.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_6__ = type { i64*, %struct.TYPE_6__*, i32, i32, i64 }
%struct.TYPE_7__ = type { i64*, i64*, i64 }

@.str = private unnamed_addr constant [608 x i8] c"/* Do not edit this file manually.\0A   This file is autogenerated by windmc.  */\0A\0A//\0A//  The values are 32 bit layed out as follows:\0A//\0A//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1\0A//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0\0A//  +---+-+-+-----------------------+-------------------------------+\0A//  |Sev|C|R|     Facility          |               Code            |\0A//  +---+-+-+-----------------------+-------------------------------+\0A//\0A//  where\0A//\0A//      C    - is the Customer code flag\0A//\0A//      R    - is a reserved bit\0A//\0A//      Code - is the facility's status code\0A//\0A\00", align 1
@mc_nodes = common dso_local global %struct.TYPE_6__* null, align 8
@.str.1 = private unnamed_addr constant [40 x i8] c"//      Sev  - is the severity code\0A//\0A\00", align 1
@mc_severity_codes_count = common dso_local global i32 0, align 4
@mc_severity_codes = common dso_local global %struct.TYPE_7__** null, align 8
@.str.2 = private unnamed_addr constant [25 x i8] c"//           %s - %02lx\0A\00", align 1
@mcset_out_values_are_decimal = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [18 x i8] c"#define %s 0x%lx\0A\00", align 1
@.str.4 = private unnamed_addr constant [18 x i8] c"#define %s 0x%lu\0A\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"//\0A\00", align 1
@.str.6 = private unnamed_addr constant [44 x i8] c"//      Facility - is the facility code\0A//\0A\00", align 1
@mc_facility_codes_count = common dso_local global i32 0, align 4
@mc_facility_codes = common dso_local global %struct.TYPE_7__** null, align 8
@.str.7 = private unnamed_addr constant [25 x i8] c"//           %s - %04lx\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@mcset_msg_id_typedef = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32*)* @write_header to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_header(i32* %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.TYPE_7__*, align 8
  %6 = alloca %struct.TYPE_6__*, align 8
  store i32* %0, i32** %2, align 8
  %7 = load i32*, i32** %2, align 8
  %8 = call i32 (i32*, i8*, ...) @fprintf(i32* %7, i8* getelementptr inbounds ([608 x i8], [608 x i8]* @.str, i64 0, i64 0))
  %9 = load %struct.TYPE_6__*, %struct.TYPE_6__** @mc_nodes, align 8
  store %struct.TYPE_6__* %9, %struct.TYPE_6__** %6, align 8
  %10 = load i32*, i32** %2, align 8
  %11 = call i32 (i32*, i8*, ...) @fprintf(i32* %10, i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.1, i64 0, i64 0))
  %12 = load i32, i32* @mc_severity_codes_count, align 4
  %13 = icmp ne i32 %12, 0
  br i1 %13, label %14, label %76

14:                                               ; preds = %1
  store i32 0, i32* %4, align 4
  br label %15

15:                                               ; preds = %70, %14
  %16 = load i32, i32* %4, align 4
  %17 = load i32, i32* @mc_severity_codes_count, align 4
  %18 = icmp slt i32 %16, %17
  br i1 %18, label %19, label %73

19:                                               ; preds = %15
  %20 = load %struct.TYPE_7__**, %struct.TYPE_7__*** @mc_severity_codes, align 8
  %21 = load i32, i32* %4, align 4
  %22 = sext i32 %21 to i64
  %23 = getelementptr inbounds %struct.TYPE_7__*, %struct.TYPE_7__** %20, i64 %22
  %24 = load %struct.TYPE_7__*, %struct.TYPE_7__** %23, align 8
  store %struct.TYPE_7__* %24, %struct.TYPE_7__** %5, align 8
  %25 = load i32*, i32** %2, align 8
  %26 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %27 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %26, i32 0, i32 0
  %28 = load i64*, i64** %27, align 8
  %29 = call i8* @convert_unicode_to_ACP(i64* %28)
  %30 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %31 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %30, i32 0, i32 2
  %32 = load i64, i64* %31, align 8
  %33 = call i32 (i32*, i8*, ...) @fprintf(i32* %25, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0), i8* %29, i64 %32)
  %34 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %35 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %34, i32 0, i32 1
  %36 = load i64*, i64** %35, align 8
  %37 = icmp ne i64* %36, null
  br i1 %37, label %38, label %69

38:                                               ; preds = %19
  %39 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %40 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %39, i32 0, i32 1
  %41 = load i64*, i64** %40, align 8
  %42 = getelementptr inbounds i64, i64* %41, i64 0
  %43 = load i64, i64* %42, align 8
  %44 = icmp ne i64 %43, 0
  br i1 %44, label %45, label %69

45:                                               ; preds = %38
  %46 = load i32, i32* @mcset_out_values_are_decimal, align 4
  %47 = icmp ne i32 %46, 0
  br i1 %47, label %58, label %48

48:                                               ; preds = %45
  %49 = load i32*, i32** %2, align 8
  %50 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %51 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %50, i32 0, i32 1
  %52 = load i64*, i64** %51, align 8
  %53 = call i8* @convert_unicode_to_ACP(i64* %52)
  %54 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %55 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %54, i32 0, i32 2
  %56 = load i64, i64* %55, align 8
  %57 = call i32 (i32*, i8*, ...) @fprintf(i32* %49, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %53, i64 %56)
  br label %68

58:                                               ; preds = %45
  %59 = load i32*, i32** %2, align 8
  %60 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %61 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %60, i32 0, i32 1
  %62 = load i64*, i64** %61, align 8
  %63 = call i8* @convert_unicode_to_ACP(i64* %62)
  %64 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %65 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %64, i32 0, i32 2
  %66 = load i64, i64* %65, align 8
  %67 = call i32 (i32*, i8*, ...) @fprintf(i32* %59, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* %63, i64 %66)
  br label %68

68:                                               ; preds = %58, %48
  br label %69

69:                                               ; preds = %68, %38, %19
  br label %70

70:                                               ; preds = %69
  %71 = load i32, i32* %4, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %4, align 4
  br label %15

73:                                               ; preds = %15
  %74 = load i32*, i32** %2, align 8
  %75 = call i32 (i32*, i8*, ...) @fprintf(i32* %74, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  br label %76

76:                                               ; preds = %73, %1
  %77 = load i32*, i32** %2, align 8
  %78 = call i32 (i32*, i8*, ...) @fprintf(i32* %77, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.6, i64 0, i64 0))
  %79 = load i32, i32* @mc_facility_codes_count, align 4
  %80 = icmp ne i32 %79, 0
  br i1 %80, label %81, label %143

81:                                               ; preds = %76
  store i32 0, i32* %4, align 4
  br label %82

82:                                               ; preds = %137, %81
  %83 = load i32, i32* %4, align 4
  %84 = load i32, i32* @mc_facility_codes_count, align 4
  %85 = icmp slt i32 %83, %84
  br i1 %85, label %86, label %140

86:                                               ; preds = %82
  %87 = load %struct.TYPE_7__**, %struct.TYPE_7__*** @mc_facility_codes, align 8
  %88 = load i32, i32* %4, align 4
  %89 = sext i32 %88 to i64
  %90 = getelementptr inbounds %struct.TYPE_7__*, %struct.TYPE_7__** %87, i64 %89
  %91 = load %struct.TYPE_7__*, %struct.TYPE_7__** %90, align 8
  store %struct.TYPE_7__* %91, %struct.TYPE_7__** %5, align 8
  %92 = load i32*, i32** %2, align 8
  %93 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %94 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %93, i32 0, i32 0
  %95 = load i64*, i64** %94, align 8
  %96 = call i8* @convert_unicode_to_ACP(i64* %95)
  %97 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %98 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %97, i32 0, i32 2
  %99 = load i64, i64* %98, align 8
  %100 = call i32 (i32*, i8*, ...) @fprintf(i32* %92, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i8* %96, i64 %99)
  %101 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %102 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %101, i32 0, i32 1
  %103 = load i64*, i64** %102, align 8
  %104 = icmp ne i64* %103, null
  br i1 %104, label %105, label %136

105:                                              ; preds = %86
  %106 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %107 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %106, i32 0, i32 1
  %108 = load i64*, i64** %107, align 8
  %109 = getelementptr inbounds i64, i64* %108, i64 0
  %110 = load i64, i64* %109, align 8
  %111 = icmp ne i64 %110, 0
  br i1 %111, label %112, label %136

112:                                              ; preds = %105
  %113 = load i32, i32* @mcset_out_values_are_decimal, align 4
  %114 = icmp ne i32 %113, 0
  br i1 %114, label %125, label %115

115:                                              ; preds = %112
  %116 = load i32*, i32** %2, align 8
  %117 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %118 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %117, i32 0, i32 1
  %119 = load i64*, i64** %118, align 8
  %120 = call i8* @convert_unicode_to_ACP(i64* %119)
  %121 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %122 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %121, i32 0, i32 2
  %123 = load i64, i64* %122, align 8
  %124 = call i32 (i32*, i8*, ...) @fprintf(i32* %116, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.3, i64 0, i64 0), i8* %120, i64 %123)
  br label %135

125:                                              ; preds = %112
  %126 = load i32*, i32** %2, align 8
  %127 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %128 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %127, i32 0, i32 1
  %129 = load i64*, i64** %128, align 8
  %130 = call i8* @convert_unicode_to_ACP(i64* %129)
  %131 = load %struct.TYPE_7__*, %struct.TYPE_7__** %5, align 8
  %132 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %131, i32 0, i32 2
  %133 = load i64, i64* %132, align 8
  %134 = call i32 (i32*, i8*, ...) @fprintf(i32* %126, i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.4, i64 0, i64 0), i8* %130, i64 %133)
  br label %135

135:                                              ; preds = %125, %115
  br label %136

136:                                              ; preds = %135, %105, %86
  br label %137

137:                                              ; preds = %136
  %138 = load i32, i32* %4, align 4
  %139 = add nsw i32 %138, 1
  store i32 %139, i32* %4, align 4
  br label %82

140:                                              ; preds = %82
  %141 = load i32*, i32** %2, align 8
  %142 = call i32 (i32*, i8*, ...) @fprintf(i32* %141, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  br label %143

143:                                              ; preds = %140, %76
  %144 = load i32*, i32** %2, align 8
  %145 = call i32 (i32*, i8*, ...) @fprintf(i32* %144, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  br label %146

146:                                              ; preds = %184, %143
  %147 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %148 = icmp ne %struct.TYPE_6__* %147, null
  br i1 %148, label %149, label %188

149:                                              ; preds = %146
  %150 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %151 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %150, i32 0, i32 0
  %152 = load i64*, i64** %151, align 8
  %153 = icmp ne i64* %152, null
  br i1 %153, label %154, label %166

154:                                              ; preds = %149
  %155 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %156 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %155, i32 0, i32 0
  %157 = load i64*, i64** %156, align 8
  %158 = call i8* @convert_unicode_to_ACP(i64* %157)
  store i8* %158, i8** %3, align 8
  %159 = load i8*, i8** %3, align 8
  %160 = icmp ne i8* %159, null
  br i1 %160, label %161, label %165

161:                                              ; preds = %154
  %162 = load i32*, i32** %2, align 8
  %163 = load i8*, i8** %3, align 8
  %164 = call i32 (i32*, i8*, ...) @fprintf(i32* %162, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i8* %163)
  br label %165

165:                                              ; preds = %161, %154
  br label %166

166:                                              ; preds = %165, %149
  %167 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %168 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %167, i32 0, i32 4
  %169 = load i64, i64* %168, align 8
  %170 = icmp ne i64 %169, 0
  br i1 %170, label %171, label %184

171:                                              ; preds = %166
  %172 = load i32*, i32** %2, align 8
  %173 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %174 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %173, i32 0, i32 4
  %175 = load i64, i64* %174, align 8
  %176 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %177 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %176, i32 0, i32 3
  %178 = load i32, i32* %177, align 4
  %179 = load i32, i32* @mcset_msg_id_typedef, align 4
  %180 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %181 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %180, i32 0, i32 2
  %182 = load i32, i32* %181, align 8
  %183 = call i32 @write_header_define(i32* %172, i64 %175, i32 %178, i32 %179, i32 %182)
  br label %184

184:                                              ; preds = %171, %166
  %185 = load %struct.TYPE_6__*, %struct.TYPE_6__** %6, align 8
  %186 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %185, i32 0, i32 1
  %187 = load %struct.TYPE_6__*, %struct.TYPE_6__** %186, align 8
  store %struct.TYPE_6__* %187, %struct.TYPE_6__** %6, align 8
  br label %146

188:                                              ; preds = %146
  ret void
}

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i8* @convert_unicode_to_ACP(i64*) #1

declare dso_local i32 @write_header_define(i32*, i64, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
