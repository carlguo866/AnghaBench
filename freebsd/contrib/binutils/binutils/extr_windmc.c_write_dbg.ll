; ModuleID = '/home/carl/AnghaBench/freebsd/contrib/binutils/binutils/extr_windmc.c_write_dbg.c'
source_filename = "/home/carl/AnghaBench/freebsd/contrib/binutils/binutils/extr_windmc.c_write_dbg.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_3__ = type { %struct.TYPE_3__*, i64 }

@.str = private unnamed_addr constant [191 x i8] c"/* Do not edit this file manually.\0A   This file is autogenerated by windmc.\0A\0A   This file maps each message ID value in to a text string that contains\0A   the symbolic name used for it.  */\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [27 x i8] c"struct %sSymbolicName\0A{\0A  \00", align 1
@mcset_mc_basename = common dso_local global i8* null, align 8
@mcset_msg_id_typedef = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [6 x i8] c"DWORD\00", align 1
@.str.3 = private unnamed_addr constant [59 x i8] c" MessageId;\0A  char *SymbolicName;\0A} %sSymbolicNames[] =\0A{\0A\00", align 1
@mc_nodes = common dso_local global %struct.TYPE_3__* null, align 8
@.str.4 = private unnamed_addr constant [6 x i8] c"  { (\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c") 0xffffffff, NULL }\0A};\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32*)* @write_dbg to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @write_dbg(i32* %0) #0 {
  %2 = alloca i32*, align 8
  %3 = alloca %struct.TYPE_3__*, align 8
  store i32* %0, i32** %2, align 8
  %4 = load i32*, i32** %2, align 8
  %5 = call i32 (i32*, i8*, ...) @fprintf(i32* %4, i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str, i64 0, i64 0))
  %6 = load i32*, i32** %2, align 8
  %7 = load i8*, i8** @mcset_mc_basename, align 8
  %8 = call i32 (i32*, i8*, ...) @fprintf(i32* %6, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.1, i64 0, i64 0), i8* %7)
  %9 = load i64, i64* @mcset_msg_id_typedef, align 8
  %10 = icmp ne i64 %9, 0
  br i1 %10, label %11, label %17

11:                                               ; preds = %1
  %12 = load i32*, i32** %2, align 8
  %13 = load i64, i64* @mcset_msg_id_typedef, align 8
  %14 = load i64, i64* @mcset_msg_id_typedef, align 8
  %15 = call i32 @unichar_len(i64 %14)
  %16 = call i32 @unicode_print(i32* %12, i64 %13, i32 %15)
  br label %20

17:                                               ; preds = %1
  %18 = load i32*, i32** %2, align 8
  %19 = call i32 (i32*, i8*, ...) @fprintf(i32* %18, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %20

20:                                               ; preds = %17, %11
  %21 = load i32*, i32** %2, align 8
  %22 = load i8*, i8** @mcset_mc_basename, align 8
  %23 = call i32 (i32*, i8*, ...) @fprintf(i32* %21, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.3, i64 0, i64 0), i8* %22)
  %24 = load %struct.TYPE_3__*, %struct.TYPE_3__** @mc_nodes, align 8
  store %struct.TYPE_3__* %24, %struct.TYPE_3__** %3, align 8
  br label %25

25:                                               ; preds = %40, %20
  %26 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %27 = icmp ne %struct.TYPE_3__* %26, null
  br i1 %27, label %28, label %44

28:                                               ; preds = %25
  %29 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %30 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %29, i32 0, i32 1
  %31 = load i64, i64* %30, align 8
  %32 = icmp ne i64 %31, 0
  br i1 %32, label %33, label %40

33:                                               ; preds = %28
  %34 = load i32*, i32** %2, align 8
  %35 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %36 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %35, i32 0, i32 1
  %37 = load i64, i64* %36, align 8
  %38 = load i64, i64* @mcset_msg_id_typedef, align 8
  %39 = call i32 @write_dbg_define(i32* %34, i64 %37, i64 %38)
  br label %40

40:                                               ; preds = %33, %28
  %41 = load %struct.TYPE_3__*, %struct.TYPE_3__** %3, align 8
  %42 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %41, i32 0, i32 0
  %43 = load %struct.TYPE_3__*, %struct.TYPE_3__** %42, align 8
  store %struct.TYPE_3__* %43, %struct.TYPE_3__** %3, align 8
  br label %25

44:                                               ; preds = %25
  %45 = load i32*, i32** %2, align 8
  %46 = call i32 (i32*, i8*, ...) @fprintf(i32* %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %47 = load i64, i64* @mcset_msg_id_typedef, align 8
  %48 = icmp ne i64 %47, 0
  br i1 %48, label %49, label %55

49:                                               ; preds = %44
  %50 = load i32*, i32** %2, align 8
  %51 = load i64, i64* @mcset_msg_id_typedef, align 8
  %52 = load i64, i64* @mcset_msg_id_typedef, align 8
  %53 = call i32 @unichar_len(i64 %52)
  %54 = call i32 @unicode_print(i32* %50, i64 %51, i32 %53)
  br label %58

55:                                               ; preds = %44
  %56 = load i32*, i32** %2, align 8
  %57 = call i32 (i32*, i8*, ...) @fprintf(i32* %56, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0))
  br label %58

58:                                               ; preds = %55, %49
  %59 = load i32*, i32** %2, align 8
  %60 = call i32 (i32*, i8*, ...) @fprintf(i32* %59, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0))
  ret void
}

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i32 @unicode_print(i32*, i64, i32) #1

declare dso_local i32 @unichar_len(i64) #1

declare dso_local i32 @write_dbg_define(i32*, i64, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
