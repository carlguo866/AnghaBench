; ModuleID = '/home/carl/AnghaBench/freebsd/contrib/binutils/opcodes/extr_i386-gen.c_main.c'
source_filename = "/home/carl/AnghaBench/freebsd/contrib/binutils/opcodes/extr_i386-gen.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@program_name = common dso_local global i8* null, align 8
@.str = private unnamed_addr constant [5 x i8] c"vVdh\00", align 1
@long_options = common dso_local global i32 0, align 4
@EOF = common dso_local global i32 0, align 4
@optarg = common dso_local global i8* null, align 8
@debug = common dso_local global i32 0, align 4
@stderr = common dso_local global i32 0, align 4
@optind = common dso_local global i32 0, align 4
@stdout = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [48 x i8] c"unable to change directory to \22%s\22, errno = %s\0A\00", align 1
@errno = common dso_local global i32 0, align 4
@.str.2 = private unnamed_addr constant [72 x i8] c"/* This file is automatically generated by i386-gen.  Do not edit!  */\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i8*, align 8
  %7 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i8* null, i8** %6, align 8
  %8 = load i8**, i8*** %5, align 8
  %9 = load i8*, i8** %8, align 8
  store i8* %9, i8** @program_name, align 8
  %10 = load i8*, i8** @program_name, align 8
  %11 = call i32 @xmalloc_set_program_name(i8* %10)
  br label %12

12:                                               ; preds = %31, %2
  %13 = load i32, i32* %4, align 4
  %14 = load i8**, i8*** %5, align 8
  %15 = load i32, i32* @long_options, align 4
  %16 = call i32 @getopt_long(i32 %13, i8** %14, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str, i64 0, i64 0), i32 %15, i32 0)
  store i32 %16, i32* %7, align 4
  %17 = load i32, i32* @EOF, align 4
  %18 = icmp ne i32 %16, %17
  br i1 %18, label %19, label %32

19:                                               ; preds = %12
  %20 = load i32, i32* %7, align 4
  switch i32 %20, label %29 [
    i32 128, label %21
    i32 86, label %23
    i32 118, label %23
    i32 100, label %25
    i32 104, label %26
    i32 63, label %26
    i32 0, label %30
  ]

21:                                               ; preds = %19
  %22 = load i8*, i8** @optarg, align 8
  store i8* %22, i8** %6, align 8
  br label %31

23:                                               ; preds = %19, %19
  %24 = call i32 (...) @print_version()
  br label %31

25:                                               ; preds = %19
  store i32 1, i32* @debug, align 4
  br label %31

26:                                               ; preds = %19, %19
  %27 = load i32, i32* @stderr, align 4
  %28 = call i32 @usage(i32 %27, i32 0)
  br label %29

29:                                               ; preds = %19, %26
  br label %30

30:                                               ; preds = %19, %29
  br label %31

31:                                               ; preds = %30, %25, %23, %21
  br label %12

32:                                               ; preds = %12
  %33 = load i32, i32* @optind, align 4
  %34 = load i32, i32* %4, align 4
  %35 = icmp ne i32 %33, %34
  br i1 %35, label %36, label %39

36:                                               ; preds = %32
  %37 = load i32, i32* @stdout, align 4
  %38 = call i32 @usage(i32 %37, i32 1)
  br label %39

39:                                               ; preds = %36, %32
  %40 = load i8*, i8** %6, align 8
  %41 = icmp ne i8* %40, null
  br i1 %41, label %42, label %53

42:                                               ; preds = %39
  %43 = load i8*, i8** %6, align 8
  %44 = call i32 @chdir(i8* %43)
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %52

46:                                               ; preds = %42
  %47 = call i32 @_(i8* getelementptr inbounds ([48 x i8], [48 x i8]* @.str.1, i64 0, i64 0))
  %48 = load i8*, i8** %6, align 8
  %49 = load i32, i32* @errno, align 4
  %50 = call i32 @strerror(i32 %49)
  %51 = call i32 @fail(i32 %47, i8* %48, i32 %50)
  br label %52

52:                                               ; preds = %46, %42
  br label %53

53:                                               ; preds = %52, %39
  %54 = call i32 @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.2, i64 0, i64 0))
  %55 = call i32 (...) @process_i386_opcodes()
  %56 = call i32 (...) @process_i386_registers()
  %57 = call i32 @exit(i32 0) #3
  unreachable
}

declare dso_local i32 @xmalloc_set_program_name(i8*) #1

declare dso_local i32 @getopt_long(i32, i8**, i8*, i32, i32) #1

declare dso_local i32 @print_version(...) #1

declare dso_local i32 @usage(i32, i32) #1

declare dso_local i32 @chdir(i8*) #1

declare dso_local i32 @fail(i32, i8*, i32) #1

declare dso_local i32 @_(i8*) #1

declare dso_local i32 @strerror(i32) #1

declare dso_local i32 @printf(i8*) #1

declare dso_local i32 @process_i386_opcodes(...) #1

declare dso_local i32 @process_i386_registers(...) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
