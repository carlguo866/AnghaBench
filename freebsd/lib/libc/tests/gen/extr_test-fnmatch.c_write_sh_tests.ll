; ModuleID = '/home/carl/AnghaBench/freebsd/lib/libc/tests/gen/extr_test-fnmatch.c_write_sh_tests.c'
source_filename = "/home/carl/AnghaBench/freebsd/lib/libc/tests/gen/extr_test-fnmatch.c_write_sh_tests.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.testcase = type { i8*, i8*, i64, i64 }

@.str = private unnamed_addr constant [39 x i8] c"# Generated by %s -s %d, do not edit.\0A\00", align 1
@.str.1 = private unnamed_addr constant [13 x i8] c"# $FreeBSD$\0A\00", align 1
@.str.2 = private unnamed_addr constant [11 x i8] c"failures=\0A\00", align 1
@.str.3 = private unnamed_addr constant [74 x i8] c"failed() { printf '%%s\\n' \22Failed: $1 '$2' '$3'\22; failures=x$failures; }\0A\00", align 1
@.str.4 = private unnamed_addr constant [81 x i8] c"testmatch() { eval \22case \\$2 in ''$1) ;; *) failed testmatch \\\22\\$@\\\22;; esac\22; }\0A\00", align 1
@.str.5 = private unnamed_addr constant [79 x i8] c"testnomatch() { eval \22case \\$2 in ''$1) failed testnomatch \\\22\\$@\\\22;; esac\22; }\0A\00", align 1
@.str.6 = private unnamed_addr constant [55 x i8] c"# We do not treat a backslash specially in this case,\0A\00", align 1
@.str.7 = private unnamed_addr constant [43 x i8] c"# but this is not the case in all shells.\0A\00", align 1
@.str.8 = private unnamed_addr constant [72 x i8] c"netestmatch() { case $2 in $1) ;; *) failed netestmatch \22$@\22;; esac; }\0A\00", align 1
@.str.9 = private unnamed_addr constant [70 x i8] c"netestnomatch() { case $2 in $1) failed netestnomatch \22$@\22;; esac; }\0A\00", align 1
@testcases = common dso_local global %struct.testcase* null, align 8
@.str.10 = private unnamed_addr constant [2 x i8] c"\\\00", align 1
@.str.11 = private unnamed_addr constant [23 x i8] c"test%smatch '%s' '%s'\0A\00", align 1
@FNM_NOMATCH = common dso_local global i64 0, align 8
@.str.12 = private unnamed_addr constant [3 x i8] c"no\00", align 1
@.str.13 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@FNM_NOESCAPE = common dso_local global i64 0, align 8
@.str.14 = private unnamed_addr constant [25 x i8] c"netest%smatch '%s' '%s'\0A\00", align 1
@.str.15 = private unnamed_addr constant [20 x i8] c"[ -z \22$failures\22 ]\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i32)* @write_sh_tests to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @write_sh_tests(i8* %0, i32 %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i64, align 8
  %6 = alloca %struct.testcase*, align 8
  store i8* %0, i8** %3, align 8
  store i32 %1, i32* %4, align 4
  %7 = load i8*, i8** %3, align 8
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str, i64 0, i64 0), i8* %7, i32 %8)
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.1, i64 0, i64 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.2, i64 0, i64 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.3, i64 0, i64 0))
  %13 = load i32, i32* %4, align 4
  %14 = icmp eq i32 %13, 1
  br i1 %14, label %15, label %18

15:                                               ; preds = %2
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.4, i64 0, i64 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.5, i64 0, i64 0))
  br label %27

18:                                               ; preds = %2
  %19 = load i32, i32* %4, align 4
  %20 = icmp eq i32 %19, 2
  br i1 %20, label %21, label %26

21:                                               ; preds = %18
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.6, i64 0, i64 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.7, i64 0, i64 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.8, i64 0, i64 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.9, i64 0, i64 0))
  br label %26

26:                                               ; preds = %21, %18
  br label %27

27:                                               ; preds = %26, %15
  store i64 0, i64* %5, align 8
  br label %28

28:                                               ; preds = %120, %27
  %29 = load i64, i64* %5, align 8
  %30 = load %struct.testcase*, %struct.testcase** @testcases, align 8
  %31 = call i64 @nitems(%struct.testcase* %30)
  %32 = icmp ult i64 %29, %31
  br i1 %32, label %33, label %123

33:                                               ; preds = %28
  %34 = load %struct.testcase*, %struct.testcase** @testcases, align 8
  %35 = load i64, i64* %5, align 8
  %36 = getelementptr inbounds %struct.testcase, %struct.testcase* %34, i64 %35
  store %struct.testcase* %36, %struct.testcase** %6, align 8
  %37 = load %struct.testcase*, %struct.testcase** %6, align 8
  %38 = getelementptr inbounds %struct.testcase, %struct.testcase* %37, i32 0, i32 0
  %39 = load i8*, i8** %38, align 8
  %40 = call i32* @strchr(i8* %39, i8 signext 39)
  %41 = icmp ne i32* %40, null
  br i1 %41, label %48, label %42

42:                                               ; preds = %33
  %43 = load %struct.testcase*, %struct.testcase** %6, align 8
  %44 = getelementptr inbounds %struct.testcase, %struct.testcase* %43, i32 0, i32 1
  %45 = load i8*, i8** %44, align 8
  %46 = call i32* @strchr(i8* %45, i8 signext 39)
  %47 = icmp ne i32* %46, null
  br i1 %47, label %48, label %49

48:                                               ; preds = %42, %33
  br label %120

49:                                               ; preds = %42
  %50 = load %struct.testcase*, %struct.testcase** %6, align 8
  %51 = getelementptr inbounds %struct.testcase, %struct.testcase* %50, i32 0, i32 2
  %52 = load i64, i64* %51, align 8
  %53 = icmp eq i64 %52, 0
  br i1 %53, label %54, label %61

54:                                               ; preds = %49
  %55 = load %struct.testcase*, %struct.testcase** %6, align 8
  %56 = getelementptr inbounds %struct.testcase, %struct.testcase* %55, i32 0, i32 0
  %57 = load i8*, i8** %56, align 8
  %58 = call i64 @strcmp(i8* %57, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10, i64 0, i64 0))
  %59 = icmp eq i64 %58, 0
  br i1 %59, label %60, label %61

60:                                               ; preds = %54
  br label %120

61:                                               ; preds = %54, %49
  %62 = load i32, i32* %4, align 4
  %63 = icmp eq i32 %62, 1
  br i1 %63, label %64, label %84

64:                                               ; preds = %61
  %65 = load %struct.testcase*, %struct.testcase** %6, align 8
  %66 = getelementptr inbounds %struct.testcase, %struct.testcase* %65, i32 0, i32 2
  %67 = load i64, i64* %66, align 8
  %68 = icmp eq i64 %67, 0
  br i1 %68, label %69, label %84

69:                                               ; preds = %64
  %70 = load %struct.testcase*, %struct.testcase** %6, align 8
  %71 = getelementptr inbounds %struct.testcase, %struct.testcase* %70, i32 0, i32 3
  %72 = load i64, i64* %71, align 8
  %73 = load i64, i64* @FNM_NOMATCH, align 8
  %74 = icmp eq i64 %72, %73
  %75 = zext i1 %74 to i64
  %76 = select i1 %74, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0)
  %77 = load %struct.testcase*, %struct.testcase** %6, align 8
  %78 = getelementptr inbounds %struct.testcase, %struct.testcase* %77, i32 0, i32 0
  %79 = load i8*, i8** %78, align 8
  %80 = load %struct.testcase*, %struct.testcase** %6, align 8
  %81 = getelementptr inbounds %struct.testcase, %struct.testcase* %80, i32 0, i32 1
  %82 = load i8*, i8** %81, align 8
  %83 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.11, i64 0, i64 0), i8* %76, i8* %79, i8* %82)
  br label %84

84:                                               ; preds = %69, %64, %61
  %85 = load i32, i32* %4, align 4
  %86 = icmp eq i32 %85, 2
  br i1 %86, label %87, label %119

87:                                               ; preds = %84
  %88 = load %struct.testcase*, %struct.testcase** %6, align 8
  %89 = getelementptr inbounds %struct.testcase, %struct.testcase* %88, i32 0, i32 2
  %90 = load i64, i64* %89, align 8
  %91 = load i64, i64* @FNM_NOESCAPE, align 8
  %92 = icmp eq i64 %90, %91
  br i1 %92, label %104, label %93

93:                                               ; preds = %87
  %94 = load %struct.testcase*, %struct.testcase** %6, align 8
  %95 = getelementptr inbounds %struct.testcase, %struct.testcase* %94, i32 0, i32 2
  %96 = load i64, i64* %95, align 8
  %97 = icmp eq i64 %96, 0
  br i1 %97, label %98, label %119

98:                                               ; preds = %93
  %99 = load %struct.testcase*, %struct.testcase** %6, align 8
  %100 = getelementptr inbounds %struct.testcase, %struct.testcase* %99, i32 0, i32 0
  %101 = load i8*, i8** %100, align 8
  %102 = call i32* @strchr(i8* %101, i8 signext 92)
  %103 = icmp eq i32* %102, null
  br i1 %103, label %104, label %119

104:                                              ; preds = %98, %87
  %105 = load %struct.testcase*, %struct.testcase** %6, align 8
  %106 = getelementptr inbounds %struct.testcase, %struct.testcase* %105, i32 0, i32 3
  %107 = load i64, i64* %106, align 8
  %108 = load i64, i64* @FNM_NOMATCH, align 8
  %109 = icmp eq i64 %107, %108
  %110 = zext i1 %109 to i64
  %111 = select i1 %109, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12, i64 0, i64 0), i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.13, i64 0, i64 0)
  %112 = load %struct.testcase*, %struct.testcase** %6, align 8
  %113 = getelementptr inbounds %struct.testcase, %struct.testcase* %112, i32 0, i32 0
  %114 = load i8*, i8** %113, align 8
  %115 = load %struct.testcase*, %struct.testcase** %6, align 8
  %116 = getelementptr inbounds %struct.testcase, %struct.testcase* %115, i32 0, i32 1
  %117 = load i8*, i8** %116, align 8
  %118 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.14, i64 0, i64 0), i8* %111, i8* %114, i8* %117)
  br label %119

119:                                              ; preds = %104, %98, %93, %84
  br label %120

120:                                              ; preds = %119, %60, %48
  %121 = load i64, i64* %5, align 8
  %122 = add i64 %121, 1
  store i64 %122, i64* %5, align 8
  br label %28

123:                                              ; preds = %28
  %124 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.15, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i64 @nitems(%struct.testcase*) #1

declare dso_local i32* @strchr(i8*, i8 signext) #1

declare dso_local i64 @strcmp(i8*, i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
