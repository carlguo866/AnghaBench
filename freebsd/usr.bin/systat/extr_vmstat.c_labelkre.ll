; ModuleID = '/home/carl/AnghaBench/freebsd/usr.bin/systat/extr_vmstat.c_labelkre.c'
source_filename = "/home/carl/AnghaBench/freebsd/usr.bin/systat/extr_vmstat.c_labelkre.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@STATROW = common dso_local global i64 0, align 8
@STATCOL = common dso_local global i64 0, align 8
@.str = private unnamed_addr constant [14 x i8] c"users    Load\00", align 1
@.str.1 = private unnamed_addr constant [29 x i8] c"Mem usage:    %%Phy   %%Kmem\00", align 1
@MEMROW = common dso_local global i64 0, align 8
@MEMCOL = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [35 x i8] c"Mem: KB    REAL            VIRTUAL\00", align 1
@.str.3 = private unnamed_addr constant [38 x i8] c"        Tot   Share      Tot    Share\00", align 1
@.str.4 = private unnamed_addr constant [4 x i8] c"Act\00", align 1
@.str.5 = private unnamed_addr constant [4 x i8] c"All\00", align 1
@.str.6 = private unnamed_addr constant [5 x i8] c"Free\00", align 1
@PAGEROW = common dso_local global i64 0, align 8
@PAGECOL = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [31 x i8] c"         VN PAGER   SWAP PAGER\00", align 1
@.str.8 = private unnamed_addr constant [31 x i8] c"         in   out     in   out\00", align 1
@.str.9 = private unnamed_addr constant [6 x i8] c"count\00", align 1
@.str.10 = private unnamed_addr constant [6 x i8] c"pages\00", align 1
@INTSROW = common dso_local global i64 0, align 8
@INTSCOL = common dso_local global i64 0, align 8
@.str.11 = private unnamed_addr constant [11 x i8] c"Interrupts\00", align 1
@.str.12 = private unnamed_addr constant [6 x i8] c"total\00", align 1
@VMSTATROW = common dso_local global i32 0, align 4
@VMSTATCOL = common dso_local global i64 0, align 8
@.str.13 = private unnamed_addr constant [6 x i8] c"ioflt\00", align 1
@.str.14 = private unnamed_addr constant [4 x i8] c"cow\00", align 1
@.str.15 = private unnamed_addr constant [5 x i8] c"zfod\00", align 1
@.str.16 = private unnamed_addr constant [6 x i8] c"ozfod\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"%%ozfod\00", align 1
@.str.18 = private unnamed_addr constant [6 x i8] c"daefr\00", align 1
@.str.19 = private unnamed_addr constant [6 x i8] c"prcfr\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"totfr\00", align 1
@.str.21 = private unnamed_addr constant [6 x i8] c"react\00", align 1
@.str.22 = private unnamed_addr constant [6 x i8] c"pdwak\00", align 1
@.str.23 = private unnamed_addr constant [6 x i8] c"pdpgs\00", align 1
@.str.24 = private unnamed_addr constant [6 x i8] c"intrn\00", align 1
@.str.25 = private unnamed_addr constant [5 x i8] c"wire\00", align 1
@.str.26 = private unnamed_addr constant [4 x i8] c"act\00", align 1
@.str.27 = private unnamed_addr constant [6 x i8] c"inact\00", align 1
@.str.28 = private unnamed_addr constant [6 x i8] c"laund\00", align 1
@.str.29 = private unnamed_addr constant [5 x i8] c"free\00", align 1
@LINES = common dso_local global i32 0, align 4
@.str.30 = private unnamed_addr constant [4 x i8] c"buf\00", align 1
@GENSTATROW = common dso_local global i32 0, align 4
@GENSTATCOL = common dso_local global i32 0, align 4
@.str.31 = private unnamed_addr constant [30 x i8] c" Csw  Trp  Sys  Int  Sof  Flt\00", align 1
@GRAPHROW = common dso_local global i64 0, align 8
@GRAPHCOL = common dso_local global i32 0, align 4
@.str.32 = private unnamed_addr constant [55 x i8] c"  . %%Sys    . %%Intr   . %%User   . %%Nice   . %%Idle\00", align 1
@PROCSROW = common dso_local global i64 0, align 8
@PROCSCOL = common dso_local global i32 0, align 4
@.str.33 = private unnamed_addr constant [6 x i8] c"Proc:\00", align 1
@.str.34 = private unnamed_addr constant [20 x i8] c"  r   p   d   s   w\00", align 1
@.str.35 = private unnamed_addr constant [52 x i8] c"|    |    |    |    |    |    |    |    |    |    |\00", align 1
@VNSTATROW = common dso_local global i64 0, align 8
@VNSTATCOL = common dso_local global i64 0, align 8
@.str.36 = private unnamed_addr constant [6 x i8] c"dtbuf\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"desvn\00", align 1
@.str.38 = private unnamed_addr constant [6 x i8] c"numvn\00", align 1
@.str.39 = private unnamed_addr constant [6 x i8] c"frevn\00", align 1
@NAMEIROW = common dso_local global i64 0, align 8
@NAMEICOL = common dso_local global i32 0, align 4
@.str.40 = private unnamed_addr constant [33 x i8] c"Namei     Name-cache   Dir-cache\00", align 1
@.str.41 = private unnamed_addr constant [35 x i8] c"   Calls    hits   %%    hits   %%\00", align 1
@MAXDRIVES = common dso_local global i32 0, align 4
@DISKCOL = common dso_local global i32 0, align 4
@DISKROW = common dso_local global i32 0, align 4
@nintr = common dso_local global i32 0, align 4
@intrloc = common dso_local global i64* null, align 8
@.str.42 = private unnamed_addr constant [9 x i8] c"%-10.10s\00", align 1
@intrname = common dso_local global i32* null, align 8

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @labelkre() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = call i32 (...) @clear()
  %4 = load i64, i64* @STATROW, align 8
  %5 = load i64, i64* @STATCOL, align 8
  %6 = add nsw i64 %5, 6
  %7 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %4, i64 %6, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str, i64 0, i64 0))
  %8 = load i64, i64* @STATROW, align 8
  %9 = add nsw i64 %8, 1
  %10 = load i64, i64* @STATCOL, align 8
  %11 = add nsw i64 %10, 3
  %12 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %9, i64 %11, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i64, i64* @MEMROW, align 8
  %14 = load i64, i64* @MEMCOL, align 8
  %15 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %13, i64 %14, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0))
  %16 = load i64, i64* @MEMROW, align 8
  %17 = add nsw i64 %16, 1
  %18 = load i64, i64* @MEMCOL, align 8
  %19 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %17, i64 %18, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.3, i64 0, i64 0))
  %20 = load i64, i64* @MEMROW, align 8
  %21 = add nsw i64 %20, 2
  %22 = load i64, i64* @MEMCOL, align 8
  %23 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %21, i64 %22, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.4, i64 0, i64 0))
  %24 = load i64, i64* @MEMROW, align 8
  %25 = add nsw i64 %24, 3
  %26 = load i64, i64* @MEMCOL, align 8
  %27 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %25, i64 %26, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5, i64 0, i64 0))
  %28 = load i64, i64* @MEMROW, align 8
  %29 = add nsw i64 %28, 1
  %30 = load i64, i64* @MEMCOL, align 8
  %31 = add nsw i64 %30, 41
  %32 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %29, i64 %31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6, i64 0, i64 0))
  %33 = load i64, i64* @PAGEROW, align 8
  %34 = load i32, i32* @PAGECOL, align 4
  %35 = sext i32 %34 to i64
  %36 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %33, i64 %35, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.7, i64 0, i64 0))
  %37 = load i64, i64* @PAGEROW, align 8
  %38 = add nsw i64 %37, 1
  %39 = load i32, i32* @PAGECOL, align 4
  %40 = sext i32 %39 to i64
  %41 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %38, i64 %40, i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.8, i64 0, i64 0))
  %42 = load i64, i64* @PAGEROW, align 8
  %43 = add nsw i64 %42, 2
  %44 = load i32, i32* @PAGECOL, align 4
  %45 = sext i32 %44 to i64
  %46 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %43, i64 %45, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.9, i64 0, i64 0))
  %47 = load i64, i64* @PAGEROW, align 8
  %48 = add nsw i64 %47, 3
  %49 = load i32, i32* @PAGECOL, align 4
  %50 = sext i32 %49 to i64
  %51 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %48, i64 %50, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.10, i64 0, i64 0))
  %52 = load i64, i64* @INTSROW, align 8
  %53 = load i64, i64* @INTSCOL, align 8
  %54 = add nsw i64 %53, 1
  %55 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %52, i64 %54, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.11, i64 0, i64 0))
  %56 = load i64, i64* @INTSROW, align 8
  %57 = add nsw i64 %56, 1
  %58 = load i64, i64* @INTSCOL, align 8
  %59 = add nsw i64 %58, 6
  %60 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %57, i64 %59, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.12, i64 0, i64 0))
  %61 = load i32, i32* @VMSTATROW, align 4
  %62 = sext i32 %61 to i64
  %63 = load i64, i64* @VMSTATCOL, align 8
  %64 = add nsw i64 %63, 9
  %65 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %62, i64 %64, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.13, i64 0, i64 0))
  %66 = load i32, i32* @VMSTATROW, align 4
  %67 = add nsw i32 %66, 1
  %68 = sext i32 %67 to i64
  %69 = load i64, i64* @VMSTATCOL, align 8
  %70 = add nsw i64 %69, 9
  %71 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %68, i64 %70, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  %72 = load i32, i32* @VMSTATROW, align 4
  %73 = add nsw i32 %72, 2
  %74 = sext i32 %73 to i64
  %75 = load i64, i64* @VMSTATCOL, align 8
  %76 = add nsw i64 %75, 9
  %77 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %74, i64 %76, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15, i64 0, i64 0))
  %78 = load i32, i32* @VMSTATROW, align 4
  %79 = add nsw i32 %78, 3
  %80 = sext i32 %79 to i64
  %81 = load i64, i64* @VMSTATCOL, align 8
  %82 = add nsw i64 %81, 9
  %83 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %80, i64 %82, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.16, i64 0, i64 0))
  %84 = load i32, i32* @VMSTATROW, align 4
  %85 = add nsw i32 %84, 4
  %86 = sext i32 %85 to i64
  %87 = load i64, i64* @VMSTATCOL, align 8
  %88 = add nsw i64 %87, 9
  %89 = sub nsw i64 %88, 1
  %90 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %86, i64 %89, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0))
  %91 = load i32, i32* @VMSTATROW, align 4
  %92 = add nsw i32 %91, 5
  %93 = sext i32 %92 to i64
  %94 = load i64, i64* @VMSTATCOL, align 8
  %95 = add nsw i64 %94, 9
  %96 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %93, i64 %95, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.18, i64 0, i64 0))
  %97 = load i32, i32* @VMSTATROW, align 4
  %98 = add nsw i32 %97, 6
  %99 = sext i32 %98 to i64
  %100 = load i64, i64* @VMSTATCOL, align 8
  %101 = add nsw i64 %100, 9
  %102 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %99, i64 %101, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.19, i64 0, i64 0))
  %103 = load i32, i32* @VMSTATROW, align 4
  %104 = add nsw i32 %103, 7
  %105 = sext i32 %104 to i64
  %106 = load i64, i64* @VMSTATCOL, align 8
  %107 = add nsw i64 %106, 9
  %108 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %105, i64 %107, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0))
  %109 = load i32, i32* @VMSTATROW, align 4
  %110 = add nsw i32 %109, 8
  %111 = sext i32 %110 to i64
  %112 = load i64, i64* @VMSTATCOL, align 8
  %113 = add nsw i64 %112, 9
  %114 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %111, i64 %113, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.21, i64 0, i64 0))
  %115 = load i32, i32* @VMSTATROW, align 4
  %116 = add nsw i32 %115, 9
  %117 = sext i32 %116 to i64
  %118 = load i64, i64* @VMSTATCOL, align 8
  %119 = add nsw i64 %118, 9
  %120 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %117, i64 %119, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.22, i64 0, i64 0))
  %121 = load i32, i32* @VMSTATROW, align 4
  %122 = add nsw i32 %121, 10
  %123 = sext i32 %122 to i64
  %124 = load i64, i64* @VMSTATCOL, align 8
  %125 = add nsw i64 %124, 9
  %126 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %123, i64 %125, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.23, i64 0, i64 0))
  %127 = load i32, i32* @VMSTATROW, align 4
  %128 = add nsw i32 %127, 11
  %129 = sext i32 %128 to i64
  %130 = load i64, i64* @VMSTATCOL, align 8
  %131 = add nsw i64 %130, 9
  %132 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %129, i64 %131, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24, i64 0, i64 0))
  %133 = load i32, i32* @VMSTATROW, align 4
  %134 = add nsw i32 %133, 12
  %135 = sext i32 %134 to i64
  %136 = load i64, i64* @VMSTATCOL, align 8
  %137 = add nsw i64 %136, 9
  %138 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %135, i64 %137, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.25, i64 0, i64 0))
  %139 = load i32, i32* @VMSTATROW, align 4
  %140 = add nsw i32 %139, 13
  %141 = sext i32 %140 to i64
  %142 = load i64, i64* @VMSTATCOL, align 8
  %143 = add nsw i64 %142, 9
  %144 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %141, i64 %143, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.26, i64 0, i64 0))
  %145 = load i32, i32* @VMSTATROW, align 4
  %146 = add nsw i32 %145, 14
  %147 = sext i32 %146 to i64
  %148 = load i64, i64* @VMSTATCOL, align 8
  %149 = add nsw i64 %148, 9
  %150 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %147, i64 %149, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27, i64 0, i64 0))
  %151 = load i32, i32* @VMSTATROW, align 4
  %152 = add nsw i32 %151, 15
  %153 = sext i32 %152 to i64
  %154 = load i64, i64* @VMSTATCOL, align 8
  %155 = add nsw i64 %154, 9
  %156 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %153, i64 %155, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.28, i64 0, i64 0))
  %157 = load i32, i32* @VMSTATROW, align 4
  %158 = add nsw i32 %157, 16
  %159 = sext i32 %158 to i64
  %160 = load i64, i64* @VMSTATCOL, align 8
  %161 = add nsw i64 %160, 9
  %162 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %159, i64 %161, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.29, i64 0, i64 0))
  %163 = load i32, i32* @LINES, align 4
  %164 = sub nsw i32 %163, 1
  %165 = load i32, i32* @VMSTATROW, align 4
  %166 = add nsw i32 %165, 17
  %167 = icmp sgt i32 %164, %166
  br i1 %167, label %168, label %175

168:                                              ; preds = %0
  %169 = load i32, i32* @VMSTATROW, align 4
  %170 = add nsw i32 %169, 17
  %171 = sext i32 %170 to i64
  %172 = load i64, i64* @VMSTATCOL, align 8
  %173 = add nsw i64 %172, 9
  %174 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %171, i64 %173, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.30, i64 0, i64 0))
  br label %175

175:                                              ; preds = %168, %0
  %176 = load i32, i32* @GENSTATROW, align 4
  %177 = sext i32 %176 to i64
  %178 = load i32, i32* @GENSTATCOL, align 4
  %179 = sext i32 %178 to i64
  %180 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %177, i64 %179, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.31, i64 0, i64 0))
  %181 = load i64, i64* @GRAPHROW, align 8
  %182 = load i32, i32* @GRAPHCOL, align 4
  %183 = sext i32 %182 to i64
  %184 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %181, i64 %183, i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.32, i64 0, i64 0))
  %185 = load i64, i64* @PROCSROW, align 8
  %186 = load i32, i32* @PROCSCOL, align 4
  %187 = sext i32 %186 to i64
  %188 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %185, i64 %187, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.33, i64 0, i64 0))
  %189 = load i64, i64* @PROCSROW, align 8
  %190 = add nsw i64 %189, 1
  %191 = load i32, i32* @PROCSCOL, align 4
  %192 = sext i32 %191 to i64
  %193 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %190, i64 %192, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.34, i64 0, i64 0))
  %194 = load i64, i64* @GRAPHROW, align 8
  %195 = add nsw i64 %194, 1
  %196 = load i32, i32* @GRAPHCOL, align 4
  %197 = sext i32 %196 to i64
  %198 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %195, i64 %197, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.35, i64 0, i64 0))
  %199 = load i64, i64* @VNSTATROW, align 8
  %200 = load i64, i64* @VNSTATCOL, align 8
  %201 = add nsw i64 %200, 8
  %202 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %199, i64 %201, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.36, i64 0, i64 0))
  %203 = load i64, i64* @VNSTATROW, align 8
  %204 = add nsw i64 %203, 1
  %205 = load i64, i64* @VNSTATCOL, align 8
  %206 = add nsw i64 %205, 8
  %207 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %204, i64 %206, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i64 0, i64 0))
  %208 = load i64, i64* @VNSTATROW, align 8
  %209 = add nsw i64 %208, 2
  %210 = load i64, i64* @VNSTATCOL, align 8
  %211 = add nsw i64 %210, 8
  %212 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %209, i64 %211, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.38, i64 0, i64 0))
  %213 = load i64, i64* @VNSTATROW, align 8
  %214 = add nsw i64 %213, 3
  %215 = load i64, i64* @VNSTATCOL, align 8
  %216 = add nsw i64 %215, 8
  %217 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %214, i64 %216, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.39, i64 0, i64 0))
  %218 = load i64, i64* @NAMEIROW, align 8
  %219 = load i32, i32* @NAMEICOL, align 4
  %220 = sext i32 %219 to i64
  %221 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %218, i64 %220, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.40, i64 0, i64 0))
  %222 = load i64, i64* @NAMEIROW, align 8
  %223 = add nsw i64 %222, 1
  %224 = load i32, i32* @NAMEICOL, align 4
  %225 = sext i32 %224 to i64
  %226 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %223, i64 %225, i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.41, i64 0, i64 0))
  %227 = load i32, i32* @MAXDRIVES, align 4
  %228 = load i32, i32* @DISKCOL, align 4
  %229 = load i32, i32* @DISKROW, align 4
  %230 = call i32 @dslabel(i32 %227, i32 %228, i32 %229)
  store i32 0, i32* %1, align 4
  br label %231

231:                                              ; preds = %257, %175
  %232 = load i32, i32* %1, align 4
  %233 = load i32, i32* @nintr, align 4
  %234 = icmp slt i32 %232, %233
  br i1 %234, label %235, label %260

235:                                              ; preds = %231
  %236 = load i64*, i64** @intrloc, align 8
  %237 = load i32, i32* %1, align 4
  %238 = sext i32 %237 to i64
  %239 = getelementptr inbounds i64, i64* %236, i64 %238
  %240 = load i64, i64* %239, align 8
  %241 = icmp eq i64 %240, 0
  br i1 %241, label %242, label %243

242:                                              ; preds = %235
  br label %257

243:                                              ; preds = %235
  %244 = load i64*, i64** @intrloc, align 8
  %245 = load i32, i32* %1, align 4
  %246 = sext i32 %245 to i64
  %247 = getelementptr inbounds i64, i64* %244, i64 %246
  %248 = load i64, i64* %247, align 8
  %249 = load i64, i64* @INTSCOL, align 8
  %250 = add nsw i64 %249, 6
  %251 = load i32*, i32** @intrname, align 8
  %252 = load i32, i32* %1, align 4
  %253 = sext i32 %252 to i64
  %254 = getelementptr inbounds i32, i32* %251, i64 %253
  %255 = load i32, i32* %254, align 4
  %256 = call i32 (i64, i64, i8*, ...) @mvprintw(i64 %248, i64 %250, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.42, i64 0, i64 0), i32 %255)
  br label %257

257:                                              ; preds = %243, %242
  %258 = load i32, i32* %1, align 4
  %259 = add nsw i32 %258, 1
  store i32 %259, i32* %1, align 4
  br label %231

260:                                              ; preds = %231
  ret void
}

declare dso_local i32 @clear(...) #1

declare dso_local i32 @mvprintw(i64, i64, i8*, ...) #1

declare dso_local i32 @dslabel(i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
