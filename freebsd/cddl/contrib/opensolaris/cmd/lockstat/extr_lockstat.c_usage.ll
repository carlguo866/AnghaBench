; ModuleID = '/home/carl/AnghaBench/freebsd/cddl/contrib/opensolaris/cmd/lockstat/extr_lockstat.c_usage.c'
source_filename = "/home/carl/AnghaBench/freebsd/cddl/contrib/opensolaris/cmd/lockstat/extr_lockstat.c_usage.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@stderr = common dso_local global i32 0, align 4
@.str = private unnamed_addr constant [1925 x i8] c"Usage: lockstat [options] command [args]\0A\0AGeneral options:\0A\0A  -V              print the corresponding D program\0A\0AEvent selection options:\0A\0A  -C              watch contention events [on by default]\0A  -E              watch error events [off by default]\0A  -H              watch hold events [off by default]\0A  -I              watch interrupt events [off by default]\0A  -A              watch all lock events [equivalent to -CH]\0A  -e event_list   only watch the specified events (shown below);\0A                  <event_list> is a comma-separated list of\0A                  events or ranges of events, e.g. 1,4-7,35\0A  -i rate         interrupt rate for -I [default: %d Hz]\0A\0AData gathering options:\0A\0A  -b              basic statistics (lock, caller, event count)\0A  -t              timing for all events [default]\0A  -h              histograms for event times\0A  -s depth        stack traces <depth> deep\0A  -x opt[=val]    enable or modify DTrace options\0A\0AData filtering options:\0A\0A  -n nrecords     maximum number of data records [default: %d]\0A  -l lock[,size]  only watch <lock>, which can be specified as a\0A                  symbolic name or hex address; <size> defaults\0A                  to the ELF symbol size if available, 1 if not\0A  -f func[,size]  only watch events generated by <func>\0A  -d duration     only watch events longer than <duration>\0A  -T              trace (rather than sample) events\0A\0AData reporting options:\0A\0A  -k              coalesce PCs within functions\0A  -g              show total events generated by function\0A  -w              wherever: don't distinguish events by caller\0A  -W              whichever: don't distinguish events by lock\0A  -R              display rates rather than counts\0A  -p              parsable output format (awk(1)-friendly)\0A  -P              sort lock data by (count * avg_time) product\0A  -D n            only display top <n> events of each type\0A  -o filename     send output to <filename>\0A\00", align 1
@DEFAULT_HZ = common dso_local global i32 0, align 4
@DEFAULT_NRECS = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [11 x i8] c"Contention\00", align 1
@.str.2 = private unnamed_addr constant [10 x i8] c"Hold-time\00", align 1
@.str.3 = private unnamed_addr constant [10 x i8] c"Interrupt\00", align 1
@.str.4 = private unnamed_addr constant [6 x i8] c"Error\00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @usage to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @usage() #0 {
  %1 = load i32, i32* @stderr, align 4
  %2 = load i32, i32* @DEFAULT_HZ, align 4
  %3 = load i32, i32* @DEFAULT_NRECS, align 4
  %4 = call i32 (i32, i8*, ...) @fprintf(i32 %1, i8* getelementptr inbounds ([1925 x i8], [1925 x i8]* @.str, i64 0, i64 0), i32 %2, i32 %3)
  %5 = call i32 @show_events(i8 signext 67, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0))
  %6 = call i32 @show_events(i8 signext 72, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.2, i64 0, i64 0))
  %7 = call i32 @show_events(i8 signext 73, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.3, i64 0, i64 0))
  %8 = call i32 @show_events(i8 signext 69, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.4, i64 0, i64 0))
  %9 = load i32, i32* @stderr, align 4
  %10 = call i32 (i32, i8*, ...) @fprintf(i32 %9, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %11 = call i32 @exit(i32 1) #3
  unreachable
}

declare dso_local i32 @fprintf(i32, i8*, ...) #1

declare dso_local i32 @show_events(i8 signext, i8*) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
