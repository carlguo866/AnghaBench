; ModuleID = '/home/carl/AnghaBench/freebsd/tools/regression/capsicum/syscalls/extr_cap_fcntls_limit.c_fcntl_tests_0.c'
source_filename = "/home/carl/AnghaBench/freebsd/tools/regression/capsicum/syscalls/extr_cap_fcntls_limit.c_fcntl_tests_0.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@CAP_FCNTL_ALL = common dso_local global i32 0, align 4
@F_GETFD = common dso_local global i32 0, align 4
@F_SETFD = common dso_local global i32 0, align 4
@FD_CLOEXEC = common dso_local global i32 0, align 4
@F_GETFL = common dso_local global i32 0, align 4
@O_RDWR = common dso_local global i32 0, align 4
@F_SETFL = common dso_local global i32 0, align 4
@O_NONBLOCK = common dso_local global i32 0, align 4
@errno = common dso_local global i64 0, align 8
@EINVAL = common dso_local global i64 0, align 8
@CAP_FCNTL_GETFL = common dso_local global i32 0, align 4
@CAP_FCNTL_SETFL = common dso_local global i32 0, align 4
@ENOTCAPABLE = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32)* @fcntl_tests_0 to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @fcntl_tests_0(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  %4 = load i32, i32* %2, align 4
  %5 = call i64 @cap_fcntls_get(i32 %4, i32* %3)
  %6 = icmp eq i64 %5, 0
  %7 = zext i1 %6 to i32
  %8 = call i32 @CHECK(i32 %7)
  %9 = load i32, i32* %3, align 4
  %10 = load i32, i32* @CAP_FCNTL_ALL, align 4
  %11 = icmp eq i32 %9, %10
  %12 = zext i1 %11 to i32
  %13 = call i32 @CHECK(i32 %12)
  %14 = load i32, i32* %2, align 4
  %15 = load i32, i32* @F_GETFD, align 4
  %16 = call i32 (i32, i32, ...) @fcntl(i32 %14, i32 %15)
  %17 = icmp eq i32 %16, 0
  %18 = zext i1 %17 to i32
  %19 = call i32 @CHECK(i32 %18)
  %20 = load i32, i32* %2, align 4
  %21 = load i32, i32* @F_SETFD, align 4
  %22 = load i32, i32* @FD_CLOEXEC, align 4
  %23 = call i32 (i32, i32, ...) @fcntl(i32 %20, i32 %21, i32 %22)
  %24 = icmp eq i32 %23, 0
  %25 = zext i1 %24 to i32
  %26 = call i32 @CHECK(i32 %25)
  %27 = load i32, i32* %2, align 4
  %28 = load i32, i32* @F_GETFD, align 4
  %29 = call i32 (i32, i32, ...) @fcntl(i32 %27, i32 %28)
  %30 = load i32, i32* @FD_CLOEXEC, align 4
  %31 = icmp eq i32 %29, %30
  %32 = zext i1 %31 to i32
  %33 = call i32 @CHECK(i32 %32)
  %34 = load i32, i32* %2, align 4
  %35 = load i32, i32* @F_SETFD, align 4
  %36 = call i32 (i32, i32, ...) @fcntl(i32 %34, i32 %35, i32 0)
  %37 = icmp eq i32 %36, 0
  %38 = zext i1 %37 to i32
  %39 = call i32 @CHECK(i32 %38)
  %40 = load i32, i32* %2, align 4
  %41 = load i32, i32* @F_GETFD, align 4
  %42 = call i32 (i32, i32, ...) @fcntl(i32 %40, i32 %41)
  %43 = icmp eq i32 %42, 0
  %44 = zext i1 %43 to i32
  %45 = call i32 @CHECK(i32 %44)
  %46 = load i32, i32* %2, align 4
  %47 = load i32, i32* @F_GETFL, align 4
  %48 = call i32 (i32, i32, ...) @fcntl(i32 %46, i32 %47)
  %49 = load i32, i32* @O_RDWR, align 4
  %50 = icmp eq i32 %48, %49
  %51 = zext i1 %50 to i32
  %52 = call i32 @CHECK(i32 %51)
  %53 = load i32, i32* %2, align 4
  %54 = load i32, i32* @F_SETFL, align 4
  %55 = load i32, i32* @O_NONBLOCK, align 4
  %56 = call i32 (i32, i32, ...) @fcntl(i32 %53, i32 %54, i32 %55)
  %57 = icmp eq i32 %56, 0
  %58 = zext i1 %57 to i32
  %59 = call i32 @CHECK(i32 %58)
  %60 = load i32, i32* %2, align 4
  %61 = load i32, i32* @F_GETFL, align 4
  %62 = call i32 (i32, i32, ...) @fcntl(i32 %60, i32 %61)
  %63 = load i32, i32* @O_RDWR, align 4
  %64 = load i32, i32* @O_NONBLOCK, align 4
  %65 = or i32 %63, %64
  %66 = icmp eq i32 %62, %65
  %67 = zext i1 %66 to i32
  %68 = call i32 @CHECK(i32 %67)
  %69 = load i32, i32* %2, align 4
  %70 = load i32, i32* @F_SETFL, align 4
  %71 = call i32 (i32, i32, ...) @fcntl(i32 %69, i32 %70, i32 0)
  %72 = icmp eq i32 %71, 0
  %73 = zext i1 %72 to i32
  %74 = call i32 @CHECK(i32 %73)
  %75 = load i32, i32* %2, align 4
  %76 = load i32, i32* @F_GETFL, align 4
  %77 = call i32 (i32, i32, ...) @fcntl(i32 %75, i32 %76)
  %78 = load i32, i32* @O_RDWR, align 4
  %79 = icmp eq i32 %77, %78
  %80 = zext i1 %79 to i32
  %81 = call i32 @CHECK(i32 %80)
  store i64 0, i64* @errno, align 8
  %82 = load i32, i32* %2, align 4
  %83 = load i32, i32* @CAP_FCNTL_ALL, align 4
  %84 = xor i32 %83, -1
  %85 = call i32 @cap_fcntls_limit(i32 %82, i32 %84)
  %86 = icmp eq i32 %85, -1
  %87 = zext i1 %86 to i32
  %88 = call i32 @CHECK(i32 %87)
  %89 = load i64, i64* @errno, align 8
  %90 = load i64, i64* @EINVAL, align 8
  %91 = icmp eq i64 %89, %90
  %92 = zext i1 %91 to i32
  %93 = call i32 @CHECK(i32 %92)
  %94 = load i32, i32* %2, align 4
  %95 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %96 = load i32, i32* @CAP_FCNTL_SETFL, align 4
  %97 = or i32 %95, %96
  %98 = call i32 @cap_fcntls_limit(i32 %94, i32 %97)
  %99 = icmp eq i32 %98, 0
  %100 = zext i1 %99 to i32
  %101 = call i32 @CHECK(i32 %100)
  store i32 0, i32* %3, align 4
  %102 = load i32, i32* %2, align 4
  %103 = call i64 @cap_fcntls_get(i32 %102, i32* %3)
  %104 = icmp eq i64 %103, 0
  %105 = zext i1 %104 to i32
  %106 = call i32 @CHECK(i32 %105)
  %107 = load i32, i32* %3, align 4
  %108 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %109 = load i32, i32* @CAP_FCNTL_SETFL, align 4
  %110 = or i32 %108, %109
  %111 = icmp eq i32 %107, %110
  %112 = zext i1 %111 to i32
  %113 = call i32 @CHECK(i32 %112)
  %114 = load i32, i32* %2, align 4
  %115 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %116 = load i32, i32* @CAP_FCNTL_SETFL, align 4
  %117 = or i32 %115, %116
  %118 = call i32 @cap_fcntls_limit(i32 %114, i32 %117)
  %119 = icmp eq i32 %118, 0
  %120 = zext i1 %119 to i32
  %121 = call i32 @CHECK(i32 %120)
  store i32 0, i32* %3, align 4
  %122 = load i32, i32* %2, align 4
  %123 = call i64 @cap_fcntls_get(i32 %122, i32* %3)
  %124 = icmp eq i64 %123, 0
  %125 = zext i1 %124 to i32
  %126 = call i32 @CHECK(i32 %125)
  %127 = load i32, i32* %3, align 4
  %128 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %129 = load i32, i32* @CAP_FCNTL_SETFL, align 4
  %130 = or i32 %128, %129
  %131 = icmp eq i32 %127, %130
  %132 = zext i1 %131 to i32
  %133 = call i32 @CHECK(i32 %132)
  %134 = load i32, i32* %2, align 4
  %135 = load i32, i32* @F_GETFD, align 4
  %136 = call i32 (i32, i32, ...) @fcntl(i32 %134, i32 %135)
  %137 = icmp eq i32 %136, 0
  %138 = zext i1 %137 to i32
  %139 = call i32 @CHECK(i32 %138)
  %140 = load i32, i32* %2, align 4
  %141 = load i32, i32* @F_SETFD, align 4
  %142 = load i32, i32* @FD_CLOEXEC, align 4
  %143 = call i32 (i32, i32, ...) @fcntl(i32 %140, i32 %141, i32 %142)
  %144 = icmp eq i32 %143, 0
  %145 = zext i1 %144 to i32
  %146 = call i32 @CHECK(i32 %145)
  %147 = load i32, i32* %2, align 4
  %148 = load i32, i32* @F_GETFD, align 4
  %149 = call i32 (i32, i32, ...) @fcntl(i32 %147, i32 %148)
  %150 = load i32, i32* @FD_CLOEXEC, align 4
  %151 = icmp eq i32 %149, %150
  %152 = zext i1 %151 to i32
  %153 = call i32 @CHECK(i32 %152)
  %154 = load i32, i32* %2, align 4
  %155 = load i32, i32* @F_SETFD, align 4
  %156 = call i32 (i32, i32, ...) @fcntl(i32 %154, i32 %155, i32 0)
  %157 = icmp eq i32 %156, 0
  %158 = zext i1 %157 to i32
  %159 = call i32 @CHECK(i32 %158)
  %160 = load i32, i32* %2, align 4
  %161 = load i32, i32* @F_GETFD, align 4
  %162 = call i32 (i32, i32, ...) @fcntl(i32 %160, i32 %161)
  %163 = icmp eq i32 %162, 0
  %164 = zext i1 %163 to i32
  %165 = call i32 @CHECK(i32 %164)
  %166 = load i32, i32* %2, align 4
  %167 = load i32, i32* @F_GETFL, align 4
  %168 = call i32 (i32, i32, ...) @fcntl(i32 %166, i32 %167)
  %169 = load i32, i32* @O_RDWR, align 4
  %170 = icmp eq i32 %168, %169
  %171 = zext i1 %170 to i32
  %172 = call i32 @CHECK(i32 %171)
  %173 = load i32, i32* %2, align 4
  %174 = load i32, i32* @F_SETFL, align 4
  %175 = load i32, i32* @O_NONBLOCK, align 4
  %176 = call i32 (i32, i32, ...) @fcntl(i32 %173, i32 %174, i32 %175)
  %177 = icmp eq i32 %176, 0
  %178 = zext i1 %177 to i32
  %179 = call i32 @CHECK(i32 %178)
  %180 = load i32, i32* %2, align 4
  %181 = load i32, i32* @F_GETFL, align 4
  %182 = call i32 (i32, i32, ...) @fcntl(i32 %180, i32 %181)
  %183 = load i32, i32* @O_RDWR, align 4
  %184 = load i32, i32* @O_NONBLOCK, align 4
  %185 = or i32 %183, %184
  %186 = icmp eq i32 %182, %185
  %187 = zext i1 %186 to i32
  %188 = call i32 @CHECK(i32 %187)
  %189 = load i32, i32* %2, align 4
  %190 = load i32, i32* @F_SETFL, align 4
  %191 = call i32 (i32, i32, ...) @fcntl(i32 %189, i32 %190, i32 0)
  %192 = icmp eq i32 %191, 0
  %193 = zext i1 %192 to i32
  %194 = call i32 @CHECK(i32 %193)
  %195 = load i32, i32* %2, align 4
  %196 = load i32, i32* @F_GETFL, align 4
  %197 = call i32 (i32, i32, ...) @fcntl(i32 %195, i32 %196)
  %198 = load i32, i32* @O_RDWR, align 4
  %199 = icmp eq i32 %197, %198
  %200 = zext i1 %199 to i32
  %201 = call i32 @CHECK(i32 %200)
  %202 = load i32, i32* %2, align 4
  %203 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %204 = call i32 @cap_fcntls_limit(i32 %202, i32 %203)
  %205 = icmp eq i32 %204, 0
  %206 = zext i1 %205 to i32
  %207 = call i32 @CHECK(i32 %206)
  store i32 0, i32* %3, align 4
  %208 = load i32, i32* %2, align 4
  %209 = call i64 @cap_fcntls_get(i32 %208, i32* %3)
  %210 = icmp eq i64 %209, 0
  %211 = zext i1 %210 to i32
  %212 = call i32 @CHECK(i32 %211)
  %213 = load i32, i32* %3, align 4
  %214 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %215 = icmp eq i32 %213, %214
  %216 = zext i1 %215 to i32
  %217 = call i32 @CHECK(i32 %216)
  store i64 0, i64* @errno, align 8
  %218 = load i32, i32* %2, align 4
  %219 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %220 = load i32, i32* @CAP_FCNTL_SETFL, align 4
  %221 = or i32 %219, %220
  %222 = call i32 @cap_fcntls_limit(i32 %218, i32 %221)
  %223 = icmp eq i32 %222, -1
  %224 = zext i1 %223 to i32
  %225 = call i32 @CHECK(i32 %224)
  %226 = load i64, i64* @errno, align 8
  %227 = load i64, i64* @ENOTCAPABLE, align 8
  %228 = icmp eq i64 %226, %227
  %229 = zext i1 %228 to i32
  %230 = call i32 @CHECK(i32 %229)
  store i32 0, i32* %3, align 4
  %231 = load i32, i32* %2, align 4
  %232 = call i64 @cap_fcntls_get(i32 %231, i32* %3)
  %233 = icmp eq i64 %232, 0
  %234 = zext i1 %233 to i32
  %235 = call i32 @CHECK(i32 %234)
  %236 = load i32, i32* %3, align 4
  %237 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %238 = icmp eq i32 %236, %237
  %239 = zext i1 %238 to i32
  %240 = call i32 @CHECK(i32 %239)
  %241 = load i32, i32* %2, align 4
  %242 = load i32, i32* @F_GETFD, align 4
  %243 = call i32 (i32, i32, ...) @fcntl(i32 %241, i32 %242)
  %244 = icmp eq i32 %243, 0
  %245 = zext i1 %244 to i32
  %246 = call i32 @CHECK(i32 %245)
  %247 = load i32, i32* %2, align 4
  %248 = load i32, i32* @F_SETFD, align 4
  %249 = load i32, i32* @FD_CLOEXEC, align 4
  %250 = call i32 (i32, i32, ...) @fcntl(i32 %247, i32 %248, i32 %249)
  %251 = icmp eq i32 %250, 0
  %252 = zext i1 %251 to i32
  %253 = call i32 @CHECK(i32 %252)
  %254 = load i32, i32* %2, align 4
  %255 = load i32, i32* @F_GETFD, align 4
  %256 = call i32 (i32, i32, ...) @fcntl(i32 %254, i32 %255)
  %257 = load i32, i32* @FD_CLOEXEC, align 4
  %258 = icmp eq i32 %256, %257
  %259 = zext i1 %258 to i32
  %260 = call i32 @CHECK(i32 %259)
  %261 = load i32, i32* %2, align 4
  %262 = load i32, i32* @F_SETFD, align 4
  %263 = call i32 (i32, i32, ...) @fcntl(i32 %261, i32 %262, i32 0)
  %264 = icmp eq i32 %263, 0
  %265 = zext i1 %264 to i32
  %266 = call i32 @CHECK(i32 %265)
  %267 = load i32, i32* %2, align 4
  %268 = load i32, i32* @F_GETFD, align 4
  %269 = call i32 (i32, i32, ...) @fcntl(i32 %267, i32 %268)
  %270 = icmp eq i32 %269, 0
  %271 = zext i1 %270 to i32
  %272 = call i32 @CHECK(i32 %271)
  %273 = load i32, i32* %2, align 4
  %274 = load i32, i32* @F_GETFL, align 4
  %275 = call i32 (i32, i32, ...) @fcntl(i32 %273, i32 %274)
  %276 = load i32, i32* @O_RDWR, align 4
  %277 = icmp eq i32 %275, %276
  %278 = zext i1 %277 to i32
  %279 = call i32 @CHECK(i32 %278)
  store i64 0, i64* @errno, align 8
  %280 = load i32, i32* %2, align 4
  %281 = load i32, i32* @F_SETFL, align 4
  %282 = load i32, i32* @O_NONBLOCK, align 4
  %283 = call i32 (i32, i32, ...) @fcntl(i32 %280, i32 %281, i32 %282)
  %284 = icmp eq i32 %283, -1
  %285 = zext i1 %284 to i32
  %286 = call i32 @CHECK(i32 %285)
  %287 = load i64, i64* @errno, align 8
  %288 = load i64, i64* @ENOTCAPABLE, align 8
  %289 = icmp eq i64 %287, %288
  %290 = zext i1 %289 to i32
  %291 = call i32 @CHECK(i32 %290)
  %292 = load i32, i32* %2, align 4
  %293 = load i32, i32* @F_GETFL, align 4
  %294 = call i32 (i32, i32, ...) @fcntl(i32 %292, i32 %293)
  %295 = load i32, i32* @O_RDWR, align 4
  %296 = icmp eq i32 %294, %295
  %297 = zext i1 %296 to i32
  %298 = call i32 @CHECK(i32 %297)
  store i64 0, i64* @errno, align 8
  %299 = load i32, i32* %2, align 4
  %300 = load i32, i32* @F_SETFL, align 4
  %301 = call i32 (i32, i32, ...) @fcntl(i32 %299, i32 %300, i32 0)
  %302 = icmp eq i32 %301, -1
  %303 = zext i1 %302 to i32
  %304 = call i32 @CHECK(i32 %303)
  %305 = load i64, i64* @errno, align 8
  %306 = load i64, i64* @ENOTCAPABLE, align 8
  %307 = icmp eq i64 %305, %306
  %308 = zext i1 %307 to i32
  %309 = call i32 @CHECK(i32 %308)
  %310 = load i32, i32* %2, align 4
  %311 = load i32, i32* @F_GETFL, align 4
  %312 = call i32 (i32, i32, ...) @fcntl(i32 %310, i32 %311)
  %313 = load i32, i32* @O_RDWR, align 4
  %314 = icmp eq i32 %312, %313
  %315 = zext i1 %314 to i32
  %316 = call i32 @CHECK(i32 %315)
  %317 = load i32, i32* %2, align 4
  %318 = call i32 @cap_fcntls_limit(i32 %317, i32 0)
  %319 = icmp eq i32 %318, 0
  %320 = zext i1 %319 to i32
  %321 = call i32 @CHECK(i32 %320)
  %322 = load i32, i32* @CAP_FCNTL_ALL, align 4
  store i32 %322, i32* %3, align 4
  %323 = load i32, i32* %2, align 4
  %324 = call i64 @cap_fcntls_get(i32 %323, i32* %3)
  %325 = icmp eq i64 %324, 0
  %326 = zext i1 %325 to i32
  %327 = call i32 @CHECK(i32 %326)
  %328 = load i32, i32* %3, align 4
  %329 = icmp eq i32 %328, 0
  %330 = zext i1 %329 to i32
  %331 = call i32 @CHECK(i32 %330)
  store i64 0, i64* @errno, align 8
  %332 = load i32, i32* %2, align 4
  %333 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %334 = load i32, i32* @CAP_FCNTL_SETFL, align 4
  %335 = or i32 %333, %334
  %336 = call i32 @cap_fcntls_limit(i32 %332, i32 %335)
  %337 = icmp eq i32 %336, -1
  %338 = zext i1 %337 to i32
  %339 = call i32 @CHECK(i32 %338)
  %340 = load i64, i64* @errno, align 8
  %341 = load i64, i64* @ENOTCAPABLE, align 8
  %342 = icmp eq i64 %340, %341
  %343 = zext i1 %342 to i32
  %344 = call i32 @CHECK(i32 %343)
  %345 = load i32, i32* @CAP_FCNTL_ALL, align 4
  store i32 %345, i32* %3, align 4
  %346 = load i32, i32* %2, align 4
  %347 = call i64 @cap_fcntls_get(i32 %346, i32* %3)
  %348 = icmp eq i64 %347, 0
  %349 = zext i1 %348 to i32
  %350 = call i32 @CHECK(i32 %349)
  %351 = load i32, i32* %3, align 4
  %352 = icmp eq i32 %351, 0
  %353 = zext i1 %352 to i32
  %354 = call i32 @CHECK(i32 %353)
  store i64 0, i64* @errno, align 8
  %355 = load i32, i32* %2, align 4
  %356 = load i32, i32* @CAP_FCNTL_GETFL, align 4
  %357 = call i32 @cap_fcntls_limit(i32 %355, i32 %356)
  %358 = icmp eq i32 %357, -1
  %359 = zext i1 %358 to i32
  %360 = call i32 @CHECK(i32 %359)
  %361 = load i64, i64* @errno, align 8
  %362 = load i64, i64* @ENOTCAPABLE, align 8
  %363 = icmp eq i64 %361, %362
  %364 = zext i1 %363 to i32
  %365 = call i32 @CHECK(i32 %364)
  %366 = load i32, i32* @CAP_FCNTL_ALL, align 4
  store i32 %366, i32* %3, align 4
  %367 = load i32, i32* %2, align 4
  %368 = call i64 @cap_fcntls_get(i32 %367, i32* %3)
  %369 = icmp eq i64 %368, 0
  %370 = zext i1 %369 to i32
  %371 = call i32 @CHECK(i32 %370)
  %372 = load i32, i32* %3, align 4
  %373 = icmp eq i32 %372, 0
  %374 = zext i1 %373 to i32
  %375 = call i32 @CHECK(i32 %374)
  %376 = load i32, i32* %2, align 4
  %377 = load i32, i32* @F_GETFD, align 4
  %378 = call i32 (i32, i32, ...) @fcntl(i32 %376, i32 %377)
  %379 = icmp eq i32 %378, 0
  %380 = zext i1 %379 to i32
  %381 = call i32 @CHECK(i32 %380)
  %382 = load i32, i32* %2, align 4
  %383 = load i32, i32* @F_SETFD, align 4
  %384 = load i32, i32* @FD_CLOEXEC, align 4
  %385 = call i32 (i32, i32, ...) @fcntl(i32 %382, i32 %383, i32 %384)
  %386 = icmp eq i32 %385, 0
  %387 = zext i1 %386 to i32
  %388 = call i32 @CHECK(i32 %387)
  %389 = load i32, i32* %2, align 4
  %390 = load i32, i32* @F_GETFD, align 4
  %391 = call i32 (i32, i32, ...) @fcntl(i32 %389, i32 %390)
  %392 = load i32, i32* @FD_CLOEXEC, align 4
  %393 = icmp eq i32 %391, %392
  %394 = zext i1 %393 to i32
  %395 = call i32 @CHECK(i32 %394)
  %396 = load i32, i32* %2, align 4
  %397 = load i32, i32* @F_SETFD, align 4
  %398 = call i32 (i32, i32, ...) @fcntl(i32 %396, i32 %397, i32 0)
  %399 = icmp eq i32 %398, 0
  %400 = zext i1 %399 to i32
  %401 = call i32 @CHECK(i32 %400)
  %402 = load i32, i32* %2, align 4
  %403 = load i32, i32* @F_GETFD, align 4
  %404 = call i32 (i32, i32, ...) @fcntl(i32 %402, i32 %403)
  %405 = icmp eq i32 %404, 0
  %406 = zext i1 %405 to i32
  %407 = call i32 @CHECK(i32 %406)
  store i64 0, i64* @errno, align 8
  %408 = load i32, i32* %2, align 4
  %409 = load i32, i32* @F_GETFL, align 4
  %410 = call i32 (i32, i32, ...) @fcntl(i32 %408, i32 %409)
  %411 = icmp eq i32 %410, -1
  %412 = zext i1 %411 to i32
  %413 = call i32 @CHECK(i32 %412)
  %414 = load i64, i64* @errno, align 8
  %415 = load i64, i64* @ENOTCAPABLE, align 8
  %416 = icmp eq i64 %414, %415
  %417 = zext i1 %416 to i32
  %418 = call i32 @CHECK(i32 %417)
  store i64 0, i64* @errno, align 8
  %419 = load i32, i32* %2, align 4
  %420 = load i32, i32* @F_SETFL, align 4
  %421 = load i32, i32* @O_NONBLOCK, align 4
  %422 = call i32 (i32, i32, ...) @fcntl(i32 %419, i32 %420, i32 %421)
  %423 = icmp eq i32 %422, -1
  %424 = zext i1 %423 to i32
  %425 = call i32 @CHECK(i32 %424)
  %426 = load i64, i64* @errno, align 8
  %427 = load i64, i64* @ENOTCAPABLE, align 8
  %428 = icmp eq i64 %426, %427
  %429 = zext i1 %428 to i32
  %430 = call i32 @CHECK(i32 %429)
  store i64 0, i64* @errno, align 8
  %431 = load i32, i32* %2, align 4
  %432 = load i32, i32* @F_SETFL, align 4
  %433 = call i32 (i32, i32, ...) @fcntl(i32 %431, i32 %432, i32 0)
  %434 = icmp eq i32 %433, -1
  %435 = zext i1 %434 to i32
  %436 = call i32 @CHECK(i32 %435)
  %437 = load i64, i64* @errno, align 8
  %438 = load i64, i64* @ENOTCAPABLE, align 8
  %439 = icmp eq i64 %437, %438
  %440 = zext i1 %439 to i32
  %441 = call i32 @CHECK(i32 %440)
  store i64 0, i64* @errno, align 8
  %442 = load i32, i32* %2, align 4
  %443 = load i32, i32* @F_GETFL, align 4
  %444 = call i32 (i32, i32, ...) @fcntl(i32 %442, i32 %443)
  %445 = icmp eq i32 %444, -1
  %446 = zext i1 %445 to i32
  %447 = call i32 @CHECK(i32 %446)
  %448 = load i64, i64* @errno, align 8
  %449 = load i64, i64* @ENOTCAPABLE, align 8
  %450 = icmp eq i64 %448, %449
  %451 = zext i1 %450 to i32
  %452 = call i32 @CHECK(i32 %451)
  ret void
}

declare dso_local i32 @CHECK(i32) #1

declare dso_local i64 @cap_fcntls_get(i32, i32*) #1

declare dso_local i32 @fcntl(i32, i32, ...) #1

declare dso_local i32 @cap_fcntls_limit(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
