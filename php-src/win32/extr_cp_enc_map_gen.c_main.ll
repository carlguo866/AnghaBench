; ModuleID = '/home/carl/AnghaBench/php-src/win32/extr_cp_enc_map_gen.c_main.c'
source_filename = "/home/carl/AnghaBench/php-src/win32/extr_cp_enc_map_gen.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cp = type { i32, i8*, i8*, i32* }
%struct.TYPE_3__ = type { i32, i32, i8* }

@.str = private unnamed_addr constant [104 x i8] c"/* Autogenerated file. Update cp_enc_map_gen.c and regen like \0A cp_enc_map_gen.exe > cp_enc_map.c \0A*/\0A\0A\00", align 1
@.str.1 = private unnamed_addr constant [56 x i8] c"static const struct php_win32_cp php_win32_cp_map[] = {\00", align 1
@cp_map = common dso_local global %struct.cp* null, align 8
@.str.2 = private unnamed_addr constant [22 x i8] c"\09/* %u is invalid */\0A\00", align 1
@WC_ERR_INVALID_CHARS = common dso_local global i32 0, align 4
@MB_ERR_INVALID_CHARS = common dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [40 x i8] c"\09{ %u, %u, %u, %u, \22%s\22, NULL, \22%s\22 },\0A\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"\09{ %u, %u, %u, %u, \22%s\22, \22%s\22, \22%s\22 },\0A\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"};\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main(i32 %0, i8** %1) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.TYPE_3__, align 8
  %8 = alloca %struct.cp*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 0, i32* %9, align 4
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([104 x i8], [104 x i8]* @.str, i64 0, i64 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.1, i64 0, i64 0))
  %14 = load %struct.cp*, %struct.cp** @cp_map, align 8
  %15 = getelementptr inbounds %struct.cp, %struct.cp* %14, i64 0
  store %struct.cp* %15, %struct.cp** %8, align 8
  br label %16

16:                                               ; preds = %89, %2
  %17 = load %struct.cp*, %struct.cp** %8, align 8
  %18 = getelementptr inbounds %struct.cp, %struct.cp* %17, i32 0, i32 3
  %19 = load i32*, i32** %18, align 8
  %20 = icmp ne i32* %19, null
  br i1 %20, label %21, label %92

21:                                               ; preds = %16
  %22 = load %struct.cp*, %struct.cp** %8, align 8
  %23 = getelementptr inbounds %struct.cp, %struct.cp* %22, i32 0, i32 0
  %24 = load i32, i32* %23, align 8
  %25 = call i32 @IsValidCodePage(i32 %24)
  %26 = icmp ne i32 %25, 0
  br i1 %26, label %32, label %27

27:                                               ; preds = %21
  %28 = load %struct.cp*, %struct.cp** %8, align 8
  %29 = getelementptr inbounds %struct.cp, %struct.cp* %28, i32 0, i32 0
  %30 = load i32, i32* %29, align 8
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.2, i64 0, i64 0), i32 %30)
  br label %89

32:                                               ; preds = %21
  %33 = load %struct.cp*, %struct.cp** %8, align 8
  %34 = getelementptr inbounds %struct.cp, %struct.cp* %33, i32 0, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = call i64 @GetCPInfoEx(i32 %35, i32 0, %struct.TYPE_3__* %7)
  %37 = icmp ne i64 %36, 0
  br i1 %37, label %38, label %88

38:                                               ; preds = %32
  store i32 0, i32* %10, align 4
  store i32 0, i32* %11, align 4
  %39 = load %struct.cp*, %struct.cp** %8, align 8
  %40 = getelementptr inbounds %struct.cp, %struct.cp* %39, i32 0, i32 0
  %41 = load i32, i32* %40, align 8
  %42 = icmp eq i32 65001, %41
  br i1 %42, label %48, label %43

43:                                               ; preds = %38
  %44 = load %struct.cp*, %struct.cp** %8, align 8
  %45 = getelementptr inbounds %struct.cp, %struct.cp* %44, i32 0, i32 0
  %46 = load i32, i32* %45, align 8
  %47 = icmp eq i32 54936, %46
  br i1 %47, label %48, label %51

48:                                               ; preds = %43, %38
  %49 = load i32, i32* @WC_ERR_INVALID_CHARS, align 4
  store i32 %49, i32* %11, align 4
  %50 = load i32, i32* @MB_ERR_INVALID_CHARS, align 4
  store i32 %50, i32* %10, align 4
  br label %51

51:                                               ; preds = %48, %43
  %52 = load %struct.cp*, %struct.cp** %8, align 8
  %53 = getelementptr inbounds %struct.cp, %struct.cp* %52, i32 0, i32 1
  %54 = load i8*, i8** %53, align 8
  %55 = getelementptr inbounds i8, i8* %54, i64 0
  %56 = load i8, i8* %55, align 1
  %57 = icmp ne i8 %56, 0
  br i1 %57, label %71, label %58

58:                                               ; preds = %51
  %59 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %7, i32 0, i32 0
  %60 = load i32, i32* %59, align 8
  %61 = load i32, i32* %10, align 4
  %62 = load i32, i32* %11, align 4
  %63 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %7, i32 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = load %struct.cp*, %struct.cp** %8, align 8
  %66 = getelementptr inbounds %struct.cp, %struct.cp* %65, i32 0, i32 2
  %67 = load i8*, i8** %66, align 8
  %68 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %7, i32 0, i32 2
  %69 = load i8*, i8** %68, align 8
  %70 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.3, i64 0, i64 0), i32 %60, i32 %61, i32 %62, i32 %64, i8* %67, i8* %69)
  br label %87

71:                                               ; preds = %51
  %72 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %7, i32 0, i32 0
  %73 = load i32, i32* %72, align 8
  %74 = load i32, i32* %10, align 4
  %75 = load i32, i32* %11, align 4
  %76 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %7, i32 0, i32 1
  %77 = load i32, i32* %76, align 4
  %78 = load %struct.cp*, %struct.cp** %8, align 8
  %79 = getelementptr inbounds %struct.cp, %struct.cp* %78, i32 0, i32 2
  %80 = load i8*, i8** %79, align 8
  %81 = load %struct.cp*, %struct.cp** %8, align 8
  %82 = getelementptr inbounds %struct.cp, %struct.cp* %81, i32 0, i32 1
  %83 = load i8*, i8** %82, align 8
  %84 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %7, i32 0, i32 2
  %85 = load i8*, i8** %84, align 8
  %86 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0), i32 %73, i32 %74, i32 %75, i32 %77, i8* %80, i8* %83, i8* %85)
  br label %87

87:                                               ; preds = %71, %58
  br label %88

88:                                               ; preds = %87, %32
  br label %89

89:                                               ; preds = %88, %27
  %90 = load %struct.cp*, %struct.cp** %8, align 8
  %91 = getelementptr inbounds %struct.cp, %struct.cp* %90, i32 1
  store %struct.cp* %91, %struct.cp** %8, align 8
  br label %16

92:                                               ; preds = %16
  %93 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i64 0, i64 0))
  ret i32 0
}

declare dso_local i32 @printf(i8*, ...) #1

declare dso_local i32 @IsValidCodePage(i32) #1

declare dso_local i64 @GetCPInfoEx(i32, i32, %struct.TYPE_3__*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
