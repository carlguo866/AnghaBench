; ModuleID = '/home/carl/AnghaBench/php-src/ext/hash/extr_hash_md.c_MD4Transform.c'
source_filename = "/home/carl/AnghaBench/php-src/ext/hash/extr_hash_md.c_MD4Transform.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i64*, i8*)* @MD4Transform to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @MD4Transform(i64* %0, i8* %1) #0 {
  %3 = alloca i64*, align 8
  %4 = alloca i8*, align 8
  %5 = alloca i64, align 8
  %6 = alloca i64, align 8
  %7 = alloca i64, align 8
  %8 = alloca i64, align 8
  %9 = alloca [16 x i64], align 16
  store i64* %0, i64** %3, align 8
  store i8* %1, i8** %4, align 8
  %10 = load i64*, i64** %3, align 8
  %11 = getelementptr inbounds i64, i64* %10, i64 0
  %12 = load i64, i64* %11, align 8
  store i64 %12, i64* %5, align 8
  %13 = load i64*, i64** %3, align 8
  %14 = getelementptr inbounds i64, i64* %13, i64 1
  %15 = load i64, i64* %14, align 8
  store i64 %15, i64* %6, align 8
  %16 = load i64*, i64** %3, align 8
  %17 = getelementptr inbounds i64, i64* %16, i64 2
  %18 = load i64, i64* %17, align 8
  store i64 %18, i64* %7, align 8
  %19 = load i64*, i64** %3, align 8
  %20 = getelementptr inbounds i64, i64* %19, i64 3
  %21 = load i64, i64* %20, align 8
  store i64 %21, i64* %8, align 8
  %22 = getelementptr inbounds [16 x i64], [16 x i64]* %9, i64 0, i64 0
  %23 = load i8*, i8** %4, align 8
  %24 = call i32 @Decode(i64* %22, i8* %23, i32 64)
  %25 = load i64, i64* %5, align 8
  %26 = load i64, i64* %6, align 8
  %27 = load i64, i64* %7, align 8
  %28 = load i64, i64* %8, align 8
  %29 = call i32 @MD4_R1(i64 %25, i64 %26, i64 %27, i64 %28, i32 0, i32 3)
  %30 = load i64, i64* %8, align 8
  %31 = load i64, i64* %5, align 8
  %32 = load i64, i64* %6, align 8
  %33 = load i64, i64* %7, align 8
  %34 = call i32 @MD4_R1(i64 %30, i64 %31, i64 %32, i64 %33, i32 1, i32 7)
  %35 = load i64, i64* %7, align 8
  %36 = load i64, i64* %8, align 8
  %37 = load i64, i64* %5, align 8
  %38 = load i64, i64* %6, align 8
  %39 = call i32 @MD4_R1(i64 %35, i64 %36, i64 %37, i64 %38, i32 2, i32 11)
  %40 = load i64, i64* %6, align 8
  %41 = load i64, i64* %7, align 8
  %42 = load i64, i64* %8, align 8
  %43 = load i64, i64* %5, align 8
  %44 = call i32 @MD4_R1(i64 %40, i64 %41, i64 %42, i64 %43, i32 3, i32 19)
  %45 = load i64, i64* %5, align 8
  %46 = load i64, i64* %6, align 8
  %47 = load i64, i64* %7, align 8
  %48 = load i64, i64* %8, align 8
  %49 = call i32 @MD4_R1(i64 %45, i64 %46, i64 %47, i64 %48, i32 4, i32 3)
  %50 = load i64, i64* %8, align 8
  %51 = load i64, i64* %5, align 8
  %52 = load i64, i64* %6, align 8
  %53 = load i64, i64* %7, align 8
  %54 = call i32 @MD4_R1(i64 %50, i64 %51, i64 %52, i64 %53, i32 5, i32 7)
  %55 = load i64, i64* %7, align 8
  %56 = load i64, i64* %8, align 8
  %57 = load i64, i64* %5, align 8
  %58 = load i64, i64* %6, align 8
  %59 = call i32 @MD4_R1(i64 %55, i64 %56, i64 %57, i64 %58, i32 6, i32 11)
  %60 = load i64, i64* %6, align 8
  %61 = load i64, i64* %7, align 8
  %62 = load i64, i64* %8, align 8
  %63 = load i64, i64* %5, align 8
  %64 = call i32 @MD4_R1(i64 %60, i64 %61, i64 %62, i64 %63, i32 7, i32 19)
  %65 = load i64, i64* %5, align 8
  %66 = load i64, i64* %6, align 8
  %67 = load i64, i64* %7, align 8
  %68 = load i64, i64* %8, align 8
  %69 = call i32 @MD4_R1(i64 %65, i64 %66, i64 %67, i64 %68, i32 8, i32 3)
  %70 = load i64, i64* %8, align 8
  %71 = load i64, i64* %5, align 8
  %72 = load i64, i64* %6, align 8
  %73 = load i64, i64* %7, align 8
  %74 = call i32 @MD4_R1(i64 %70, i64 %71, i64 %72, i64 %73, i32 9, i32 7)
  %75 = load i64, i64* %7, align 8
  %76 = load i64, i64* %8, align 8
  %77 = load i64, i64* %5, align 8
  %78 = load i64, i64* %6, align 8
  %79 = call i32 @MD4_R1(i64 %75, i64 %76, i64 %77, i64 %78, i32 10, i32 11)
  %80 = load i64, i64* %6, align 8
  %81 = load i64, i64* %7, align 8
  %82 = load i64, i64* %8, align 8
  %83 = load i64, i64* %5, align 8
  %84 = call i32 @MD4_R1(i64 %80, i64 %81, i64 %82, i64 %83, i32 11, i32 19)
  %85 = load i64, i64* %5, align 8
  %86 = load i64, i64* %6, align 8
  %87 = load i64, i64* %7, align 8
  %88 = load i64, i64* %8, align 8
  %89 = call i32 @MD4_R1(i64 %85, i64 %86, i64 %87, i64 %88, i32 12, i32 3)
  %90 = load i64, i64* %8, align 8
  %91 = load i64, i64* %5, align 8
  %92 = load i64, i64* %6, align 8
  %93 = load i64, i64* %7, align 8
  %94 = call i32 @MD4_R1(i64 %90, i64 %91, i64 %92, i64 %93, i32 13, i32 7)
  %95 = load i64, i64* %7, align 8
  %96 = load i64, i64* %8, align 8
  %97 = load i64, i64* %5, align 8
  %98 = load i64, i64* %6, align 8
  %99 = call i32 @MD4_R1(i64 %95, i64 %96, i64 %97, i64 %98, i32 14, i32 11)
  %100 = load i64, i64* %6, align 8
  %101 = load i64, i64* %7, align 8
  %102 = load i64, i64* %8, align 8
  %103 = load i64, i64* %5, align 8
  %104 = call i32 @MD4_R1(i64 %100, i64 %101, i64 %102, i64 %103, i32 15, i32 19)
  %105 = load i64, i64* %5, align 8
  %106 = load i64, i64* %6, align 8
  %107 = load i64, i64* %7, align 8
  %108 = load i64, i64* %8, align 8
  %109 = call i32 @MD4_R2(i64 %105, i64 %106, i64 %107, i64 %108, i32 0, i32 3)
  %110 = load i64, i64* %8, align 8
  %111 = load i64, i64* %5, align 8
  %112 = load i64, i64* %6, align 8
  %113 = load i64, i64* %7, align 8
  %114 = call i32 @MD4_R2(i64 %110, i64 %111, i64 %112, i64 %113, i32 4, i32 5)
  %115 = load i64, i64* %7, align 8
  %116 = load i64, i64* %8, align 8
  %117 = load i64, i64* %5, align 8
  %118 = load i64, i64* %6, align 8
  %119 = call i32 @MD4_R2(i64 %115, i64 %116, i64 %117, i64 %118, i32 8, i32 9)
  %120 = load i64, i64* %6, align 8
  %121 = load i64, i64* %7, align 8
  %122 = load i64, i64* %8, align 8
  %123 = load i64, i64* %5, align 8
  %124 = call i32 @MD4_R2(i64 %120, i64 %121, i64 %122, i64 %123, i32 12, i32 13)
  %125 = load i64, i64* %5, align 8
  %126 = load i64, i64* %6, align 8
  %127 = load i64, i64* %7, align 8
  %128 = load i64, i64* %8, align 8
  %129 = call i32 @MD4_R2(i64 %125, i64 %126, i64 %127, i64 %128, i32 1, i32 3)
  %130 = load i64, i64* %8, align 8
  %131 = load i64, i64* %5, align 8
  %132 = load i64, i64* %6, align 8
  %133 = load i64, i64* %7, align 8
  %134 = call i32 @MD4_R2(i64 %130, i64 %131, i64 %132, i64 %133, i32 5, i32 5)
  %135 = load i64, i64* %7, align 8
  %136 = load i64, i64* %8, align 8
  %137 = load i64, i64* %5, align 8
  %138 = load i64, i64* %6, align 8
  %139 = call i32 @MD4_R2(i64 %135, i64 %136, i64 %137, i64 %138, i32 9, i32 9)
  %140 = load i64, i64* %6, align 8
  %141 = load i64, i64* %7, align 8
  %142 = load i64, i64* %8, align 8
  %143 = load i64, i64* %5, align 8
  %144 = call i32 @MD4_R2(i64 %140, i64 %141, i64 %142, i64 %143, i32 13, i32 13)
  %145 = load i64, i64* %5, align 8
  %146 = load i64, i64* %6, align 8
  %147 = load i64, i64* %7, align 8
  %148 = load i64, i64* %8, align 8
  %149 = call i32 @MD4_R2(i64 %145, i64 %146, i64 %147, i64 %148, i32 2, i32 3)
  %150 = load i64, i64* %8, align 8
  %151 = load i64, i64* %5, align 8
  %152 = load i64, i64* %6, align 8
  %153 = load i64, i64* %7, align 8
  %154 = call i32 @MD4_R2(i64 %150, i64 %151, i64 %152, i64 %153, i32 6, i32 5)
  %155 = load i64, i64* %7, align 8
  %156 = load i64, i64* %8, align 8
  %157 = load i64, i64* %5, align 8
  %158 = load i64, i64* %6, align 8
  %159 = call i32 @MD4_R2(i64 %155, i64 %156, i64 %157, i64 %158, i32 10, i32 9)
  %160 = load i64, i64* %6, align 8
  %161 = load i64, i64* %7, align 8
  %162 = load i64, i64* %8, align 8
  %163 = load i64, i64* %5, align 8
  %164 = call i32 @MD4_R2(i64 %160, i64 %161, i64 %162, i64 %163, i32 14, i32 13)
  %165 = load i64, i64* %5, align 8
  %166 = load i64, i64* %6, align 8
  %167 = load i64, i64* %7, align 8
  %168 = load i64, i64* %8, align 8
  %169 = call i32 @MD4_R2(i64 %165, i64 %166, i64 %167, i64 %168, i32 3, i32 3)
  %170 = load i64, i64* %8, align 8
  %171 = load i64, i64* %5, align 8
  %172 = load i64, i64* %6, align 8
  %173 = load i64, i64* %7, align 8
  %174 = call i32 @MD4_R2(i64 %170, i64 %171, i64 %172, i64 %173, i32 7, i32 5)
  %175 = load i64, i64* %7, align 8
  %176 = load i64, i64* %8, align 8
  %177 = load i64, i64* %5, align 8
  %178 = load i64, i64* %6, align 8
  %179 = call i32 @MD4_R2(i64 %175, i64 %176, i64 %177, i64 %178, i32 11, i32 9)
  %180 = load i64, i64* %6, align 8
  %181 = load i64, i64* %7, align 8
  %182 = load i64, i64* %8, align 8
  %183 = load i64, i64* %5, align 8
  %184 = call i32 @MD4_R2(i64 %180, i64 %181, i64 %182, i64 %183, i32 15, i32 13)
  %185 = load i64, i64* %5, align 8
  %186 = load i64, i64* %6, align 8
  %187 = load i64, i64* %7, align 8
  %188 = load i64, i64* %8, align 8
  %189 = call i32 @MD4_R3(i64 %185, i64 %186, i64 %187, i64 %188, i32 0, i32 3)
  %190 = load i64, i64* %8, align 8
  %191 = load i64, i64* %5, align 8
  %192 = load i64, i64* %6, align 8
  %193 = load i64, i64* %7, align 8
  %194 = call i32 @MD4_R3(i64 %190, i64 %191, i64 %192, i64 %193, i32 8, i32 9)
  %195 = load i64, i64* %7, align 8
  %196 = load i64, i64* %8, align 8
  %197 = load i64, i64* %5, align 8
  %198 = load i64, i64* %6, align 8
  %199 = call i32 @MD4_R3(i64 %195, i64 %196, i64 %197, i64 %198, i32 4, i32 11)
  %200 = load i64, i64* %6, align 8
  %201 = load i64, i64* %7, align 8
  %202 = load i64, i64* %8, align 8
  %203 = load i64, i64* %5, align 8
  %204 = call i32 @MD4_R3(i64 %200, i64 %201, i64 %202, i64 %203, i32 12, i32 15)
  %205 = load i64, i64* %5, align 8
  %206 = load i64, i64* %6, align 8
  %207 = load i64, i64* %7, align 8
  %208 = load i64, i64* %8, align 8
  %209 = call i32 @MD4_R3(i64 %205, i64 %206, i64 %207, i64 %208, i32 2, i32 3)
  %210 = load i64, i64* %8, align 8
  %211 = load i64, i64* %5, align 8
  %212 = load i64, i64* %6, align 8
  %213 = load i64, i64* %7, align 8
  %214 = call i32 @MD4_R3(i64 %210, i64 %211, i64 %212, i64 %213, i32 10, i32 9)
  %215 = load i64, i64* %7, align 8
  %216 = load i64, i64* %8, align 8
  %217 = load i64, i64* %5, align 8
  %218 = load i64, i64* %6, align 8
  %219 = call i32 @MD4_R3(i64 %215, i64 %216, i64 %217, i64 %218, i32 6, i32 11)
  %220 = load i64, i64* %6, align 8
  %221 = load i64, i64* %7, align 8
  %222 = load i64, i64* %8, align 8
  %223 = load i64, i64* %5, align 8
  %224 = call i32 @MD4_R3(i64 %220, i64 %221, i64 %222, i64 %223, i32 14, i32 15)
  %225 = load i64, i64* %5, align 8
  %226 = load i64, i64* %6, align 8
  %227 = load i64, i64* %7, align 8
  %228 = load i64, i64* %8, align 8
  %229 = call i32 @MD4_R3(i64 %225, i64 %226, i64 %227, i64 %228, i32 1, i32 3)
  %230 = load i64, i64* %8, align 8
  %231 = load i64, i64* %5, align 8
  %232 = load i64, i64* %6, align 8
  %233 = load i64, i64* %7, align 8
  %234 = call i32 @MD4_R3(i64 %230, i64 %231, i64 %232, i64 %233, i32 9, i32 9)
  %235 = load i64, i64* %7, align 8
  %236 = load i64, i64* %8, align 8
  %237 = load i64, i64* %5, align 8
  %238 = load i64, i64* %6, align 8
  %239 = call i32 @MD4_R3(i64 %235, i64 %236, i64 %237, i64 %238, i32 5, i32 11)
  %240 = load i64, i64* %6, align 8
  %241 = load i64, i64* %7, align 8
  %242 = load i64, i64* %8, align 8
  %243 = load i64, i64* %5, align 8
  %244 = call i32 @MD4_R3(i64 %240, i64 %241, i64 %242, i64 %243, i32 13, i32 15)
  %245 = load i64, i64* %5, align 8
  %246 = load i64, i64* %6, align 8
  %247 = load i64, i64* %7, align 8
  %248 = load i64, i64* %8, align 8
  %249 = call i32 @MD4_R3(i64 %245, i64 %246, i64 %247, i64 %248, i32 3, i32 3)
  %250 = load i64, i64* %8, align 8
  %251 = load i64, i64* %5, align 8
  %252 = load i64, i64* %6, align 8
  %253 = load i64, i64* %7, align 8
  %254 = call i32 @MD4_R3(i64 %250, i64 %251, i64 %252, i64 %253, i32 11, i32 9)
  %255 = load i64, i64* %7, align 8
  %256 = load i64, i64* %8, align 8
  %257 = load i64, i64* %5, align 8
  %258 = load i64, i64* %6, align 8
  %259 = call i32 @MD4_R3(i64 %255, i64 %256, i64 %257, i64 %258, i32 7, i32 11)
  %260 = load i64, i64* %6, align 8
  %261 = load i64, i64* %7, align 8
  %262 = load i64, i64* %8, align 8
  %263 = load i64, i64* %5, align 8
  %264 = call i32 @MD4_R3(i64 %260, i64 %261, i64 %262, i64 %263, i32 15, i32 15)
  %265 = load i64, i64* %5, align 8
  %266 = load i64*, i64** %3, align 8
  %267 = getelementptr inbounds i64, i64* %266, i64 0
  %268 = load i64, i64* %267, align 8
  %269 = add nsw i64 %268, %265
  store i64 %269, i64* %267, align 8
  %270 = load i64, i64* %6, align 8
  %271 = load i64*, i64** %3, align 8
  %272 = getelementptr inbounds i64, i64* %271, i64 1
  %273 = load i64, i64* %272, align 8
  %274 = add nsw i64 %273, %270
  store i64 %274, i64* %272, align 8
  %275 = load i64, i64* %7, align 8
  %276 = load i64*, i64** %3, align 8
  %277 = getelementptr inbounds i64, i64* %276, i64 2
  %278 = load i64, i64* %277, align 8
  %279 = add nsw i64 %278, %275
  store i64 %279, i64* %277, align 8
  %280 = load i64, i64* %8, align 8
  %281 = load i64*, i64** %3, align 8
  %282 = getelementptr inbounds i64, i64* %281, i64 3
  %283 = load i64, i64* %282, align 8
  %284 = add nsw i64 %283, %280
  store i64 %284, i64* %282, align 8
  ret void
}

declare dso_local i32 @Decode(i64*, i8*, i32) #1

declare dso_local i32 @MD4_R1(i64, i64, i64, i64, i32, i32) #1

declare dso_local i32 @MD4_R2(i64, i64, i64, i64, i32, i32) #1

declare dso_local i32 @MD4_R3(i64, i64, i64, i64, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
