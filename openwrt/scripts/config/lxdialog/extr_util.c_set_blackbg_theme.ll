; ModuleID = '/home/carl/AnghaBench/openwrt/scripts/config/lxdialog/extr_util.c_set_blackbg_theme.c'
source_filename = "/home/carl/AnghaBench/openwrt/scripts/config/lxdialog/extr_util.c_set_blackbg_theme.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@screen = common dso_local global i32 0, align 4
@COLOR_RED = common dso_local global i32 0, align 4
@COLOR_BLACK = common dso_local global i32 0, align 4
@shadow = common dso_local global i32 0, align 4
@dialog = common dso_local global i32 0, align 4
@COLOR_WHITE = common dso_local global i32 0, align 4
@title = common dso_local global i32 0, align 4
@border = common dso_local global i32 0, align 4
@button_active = common dso_local global i32 0, align 4
@COLOR_YELLOW = common dso_local global i32 0, align 4
@button_inactive = common dso_local global i32 0, align 4
@button_key_active = common dso_local global i32 0, align 4
@button_key_inactive = common dso_local global i32 0, align 4
@button_label_active = common dso_local global i32 0, align 4
@button_label_inactive = common dso_local global i32 0, align 4
@inputbox = common dso_local global i32 0, align 4
@inputbox_border = common dso_local global i32 0, align 4
@searchbox = common dso_local global i32 0, align 4
@searchbox_title = common dso_local global i32 0, align 4
@searchbox_border = common dso_local global i32 0, align 4
@position_indicator = common dso_local global i32 0, align 4
@menubox = common dso_local global i32 0, align 4
@menubox_border = common dso_local global i32 0, align 4
@item = common dso_local global i32 0, align 4
@item_selected = common dso_local global i32 0, align 4
@tag = common dso_local global i32 0, align 4
@tag_selected = common dso_local global i32 0, align 4
@tag_key = common dso_local global i32 0, align 4
@tag_key_selected = common dso_local global i32 0, align 4
@check = common dso_local global i32 0, align 4
@check_selected = common dso_local global i32 0, align 4
@uarrow = common dso_local global i32 0, align 4
@darrow = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @set_blackbg_theme to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_blackbg_theme() #0 {
  %1 = load i32, i32* @screen, align 4
  %2 = load i32, i32* @COLOR_RED, align 4
  %3 = load i32, i32* @COLOR_BLACK, align 4
  %4 = call i32 @DLG_COLOR(i32 %1, i32 %2, i32 %3, i32 1)
  %5 = load i32, i32* @shadow, align 4
  %6 = load i32, i32* @COLOR_BLACK, align 4
  %7 = load i32, i32* @COLOR_BLACK, align 4
  %8 = call i32 @DLG_COLOR(i32 %5, i32 %6, i32 %7, i32 0)
  %9 = load i32, i32* @dialog, align 4
  %10 = load i32, i32* @COLOR_WHITE, align 4
  %11 = load i32, i32* @COLOR_BLACK, align 4
  %12 = call i32 @DLG_COLOR(i32 %9, i32 %10, i32 %11, i32 0)
  %13 = load i32, i32* @title, align 4
  %14 = load i32, i32* @COLOR_RED, align 4
  %15 = load i32, i32* @COLOR_BLACK, align 4
  %16 = call i32 @DLG_COLOR(i32 %13, i32 %14, i32 %15, i32 0)
  %17 = load i32, i32* @border, align 4
  %18 = load i32, i32* @COLOR_BLACK, align 4
  %19 = load i32, i32* @COLOR_BLACK, align 4
  %20 = call i32 @DLG_COLOR(i32 %17, i32 %18, i32 %19, i32 1)
  %21 = load i32, i32* @button_active, align 4
  %22 = load i32, i32* @COLOR_YELLOW, align 4
  %23 = load i32, i32* @COLOR_RED, align 4
  %24 = call i32 @DLG_COLOR(i32 %21, i32 %22, i32 %23, i32 0)
  %25 = load i32, i32* @button_inactive, align 4
  %26 = load i32, i32* @COLOR_YELLOW, align 4
  %27 = load i32, i32* @COLOR_BLACK, align 4
  %28 = call i32 @DLG_COLOR(i32 %25, i32 %26, i32 %27, i32 0)
  %29 = load i32, i32* @button_key_active, align 4
  %30 = load i32, i32* @COLOR_YELLOW, align 4
  %31 = load i32, i32* @COLOR_RED, align 4
  %32 = call i32 @DLG_COLOR(i32 %29, i32 %30, i32 %31, i32 1)
  %33 = load i32, i32* @button_key_inactive, align 4
  %34 = load i32, i32* @COLOR_RED, align 4
  %35 = load i32, i32* @COLOR_BLACK, align 4
  %36 = call i32 @DLG_COLOR(i32 %33, i32 %34, i32 %35, i32 0)
  %37 = load i32, i32* @button_label_active, align 4
  %38 = load i32, i32* @COLOR_WHITE, align 4
  %39 = load i32, i32* @COLOR_RED, align 4
  %40 = call i32 @DLG_COLOR(i32 %37, i32 %38, i32 %39, i32 0)
  %41 = load i32, i32* @button_label_inactive, align 4
  %42 = load i32, i32* @COLOR_BLACK, align 4
  %43 = load i32, i32* @COLOR_BLACK, align 4
  %44 = call i32 @DLG_COLOR(i32 %41, i32 %42, i32 %43, i32 1)
  %45 = load i32, i32* @inputbox, align 4
  %46 = load i32, i32* @COLOR_YELLOW, align 4
  %47 = load i32, i32* @COLOR_BLACK, align 4
  %48 = call i32 @DLG_COLOR(i32 %45, i32 %46, i32 %47, i32 0)
  %49 = load i32, i32* @inputbox_border, align 4
  %50 = load i32, i32* @COLOR_YELLOW, align 4
  %51 = load i32, i32* @COLOR_BLACK, align 4
  %52 = call i32 @DLG_COLOR(i32 %49, i32 %50, i32 %51, i32 0)
  %53 = load i32, i32* @searchbox, align 4
  %54 = load i32, i32* @COLOR_YELLOW, align 4
  %55 = load i32, i32* @COLOR_BLACK, align 4
  %56 = call i32 @DLG_COLOR(i32 %53, i32 %54, i32 %55, i32 0)
  %57 = load i32, i32* @searchbox_title, align 4
  %58 = load i32, i32* @COLOR_YELLOW, align 4
  %59 = load i32, i32* @COLOR_BLACK, align 4
  %60 = call i32 @DLG_COLOR(i32 %57, i32 %58, i32 %59, i32 1)
  %61 = load i32, i32* @searchbox_border, align 4
  %62 = load i32, i32* @COLOR_BLACK, align 4
  %63 = load i32, i32* @COLOR_BLACK, align 4
  %64 = call i32 @DLG_COLOR(i32 %61, i32 %62, i32 %63, i32 1)
  %65 = load i32, i32* @position_indicator, align 4
  %66 = load i32, i32* @COLOR_RED, align 4
  %67 = load i32, i32* @COLOR_BLACK, align 4
  %68 = call i32 @DLG_COLOR(i32 %65, i32 %66, i32 %67, i32 0)
  %69 = load i32, i32* @menubox, align 4
  %70 = load i32, i32* @COLOR_YELLOW, align 4
  %71 = load i32, i32* @COLOR_BLACK, align 4
  %72 = call i32 @DLG_COLOR(i32 %69, i32 %70, i32 %71, i32 0)
  %73 = load i32, i32* @menubox_border, align 4
  %74 = load i32, i32* @COLOR_BLACK, align 4
  %75 = load i32, i32* @COLOR_BLACK, align 4
  %76 = call i32 @DLG_COLOR(i32 %73, i32 %74, i32 %75, i32 1)
  %77 = load i32, i32* @item, align 4
  %78 = load i32, i32* @COLOR_WHITE, align 4
  %79 = load i32, i32* @COLOR_BLACK, align 4
  %80 = call i32 @DLG_COLOR(i32 %77, i32 %78, i32 %79, i32 0)
  %81 = load i32, i32* @item_selected, align 4
  %82 = load i32, i32* @COLOR_WHITE, align 4
  %83 = load i32, i32* @COLOR_RED, align 4
  %84 = call i32 @DLG_COLOR(i32 %81, i32 %82, i32 %83, i32 0)
  %85 = load i32, i32* @tag, align 4
  %86 = load i32, i32* @COLOR_RED, align 4
  %87 = load i32, i32* @COLOR_BLACK, align 4
  %88 = call i32 @DLG_COLOR(i32 %85, i32 %86, i32 %87, i32 0)
  %89 = load i32, i32* @tag_selected, align 4
  %90 = load i32, i32* @COLOR_YELLOW, align 4
  %91 = load i32, i32* @COLOR_RED, align 4
  %92 = call i32 @DLG_COLOR(i32 %89, i32 %90, i32 %91, i32 1)
  %93 = load i32, i32* @tag_key, align 4
  %94 = load i32, i32* @COLOR_RED, align 4
  %95 = load i32, i32* @COLOR_BLACK, align 4
  %96 = call i32 @DLG_COLOR(i32 %93, i32 %94, i32 %95, i32 0)
  %97 = load i32, i32* @tag_key_selected, align 4
  %98 = load i32, i32* @COLOR_YELLOW, align 4
  %99 = load i32, i32* @COLOR_RED, align 4
  %100 = call i32 @DLG_COLOR(i32 %97, i32 %98, i32 %99, i32 1)
  %101 = load i32, i32* @check, align 4
  %102 = load i32, i32* @COLOR_YELLOW, align 4
  %103 = load i32, i32* @COLOR_BLACK, align 4
  %104 = call i32 @DLG_COLOR(i32 %101, i32 %102, i32 %103, i32 0)
  %105 = load i32, i32* @check_selected, align 4
  %106 = load i32, i32* @COLOR_YELLOW, align 4
  %107 = load i32, i32* @COLOR_RED, align 4
  %108 = call i32 @DLG_COLOR(i32 %105, i32 %106, i32 %107, i32 1)
  %109 = load i32, i32* @uarrow, align 4
  %110 = load i32, i32* @COLOR_RED, align 4
  %111 = load i32, i32* @COLOR_BLACK, align 4
  %112 = call i32 @DLG_COLOR(i32 %109, i32 %110, i32 %111, i32 0)
  %113 = load i32, i32* @darrow, align 4
  %114 = load i32, i32* @COLOR_RED, align 4
  %115 = load i32, i32* @COLOR_BLACK, align 4
  %116 = call i32 @DLG_COLOR(i32 %113, i32 %114, i32 %115, i32 0)
  ret void
}

declare dso_local i32 @DLG_COLOR(i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
