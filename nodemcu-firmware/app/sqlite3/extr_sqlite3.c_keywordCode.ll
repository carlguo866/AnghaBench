; ModuleID = '/home/carl/AnghaBench/nodemcu-firmware/app/sqlite3/extr_sqlite3.c_keywordCode.c'
source_filename = "/home/carl/AnghaBench/nodemcu-firmware/app/sqlite3/extr_sqlite3.c_keywordCode.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@keywordCode.zText = internal constant [372 x i8] c"CONSTRAINTOFFSETABLEFTHENDESCAPELSELECTRANSACTIONATURALLIKEYSAVEPOINTEMPORARYWITHOUTERELEASEXCLUSIVEXISTSBEGINDEXEDELETEBETWEENOTNULLIMITCASECOLLATECREATECURRENT_DATEGROUPDATEIGNOREGEXPRIMARYIMMEDIATEJOINNEREPLACEMATCHECKVALUESWHENWHEREABORTANDEFAULTASCOMMITCONFLICTCROSSCURRENT_TIMESTAMPDEFERREDISTINCTDROPFAILFROMFULLGLOBYHAVINGIFINSERTISNULLORDERIGHTROLLBACKUNIQUEUSING", align 16
@keywordCode.aHash = internal constant [127 x i8] c"OFS2\00\18\00\008\006\00\00\06/\00!\00R9MN\00\0F\00\00\16\00\14\00\000\04\00\00\00\00*+\00)\00\00\00<1\00>C\00\00\1E\00D\00\00\00\00#\00\0B\00\0DK\0E\00\00\00\13G$\00 7-\00=\00B\00\00A\00\00\00\00\00?\00J\00\01I\00;\00\1D5L\00\00U\00P&\19(\00\00\03\02\00Q\00\00\00\00\11\00:4'\00\08%\00T", align 16
@keywordCode.aNext = internal constant [85 x i8] c"\00\00\00\00\00\00\00\00\00\00\00\00\0C\00\00\00\00\00\00\00\00\00\00\00\09\00\00\00\00\17\00\00\00\00\00\00\12\00\00\00\00\00\00\00\22\00\00\0A\00\00\05\00\1C\00\00\1A\00\00\00\00\1F\00\00\00\00\00,\00\15\00E@\00H\00\00\07\00\003\1B\10\00.\00", align 16
@keywordCode.aLen = internal constant [85 x i8] c"\0A\04\02\02\06\02\03\05\04\04\03\04\06\04\06\0B\02\07\03\04\03\09\09\04\02\07\05\07\02\09\06\05\07\05\06\07\07\03\04\05\04\07\06\0C\05\06\06\06\07\09\04\05\07\05\05\06\04\05\05\03\07\03\06\08\05\11\0C\08\08\02\04\04\04\04\04\02\06\02\06\06\05\05\08\06\05", align 16
@keywordCode.aOffset = internal constant [85 x i16] [i16 0, i16 7, i16 7, i16 9, i16 10, i16 10, i16 13, i16 15, i16 18, i16 21, i16 23, i16 25, i16 26, i16 31, i16 33, i16 38, i16 47, i16 48, i16 53, i16 55, i16 57, i16 60, i16 68, i16 68, i16 72, i16 77, i16 81, i16 85, i16 89, i16 91, i16 99, i16 105, i16 108, i16 108, i16 114, i16 120, i16 126, i16 126, i16 129, i16 132, i16 137, i16 141, i16 148, i16 154, i16 166, i16 169, i16 175, i16 179, i16 184, i16 191, i16 200, i16 202, i16 206, i16 213, i16 216, i16 221, i16 227, i16 231, i16 236, i16 241, i16 243, i16 250, i16 252, i16 258, i16 266, i16 271, i16 271, i16 288, i16 295, i16 296, i16 303, i16 307, i16 311, i16 315, i16 319, i16 322, i16 324, i16 330, i16 332, i16 338, i16 344, i16 348, i16 353, i16 361, i16 367], align 16
@keywordCode.aCode = internal constant [85 x i8] c"\BC\A3\A7\88\96\97\8C\8B\9F\89\B2\B6\B1\B3\8D\87\95\9F\C8\9D\9E\8E\8A\8A\94\80\9F\91\C6\B0\AF\C4\A5\A6\B7\C3\99\9A\98\9C\C1\BF\BB\BA\AC\85\A9\9D\92\A8\A0\9F\90\9B\C0\83\82\81\C9\C7\B9\C5\BE\BD\9F\BA\BA\B8\B5\A2\B4\AE\AD\9F\9D\C2\AB\AA\A4\A1\93\9F\8F\86\84", align 16
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (i8*, i32, i32*)* @keywordCode to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @keywordCode(i8* %0, i32 %1, i32* %2) #0 {
  %4 = alloca i8*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca i8*, align 8
  store i8* %0, i8** %4, align 8
  store i32 %1, i32* %5, align 4
  store i32* %2, i32** %6, align 8
  %10 = load i32, i32* %5, align 4
  %11 = icmp sge i32 %10, 2
  br i1 %11, label %12, label %414

12:                                               ; preds = %3
  %13 = load i8*, i8** %4, align 8
  %14 = getelementptr inbounds i8, i8* %13, i64 0
  %15 = load i8, i8* %14, align 1
  %16 = call i32 @charMap(i8 signext %15)
  %17 = mul nsw i32 %16, 4
  %18 = load i8*, i8** %4, align 8
  %19 = load i32, i32* %5, align 4
  %20 = sub nsw i32 %19, 1
  %21 = sext i32 %20 to i64
  %22 = getelementptr inbounds i8, i8* %18, i64 %21
  %23 = load i8, i8* %22, align 1
  %24 = call i32 @charMap(i8 signext %23)
  %25 = mul nsw i32 %24, 3
  %26 = xor i32 %17, %25
  %27 = load i32, i32* %5, align 4
  %28 = xor i32 %26, %27
  %29 = srem i32 %28, 127
  store i32 %29, i32* %7, align 4
  %30 = load i32, i32* %7, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [127 x i8], [127 x i8]* @keywordCode.aHash, i64 0, i64 %31
  %33 = load i8, i8* %32, align 1
  %34 = zext i8 %33 to i32
  %35 = sub nsw i32 %34, 1
  store i32 %35, i32* %7, align 4
  br label %36

36:                                               ; preds = %406, %12
  %37 = load i32, i32* %7, align 4
  %38 = icmp sge i32 %37, 0
  br i1 %38, label %39, label %413

39:                                               ; preds = %36
  %40 = load i32, i32* %7, align 4
  %41 = sext i32 %40 to i64
  %42 = getelementptr inbounds [85 x i8], [85 x i8]* @keywordCode.aLen, i64 0, i64 %41
  %43 = load i8, i8* %42, align 1
  %44 = zext i8 %43 to i32
  %45 = load i32, i32* %5, align 4
  %46 = icmp ne i32 %44, %45
  br i1 %46, label %47, label %48

47:                                               ; preds = %39
  br label %406

48:                                               ; preds = %39
  store i32 0, i32* %8, align 4
  %49 = load i32, i32* %7, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [85 x i16], [85 x i16]* @keywordCode.aOffset, i64 0, i64 %50
  %52 = load i16, i16* %51, align 2
  %53 = zext i16 %52 to i64
  %54 = getelementptr inbounds [372 x i8], [372 x i8]* @keywordCode.zText, i64 0, i64 %53
  store i8* %54, i8** %9, align 8
  %55 = load i32, i32* %8, align 4
  %56 = load i32, i32* %5, align 4
  %57 = icmp slt i32 %55, %56
  br i1 %57, label %58, label %59

58:                                               ; preds = %48
  br label %406

59:                                               ; preds = %48
  %60 = load i32, i32* %7, align 4
  %61 = icmp eq i32 %60, 0
  %62 = zext i1 %61 to i32
  %63 = call i32 @testcase(i32 %62)
  %64 = load i32, i32* %7, align 4
  %65 = icmp eq i32 %64, 1
  %66 = zext i1 %65 to i32
  %67 = call i32 @testcase(i32 %66)
  %68 = load i32, i32* %7, align 4
  %69 = icmp eq i32 %68, 2
  %70 = zext i1 %69 to i32
  %71 = call i32 @testcase(i32 %70)
  %72 = load i32, i32* %7, align 4
  %73 = icmp eq i32 %72, 3
  %74 = zext i1 %73 to i32
  %75 = call i32 @testcase(i32 %74)
  %76 = load i32, i32* %7, align 4
  %77 = icmp eq i32 %76, 4
  %78 = zext i1 %77 to i32
  %79 = call i32 @testcase(i32 %78)
  %80 = load i32, i32* %7, align 4
  %81 = icmp eq i32 %80, 5
  %82 = zext i1 %81 to i32
  %83 = call i32 @testcase(i32 %82)
  %84 = load i32, i32* %7, align 4
  %85 = icmp eq i32 %84, 6
  %86 = zext i1 %85 to i32
  %87 = call i32 @testcase(i32 %86)
  %88 = load i32, i32* %7, align 4
  %89 = icmp eq i32 %88, 7
  %90 = zext i1 %89 to i32
  %91 = call i32 @testcase(i32 %90)
  %92 = load i32, i32* %7, align 4
  %93 = icmp eq i32 %92, 8
  %94 = zext i1 %93 to i32
  %95 = call i32 @testcase(i32 %94)
  %96 = load i32, i32* %7, align 4
  %97 = icmp eq i32 %96, 9
  %98 = zext i1 %97 to i32
  %99 = call i32 @testcase(i32 %98)
  %100 = load i32, i32* %7, align 4
  %101 = icmp eq i32 %100, 10
  %102 = zext i1 %101 to i32
  %103 = call i32 @testcase(i32 %102)
  %104 = load i32, i32* %7, align 4
  %105 = icmp eq i32 %104, 11
  %106 = zext i1 %105 to i32
  %107 = call i32 @testcase(i32 %106)
  %108 = load i32, i32* %7, align 4
  %109 = icmp eq i32 %108, 12
  %110 = zext i1 %109 to i32
  %111 = call i32 @testcase(i32 %110)
  %112 = load i32, i32* %7, align 4
  %113 = icmp eq i32 %112, 13
  %114 = zext i1 %113 to i32
  %115 = call i32 @testcase(i32 %114)
  %116 = load i32, i32* %7, align 4
  %117 = icmp eq i32 %116, 14
  %118 = zext i1 %117 to i32
  %119 = call i32 @testcase(i32 %118)
  %120 = load i32, i32* %7, align 4
  %121 = icmp eq i32 %120, 15
  %122 = zext i1 %121 to i32
  %123 = call i32 @testcase(i32 %122)
  %124 = load i32, i32* %7, align 4
  %125 = icmp eq i32 %124, 16
  %126 = zext i1 %125 to i32
  %127 = call i32 @testcase(i32 %126)
  %128 = load i32, i32* %7, align 4
  %129 = icmp eq i32 %128, 17
  %130 = zext i1 %129 to i32
  %131 = call i32 @testcase(i32 %130)
  %132 = load i32, i32* %7, align 4
  %133 = icmp eq i32 %132, 18
  %134 = zext i1 %133 to i32
  %135 = call i32 @testcase(i32 %134)
  %136 = load i32, i32* %7, align 4
  %137 = icmp eq i32 %136, 19
  %138 = zext i1 %137 to i32
  %139 = call i32 @testcase(i32 %138)
  %140 = load i32, i32* %7, align 4
  %141 = icmp eq i32 %140, 20
  %142 = zext i1 %141 to i32
  %143 = call i32 @testcase(i32 %142)
  %144 = load i32, i32* %7, align 4
  %145 = icmp eq i32 %144, 21
  %146 = zext i1 %145 to i32
  %147 = call i32 @testcase(i32 %146)
  %148 = load i32, i32* %7, align 4
  %149 = icmp eq i32 %148, 22
  %150 = zext i1 %149 to i32
  %151 = call i32 @testcase(i32 %150)
  %152 = load i32, i32* %7, align 4
  %153 = icmp eq i32 %152, 23
  %154 = zext i1 %153 to i32
  %155 = call i32 @testcase(i32 %154)
  %156 = load i32, i32* %7, align 4
  %157 = icmp eq i32 %156, 24
  %158 = zext i1 %157 to i32
  %159 = call i32 @testcase(i32 %158)
  %160 = load i32, i32* %7, align 4
  %161 = icmp eq i32 %160, 25
  %162 = zext i1 %161 to i32
  %163 = call i32 @testcase(i32 %162)
  %164 = load i32, i32* %7, align 4
  %165 = icmp eq i32 %164, 26
  %166 = zext i1 %165 to i32
  %167 = call i32 @testcase(i32 %166)
  %168 = load i32, i32* %7, align 4
  %169 = icmp eq i32 %168, 27
  %170 = zext i1 %169 to i32
  %171 = call i32 @testcase(i32 %170)
  %172 = load i32, i32* %7, align 4
  %173 = icmp eq i32 %172, 28
  %174 = zext i1 %173 to i32
  %175 = call i32 @testcase(i32 %174)
  %176 = load i32, i32* %7, align 4
  %177 = icmp eq i32 %176, 29
  %178 = zext i1 %177 to i32
  %179 = call i32 @testcase(i32 %178)
  %180 = load i32, i32* %7, align 4
  %181 = icmp eq i32 %180, 30
  %182 = zext i1 %181 to i32
  %183 = call i32 @testcase(i32 %182)
  %184 = load i32, i32* %7, align 4
  %185 = icmp eq i32 %184, 31
  %186 = zext i1 %185 to i32
  %187 = call i32 @testcase(i32 %186)
  %188 = load i32, i32* %7, align 4
  %189 = icmp eq i32 %188, 32
  %190 = zext i1 %189 to i32
  %191 = call i32 @testcase(i32 %190)
  %192 = load i32, i32* %7, align 4
  %193 = icmp eq i32 %192, 33
  %194 = zext i1 %193 to i32
  %195 = call i32 @testcase(i32 %194)
  %196 = load i32, i32* %7, align 4
  %197 = icmp eq i32 %196, 34
  %198 = zext i1 %197 to i32
  %199 = call i32 @testcase(i32 %198)
  %200 = load i32, i32* %7, align 4
  %201 = icmp eq i32 %200, 35
  %202 = zext i1 %201 to i32
  %203 = call i32 @testcase(i32 %202)
  %204 = load i32, i32* %7, align 4
  %205 = icmp eq i32 %204, 36
  %206 = zext i1 %205 to i32
  %207 = call i32 @testcase(i32 %206)
  %208 = load i32, i32* %7, align 4
  %209 = icmp eq i32 %208, 37
  %210 = zext i1 %209 to i32
  %211 = call i32 @testcase(i32 %210)
  %212 = load i32, i32* %7, align 4
  %213 = icmp eq i32 %212, 38
  %214 = zext i1 %213 to i32
  %215 = call i32 @testcase(i32 %214)
  %216 = load i32, i32* %7, align 4
  %217 = icmp eq i32 %216, 39
  %218 = zext i1 %217 to i32
  %219 = call i32 @testcase(i32 %218)
  %220 = load i32, i32* %7, align 4
  %221 = icmp eq i32 %220, 40
  %222 = zext i1 %221 to i32
  %223 = call i32 @testcase(i32 %222)
  %224 = load i32, i32* %7, align 4
  %225 = icmp eq i32 %224, 41
  %226 = zext i1 %225 to i32
  %227 = call i32 @testcase(i32 %226)
  %228 = load i32, i32* %7, align 4
  %229 = icmp eq i32 %228, 42
  %230 = zext i1 %229 to i32
  %231 = call i32 @testcase(i32 %230)
  %232 = load i32, i32* %7, align 4
  %233 = icmp eq i32 %232, 43
  %234 = zext i1 %233 to i32
  %235 = call i32 @testcase(i32 %234)
  %236 = load i32, i32* %7, align 4
  %237 = icmp eq i32 %236, 44
  %238 = zext i1 %237 to i32
  %239 = call i32 @testcase(i32 %238)
  %240 = load i32, i32* %7, align 4
  %241 = icmp eq i32 %240, 45
  %242 = zext i1 %241 to i32
  %243 = call i32 @testcase(i32 %242)
  %244 = load i32, i32* %7, align 4
  %245 = icmp eq i32 %244, 46
  %246 = zext i1 %245 to i32
  %247 = call i32 @testcase(i32 %246)
  %248 = load i32, i32* %7, align 4
  %249 = icmp eq i32 %248, 47
  %250 = zext i1 %249 to i32
  %251 = call i32 @testcase(i32 %250)
  %252 = load i32, i32* %7, align 4
  %253 = icmp eq i32 %252, 48
  %254 = zext i1 %253 to i32
  %255 = call i32 @testcase(i32 %254)
  %256 = load i32, i32* %7, align 4
  %257 = icmp eq i32 %256, 49
  %258 = zext i1 %257 to i32
  %259 = call i32 @testcase(i32 %258)
  %260 = load i32, i32* %7, align 4
  %261 = icmp eq i32 %260, 50
  %262 = zext i1 %261 to i32
  %263 = call i32 @testcase(i32 %262)
  %264 = load i32, i32* %7, align 4
  %265 = icmp eq i32 %264, 51
  %266 = zext i1 %265 to i32
  %267 = call i32 @testcase(i32 %266)
  %268 = load i32, i32* %7, align 4
  %269 = icmp eq i32 %268, 52
  %270 = zext i1 %269 to i32
  %271 = call i32 @testcase(i32 %270)
  %272 = load i32, i32* %7, align 4
  %273 = icmp eq i32 %272, 53
  %274 = zext i1 %273 to i32
  %275 = call i32 @testcase(i32 %274)
  %276 = load i32, i32* %7, align 4
  %277 = icmp eq i32 %276, 54
  %278 = zext i1 %277 to i32
  %279 = call i32 @testcase(i32 %278)
  %280 = load i32, i32* %7, align 4
  %281 = icmp eq i32 %280, 55
  %282 = zext i1 %281 to i32
  %283 = call i32 @testcase(i32 %282)
  %284 = load i32, i32* %7, align 4
  %285 = icmp eq i32 %284, 56
  %286 = zext i1 %285 to i32
  %287 = call i32 @testcase(i32 %286)
  %288 = load i32, i32* %7, align 4
  %289 = icmp eq i32 %288, 57
  %290 = zext i1 %289 to i32
  %291 = call i32 @testcase(i32 %290)
  %292 = load i32, i32* %7, align 4
  %293 = icmp eq i32 %292, 58
  %294 = zext i1 %293 to i32
  %295 = call i32 @testcase(i32 %294)
  %296 = load i32, i32* %7, align 4
  %297 = icmp eq i32 %296, 59
  %298 = zext i1 %297 to i32
  %299 = call i32 @testcase(i32 %298)
  %300 = load i32, i32* %7, align 4
  %301 = icmp eq i32 %300, 60
  %302 = zext i1 %301 to i32
  %303 = call i32 @testcase(i32 %302)
  %304 = load i32, i32* %7, align 4
  %305 = icmp eq i32 %304, 61
  %306 = zext i1 %305 to i32
  %307 = call i32 @testcase(i32 %306)
  %308 = load i32, i32* %7, align 4
  %309 = icmp eq i32 %308, 62
  %310 = zext i1 %309 to i32
  %311 = call i32 @testcase(i32 %310)
  %312 = load i32, i32* %7, align 4
  %313 = icmp eq i32 %312, 63
  %314 = zext i1 %313 to i32
  %315 = call i32 @testcase(i32 %314)
  %316 = load i32, i32* %7, align 4
  %317 = icmp eq i32 %316, 64
  %318 = zext i1 %317 to i32
  %319 = call i32 @testcase(i32 %318)
  %320 = load i32, i32* %7, align 4
  %321 = icmp eq i32 %320, 65
  %322 = zext i1 %321 to i32
  %323 = call i32 @testcase(i32 %322)
  %324 = load i32, i32* %7, align 4
  %325 = icmp eq i32 %324, 66
  %326 = zext i1 %325 to i32
  %327 = call i32 @testcase(i32 %326)
  %328 = load i32, i32* %7, align 4
  %329 = icmp eq i32 %328, 67
  %330 = zext i1 %329 to i32
  %331 = call i32 @testcase(i32 %330)
  %332 = load i32, i32* %7, align 4
  %333 = icmp eq i32 %332, 68
  %334 = zext i1 %333 to i32
  %335 = call i32 @testcase(i32 %334)
  %336 = load i32, i32* %7, align 4
  %337 = icmp eq i32 %336, 69
  %338 = zext i1 %337 to i32
  %339 = call i32 @testcase(i32 %338)
  %340 = load i32, i32* %7, align 4
  %341 = icmp eq i32 %340, 70
  %342 = zext i1 %341 to i32
  %343 = call i32 @testcase(i32 %342)
  %344 = load i32, i32* %7, align 4
  %345 = icmp eq i32 %344, 71
  %346 = zext i1 %345 to i32
  %347 = call i32 @testcase(i32 %346)
  %348 = load i32, i32* %7, align 4
  %349 = icmp eq i32 %348, 72
  %350 = zext i1 %349 to i32
  %351 = call i32 @testcase(i32 %350)
  %352 = load i32, i32* %7, align 4
  %353 = icmp eq i32 %352, 73
  %354 = zext i1 %353 to i32
  %355 = call i32 @testcase(i32 %354)
  %356 = load i32, i32* %7, align 4
  %357 = icmp eq i32 %356, 74
  %358 = zext i1 %357 to i32
  %359 = call i32 @testcase(i32 %358)
  %360 = load i32, i32* %7, align 4
  %361 = icmp eq i32 %360, 75
  %362 = zext i1 %361 to i32
  %363 = call i32 @testcase(i32 %362)
  %364 = load i32, i32* %7, align 4
  %365 = icmp eq i32 %364, 76
  %366 = zext i1 %365 to i32
  %367 = call i32 @testcase(i32 %366)
  %368 = load i32, i32* %7, align 4
  %369 = icmp eq i32 %368, 77
  %370 = zext i1 %369 to i32
  %371 = call i32 @testcase(i32 %370)
  %372 = load i32, i32* %7, align 4
  %373 = icmp eq i32 %372, 78
  %374 = zext i1 %373 to i32
  %375 = call i32 @testcase(i32 %374)
  %376 = load i32, i32* %7, align 4
  %377 = icmp eq i32 %376, 79
  %378 = zext i1 %377 to i32
  %379 = call i32 @testcase(i32 %378)
  %380 = load i32, i32* %7, align 4
  %381 = icmp eq i32 %380, 80
  %382 = zext i1 %381 to i32
  %383 = call i32 @testcase(i32 %382)
  %384 = load i32, i32* %7, align 4
  %385 = icmp eq i32 %384, 81
  %386 = zext i1 %385 to i32
  %387 = call i32 @testcase(i32 %386)
  %388 = load i32, i32* %7, align 4
  %389 = icmp eq i32 %388, 82
  %390 = zext i1 %389 to i32
  %391 = call i32 @testcase(i32 %390)
  %392 = load i32, i32* %7, align 4
  %393 = icmp eq i32 %392, 83
  %394 = zext i1 %393 to i32
  %395 = call i32 @testcase(i32 %394)
  %396 = load i32, i32* %7, align 4
  %397 = icmp eq i32 %396, 84
  %398 = zext i1 %397 to i32
  %399 = call i32 @testcase(i32 %398)
  %400 = load i32, i32* %7, align 4
  %401 = sext i32 %400 to i64
  %402 = getelementptr inbounds [85 x i8], [85 x i8]* @keywordCode.aCode, i64 0, i64 %401
  %403 = load i8, i8* %402, align 1
  %404 = zext i8 %403 to i32
  %405 = load i32*, i32** %6, align 8
  store i32 %404, i32* %405, align 4
  br label %413

406:                                              ; preds = %58, %47
  %407 = load i32, i32* %7, align 4
  %408 = sext i32 %407 to i64
  %409 = getelementptr inbounds [85 x i8], [85 x i8]* @keywordCode.aNext, i64 0, i64 %408
  %410 = load i8, i8* %409, align 1
  %411 = zext i8 %410 to i32
  %412 = sub nsw i32 %411, 1
  store i32 %412, i32* %7, align 4
  br label %36

413:                                              ; preds = %59, %36
  br label %414

414:                                              ; preds = %413, %3
  %415 = load i32, i32* %5, align 4
  ret i32 %415
}

declare dso_local i32 @charMap(i8 signext) #1

declare dso_local i32 @testcase(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
