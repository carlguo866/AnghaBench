; ModuleID = '/home/carl/AnghaBench/linux/arch/mips/kernel/extr_asm-offsets.c_output_ptreg_defines.c'
source_filename = "/home/carl/AnghaBench/linux/arch/mips/kernel/extr_asm-offsets.c_output_ptreg_defines.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [22 x i8] c"MIPS pt_regs offsets.\00", align 1
@PT_R0 = common dso_local global i32 0, align 4
@pt_regs = common dso_local global i32 0, align 4
@regs = common dso_local global i32* null, align 8
@PT_R1 = common dso_local global i32 0, align 4
@PT_R2 = common dso_local global i32 0, align 4
@PT_R3 = common dso_local global i32 0, align 4
@PT_R4 = common dso_local global i32 0, align 4
@PT_R5 = common dso_local global i32 0, align 4
@PT_R6 = common dso_local global i32 0, align 4
@PT_R7 = common dso_local global i32 0, align 4
@PT_R8 = common dso_local global i32 0, align 4
@PT_R9 = common dso_local global i32 0, align 4
@PT_R10 = common dso_local global i32 0, align 4
@PT_R11 = common dso_local global i32 0, align 4
@PT_R12 = common dso_local global i32 0, align 4
@PT_R13 = common dso_local global i32 0, align 4
@PT_R14 = common dso_local global i32 0, align 4
@PT_R15 = common dso_local global i32 0, align 4
@PT_R16 = common dso_local global i32 0, align 4
@PT_R17 = common dso_local global i32 0, align 4
@PT_R18 = common dso_local global i32 0, align 4
@PT_R19 = common dso_local global i32 0, align 4
@PT_R20 = common dso_local global i32 0, align 4
@PT_R21 = common dso_local global i32 0, align 4
@PT_R22 = common dso_local global i32 0, align 4
@PT_R23 = common dso_local global i32 0, align 4
@PT_R24 = common dso_local global i32 0, align 4
@PT_R25 = common dso_local global i32 0, align 4
@PT_R26 = common dso_local global i32 0, align 4
@PT_R27 = common dso_local global i32 0, align 4
@PT_R28 = common dso_local global i32 0, align 4
@PT_R29 = common dso_local global i32 0, align 4
@PT_R30 = common dso_local global i32 0, align 4
@PT_R31 = common dso_local global i32 0, align 4
@PT_LO = common dso_local global i32 0, align 4
@lo = common dso_local global i32 0, align 4
@PT_HI = common dso_local global i32 0, align 4
@hi = common dso_local global i32 0, align 4
@PT_EPC = common dso_local global i32 0, align 4
@cp0_epc = common dso_local global i32 0, align 4
@PT_BVADDR = common dso_local global i32 0, align 4
@cp0_badvaddr = common dso_local global i32 0, align 4
@PT_STATUS = common dso_local global i32 0, align 4
@cp0_status = common dso_local global i32 0, align 4
@PT_CAUSE = common dso_local global i32 0, align 4
@cp0_cause = common dso_local global i32 0, align 4
@PT_SIZE = common dso_local global i32 0, align 4
@PT_ACX = common dso_local global i32 0, align 4
@PT_MPL = common dso_local global i32 0, align 4
@PT_MTP = common dso_local global i32 0, align 4
@acx = common dso_local global i32 0, align 4
@mpl = common dso_local global i32 0, align 4
@mtp = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @output_ptreg_defines() #0 {
  %1 = call i32 @COMMENT(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str, i64 0, i64 0))
  %2 = load i32, i32* @PT_R0, align 4
  %3 = load i32, i32* @pt_regs, align 4
  %4 = load i32*, i32** @regs, align 8
  %5 = getelementptr inbounds i32, i32* %4, i64 0
  %6 = load i32, i32* %5, align 4
  %7 = call i32 @OFFSET(i32 %2, i32 %3, i32 %6)
  %8 = load i32, i32* @PT_R1, align 4
  %9 = load i32, i32* @pt_regs, align 4
  %10 = load i32*, i32** @regs, align 8
  %11 = getelementptr inbounds i32, i32* %10, i64 1
  %12 = load i32, i32* %11, align 4
  %13 = call i32 @OFFSET(i32 %8, i32 %9, i32 %12)
  %14 = load i32, i32* @PT_R2, align 4
  %15 = load i32, i32* @pt_regs, align 4
  %16 = load i32*, i32** @regs, align 8
  %17 = getelementptr inbounds i32, i32* %16, i64 2
  %18 = load i32, i32* %17, align 4
  %19 = call i32 @OFFSET(i32 %14, i32 %15, i32 %18)
  %20 = load i32, i32* @PT_R3, align 4
  %21 = load i32, i32* @pt_regs, align 4
  %22 = load i32*, i32** @regs, align 8
  %23 = getelementptr inbounds i32, i32* %22, i64 3
  %24 = load i32, i32* %23, align 4
  %25 = call i32 @OFFSET(i32 %20, i32 %21, i32 %24)
  %26 = load i32, i32* @PT_R4, align 4
  %27 = load i32, i32* @pt_regs, align 4
  %28 = load i32*, i32** @regs, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 4
  %30 = load i32, i32* %29, align 4
  %31 = call i32 @OFFSET(i32 %26, i32 %27, i32 %30)
  %32 = load i32, i32* @PT_R5, align 4
  %33 = load i32, i32* @pt_regs, align 4
  %34 = load i32*, i32** @regs, align 8
  %35 = getelementptr inbounds i32, i32* %34, i64 5
  %36 = load i32, i32* %35, align 4
  %37 = call i32 @OFFSET(i32 %32, i32 %33, i32 %36)
  %38 = load i32, i32* @PT_R6, align 4
  %39 = load i32, i32* @pt_regs, align 4
  %40 = load i32*, i32** @regs, align 8
  %41 = getelementptr inbounds i32, i32* %40, i64 6
  %42 = load i32, i32* %41, align 4
  %43 = call i32 @OFFSET(i32 %38, i32 %39, i32 %42)
  %44 = load i32, i32* @PT_R7, align 4
  %45 = load i32, i32* @pt_regs, align 4
  %46 = load i32*, i32** @regs, align 8
  %47 = getelementptr inbounds i32, i32* %46, i64 7
  %48 = load i32, i32* %47, align 4
  %49 = call i32 @OFFSET(i32 %44, i32 %45, i32 %48)
  %50 = load i32, i32* @PT_R8, align 4
  %51 = load i32, i32* @pt_regs, align 4
  %52 = load i32*, i32** @regs, align 8
  %53 = getelementptr inbounds i32, i32* %52, i64 8
  %54 = load i32, i32* %53, align 4
  %55 = call i32 @OFFSET(i32 %50, i32 %51, i32 %54)
  %56 = load i32, i32* @PT_R9, align 4
  %57 = load i32, i32* @pt_regs, align 4
  %58 = load i32*, i32** @regs, align 8
  %59 = getelementptr inbounds i32, i32* %58, i64 9
  %60 = load i32, i32* %59, align 4
  %61 = call i32 @OFFSET(i32 %56, i32 %57, i32 %60)
  %62 = load i32, i32* @PT_R10, align 4
  %63 = load i32, i32* @pt_regs, align 4
  %64 = load i32*, i32** @regs, align 8
  %65 = getelementptr inbounds i32, i32* %64, i64 10
  %66 = load i32, i32* %65, align 4
  %67 = call i32 @OFFSET(i32 %62, i32 %63, i32 %66)
  %68 = load i32, i32* @PT_R11, align 4
  %69 = load i32, i32* @pt_regs, align 4
  %70 = load i32*, i32** @regs, align 8
  %71 = getelementptr inbounds i32, i32* %70, i64 11
  %72 = load i32, i32* %71, align 4
  %73 = call i32 @OFFSET(i32 %68, i32 %69, i32 %72)
  %74 = load i32, i32* @PT_R12, align 4
  %75 = load i32, i32* @pt_regs, align 4
  %76 = load i32*, i32** @regs, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 12
  %78 = load i32, i32* %77, align 4
  %79 = call i32 @OFFSET(i32 %74, i32 %75, i32 %78)
  %80 = load i32, i32* @PT_R13, align 4
  %81 = load i32, i32* @pt_regs, align 4
  %82 = load i32*, i32** @regs, align 8
  %83 = getelementptr inbounds i32, i32* %82, i64 13
  %84 = load i32, i32* %83, align 4
  %85 = call i32 @OFFSET(i32 %80, i32 %81, i32 %84)
  %86 = load i32, i32* @PT_R14, align 4
  %87 = load i32, i32* @pt_regs, align 4
  %88 = load i32*, i32** @regs, align 8
  %89 = getelementptr inbounds i32, i32* %88, i64 14
  %90 = load i32, i32* %89, align 4
  %91 = call i32 @OFFSET(i32 %86, i32 %87, i32 %90)
  %92 = load i32, i32* @PT_R15, align 4
  %93 = load i32, i32* @pt_regs, align 4
  %94 = load i32*, i32** @regs, align 8
  %95 = getelementptr inbounds i32, i32* %94, i64 15
  %96 = load i32, i32* %95, align 4
  %97 = call i32 @OFFSET(i32 %92, i32 %93, i32 %96)
  %98 = load i32, i32* @PT_R16, align 4
  %99 = load i32, i32* @pt_regs, align 4
  %100 = load i32*, i32** @regs, align 8
  %101 = getelementptr inbounds i32, i32* %100, i64 16
  %102 = load i32, i32* %101, align 4
  %103 = call i32 @OFFSET(i32 %98, i32 %99, i32 %102)
  %104 = load i32, i32* @PT_R17, align 4
  %105 = load i32, i32* @pt_regs, align 4
  %106 = load i32*, i32** @regs, align 8
  %107 = getelementptr inbounds i32, i32* %106, i64 17
  %108 = load i32, i32* %107, align 4
  %109 = call i32 @OFFSET(i32 %104, i32 %105, i32 %108)
  %110 = load i32, i32* @PT_R18, align 4
  %111 = load i32, i32* @pt_regs, align 4
  %112 = load i32*, i32** @regs, align 8
  %113 = getelementptr inbounds i32, i32* %112, i64 18
  %114 = load i32, i32* %113, align 4
  %115 = call i32 @OFFSET(i32 %110, i32 %111, i32 %114)
  %116 = load i32, i32* @PT_R19, align 4
  %117 = load i32, i32* @pt_regs, align 4
  %118 = load i32*, i32** @regs, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 19
  %120 = load i32, i32* %119, align 4
  %121 = call i32 @OFFSET(i32 %116, i32 %117, i32 %120)
  %122 = load i32, i32* @PT_R20, align 4
  %123 = load i32, i32* @pt_regs, align 4
  %124 = load i32*, i32** @regs, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 20
  %126 = load i32, i32* %125, align 4
  %127 = call i32 @OFFSET(i32 %122, i32 %123, i32 %126)
  %128 = load i32, i32* @PT_R21, align 4
  %129 = load i32, i32* @pt_regs, align 4
  %130 = load i32*, i32** @regs, align 8
  %131 = getelementptr inbounds i32, i32* %130, i64 21
  %132 = load i32, i32* %131, align 4
  %133 = call i32 @OFFSET(i32 %128, i32 %129, i32 %132)
  %134 = load i32, i32* @PT_R22, align 4
  %135 = load i32, i32* @pt_regs, align 4
  %136 = load i32*, i32** @regs, align 8
  %137 = getelementptr inbounds i32, i32* %136, i64 22
  %138 = load i32, i32* %137, align 4
  %139 = call i32 @OFFSET(i32 %134, i32 %135, i32 %138)
  %140 = load i32, i32* @PT_R23, align 4
  %141 = load i32, i32* @pt_regs, align 4
  %142 = load i32*, i32** @regs, align 8
  %143 = getelementptr inbounds i32, i32* %142, i64 23
  %144 = load i32, i32* %143, align 4
  %145 = call i32 @OFFSET(i32 %140, i32 %141, i32 %144)
  %146 = load i32, i32* @PT_R24, align 4
  %147 = load i32, i32* @pt_regs, align 4
  %148 = load i32*, i32** @regs, align 8
  %149 = getelementptr inbounds i32, i32* %148, i64 24
  %150 = load i32, i32* %149, align 4
  %151 = call i32 @OFFSET(i32 %146, i32 %147, i32 %150)
  %152 = load i32, i32* @PT_R25, align 4
  %153 = load i32, i32* @pt_regs, align 4
  %154 = load i32*, i32** @regs, align 8
  %155 = getelementptr inbounds i32, i32* %154, i64 25
  %156 = load i32, i32* %155, align 4
  %157 = call i32 @OFFSET(i32 %152, i32 %153, i32 %156)
  %158 = load i32, i32* @PT_R26, align 4
  %159 = load i32, i32* @pt_regs, align 4
  %160 = load i32*, i32** @regs, align 8
  %161 = getelementptr inbounds i32, i32* %160, i64 26
  %162 = load i32, i32* %161, align 4
  %163 = call i32 @OFFSET(i32 %158, i32 %159, i32 %162)
  %164 = load i32, i32* @PT_R27, align 4
  %165 = load i32, i32* @pt_regs, align 4
  %166 = load i32*, i32** @regs, align 8
  %167 = getelementptr inbounds i32, i32* %166, i64 27
  %168 = load i32, i32* %167, align 4
  %169 = call i32 @OFFSET(i32 %164, i32 %165, i32 %168)
  %170 = load i32, i32* @PT_R28, align 4
  %171 = load i32, i32* @pt_regs, align 4
  %172 = load i32*, i32** @regs, align 8
  %173 = getelementptr inbounds i32, i32* %172, i64 28
  %174 = load i32, i32* %173, align 4
  %175 = call i32 @OFFSET(i32 %170, i32 %171, i32 %174)
  %176 = load i32, i32* @PT_R29, align 4
  %177 = load i32, i32* @pt_regs, align 4
  %178 = load i32*, i32** @regs, align 8
  %179 = getelementptr inbounds i32, i32* %178, i64 29
  %180 = load i32, i32* %179, align 4
  %181 = call i32 @OFFSET(i32 %176, i32 %177, i32 %180)
  %182 = load i32, i32* @PT_R30, align 4
  %183 = load i32, i32* @pt_regs, align 4
  %184 = load i32*, i32** @regs, align 8
  %185 = getelementptr inbounds i32, i32* %184, i64 30
  %186 = load i32, i32* %185, align 4
  %187 = call i32 @OFFSET(i32 %182, i32 %183, i32 %186)
  %188 = load i32, i32* @PT_R31, align 4
  %189 = load i32, i32* @pt_regs, align 4
  %190 = load i32*, i32** @regs, align 8
  %191 = getelementptr inbounds i32, i32* %190, i64 31
  %192 = load i32, i32* %191, align 4
  %193 = call i32 @OFFSET(i32 %188, i32 %189, i32 %192)
  %194 = load i32, i32* @PT_LO, align 4
  %195 = load i32, i32* @pt_regs, align 4
  %196 = load i32, i32* @lo, align 4
  %197 = call i32 @OFFSET(i32 %194, i32 %195, i32 %196)
  %198 = load i32, i32* @PT_HI, align 4
  %199 = load i32, i32* @pt_regs, align 4
  %200 = load i32, i32* @hi, align 4
  %201 = call i32 @OFFSET(i32 %198, i32 %199, i32 %200)
  %202 = load i32, i32* @PT_EPC, align 4
  %203 = load i32, i32* @pt_regs, align 4
  %204 = load i32, i32* @cp0_epc, align 4
  %205 = call i32 @OFFSET(i32 %202, i32 %203, i32 %204)
  %206 = load i32, i32* @PT_BVADDR, align 4
  %207 = load i32, i32* @pt_regs, align 4
  %208 = load i32, i32* @cp0_badvaddr, align 4
  %209 = call i32 @OFFSET(i32 %206, i32 %207, i32 %208)
  %210 = load i32, i32* @PT_STATUS, align 4
  %211 = load i32, i32* @pt_regs, align 4
  %212 = load i32, i32* @cp0_status, align 4
  %213 = call i32 @OFFSET(i32 %210, i32 %211, i32 %212)
  %214 = load i32, i32* @PT_CAUSE, align 4
  %215 = load i32, i32* @pt_regs, align 4
  %216 = load i32, i32* @cp0_cause, align 4
  %217 = call i32 @OFFSET(i32 %214, i32 %215, i32 %216)
  %218 = load i32, i32* @PT_SIZE, align 4
  %219 = call i32 @DEFINE(i32 %218, i32 4)
  %220 = call i32 (...) @BLANK()
  ret void
}

declare dso_local i32 @COMMENT(i8*) #1

declare dso_local i32 @OFFSET(i32, i32, i32) #1

declare dso_local i32 @DEFINE(i32, i32) #1

declare dso_local i32 @BLANK(...) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
