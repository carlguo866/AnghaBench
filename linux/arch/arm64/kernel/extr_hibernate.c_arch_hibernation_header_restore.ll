; ModuleID = '/home/carl/AnghaBench/linux/arch/arm64/kernel/extr_hibernate.c_arch_hibernation_header_restore.c'
source_filename = "/home/carl/AnghaBench/linux/arch/arm64/kernel/extr_hibernate.c_arch_hibernation_header_restore.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.arch_hibernate_hdr = type { i32, i32 }
%struct.arch_hibernate_hdr_invariants = type { i32 }

@.str = private unnamed_addr constant [47 x i8] c"Hibernate image not generated by this kernel!\0A\00", align 1
@EINVAL = common dso_local global i32 0, align 4
@sleep_cpu = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [37 x i8] c"Hibernated on CPU %d [mpidr:0x%llx]\0A\00", align 1
@.str.2 = private unnamed_addr constant [47 x i8] c"Hibernated on a CPU not known to this kernel!\0A\00", align 1
@.str.3 = private unnamed_addr constant [55 x i8] c"Hibernated on a CPU that is offline! Bringing CPU up.\0A\00", align 1
@.str.4 = private unnamed_addr constant [35 x i8] c"Failed to bring hibernate-CPU up!\0A\00", align 1
@resume_hdr = common dso_local global %struct.arch_hibernate_hdr zeroinitializer, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @arch_hibernation_header_restore(i8* %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i8*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.arch_hibernate_hdr_invariants, align 4
  %6 = alloca %struct.arch_hibernate_hdr*, align 8
  store i8* %0, i8** %3, align 8
  %7 = load i8*, i8** %3, align 8
  %8 = bitcast i8* %7 to %struct.arch_hibernate_hdr*
  store %struct.arch_hibernate_hdr* %8, %struct.arch_hibernate_hdr** %6, align 8
  %9 = call i32 @arch_hdr_invariants(%struct.arch_hibernate_hdr_invariants* %5)
  %10 = load %struct.arch_hibernate_hdr*, %struct.arch_hibernate_hdr** %6, align 8
  %11 = getelementptr inbounds %struct.arch_hibernate_hdr, %struct.arch_hibernate_hdr* %10, i32 0, i32 1
  %12 = call i64 @memcmp(i32* %11, %struct.arch_hibernate_hdr_invariants* %5, i32 4)
  %13 = icmp ne i64 %12, 0
  br i1 %13, label %14, label %18

14:                                               ; preds = %1
  %15 = call i32 @pr_crit(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str, i64 0, i64 0))
  %16 = load i32, i32* @EINVAL, align 4
  %17 = sub nsw i32 0, %16
  store i32 %17, i32* %2, align 4
  br label %55

18:                                               ; preds = %1
  %19 = load %struct.arch_hibernate_hdr*, %struct.arch_hibernate_hdr** %6, align 8
  %20 = getelementptr inbounds %struct.arch_hibernate_hdr, %struct.arch_hibernate_hdr* %19, i32 0, i32 0
  %21 = load i32, i32* %20, align 4
  %22 = call i32 @get_logical_index(i32 %21)
  store i32 %22, i32* @sleep_cpu, align 4
  %23 = load i32, i32* @sleep_cpu, align 4
  %24 = load %struct.arch_hibernate_hdr*, %struct.arch_hibernate_hdr** %6, align 8
  %25 = getelementptr inbounds %struct.arch_hibernate_hdr, %struct.arch_hibernate_hdr* %24, i32 0, i32 0
  %26 = load i32, i32* %25, align 4
  %27 = call i32 (i8*, ...) @pr_info(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.1, i64 0, i64 0), i32 %23, i32 %26)
  %28 = load i32, i32* @sleep_cpu, align 4
  %29 = icmp slt i32 %28, 0
  br i1 %29, label %30, label %36

30:                                               ; preds = %18
  %31 = call i32 @pr_crit(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.2, i64 0, i64 0))
  %32 = load i32, i32* @EINVAL, align 4
  %33 = sub nsw i32 0, %32
  store i32 %33, i32* @sleep_cpu, align 4
  %34 = load i32, i32* @EINVAL, align 4
  %35 = sub nsw i32 0, %34
  store i32 %35, i32* %2, align 4
  br label %55

36:                                               ; preds = %18
  %37 = load i32, i32* @sleep_cpu, align 4
  %38 = call i32 @cpu_online(i32 %37)
  %39 = icmp ne i32 %38, 0
  br i1 %39, label %52, label %40

40:                                               ; preds = %36
  %41 = call i32 (i8*, ...) @pr_info(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.3, i64 0, i64 0))
  %42 = load i32, i32* @sleep_cpu, align 4
  %43 = call i32 @cpu_up(i32 %42)
  store i32 %43, i32* %4, align 4
  %44 = load i32, i32* %4, align 4
  %45 = icmp ne i32 %44, 0
  br i1 %45, label %46, label %51

46:                                               ; preds = %40
  %47 = call i32 @pr_err(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.4, i64 0, i64 0))
  %48 = load i32, i32* @EINVAL, align 4
  %49 = sub nsw i32 0, %48
  store i32 %49, i32* @sleep_cpu, align 4
  %50 = load i32, i32* %4, align 4
  store i32 %50, i32* %2, align 4
  br label %55

51:                                               ; preds = %40
  br label %52

52:                                               ; preds = %51, %36
  %53 = load %struct.arch_hibernate_hdr*, %struct.arch_hibernate_hdr** %6, align 8
  %54 = bitcast %struct.arch_hibernate_hdr* %53 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.arch_hibernate_hdr* @resume_hdr to i8*), i8* align 4 %54, i64 8, i1 false)
  store i32 0, i32* %2, align 4
  br label %55

55:                                               ; preds = %52, %46, %30, %14
  %56 = load i32, i32* %2, align 4
  ret i32 %56
}

declare dso_local i32 @arch_hdr_invariants(%struct.arch_hibernate_hdr_invariants*) #1

declare dso_local i64 @memcmp(i32*, %struct.arch_hibernate_hdr_invariants*, i32) #1

declare dso_local i32 @pr_crit(i8*) #1

declare dso_local i32 @get_logical_index(i32) #1

declare dso_local i32 @pr_info(i8*, ...) #1

declare dso_local i32 @cpu_online(i32) #1

declare dso_local i32 @cpu_up(i32) #1

declare dso_local i32 @pr_err(i8*) #1

; Function Attrs: argmemonly nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #2

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { argmemonly nounwind willreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
