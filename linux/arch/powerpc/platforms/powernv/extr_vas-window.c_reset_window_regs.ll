; ModuleID = '/home/carl/AnghaBench/linux/arch/powerpc/platforms/powernv/extr_vas-window.c_reset_window_regs.c'
source_filename = "/home/carl/AnghaBench/linux/arch/powerpc/platforms/powernv/extr_vas-window.c_reset_window_regs.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.vas_window = type { i32 }

@LPID = common dso_local global i32 0, align 4
@PID = common dso_local global i32 0, align 4
@XLATE_MSR = common dso_local global i32 0, align 4
@XLATE_LPCR = common dso_local global i32 0, align 4
@XLATE_CTL = common dso_local global i32 0, align 4
@AMR = common dso_local global i32 0, align 4
@SEIDR = common dso_local global i32 0, align 4
@FAULT_TX_WIN = common dso_local global i32 0, align 4
@OSU_INTR_SRC_RA = common dso_local global i32 0, align 4
@HV_INTR_SRC_RA = common dso_local global i32 0, align 4
@PSWID = common dso_local global i32 0, align 4
@LFIFO_BAR = common dso_local global i32 0, align 4
@LDATA_STAMP_CTL = common dso_local global i32 0, align 4
@LDMA_CACHE_CTL = common dso_local global i32 0, align 4
@LRFIFO_PUSH = common dso_local global i32 0, align 4
@CURR_MSG_COUNT = common dso_local global i32 0, align 4
@LNOTIFY_AFTER_COUNT = common dso_local global i32 0, align 4
@LRX_WCRED = common dso_local global i32 0, align 4
@LRX_WCRED_ADDER = common dso_local global i32 0, align 4
@TX_WCRED = common dso_local global i32 0, align 4
@TX_WCRED_ADDER = common dso_local global i32 0, align 4
@LFIFO_SIZE = common dso_local global i32 0, align 4
@WINCTL = common dso_local global i32 0, align 4
@WIN_STATUS = common dso_local global i32 0, align 4
@WIN_CTX_CACHING_CTL = common dso_local global i32 0, align 4
@TX_RSVD_BUF_COUNT = common dso_local global i32 0, align 4
@LRFIFO_WIN_PTR = common dso_local global i32 0, align 4
@LNOTIFY_CTL = common dso_local global i32 0, align 4
@LNOTIFY_PID = common dso_local global i32 0, align 4
@LNOTIFY_LPID = common dso_local global i32 0, align 4
@LNOTIFY_TID = common dso_local global i32 0, align 4
@LNOTIFY_SCOPE = common dso_local global i32 0, align 4
@NX_UTIL_ADDER = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @reset_window_regs(%struct.vas_window* %0) #0 {
  %2 = alloca %struct.vas_window*, align 8
  store %struct.vas_window* %0, %struct.vas_window** %2, align 8
  %3 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %4 = load i32, i32* @LPID, align 4
  %5 = call i32 @VREG(i32 %4)
  %6 = call i32 @write_hvwc_reg(%struct.vas_window* %3, i32 %5, i64 0)
  %7 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %8 = load i32, i32* @PID, align 4
  %9 = call i32 @VREG(i32 %8)
  %10 = call i32 @write_hvwc_reg(%struct.vas_window* %7, i32 %9, i64 0)
  %11 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %12 = load i32, i32* @XLATE_MSR, align 4
  %13 = call i32 @VREG(i32 %12)
  %14 = call i32 @write_hvwc_reg(%struct.vas_window* %11, i32 %13, i64 0)
  %15 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %16 = load i32, i32* @XLATE_LPCR, align 4
  %17 = call i32 @VREG(i32 %16)
  %18 = call i32 @write_hvwc_reg(%struct.vas_window* %15, i32 %17, i64 0)
  %19 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %20 = load i32, i32* @XLATE_CTL, align 4
  %21 = call i32 @VREG(i32 %20)
  %22 = call i32 @write_hvwc_reg(%struct.vas_window* %19, i32 %21, i64 0)
  %23 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %24 = load i32, i32* @AMR, align 4
  %25 = call i32 @VREG(i32 %24)
  %26 = call i32 @write_hvwc_reg(%struct.vas_window* %23, i32 %25, i64 0)
  %27 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %28 = load i32, i32* @SEIDR, align 4
  %29 = call i32 @VREG(i32 %28)
  %30 = call i32 @write_hvwc_reg(%struct.vas_window* %27, i32 %29, i64 0)
  %31 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %32 = load i32, i32* @FAULT_TX_WIN, align 4
  %33 = call i32 @VREG(i32 %32)
  %34 = call i32 @write_hvwc_reg(%struct.vas_window* %31, i32 %33, i64 0)
  %35 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %36 = load i32, i32* @OSU_INTR_SRC_RA, align 4
  %37 = call i32 @VREG(i32 %36)
  %38 = call i32 @write_hvwc_reg(%struct.vas_window* %35, i32 %37, i64 0)
  %39 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %40 = load i32, i32* @HV_INTR_SRC_RA, align 4
  %41 = call i32 @VREG(i32 %40)
  %42 = call i32 @write_hvwc_reg(%struct.vas_window* %39, i32 %41, i64 0)
  %43 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %44 = load i32, i32* @PSWID, align 4
  %45 = call i32 @VREG(i32 %44)
  %46 = call i32 @write_hvwc_reg(%struct.vas_window* %43, i32 %45, i64 0)
  %47 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %48 = load i32, i32* @LFIFO_BAR, align 4
  %49 = call i32 @VREG(i32 %48)
  %50 = call i32 @write_hvwc_reg(%struct.vas_window* %47, i32 %49, i64 0)
  %51 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %52 = load i32, i32* @LDATA_STAMP_CTL, align 4
  %53 = call i32 @VREG(i32 %52)
  %54 = call i32 @write_hvwc_reg(%struct.vas_window* %51, i32 %53, i64 0)
  %55 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %56 = load i32, i32* @LDMA_CACHE_CTL, align 4
  %57 = call i32 @VREG(i32 %56)
  %58 = call i32 @write_hvwc_reg(%struct.vas_window* %55, i32 %57, i64 0)
  %59 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %60 = load i32, i32* @LRFIFO_PUSH, align 4
  %61 = call i32 @VREG(i32 %60)
  %62 = call i32 @write_hvwc_reg(%struct.vas_window* %59, i32 %61, i64 0)
  %63 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %64 = load i32, i32* @CURR_MSG_COUNT, align 4
  %65 = call i32 @VREG(i32 %64)
  %66 = call i32 @write_hvwc_reg(%struct.vas_window* %63, i32 %65, i64 0)
  %67 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %68 = load i32, i32* @LNOTIFY_AFTER_COUNT, align 4
  %69 = call i32 @VREG(i32 %68)
  %70 = call i32 @write_hvwc_reg(%struct.vas_window* %67, i32 %69, i64 0)
  %71 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %72 = load i32, i32* @LRX_WCRED, align 4
  %73 = call i32 @VREG(i32 %72)
  %74 = call i32 @write_hvwc_reg(%struct.vas_window* %71, i32 %73, i64 0)
  %75 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %76 = load i32, i32* @LRX_WCRED_ADDER, align 4
  %77 = call i32 @VREG(i32 %76)
  %78 = call i32 @write_hvwc_reg(%struct.vas_window* %75, i32 %77, i64 0)
  %79 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %80 = load i32, i32* @TX_WCRED, align 4
  %81 = call i32 @VREG(i32 %80)
  %82 = call i32 @write_hvwc_reg(%struct.vas_window* %79, i32 %81, i64 0)
  %83 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %84 = load i32, i32* @TX_WCRED_ADDER, align 4
  %85 = call i32 @VREG(i32 %84)
  %86 = call i32 @write_hvwc_reg(%struct.vas_window* %83, i32 %85, i64 0)
  %87 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %88 = load i32, i32* @LFIFO_SIZE, align 4
  %89 = call i32 @VREG(i32 %88)
  %90 = call i32 @write_hvwc_reg(%struct.vas_window* %87, i32 %89, i64 0)
  %91 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %92 = load i32, i32* @WINCTL, align 4
  %93 = call i32 @VREG(i32 %92)
  %94 = call i32 @write_hvwc_reg(%struct.vas_window* %91, i32 %93, i64 0)
  %95 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %96 = load i32, i32* @WIN_STATUS, align 4
  %97 = call i32 @VREG(i32 %96)
  %98 = call i32 @write_hvwc_reg(%struct.vas_window* %95, i32 %97, i64 0)
  %99 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %100 = load i32, i32* @WIN_CTX_CACHING_CTL, align 4
  %101 = call i32 @VREG(i32 %100)
  %102 = call i32 @write_hvwc_reg(%struct.vas_window* %99, i32 %101, i64 0)
  %103 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %104 = load i32, i32* @TX_RSVD_BUF_COUNT, align 4
  %105 = call i32 @VREG(i32 %104)
  %106 = call i32 @write_hvwc_reg(%struct.vas_window* %103, i32 %105, i64 0)
  %107 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %108 = load i32, i32* @LRFIFO_WIN_PTR, align 4
  %109 = call i32 @VREG(i32 %108)
  %110 = call i32 @write_hvwc_reg(%struct.vas_window* %107, i32 %109, i64 0)
  %111 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %112 = load i32, i32* @LNOTIFY_CTL, align 4
  %113 = call i32 @VREG(i32 %112)
  %114 = call i32 @write_hvwc_reg(%struct.vas_window* %111, i32 %113, i64 0)
  %115 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %116 = load i32, i32* @LNOTIFY_PID, align 4
  %117 = call i32 @VREG(i32 %116)
  %118 = call i32 @write_hvwc_reg(%struct.vas_window* %115, i32 %117, i64 0)
  %119 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %120 = load i32, i32* @LNOTIFY_LPID, align 4
  %121 = call i32 @VREG(i32 %120)
  %122 = call i32 @write_hvwc_reg(%struct.vas_window* %119, i32 %121, i64 0)
  %123 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %124 = load i32, i32* @LNOTIFY_TID, align 4
  %125 = call i32 @VREG(i32 %124)
  %126 = call i32 @write_hvwc_reg(%struct.vas_window* %123, i32 %125, i64 0)
  %127 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %128 = load i32, i32* @LNOTIFY_SCOPE, align 4
  %129 = call i32 @VREG(i32 %128)
  %130 = call i32 @write_hvwc_reg(%struct.vas_window* %127, i32 %129, i64 0)
  %131 = load %struct.vas_window*, %struct.vas_window** %2, align 8
  %132 = load i32, i32* @NX_UTIL_ADDER, align 4
  %133 = call i32 @VREG(i32 %132)
  %134 = call i32 @write_hvwc_reg(%struct.vas_window* %131, i32 %133, i64 0)
  ret void
}

declare dso_local i32 @write_hvwc_reg(%struct.vas_window*, i32, i64) #1

declare dso_local i32 @VREG(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
