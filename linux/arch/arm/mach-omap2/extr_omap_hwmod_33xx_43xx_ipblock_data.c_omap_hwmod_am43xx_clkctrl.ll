; ModuleID = '/home/carl/AnghaBench/linux/arch/arm/mach-omap2/extr_omap_hwmod_33xx_43xx_ipblock_data.c_omap_hwmod_am43xx_clkctrl.c'
source_filename = "/home/carl/AnghaBench/linux/arch/arm/mach-omap2/extr_omap_hwmod_33xx_43xx_ipblock_data.c_omap_hwmod_am43xx_clkctrl.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@am33xx_dcan0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_DCAN0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_dcan1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_DCAN1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_elm_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_ELM_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_epwmss0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_EPWMSS0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_epwmss1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_EPWMSS1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_epwmss2_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_EPWMSS2_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_gpio1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_GPIO1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_gpio2_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_GPIO2_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_gpio3_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_GPIO3_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_mailbox_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_MAILBOX0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_mcasp0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_MCASP0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_mcasp1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_MCASP1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_spi0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_SPI0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_spi1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_SPI1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_spinlock_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_SPINLOCK_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_timer2_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TIMER2_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_timer3_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TIMER3_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_timer4_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TIMER4_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_timer5_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TIMER5_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_timer6_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TIMER6_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_timer7_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TIMER7_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_smartreflex0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_WKUP_SMARTREFLEX0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_smartreflex1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_WKUP_SMARTREFLEX1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_timer1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_WKUP_TIMER1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_wd_timer1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_WKUP_WDT1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_rtc_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_RTC_RTC_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_gpmc_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_GPMC_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_l4_ls_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_L4LS_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_l4_wkup_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_WKUP_L4WKUP_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_l3_main_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_L3_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_tpcc_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TPCC_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_tptc0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TPTC0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_tptc1_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TPTC1_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_tptc2_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_TPTC2_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_gfx_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_GFX_GFX_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_pruss_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_PRUSS_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_mpu_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_MPU_MPU_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_l3_instr_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_L3_INSTR_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_ocmcram_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_OCMCRAM_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_sha0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_SHA0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_aes0_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_AES0_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@am33xx_rng_hwmod = common dso_local global i32 0, align 4
@AM43XX_CM_PER_RNG_CLKCTRL_OFFSET = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @omap_hwmod_am43xx_clkctrl to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @omap_hwmod_am43xx_clkctrl() #0 {
  %1 = load i32, i32* @am33xx_dcan0_hwmod, align 4
  %2 = load i32, i32* @AM43XX_CM_PER_DCAN0_CLKCTRL_OFFSET, align 4
  %3 = call i32 @CLKCTRL(i32 %1, i32 %2)
  %4 = load i32, i32* @am33xx_dcan1_hwmod, align 4
  %5 = load i32, i32* @AM43XX_CM_PER_DCAN1_CLKCTRL_OFFSET, align 4
  %6 = call i32 @CLKCTRL(i32 %4, i32 %5)
  %7 = load i32, i32* @am33xx_elm_hwmod, align 4
  %8 = load i32, i32* @AM43XX_CM_PER_ELM_CLKCTRL_OFFSET, align 4
  %9 = call i32 @CLKCTRL(i32 %7, i32 %8)
  %10 = load i32, i32* @am33xx_epwmss0_hwmod, align 4
  %11 = load i32, i32* @AM43XX_CM_PER_EPWMSS0_CLKCTRL_OFFSET, align 4
  %12 = call i32 @CLKCTRL(i32 %10, i32 %11)
  %13 = load i32, i32* @am33xx_epwmss1_hwmod, align 4
  %14 = load i32, i32* @AM43XX_CM_PER_EPWMSS1_CLKCTRL_OFFSET, align 4
  %15 = call i32 @CLKCTRL(i32 %13, i32 %14)
  %16 = load i32, i32* @am33xx_epwmss2_hwmod, align 4
  %17 = load i32, i32* @AM43XX_CM_PER_EPWMSS2_CLKCTRL_OFFSET, align 4
  %18 = call i32 @CLKCTRL(i32 %16, i32 %17)
  %19 = load i32, i32* @am33xx_gpio1_hwmod, align 4
  %20 = load i32, i32* @AM43XX_CM_PER_GPIO1_CLKCTRL_OFFSET, align 4
  %21 = call i32 @CLKCTRL(i32 %19, i32 %20)
  %22 = load i32, i32* @am33xx_gpio2_hwmod, align 4
  %23 = load i32, i32* @AM43XX_CM_PER_GPIO2_CLKCTRL_OFFSET, align 4
  %24 = call i32 @CLKCTRL(i32 %22, i32 %23)
  %25 = load i32, i32* @am33xx_gpio3_hwmod, align 4
  %26 = load i32, i32* @AM43XX_CM_PER_GPIO3_CLKCTRL_OFFSET, align 4
  %27 = call i32 @CLKCTRL(i32 %25, i32 %26)
  %28 = load i32, i32* @am33xx_mailbox_hwmod, align 4
  %29 = load i32, i32* @AM43XX_CM_PER_MAILBOX0_CLKCTRL_OFFSET, align 4
  %30 = call i32 @CLKCTRL(i32 %28, i32 %29)
  %31 = load i32, i32* @am33xx_mcasp0_hwmod, align 4
  %32 = load i32, i32* @AM43XX_CM_PER_MCASP0_CLKCTRL_OFFSET, align 4
  %33 = call i32 @CLKCTRL(i32 %31, i32 %32)
  %34 = load i32, i32* @am33xx_mcasp1_hwmod, align 4
  %35 = load i32, i32* @AM43XX_CM_PER_MCASP1_CLKCTRL_OFFSET, align 4
  %36 = call i32 @CLKCTRL(i32 %34, i32 %35)
  %37 = load i32, i32* @am33xx_spi0_hwmod, align 4
  %38 = load i32, i32* @AM43XX_CM_PER_SPI0_CLKCTRL_OFFSET, align 4
  %39 = call i32 @CLKCTRL(i32 %37, i32 %38)
  %40 = load i32, i32* @am33xx_spi1_hwmod, align 4
  %41 = load i32, i32* @AM43XX_CM_PER_SPI1_CLKCTRL_OFFSET, align 4
  %42 = call i32 @CLKCTRL(i32 %40, i32 %41)
  %43 = load i32, i32* @am33xx_spinlock_hwmod, align 4
  %44 = load i32, i32* @AM43XX_CM_PER_SPINLOCK_CLKCTRL_OFFSET, align 4
  %45 = call i32 @CLKCTRL(i32 %43, i32 %44)
  %46 = load i32, i32* @am33xx_timer2_hwmod, align 4
  %47 = load i32, i32* @AM43XX_CM_PER_TIMER2_CLKCTRL_OFFSET, align 4
  %48 = call i32 @CLKCTRL(i32 %46, i32 %47)
  %49 = load i32, i32* @am33xx_timer3_hwmod, align 4
  %50 = load i32, i32* @AM43XX_CM_PER_TIMER3_CLKCTRL_OFFSET, align 4
  %51 = call i32 @CLKCTRL(i32 %49, i32 %50)
  %52 = load i32, i32* @am33xx_timer4_hwmod, align 4
  %53 = load i32, i32* @AM43XX_CM_PER_TIMER4_CLKCTRL_OFFSET, align 4
  %54 = call i32 @CLKCTRL(i32 %52, i32 %53)
  %55 = load i32, i32* @am33xx_timer5_hwmod, align 4
  %56 = load i32, i32* @AM43XX_CM_PER_TIMER5_CLKCTRL_OFFSET, align 4
  %57 = call i32 @CLKCTRL(i32 %55, i32 %56)
  %58 = load i32, i32* @am33xx_timer6_hwmod, align 4
  %59 = load i32, i32* @AM43XX_CM_PER_TIMER6_CLKCTRL_OFFSET, align 4
  %60 = call i32 @CLKCTRL(i32 %58, i32 %59)
  %61 = load i32, i32* @am33xx_timer7_hwmod, align 4
  %62 = load i32, i32* @AM43XX_CM_PER_TIMER7_CLKCTRL_OFFSET, align 4
  %63 = call i32 @CLKCTRL(i32 %61, i32 %62)
  %64 = load i32, i32* @am33xx_smartreflex0_hwmod, align 4
  %65 = load i32, i32* @AM43XX_CM_WKUP_SMARTREFLEX0_CLKCTRL_OFFSET, align 4
  %66 = call i32 @CLKCTRL(i32 %64, i32 %65)
  %67 = load i32, i32* @am33xx_smartreflex1_hwmod, align 4
  %68 = load i32, i32* @AM43XX_CM_WKUP_SMARTREFLEX1_CLKCTRL_OFFSET, align 4
  %69 = call i32 @CLKCTRL(i32 %67, i32 %68)
  %70 = load i32, i32* @am33xx_timer1_hwmod, align 4
  %71 = load i32, i32* @AM43XX_CM_WKUP_TIMER1_CLKCTRL_OFFSET, align 4
  %72 = call i32 @CLKCTRL(i32 %70, i32 %71)
  %73 = load i32, i32* @am33xx_wd_timer1_hwmod, align 4
  %74 = load i32, i32* @AM43XX_CM_WKUP_WDT1_CLKCTRL_OFFSET, align 4
  %75 = call i32 @CLKCTRL(i32 %73, i32 %74)
  %76 = load i32, i32* @am33xx_rtc_hwmod, align 4
  %77 = load i32, i32* @AM43XX_CM_RTC_RTC_CLKCTRL_OFFSET, align 4
  %78 = call i32 @CLKCTRL(i32 %76, i32 %77)
  %79 = load i32, i32* @am33xx_gpmc_hwmod, align 4
  %80 = load i32, i32* @AM43XX_CM_PER_GPMC_CLKCTRL_OFFSET, align 4
  %81 = call i32 @CLKCTRL(i32 %79, i32 %80)
  %82 = load i32, i32* @am33xx_l4_ls_hwmod, align 4
  %83 = load i32, i32* @AM43XX_CM_PER_L4LS_CLKCTRL_OFFSET, align 4
  %84 = call i32 @CLKCTRL(i32 %82, i32 %83)
  %85 = load i32, i32* @am33xx_l4_wkup_hwmod, align 4
  %86 = load i32, i32* @AM43XX_CM_WKUP_L4WKUP_CLKCTRL_OFFSET, align 4
  %87 = call i32 @CLKCTRL(i32 %85, i32 %86)
  %88 = load i32, i32* @am33xx_l3_main_hwmod, align 4
  %89 = load i32, i32* @AM43XX_CM_PER_L3_CLKCTRL_OFFSET, align 4
  %90 = call i32 @CLKCTRL(i32 %88, i32 %89)
  %91 = load i32, i32* @am33xx_tpcc_hwmod, align 4
  %92 = load i32, i32* @AM43XX_CM_PER_TPCC_CLKCTRL_OFFSET, align 4
  %93 = call i32 @CLKCTRL(i32 %91, i32 %92)
  %94 = load i32, i32* @am33xx_tptc0_hwmod, align 4
  %95 = load i32, i32* @AM43XX_CM_PER_TPTC0_CLKCTRL_OFFSET, align 4
  %96 = call i32 @CLKCTRL(i32 %94, i32 %95)
  %97 = load i32, i32* @am33xx_tptc1_hwmod, align 4
  %98 = load i32, i32* @AM43XX_CM_PER_TPTC1_CLKCTRL_OFFSET, align 4
  %99 = call i32 @CLKCTRL(i32 %97, i32 %98)
  %100 = load i32, i32* @am33xx_tptc2_hwmod, align 4
  %101 = load i32, i32* @AM43XX_CM_PER_TPTC2_CLKCTRL_OFFSET, align 4
  %102 = call i32 @CLKCTRL(i32 %100, i32 %101)
  %103 = load i32, i32* @am33xx_gfx_hwmod, align 4
  %104 = load i32, i32* @AM43XX_CM_GFX_GFX_CLKCTRL_OFFSET, align 4
  %105 = call i32 @CLKCTRL(i32 %103, i32 %104)
  %106 = load i32, i32* @am33xx_pruss_hwmod, align 4
  %107 = load i32, i32* @AM43XX_CM_PER_PRUSS_CLKCTRL_OFFSET, align 4
  %108 = call i32 @CLKCTRL(i32 %106, i32 %107)
  %109 = load i32, i32* @am33xx_mpu_hwmod, align 4
  %110 = load i32, i32* @AM43XX_CM_MPU_MPU_CLKCTRL_OFFSET, align 4
  %111 = call i32 @CLKCTRL(i32 %109, i32 %110)
  %112 = load i32, i32* @am33xx_l3_instr_hwmod, align 4
  %113 = load i32, i32* @AM43XX_CM_PER_L3_INSTR_CLKCTRL_OFFSET, align 4
  %114 = call i32 @CLKCTRL(i32 %112, i32 %113)
  %115 = load i32, i32* @am33xx_ocmcram_hwmod, align 4
  %116 = load i32, i32* @AM43XX_CM_PER_OCMCRAM_CLKCTRL_OFFSET, align 4
  %117 = call i32 @CLKCTRL(i32 %115, i32 %116)
  %118 = load i32, i32* @am33xx_sha0_hwmod, align 4
  %119 = load i32, i32* @AM43XX_CM_PER_SHA0_CLKCTRL_OFFSET, align 4
  %120 = call i32 @CLKCTRL(i32 %118, i32 %119)
  %121 = load i32, i32* @am33xx_aes0_hwmod, align 4
  %122 = load i32, i32* @AM43XX_CM_PER_AES0_CLKCTRL_OFFSET, align 4
  %123 = call i32 @CLKCTRL(i32 %121, i32 %122)
  %124 = load i32, i32* @am33xx_rng_hwmod, align 4
  %125 = load i32, i32* @AM43XX_CM_PER_RNG_CLKCTRL_OFFSET, align 4
  %126 = call i32 @CLKCTRL(i32 %124, i32 %125)
  ret void
}

declare dso_local i32 @CLKCTRL(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
