; ModuleID = '/home/carl/AnghaBench/linux/arch/nios2/kernel/extr_asm-offsets.c_main.c'
source_filename = "/home/carl/AnghaBench/linux/arch/nios2/kernel/extr_asm-offsets.c_main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@TASK_THREAD = common dso_local global i32 0, align 4
@task_struct = common dso_local global i32 0, align 4
@thread = common dso_local global i32 0, align 4
@THREAD_KSP = common dso_local global i32 0, align 4
@thread_struct = common dso_local global i32 0, align 4
@ksp = common dso_local global i32 0, align 4
@THREAD_KPSR = common dso_local global i32 0, align 4
@kpsr = common dso_local global i32 0, align 4
@PT_ORIG_R2 = common dso_local global i32 0, align 4
@pt_regs = common dso_local global i32 0, align 4
@orig_r2 = common dso_local global i32 0, align 4
@PT_ORIG_R7 = common dso_local global i32 0, align 4
@orig_r7 = common dso_local global i32 0, align 4
@PT_R1 = common dso_local global i32 0, align 4
@r1 = common dso_local global i32 0, align 4
@PT_R2 = common dso_local global i32 0, align 4
@r2 = common dso_local global i32 0, align 4
@PT_R3 = common dso_local global i32 0, align 4
@r3 = common dso_local global i32 0, align 4
@PT_R4 = common dso_local global i32 0, align 4
@r4 = common dso_local global i32 0, align 4
@PT_R5 = common dso_local global i32 0, align 4
@r5 = common dso_local global i32 0, align 4
@PT_R6 = common dso_local global i32 0, align 4
@r6 = common dso_local global i32 0, align 4
@PT_R7 = common dso_local global i32 0, align 4
@r7 = common dso_local global i32 0, align 4
@PT_R8 = common dso_local global i32 0, align 4
@r8 = common dso_local global i32 0, align 4
@PT_R9 = common dso_local global i32 0, align 4
@r9 = common dso_local global i32 0, align 4
@PT_R10 = common dso_local global i32 0, align 4
@r10 = common dso_local global i32 0, align 4
@PT_R11 = common dso_local global i32 0, align 4
@r11 = common dso_local global i32 0, align 4
@PT_R12 = common dso_local global i32 0, align 4
@r12 = common dso_local global i32 0, align 4
@PT_R13 = common dso_local global i32 0, align 4
@r13 = common dso_local global i32 0, align 4
@PT_R14 = common dso_local global i32 0, align 4
@r14 = common dso_local global i32 0, align 4
@PT_R15 = common dso_local global i32 0, align 4
@r15 = common dso_local global i32 0, align 4
@PT_EA = common dso_local global i32 0, align 4
@ea = common dso_local global i32 0, align 4
@PT_RA = common dso_local global i32 0, align 4
@ra = common dso_local global i32 0, align 4
@PT_FP = common dso_local global i32 0, align 4
@fp = common dso_local global i32 0, align 4
@PT_SP = common dso_local global i32 0, align 4
@sp = common dso_local global i32 0, align 4
@PT_GP = common dso_local global i32 0, align 4
@gp = common dso_local global i32 0, align 4
@PT_ESTATUS = common dso_local global i32 0, align 4
@estatus = common dso_local global i32 0, align 4
@PT_REGS_SIZE = common dso_local global i32 0, align 4
@SW_R16 = common dso_local global i32 0, align 4
@switch_stack = common dso_local global i32 0, align 4
@r16 = common dso_local global i32 0, align 4
@SW_R17 = common dso_local global i32 0, align 4
@r17 = common dso_local global i32 0, align 4
@SW_R18 = common dso_local global i32 0, align 4
@r18 = common dso_local global i32 0, align 4
@SW_R19 = common dso_local global i32 0, align 4
@r19 = common dso_local global i32 0, align 4
@SW_R20 = common dso_local global i32 0, align 4
@r20 = common dso_local global i32 0, align 4
@SW_R21 = common dso_local global i32 0, align 4
@r21 = common dso_local global i32 0, align 4
@SW_R22 = common dso_local global i32 0, align 4
@r22 = common dso_local global i32 0, align 4
@SW_R23 = common dso_local global i32 0, align 4
@r23 = common dso_local global i32 0, align 4
@SW_FP = common dso_local global i32 0, align 4
@SW_GP = common dso_local global i32 0, align 4
@SW_RA = common dso_local global i32 0, align 4
@SWITCH_STACK_SIZE = common dso_local global i32 0, align 4
@TI_FLAGS = common dso_local global i32 0, align 4
@thread_info = common dso_local global i32 0, align 4
@flags = common dso_local global i32 0, align 4
@TI_PREEMPT_COUNT = common dso_local global i32 0, align 4
@preempt_count = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @TASK_THREAD, align 4
  %3 = load i32, i32* @task_struct, align 4
  %4 = load i32, i32* @thread, align 4
  %5 = call i32 @OFFSET(i32 %2, i32 %3, i32 %4)
  %6 = call i32 (...) @BLANK()
  %7 = load i32, i32* @THREAD_KSP, align 4
  %8 = load i32, i32* @thread_struct, align 4
  %9 = load i32, i32* @ksp, align 4
  %10 = call i32 @OFFSET(i32 %7, i32 %8, i32 %9)
  %11 = load i32, i32* @THREAD_KPSR, align 4
  %12 = load i32, i32* @thread_struct, align 4
  %13 = load i32, i32* @kpsr, align 4
  %14 = call i32 @OFFSET(i32 %11, i32 %12, i32 %13)
  %15 = call i32 (...) @BLANK()
  %16 = load i32, i32* @PT_ORIG_R2, align 4
  %17 = load i32, i32* @pt_regs, align 4
  %18 = load i32, i32* @orig_r2, align 4
  %19 = call i32 @OFFSET(i32 %16, i32 %17, i32 %18)
  %20 = load i32, i32* @PT_ORIG_R7, align 4
  %21 = load i32, i32* @pt_regs, align 4
  %22 = load i32, i32* @orig_r7, align 4
  %23 = call i32 @OFFSET(i32 %20, i32 %21, i32 %22)
  %24 = load i32, i32* @PT_R1, align 4
  %25 = load i32, i32* @pt_regs, align 4
  %26 = load i32, i32* @r1, align 4
  %27 = call i32 @OFFSET(i32 %24, i32 %25, i32 %26)
  %28 = load i32, i32* @PT_R2, align 4
  %29 = load i32, i32* @pt_regs, align 4
  %30 = load i32, i32* @r2, align 4
  %31 = call i32 @OFFSET(i32 %28, i32 %29, i32 %30)
  %32 = load i32, i32* @PT_R3, align 4
  %33 = load i32, i32* @pt_regs, align 4
  %34 = load i32, i32* @r3, align 4
  %35 = call i32 @OFFSET(i32 %32, i32 %33, i32 %34)
  %36 = load i32, i32* @PT_R4, align 4
  %37 = load i32, i32* @pt_regs, align 4
  %38 = load i32, i32* @r4, align 4
  %39 = call i32 @OFFSET(i32 %36, i32 %37, i32 %38)
  %40 = load i32, i32* @PT_R5, align 4
  %41 = load i32, i32* @pt_regs, align 4
  %42 = load i32, i32* @r5, align 4
  %43 = call i32 @OFFSET(i32 %40, i32 %41, i32 %42)
  %44 = load i32, i32* @PT_R6, align 4
  %45 = load i32, i32* @pt_regs, align 4
  %46 = load i32, i32* @r6, align 4
  %47 = call i32 @OFFSET(i32 %44, i32 %45, i32 %46)
  %48 = load i32, i32* @PT_R7, align 4
  %49 = load i32, i32* @pt_regs, align 4
  %50 = load i32, i32* @r7, align 4
  %51 = call i32 @OFFSET(i32 %48, i32 %49, i32 %50)
  %52 = load i32, i32* @PT_R8, align 4
  %53 = load i32, i32* @pt_regs, align 4
  %54 = load i32, i32* @r8, align 4
  %55 = call i32 @OFFSET(i32 %52, i32 %53, i32 %54)
  %56 = load i32, i32* @PT_R9, align 4
  %57 = load i32, i32* @pt_regs, align 4
  %58 = load i32, i32* @r9, align 4
  %59 = call i32 @OFFSET(i32 %56, i32 %57, i32 %58)
  %60 = load i32, i32* @PT_R10, align 4
  %61 = load i32, i32* @pt_regs, align 4
  %62 = load i32, i32* @r10, align 4
  %63 = call i32 @OFFSET(i32 %60, i32 %61, i32 %62)
  %64 = load i32, i32* @PT_R11, align 4
  %65 = load i32, i32* @pt_regs, align 4
  %66 = load i32, i32* @r11, align 4
  %67 = call i32 @OFFSET(i32 %64, i32 %65, i32 %66)
  %68 = load i32, i32* @PT_R12, align 4
  %69 = load i32, i32* @pt_regs, align 4
  %70 = load i32, i32* @r12, align 4
  %71 = call i32 @OFFSET(i32 %68, i32 %69, i32 %70)
  %72 = load i32, i32* @PT_R13, align 4
  %73 = load i32, i32* @pt_regs, align 4
  %74 = load i32, i32* @r13, align 4
  %75 = call i32 @OFFSET(i32 %72, i32 %73, i32 %74)
  %76 = load i32, i32* @PT_R14, align 4
  %77 = load i32, i32* @pt_regs, align 4
  %78 = load i32, i32* @r14, align 4
  %79 = call i32 @OFFSET(i32 %76, i32 %77, i32 %78)
  %80 = load i32, i32* @PT_R15, align 4
  %81 = load i32, i32* @pt_regs, align 4
  %82 = load i32, i32* @r15, align 4
  %83 = call i32 @OFFSET(i32 %80, i32 %81, i32 %82)
  %84 = load i32, i32* @PT_EA, align 4
  %85 = load i32, i32* @pt_regs, align 4
  %86 = load i32, i32* @ea, align 4
  %87 = call i32 @OFFSET(i32 %84, i32 %85, i32 %86)
  %88 = load i32, i32* @PT_RA, align 4
  %89 = load i32, i32* @pt_regs, align 4
  %90 = load i32, i32* @ra, align 4
  %91 = call i32 @OFFSET(i32 %88, i32 %89, i32 %90)
  %92 = load i32, i32* @PT_FP, align 4
  %93 = load i32, i32* @pt_regs, align 4
  %94 = load i32, i32* @fp, align 4
  %95 = call i32 @OFFSET(i32 %92, i32 %93, i32 %94)
  %96 = load i32, i32* @PT_SP, align 4
  %97 = load i32, i32* @pt_regs, align 4
  %98 = load i32, i32* @sp, align 4
  %99 = call i32 @OFFSET(i32 %96, i32 %97, i32 %98)
  %100 = load i32, i32* @PT_GP, align 4
  %101 = load i32, i32* @pt_regs, align 4
  %102 = load i32, i32* @gp, align 4
  %103 = call i32 @OFFSET(i32 %100, i32 %101, i32 %102)
  %104 = load i32, i32* @PT_ESTATUS, align 4
  %105 = load i32, i32* @pt_regs, align 4
  %106 = load i32, i32* @estatus, align 4
  %107 = call i32 @OFFSET(i32 %104, i32 %105, i32 %106)
  %108 = load i32, i32* @PT_REGS_SIZE, align 4
  %109 = call i32 @DEFINE(i32 %108, i32 4)
  %110 = call i32 (...) @BLANK()
  %111 = load i32, i32* @SW_R16, align 4
  %112 = load i32, i32* @switch_stack, align 4
  %113 = load i32, i32* @r16, align 4
  %114 = call i32 @OFFSET(i32 %111, i32 %112, i32 %113)
  %115 = load i32, i32* @SW_R17, align 4
  %116 = load i32, i32* @switch_stack, align 4
  %117 = load i32, i32* @r17, align 4
  %118 = call i32 @OFFSET(i32 %115, i32 %116, i32 %117)
  %119 = load i32, i32* @SW_R18, align 4
  %120 = load i32, i32* @switch_stack, align 4
  %121 = load i32, i32* @r18, align 4
  %122 = call i32 @OFFSET(i32 %119, i32 %120, i32 %121)
  %123 = load i32, i32* @SW_R19, align 4
  %124 = load i32, i32* @switch_stack, align 4
  %125 = load i32, i32* @r19, align 4
  %126 = call i32 @OFFSET(i32 %123, i32 %124, i32 %125)
  %127 = load i32, i32* @SW_R20, align 4
  %128 = load i32, i32* @switch_stack, align 4
  %129 = load i32, i32* @r20, align 4
  %130 = call i32 @OFFSET(i32 %127, i32 %128, i32 %129)
  %131 = load i32, i32* @SW_R21, align 4
  %132 = load i32, i32* @switch_stack, align 4
  %133 = load i32, i32* @r21, align 4
  %134 = call i32 @OFFSET(i32 %131, i32 %132, i32 %133)
  %135 = load i32, i32* @SW_R22, align 4
  %136 = load i32, i32* @switch_stack, align 4
  %137 = load i32, i32* @r22, align 4
  %138 = call i32 @OFFSET(i32 %135, i32 %136, i32 %137)
  %139 = load i32, i32* @SW_R23, align 4
  %140 = load i32, i32* @switch_stack, align 4
  %141 = load i32, i32* @r23, align 4
  %142 = call i32 @OFFSET(i32 %139, i32 %140, i32 %141)
  %143 = load i32, i32* @SW_FP, align 4
  %144 = load i32, i32* @switch_stack, align 4
  %145 = load i32, i32* @fp, align 4
  %146 = call i32 @OFFSET(i32 %143, i32 %144, i32 %145)
  %147 = load i32, i32* @SW_GP, align 4
  %148 = load i32, i32* @switch_stack, align 4
  %149 = load i32, i32* @gp, align 4
  %150 = call i32 @OFFSET(i32 %147, i32 %148, i32 %149)
  %151 = load i32, i32* @SW_RA, align 4
  %152 = load i32, i32* @switch_stack, align 4
  %153 = load i32, i32* @ra, align 4
  %154 = call i32 @OFFSET(i32 %151, i32 %152, i32 %153)
  %155 = load i32, i32* @SWITCH_STACK_SIZE, align 4
  %156 = call i32 @DEFINE(i32 %155, i32 4)
  %157 = call i32 (...) @BLANK()
  %158 = load i32, i32* @TI_FLAGS, align 4
  %159 = load i32, i32* @thread_info, align 4
  %160 = load i32, i32* @flags, align 4
  %161 = call i32 @OFFSET(i32 %158, i32 %159, i32 %160)
  %162 = load i32, i32* @TI_PREEMPT_COUNT, align 4
  %163 = load i32, i32* @thread_info, align 4
  %164 = load i32, i32* @preempt_count, align 4
  %165 = call i32 @OFFSET(i32 %162, i32 %163, i32 %164)
  %166 = call i32 (...) @BLANK()
  ret i32 0
}

declare dso_local i32 @OFFSET(i32, i32, i32) #1

declare dso_local i32 @BLANK(...) #1

declare dso_local i32 @DEFINE(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
