; ModuleID = '/home/carl/AnghaBench/linux/lib/extr_locking-selftest.c_ww_tests.c'
source_filename = "/home/carl/AnghaBench/linux/lib/extr_locking-selftest.c_ww_tests.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@.str = private unnamed_addr constant [78 x i8] c"  --------------------------------------------------------------------------\0A\00", align 1
@.str.1 = private unnamed_addr constant [24 x i8] c"  | Wound/wait tests |\0A\00", align 1
@.str.2 = private unnamed_addr constant [25 x i8] c"  ---------------------\0A\00", align 1
@.str.3 = private unnamed_addr constant [16 x i8] c"ww api failures\00", align 1
@ww_test_fail_acquire = common dso_local global i32 0, align 4
@SUCCESS = common dso_local global i32 0, align 4
@LOCKTYPE_WW = common dso_local global i32 0, align 4
@ww_test_normal = common dso_local global i32 0, align 4
@ww_test_unneeded_slow = common dso_local global i32 0, align 4
@FAILURE = common dso_local global i32 0, align 4
@.str.4 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.5 = private unnamed_addr constant [19 x i8] c"ww contexts mixing\00", align 1
@ww_test_two_contexts = common dso_local global i32 0, align 4
@ww_test_diff_class = common dso_local global i32 0, align 4
@.str.6 = private unnamed_addr constant [21 x i8] c"finishing ww context\00", align 1
@ww_test_context_done_twice = common dso_local global i32 0, align 4
@ww_test_context_unlock_twice = common dso_local global i32 0, align 4
@ww_test_context_fini_early = common dso_local global i32 0, align 4
@ww_test_context_lock_after_done = common dso_local global i32 0, align 4
@.str.7 = private unnamed_addr constant [19 x i8] c"locking mismatches\00", align 1
@ww_test_object_unlock_twice = common dso_local global i32 0, align 4
@ww_test_object_lock_unbalanced = common dso_local global i32 0, align 4
@ww_test_object_lock_stale_context = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [17 x i8] c"EDEADLK handling\00", align 1
@ww_test_edeadlk_normal = common dso_local global i32 0, align 4
@ww_test_edeadlk_normal_slow = common dso_local global i32 0, align 4
@ww_test_edeadlk_no_unlock = common dso_local global i32 0, align 4
@ww_test_edeadlk_no_unlock_slow = common dso_local global i32 0, align 4
@ww_test_edeadlk_acquire_more = common dso_local global i32 0, align 4
@ww_test_edeadlk_acquire_more_slow = common dso_local global i32 0, align 4
@ww_test_edeadlk_acquire_more_edeadlk = common dso_local global i32 0, align 4
@ww_test_edeadlk_acquire_more_edeadlk_slow = common dso_local global i32 0, align 4
@ww_test_edeadlk_acquire_wrong = common dso_local global i32 0, align 4
@ww_test_edeadlk_acquire_wrong_slow = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [23 x i8] c"spinlock nest unlocked\00", align 1
@ww_test_spin_nest_unlocked = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [57 x i8] c"  -----------------------------------------------------\0A\00", align 1
@.str.11 = private unnamed_addr constant [58 x i8] c"                                 |block | try  |context|\0A\00", align 1
@.str.12 = private unnamed_addr constant [8 x i8] c"context\00", align 1
@ww_test_context_block = common dso_local global i32 0, align 4
@ww_test_context_try = common dso_local global i32 0, align 4
@ww_test_context_context = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [4 x i8] c"try\00", align 1
@ww_test_try_block = common dso_local global i32 0, align 4
@ww_test_try_try = common dso_local global i32 0, align 4
@ww_test_try_context = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [6 x i8] c"block\00", align 1
@ww_test_block_block = common dso_local global i32 0, align 4
@ww_test_block_try = common dso_local global i32 0, align 4
@ww_test_block_context = common dso_local global i32 0, align 4
@.str.15 = private unnamed_addr constant [9 x i8] c"spinlock\00", align 1
@ww_test_spin_block = common dso_local global i32 0, align 4
@ww_test_spin_try = common dso_local global i32 0, align 4
@ww_test_spin_context = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @ww_tests to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ww_tests() #0 {
  %1 = call i32 @printk(i8* getelementptr inbounds ([78 x i8], [78 x i8]* @.str, i64 0, i64 0))
  %2 = call i32 @printk(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.1, i64 0, i64 0))
  %3 = call i32 @printk(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.2, i64 0, i64 0))
  %4 = call i32 @print_testname(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3, i64 0, i64 0))
  %5 = load i32, i32* @ww_test_fail_acquire, align 4
  %6 = load i32, i32* @SUCCESS, align 4
  %7 = load i32, i32* @LOCKTYPE_WW, align 4
  %8 = call i32 @dotest(i32 %5, i32 %6, i32 %7)
  %9 = load i32, i32* @ww_test_normal, align 4
  %10 = load i32, i32* @SUCCESS, align 4
  %11 = load i32, i32* @LOCKTYPE_WW, align 4
  %12 = call i32 @dotest(i32 %9, i32 %10, i32 %11)
  %13 = load i32, i32* @ww_test_unneeded_slow, align 4
  %14 = load i32, i32* @FAILURE, align 4
  %15 = load i32, i32* @LOCKTYPE_WW, align 4
  %16 = call i32 @dotest(i32 %13, i32 %14, i32 %15)
  %17 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %18 = call i32 @print_testname(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.5, i64 0, i64 0))
  %19 = load i32, i32* @ww_test_two_contexts, align 4
  %20 = load i32, i32* @FAILURE, align 4
  %21 = load i32, i32* @LOCKTYPE_WW, align 4
  %22 = call i32 @dotest(i32 %19, i32 %20, i32 %21)
  %23 = load i32, i32* @ww_test_diff_class, align 4
  %24 = load i32, i32* @FAILURE, align 4
  %25 = load i32, i32* @LOCKTYPE_WW, align 4
  %26 = call i32 @dotest(i32 %23, i32 %24, i32 %25)
  %27 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %28 = call i32 @print_testname(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.6, i64 0, i64 0))
  %29 = load i32, i32* @ww_test_context_done_twice, align 4
  %30 = load i32, i32* @FAILURE, align 4
  %31 = load i32, i32* @LOCKTYPE_WW, align 4
  %32 = call i32 @dotest(i32 %29, i32 %30, i32 %31)
  %33 = load i32, i32* @ww_test_context_unlock_twice, align 4
  %34 = load i32, i32* @FAILURE, align 4
  %35 = load i32, i32* @LOCKTYPE_WW, align 4
  %36 = call i32 @dotest(i32 %33, i32 %34, i32 %35)
  %37 = load i32, i32* @ww_test_context_fini_early, align 4
  %38 = load i32, i32* @FAILURE, align 4
  %39 = load i32, i32* @LOCKTYPE_WW, align 4
  %40 = call i32 @dotest(i32 %37, i32 %38, i32 %39)
  %41 = load i32, i32* @ww_test_context_lock_after_done, align 4
  %42 = load i32, i32* @FAILURE, align 4
  %43 = load i32, i32* @LOCKTYPE_WW, align 4
  %44 = call i32 @dotest(i32 %41, i32 %42, i32 %43)
  %45 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %46 = call i32 @print_testname(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0))
  %47 = load i32, i32* @ww_test_object_unlock_twice, align 4
  %48 = load i32, i32* @FAILURE, align 4
  %49 = load i32, i32* @LOCKTYPE_WW, align 4
  %50 = call i32 @dotest(i32 %47, i32 %48, i32 %49)
  %51 = load i32, i32* @ww_test_object_lock_unbalanced, align 4
  %52 = load i32, i32* @FAILURE, align 4
  %53 = load i32, i32* @LOCKTYPE_WW, align 4
  %54 = call i32 @dotest(i32 %51, i32 %52, i32 %53)
  %55 = load i32, i32* @ww_test_object_lock_stale_context, align 4
  %56 = load i32, i32* @FAILURE, align 4
  %57 = load i32, i32* @LOCKTYPE_WW, align 4
  %58 = call i32 @dotest(i32 %55, i32 %56, i32 %57)
  %59 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %60 = call i32 @print_testname(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0))
  %61 = load i32, i32* @ww_test_edeadlk_normal, align 4
  %62 = load i32, i32* @SUCCESS, align 4
  %63 = load i32, i32* @LOCKTYPE_WW, align 4
  %64 = call i32 @dotest(i32 %61, i32 %62, i32 %63)
  %65 = load i32, i32* @ww_test_edeadlk_normal_slow, align 4
  %66 = load i32, i32* @SUCCESS, align 4
  %67 = load i32, i32* @LOCKTYPE_WW, align 4
  %68 = call i32 @dotest(i32 %65, i32 %66, i32 %67)
  %69 = load i32, i32* @ww_test_edeadlk_no_unlock, align 4
  %70 = load i32, i32* @FAILURE, align 4
  %71 = load i32, i32* @LOCKTYPE_WW, align 4
  %72 = call i32 @dotest(i32 %69, i32 %70, i32 %71)
  %73 = load i32, i32* @ww_test_edeadlk_no_unlock_slow, align 4
  %74 = load i32, i32* @FAILURE, align 4
  %75 = load i32, i32* @LOCKTYPE_WW, align 4
  %76 = call i32 @dotest(i32 %73, i32 %74, i32 %75)
  %77 = load i32, i32* @ww_test_edeadlk_acquire_more, align 4
  %78 = load i32, i32* @FAILURE, align 4
  %79 = load i32, i32* @LOCKTYPE_WW, align 4
  %80 = call i32 @dotest(i32 %77, i32 %78, i32 %79)
  %81 = load i32, i32* @ww_test_edeadlk_acquire_more_slow, align 4
  %82 = load i32, i32* @FAILURE, align 4
  %83 = load i32, i32* @LOCKTYPE_WW, align 4
  %84 = call i32 @dotest(i32 %81, i32 %82, i32 %83)
  %85 = load i32, i32* @ww_test_edeadlk_acquire_more_edeadlk, align 4
  %86 = load i32, i32* @FAILURE, align 4
  %87 = load i32, i32* @LOCKTYPE_WW, align 4
  %88 = call i32 @dotest(i32 %85, i32 %86, i32 %87)
  %89 = load i32, i32* @ww_test_edeadlk_acquire_more_edeadlk_slow, align 4
  %90 = load i32, i32* @FAILURE, align 4
  %91 = load i32, i32* @LOCKTYPE_WW, align 4
  %92 = call i32 @dotest(i32 %89, i32 %90, i32 %91)
  %93 = load i32, i32* @ww_test_edeadlk_acquire_wrong, align 4
  %94 = load i32, i32* @FAILURE, align 4
  %95 = load i32, i32* @LOCKTYPE_WW, align 4
  %96 = call i32 @dotest(i32 %93, i32 %94, i32 %95)
  %97 = load i32, i32* @ww_test_edeadlk_acquire_wrong_slow, align 4
  %98 = load i32, i32* @FAILURE, align 4
  %99 = load i32, i32* @LOCKTYPE_WW, align 4
  %100 = call i32 @dotest(i32 %97, i32 %98, i32 %99)
  %101 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %102 = call i32 @print_testname(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.9, i64 0, i64 0))
  %103 = load i32, i32* @ww_test_spin_nest_unlocked, align 4
  %104 = load i32, i32* @FAILURE, align 4
  %105 = load i32, i32* @LOCKTYPE_WW, align 4
  %106 = call i32 @dotest(i32 %103, i32 %104, i32 %105)
  %107 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %108 = call i32 @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.10, i64 0, i64 0))
  %109 = call i32 @printk(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.11, i64 0, i64 0))
  %110 = call i32 @printk(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.10, i64 0, i64 0))
  %111 = call i32 @print_testname(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.12, i64 0, i64 0))
  %112 = load i32, i32* @ww_test_context_block, align 4
  %113 = load i32, i32* @FAILURE, align 4
  %114 = load i32, i32* @LOCKTYPE_WW, align 4
  %115 = call i32 @dotest(i32 %112, i32 %113, i32 %114)
  %116 = load i32, i32* @ww_test_context_try, align 4
  %117 = load i32, i32* @SUCCESS, align 4
  %118 = load i32, i32* @LOCKTYPE_WW, align 4
  %119 = call i32 @dotest(i32 %116, i32 %117, i32 %118)
  %120 = load i32, i32* @ww_test_context_context, align 4
  %121 = load i32, i32* @SUCCESS, align 4
  %122 = load i32, i32* @LOCKTYPE_WW, align 4
  %123 = call i32 @dotest(i32 %120, i32 %121, i32 %122)
  %124 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %125 = call i32 @print_testname(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.13, i64 0, i64 0))
  %126 = load i32, i32* @ww_test_try_block, align 4
  %127 = load i32, i32* @FAILURE, align 4
  %128 = load i32, i32* @LOCKTYPE_WW, align 4
  %129 = call i32 @dotest(i32 %126, i32 %127, i32 %128)
  %130 = load i32, i32* @ww_test_try_try, align 4
  %131 = load i32, i32* @SUCCESS, align 4
  %132 = load i32, i32* @LOCKTYPE_WW, align 4
  %133 = call i32 @dotest(i32 %130, i32 %131, i32 %132)
  %134 = load i32, i32* @ww_test_try_context, align 4
  %135 = load i32, i32* @FAILURE, align 4
  %136 = load i32, i32* @LOCKTYPE_WW, align 4
  %137 = call i32 @dotest(i32 %134, i32 %135, i32 %136)
  %138 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %139 = call i32 @print_testname(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.14, i64 0, i64 0))
  %140 = load i32, i32* @ww_test_block_block, align 4
  %141 = load i32, i32* @FAILURE, align 4
  %142 = load i32, i32* @LOCKTYPE_WW, align 4
  %143 = call i32 @dotest(i32 %140, i32 %141, i32 %142)
  %144 = load i32, i32* @ww_test_block_try, align 4
  %145 = load i32, i32* @SUCCESS, align 4
  %146 = load i32, i32* @LOCKTYPE_WW, align 4
  %147 = call i32 @dotest(i32 %144, i32 %145, i32 %146)
  %148 = load i32, i32* @ww_test_block_context, align 4
  %149 = load i32, i32* @FAILURE, align 4
  %150 = load i32, i32* @LOCKTYPE_WW, align 4
  %151 = call i32 @dotest(i32 %148, i32 %149, i32 %150)
  %152 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  %153 = call i32 @print_testname(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.15, i64 0, i64 0))
  %154 = load i32, i32* @ww_test_spin_block, align 4
  %155 = load i32, i32* @FAILURE, align 4
  %156 = load i32, i32* @LOCKTYPE_WW, align 4
  %157 = call i32 @dotest(i32 %154, i32 %155, i32 %156)
  %158 = load i32, i32* @ww_test_spin_try, align 4
  %159 = load i32, i32* @SUCCESS, align 4
  %160 = load i32, i32* @LOCKTYPE_WW, align 4
  %161 = call i32 @dotest(i32 %158, i32 %159, i32 %160)
  %162 = load i32, i32* @ww_test_spin_context, align 4
  %163 = load i32, i32* @FAILURE, align 4
  %164 = load i32, i32* @LOCKTYPE_WW, align 4
  %165 = call i32 @dotest(i32 %162, i32 %163, i32 %164)
  %166 = call i32 @pr_cont(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.4, i64 0, i64 0))
  ret void
}

declare dso_local i32 @printk(i8*) #1

declare dso_local i32 @print_testname(i8*) #1

declare dso_local i32 @dotest(i32, i32, i32) #1

declare dso_local i32 @pr_cont(i8*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
