; ModuleID = '/home/carl/AnghaBench/linux/drivers/net/fddi/skfp/extr_fplustm.c_set_formac_addr.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/net/fddi/skfp/extr_fplustm.c_set_formac_addr.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.s_smc = type { %struct.TYPE_12__, %struct.TYPE_8__ }
%struct.TYPE_12__ = type { %struct.TYPE_11__, %struct.TYPE_9__ }
%struct.TYPE_11__ = type { %struct.TYPE_10__ }
%struct.TYPE_10__ = type { i32* }
%struct.TYPE_9__ = type { i32* }
%struct.TYPE_8__ = type { %struct.TYPE_7__* }
%struct.TYPE_7__ = type { i64 }

@MAC0 = common dso_local global i64 0, align 8
@FM_SAID = common dso_local global i32 0, align 4
@my_said = common dso_local global i16 0, align 2
@FM_LAIL = common dso_local global i32 0, align 4
@FM_LAIC = common dso_local global i32 0, align 4
@FM_LAIM = common dso_local global i32 0, align 4
@FM_SAGP = common dso_local global i32 0, align 4
@my_sagp = common dso_local global i16 0, align 2
@FM_LAGL = common dso_local global i32 0, align 4
@FM_LAGC = common dso_local global i32 0, align 4
@FM_LAGM = common dso_local global i32 0, align 4
@FM_TREQ1 = common dso_local global i32 0, align 4
@FM_TREQ0 = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.s_smc*)* @set_formac_addr to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @set_formac_addr(%struct.s_smc* %0) #0 {
  %2 = alloca %struct.s_smc*, align 8
  %3 = alloca i64, align 8
  store %struct.s_smc* %0, %struct.s_smc** %2, align 8
  %4 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %5 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %4, i32 0, i32 1
  %6 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %5, i32 0, i32 0
  %7 = load %struct.TYPE_7__*, %struct.TYPE_7__** %6, align 8
  %8 = load i64, i64* @MAC0, align 8
  %9 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %7, i64 %8
  %10 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  store i64 %11, i64* %3, align 8
  %12 = load i32, i32* @FM_SAID, align 4
  %13 = call i32 @FM_A(i32 %12)
  %14 = load i16, i16* @my_said, align 2
  %15 = call i32 @outpw(i32 %13, i16 zeroext %14)
  %16 = load i32, i32* @FM_LAIL, align 4
  %17 = call i32 @FM_A(i32 %16)
  %18 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %19 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %18, i32 0, i32 0
  %20 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %19, i32 0, i32 1
  %21 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %20, i32 0, i32 0
  %22 = load i32*, i32** %21, align 8
  %23 = getelementptr inbounds i32, i32* %22, i64 4
  %24 = load i32, i32* %23, align 4
  %25 = shl i32 %24, 8
  %26 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %27 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %26, i32 0, i32 0
  %28 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %27, i32 0, i32 1
  %29 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %28, i32 0, i32 0
  %30 = load i32*, i32** %29, align 8
  %31 = getelementptr inbounds i32, i32* %30, i64 5
  %32 = load i32, i32* %31, align 4
  %33 = add nsw i32 %25, %32
  %34 = trunc i32 %33 to i16
  %35 = call i32 @outpw(i32 %17, i16 zeroext %34)
  %36 = load i32, i32* @FM_LAIC, align 4
  %37 = call i32 @FM_A(i32 %36)
  %38 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %39 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %38, i32 0, i32 0
  %40 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %39, i32 0, i32 1
  %41 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %40, i32 0, i32 0
  %42 = load i32*, i32** %41, align 8
  %43 = getelementptr inbounds i32, i32* %42, i64 2
  %44 = load i32, i32* %43, align 4
  %45 = shl i32 %44, 8
  %46 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %47 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %46, i32 0, i32 0
  %48 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %47, i32 0, i32 1
  %49 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %48, i32 0, i32 0
  %50 = load i32*, i32** %49, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 3
  %52 = load i32, i32* %51, align 4
  %53 = add nsw i32 %45, %52
  %54 = trunc i32 %53 to i16
  %55 = call i32 @outpw(i32 %37, i16 zeroext %54)
  %56 = load i32, i32* @FM_LAIM, align 4
  %57 = call i32 @FM_A(i32 %56)
  %58 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %59 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %58, i32 0, i32 0
  %60 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %59, i32 0, i32 1
  %61 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %60, i32 0, i32 0
  %62 = load i32*, i32** %61, align 8
  %63 = getelementptr inbounds i32, i32* %62, i64 0
  %64 = load i32, i32* %63, align 4
  %65 = shl i32 %64, 8
  %66 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %67 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %66, i32 0, i32 0
  %68 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %67, i32 0, i32 1
  %69 = getelementptr inbounds %struct.TYPE_9__, %struct.TYPE_9__* %68, i32 0, i32 0
  %70 = load i32*, i32** %69, align 8
  %71 = getelementptr inbounds i32, i32* %70, i64 1
  %72 = load i32, i32* %71, align 4
  %73 = add nsw i32 %65, %72
  %74 = trunc i32 %73 to i16
  %75 = call i32 @outpw(i32 %57, i16 zeroext %74)
  %76 = load i32, i32* @FM_SAGP, align 4
  %77 = call i32 @FM_A(i32 %76)
  %78 = load i16, i16* @my_sagp, align 2
  %79 = call i32 @outpw(i32 %77, i16 zeroext %78)
  %80 = load i32, i32* @FM_LAGL, align 4
  %81 = call i32 @FM_A(i32 %80)
  %82 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %83 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %82, i32 0, i32 0
  %84 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %83, i32 0, i32 0
  %85 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %84, i32 0, i32 0
  %86 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %85, i32 0, i32 0
  %87 = load i32*, i32** %86, align 8
  %88 = getelementptr inbounds i32, i32* %87, i64 4
  %89 = load i32, i32* %88, align 4
  %90 = shl i32 %89, 8
  %91 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %92 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %91, i32 0, i32 0
  %93 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %92, i32 0, i32 0
  %94 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %93, i32 0, i32 0
  %95 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %94, i32 0, i32 0
  %96 = load i32*, i32** %95, align 8
  %97 = getelementptr inbounds i32, i32* %96, i64 5
  %98 = load i32, i32* %97, align 4
  %99 = add nsw i32 %90, %98
  %100 = trunc i32 %99 to i16
  %101 = call i32 @outpw(i32 %81, i16 zeroext %100)
  %102 = load i32, i32* @FM_LAGC, align 4
  %103 = call i32 @FM_A(i32 %102)
  %104 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %105 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %104, i32 0, i32 0
  %106 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %105, i32 0, i32 0
  %107 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %106, i32 0, i32 0
  %108 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %107, i32 0, i32 0
  %109 = load i32*, i32** %108, align 8
  %110 = getelementptr inbounds i32, i32* %109, i64 2
  %111 = load i32, i32* %110, align 4
  %112 = shl i32 %111, 8
  %113 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %114 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %113, i32 0, i32 0
  %115 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %114, i32 0, i32 0
  %116 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %115, i32 0, i32 0
  %117 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %116, i32 0, i32 0
  %118 = load i32*, i32** %117, align 8
  %119 = getelementptr inbounds i32, i32* %118, i64 3
  %120 = load i32, i32* %119, align 4
  %121 = add nsw i32 %112, %120
  %122 = trunc i32 %121 to i16
  %123 = call i32 @outpw(i32 %103, i16 zeroext %122)
  %124 = load i32, i32* @FM_LAGM, align 4
  %125 = call i32 @FM_A(i32 %124)
  %126 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %127 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %126, i32 0, i32 0
  %128 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %127, i32 0, i32 0
  %129 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %128, i32 0, i32 0
  %130 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %129, i32 0, i32 0
  %131 = load i32*, i32** %130, align 8
  %132 = getelementptr inbounds i32, i32* %131, i64 0
  %133 = load i32, i32* %132, align 4
  %134 = shl i32 %133, 8
  %135 = load %struct.s_smc*, %struct.s_smc** %2, align 8
  %136 = getelementptr inbounds %struct.s_smc, %struct.s_smc* %135, i32 0, i32 0
  %137 = getelementptr inbounds %struct.TYPE_12__, %struct.TYPE_12__* %136, i32 0, i32 0
  %138 = getelementptr inbounds %struct.TYPE_11__, %struct.TYPE_11__* %137, i32 0, i32 0
  %139 = getelementptr inbounds %struct.TYPE_10__, %struct.TYPE_10__* %138, i32 0, i32 0
  %140 = load i32*, i32** %139, align 8
  %141 = getelementptr inbounds i32, i32* %140, i64 1
  %142 = load i32, i32* %141, align 4
  %143 = add nsw i32 %134, %142
  %144 = trunc i32 %143 to i16
  %145 = call i32 @outpw(i32 %125, i16 zeroext %144)
  %146 = load i32, i32* @FM_TREQ1, align 4
  %147 = call i32 @FM_A(i32 %146)
  %148 = load i64, i64* %3, align 8
  %149 = ashr i64 %148, 16
  %150 = trunc i64 %149 to i16
  %151 = call i32 @outpw(i32 %147, i16 zeroext %150)
  %152 = load i32, i32* @FM_TREQ0, align 4
  %153 = call i32 @FM_A(i32 %152)
  %154 = load i64, i64* %3, align 8
  %155 = trunc i64 %154 to i16
  %156 = call i32 @outpw(i32 %153, i16 zeroext %155)
  ret void
}

declare dso_local i32 @outpw(i32, i16 zeroext) #1

declare dso_local i32 @FM_A(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
