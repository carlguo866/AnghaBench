; ModuleID = '/home/carl/AnghaBench/linux/drivers/net/wireless/ralink/rt2x00/extr_rt2800mmio.c_rt2800mmio_init_queues.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/net/wireless/ralink/rt2x00/extr_rt2800mmio.c_rt2800mmio_init_queues.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.rt2x00_dev = type { %struct.TYPE_8__*, %struct.TYPE_6__* }
%struct.TYPE_8__ = type { i64, %struct.TYPE_7__* }
%struct.TYPE_7__ = type { %struct.queue_entry_priv_mmio* }
%struct.queue_entry_priv_mmio = type { i64 }
%struct.TYPE_6__ = type { i64, %struct.TYPE_5__* }
%struct.TYPE_5__ = type { %struct.queue_entry_priv_mmio* }

@TX_BASE_PTR0 = common dso_local global i32 0, align 4
@TX_MAX_CNT0 = common dso_local global i32 0, align 4
@TX_CTX_IDX0 = common dso_local global i32 0, align 4
@TX_DTX_IDX0 = common dso_local global i32 0, align 4
@TX_BASE_PTR1 = common dso_local global i32 0, align 4
@TX_MAX_CNT1 = common dso_local global i32 0, align 4
@TX_CTX_IDX1 = common dso_local global i32 0, align 4
@TX_DTX_IDX1 = common dso_local global i32 0, align 4
@TX_BASE_PTR2 = common dso_local global i32 0, align 4
@TX_MAX_CNT2 = common dso_local global i32 0, align 4
@TX_CTX_IDX2 = common dso_local global i32 0, align 4
@TX_DTX_IDX2 = common dso_local global i32 0, align 4
@TX_BASE_PTR3 = common dso_local global i32 0, align 4
@TX_MAX_CNT3 = common dso_local global i32 0, align 4
@TX_CTX_IDX3 = common dso_local global i32 0, align 4
@TX_DTX_IDX3 = common dso_local global i32 0, align 4
@TX_BASE_PTR4 = common dso_local global i32 0, align 4
@TX_MAX_CNT4 = common dso_local global i32 0, align 4
@TX_CTX_IDX4 = common dso_local global i32 0, align 4
@TX_DTX_IDX4 = common dso_local global i32 0, align 4
@TX_BASE_PTR5 = common dso_local global i32 0, align 4
@TX_MAX_CNT5 = common dso_local global i32 0, align 4
@TX_CTX_IDX5 = common dso_local global i32 0, align 4
@TX_DTX_IDX5 = common dso_local global i32 0, align 4
@RX_BASE_PTR = common dso_local global i32 0, align 4
@RX_MAX_CNT = common dso_local global i32 0, align 4
@RX_CRX_IDX = common dso_local global i32 0, align 4
@RX_DRX_IDX = common dso_local global i32 0, align 4
@DELAY_INT_CFG = common dso_local global i32 0, align 4

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @rt2800mmio_init_queues(%struct.rt2x00_dev* %0) #0 {
  %2 = alloca %struct.rt2x00_dev*, align 8
  %3 = alloca %struct.queue_entry_priv_mmio*, align 8
  store %struct.rt2x00_dev* %0, %struct.rt2x00_dev** %2, align 8
  %4 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %5 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %4, i32 0, i32 1
  %6 = load %struct.TYPE_6__*, %struct.TYPE_6__** %5, align 8
  %7 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %6, i64 0
  %8 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %7, i32 0, i32 1
  %9 = load %struct.TYPE_5__*, %struct.TYPE_5__** %8, align 8
  %10 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %9, i64 0
  %11 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %10, i32 0, i32 0
  %12 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %11, align 8
  store %struct.queue_entry_priv_mmio* %12, %struct.queue_entry_priv_mmio** %3, align 8
  %13 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %14 = load i32, i32* @TX_BASE_PTR0, align 4
  %15 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %3, align 8
  %16 = getelementptr inbounds %struct.queue_entry_priv_mmio, %struct.queue_entry_priv_mmio* %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %13, i32 %14, i64 %17)
  %19 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %20 = load i32, i32* @TX_MAX_CNT0, align 4
  %21 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %22 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %21, i32 0, i32 1
  %23 = load %struct.TYPE_6__*, %struct.TYPE_6__** %22, align 8
  %24 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %23, i64 0
  %25 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %24, i32 0, i32 0
  %26 = load i64, i64* %25, align 8
  %27 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %19, i32 %20, i64 %26)
  %28 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %29 = load i32, i32* @TX_CTX_IDX0, align 4
  %30 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %28, i32 %29, i64 0)
  %31 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %32 = load i32, i32* @TX_DTX_IDX0, align 4
  %33 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %31, i32 %32, i64 0)
  %34 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %35 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %34, i32 0, i32 1
  %36 = load %struct.TYPE_6__*, %struct.TYPE_6__** %35, align 8
  %37 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %36, i64 1
  %38 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %37, i32 0, i32 1
  %39 = load %struct.TYPE_5__*, %struct.TYPE_5__** %38, align 8
  %40 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %39, i64 0
  %41 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %40, i32 0, i32 0
  %42 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %41, align 8
  store %struct.queue_entry_priv_mmio* %42, %struct.queue_entry_priv_mmio** %3, align 8
  %43 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %44 = load i32, i32* @TX_BASE_PTR1, align 4
  %45 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %3, align 8
  %46 = getelementptr inbounds %struct.queue_entry_priv_mmio, %struct.queue_entry_priv_mmio* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %43, i32 %44, i64 %47)
  %49 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %50 = load i32, i32* @TX_MAX_CNT1, align 4
  %51 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %52 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %51, i32 0, i32 1
  %53 = load %struct.TYPE_6__*, %struct.TYPE_6__** %52, align 8
  %54 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %53, i64 1
  %55 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %54, i32 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %49, i32 %50, i64 %56)
  %58 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %59 = load i32, i32* @TX_CTX_IDX1, align 4
  %60 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %58, i32 %59, i64 0)
  %61 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %62 = load i32, i32* @TX_DTX_IDX1, align 4
  %63 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %61, i32 %62, i64 0)
  %64 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %65 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %64, i32 0, i32 1
  %66 = load %struct.TYPE_6__*, %struct.TYPE_6__** %65, align 8
  %67 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %66, i64 2
  %68 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %67, i32 0, i32 1
  %69 = load %struct.TYPE_5__*, %struct.TYPE_5__** %68, align 8
  %70 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %69, i64 0
  %71 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %70, i32 0, i32 0
  %72 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %71, align 8
  store %struct.queue_entry_priv_mmio* %72, %struct.queue_entry_priv_mmio** %3, align 8
  %73 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %74 = load i32, i32* @TX_BASE_PTR2, align 4
  %75 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %3, align 8
  %76 = getelementptr inbounds %struct.queue_entry_priv_mmio, %struct.queue_entry_priv_mmio* %75, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %73, i32 %74, i64 %77)
  %79 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %80 = load i32, i32* @TX_MAX_CNT2, align 4
  %81 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %82 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %81, i32 0, i32 1
  %83 = load %struct.TYPE_6__*, %struct.TYPE_6__** %82, align 8
  %84 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %83, i64 2
  %85 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %84, i32 0, i32 0
  %86 = load i64, i64* %85, align 8
  %87 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %79, i32 %80, i64 %86)
  %88 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %89 = load i32, i32* @TX_CTX_IDX2, align 4
  %90 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %88, i32 %89, i64 0)
  %91 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %92 = load i32, i32* @TX_DTX_IDX2, align 4
  %93 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %91, i32 %92, i64 0)
  %94 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %95 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %94, i32 0, i32 1
  %96 = load %struct.TYPE_6__*, %struct.TYPE_6__** %95, align 8
  %97 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %96, i64 3
  %98 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %97, i32 0, i32 1
  %99 = load %struct.TYPE_5__*, %struct.TYPE_5__** %98, align 8
  %100 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %99, i64 0
  %101 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %100, i32 0, i32 0
  %102 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %101, align 8
  store %struct.queue_entry_priv_mmio* %102, %struct.queue_entry_priv_mmio** %3, align 8
  %103 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %104 = load i32, i32* @TX_BASE_PTR3, align 4
  %105 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %3, align 8
  %106 = getelementptr inbounds %struct.queue_entry_priv_mmio, %struct.queue_entry_priv_mmio* %105, i32 0, i32 0
  %107 = load i64, i64* %106, align 8
  %108 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %103, i32 %104, i64 %107)
  %109 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %110 = load i32, i32* @TX_MAX_CNT3, align 4
  %111 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %112 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %111, i32 0, i32 1
  %113 = load %struct.TYPE_6__*, %struct.TYPE_6__** %112, align 8
  %114 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %113, i64 3
  %115 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %114, i32 0, i32 0
  %116 = load i64, i64* %115, align 8
  %117 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %109, i32 %110, i64 %116)
  %118 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %119 = load i32, i32* @TX_CTX_IDX3, align 4
  %120 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %118, i32 %119, i64 0)
  %121 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %122 = load i32, i32* @TX_DTX_IDX3, align 4
  %123 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %121, i32 %122, i64 0)
  %124 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %125 = load i32, i32* @TX_BASE_PTR4, align 4
  %126 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %124, i32 %125, i64 0)
  %127 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %128 = load i32, i32* @TX_MAX_CNT4, align 4
  %129 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %127, i32 %128, i64 0)
  %130 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %131 = load i32, i32* @TX_CTX_IDX4, align 4
  %132 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %130, i32 %131, i64 0)
  %133 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %134 = load i32, i32* @TX_DTX_IDX4, align 4
  %135 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %133, i32 %134, i64 0)
  %136 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %137 = load i32, i32* @TX_BASE_PTR5, align 4
  %138 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %136, i32 %137, i64 0)
  %139 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %140 = load i32, i32* @TX_MAX_CNT5, align 4
  %141 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %139, i32 %140, i64 0)
  %142 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %143 = load i32, i32* @TX_CTX_IDX5, align 4
  %144 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %142, i32 %143, i64 0)
  %145 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %146 = load i32, i32* @TX_DTX_IDX5, align 4
  %147 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %145, i32 %146, i64 0)
  %148 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %149 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %148, i32 0, i32 0
  %150 = load %struct.TYPE_8__*, %struct.TYPE_8__** %149, align 8
  %151 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %150, i32 0, i32 1
  %152 = load %struct.TYPE_7__*, %struct.TYPE_7__** %151, align 8
  %153 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %152, i64 0
  %154 = getelementptr inbounds %struct.TYPE_7__, %struct.TYPE_7__* %153, i32 0, i32 0
  %155 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %154, align 8
  store %struct.queue_entry_priv_mmio* %155, %struct.queue_entry_priv_mmio** %3, align 8
  %156 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %157 = load i32, i32* @RX_BASE_PTR, align 4
  %158 = load %struct.queue_entry_priv_mmio*, %struct.queue_entry_priv_mmio** %3, align 8
  %159 = getelementptr inbounds %struct.queue_entry_priv_mmio, %struct.queue_entry_priv_mmio* %158, i32 0, i32 0
  %160 = load i64, i64* %159, align 8
  %161 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %156, i32 %157, i64 %160)
  %162 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %163 = load i32, i32* @RX_MAX_CNT, align 4
  %164 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %165 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %164, i32 0, i32 0
  %166 = load %struct.TYPE_8__*, %struct.TYPE_8__** %165, align 8
  %167 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %166, i64 0
  %168 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %167, i32 0, i32 0
  %169 = load i64, i64* %168, align 8
  %170 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %162, i32 %163, i64 %169)
  %171 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %172 = load i32, i32* @RX_CRX_IDX, align 4
  %173 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %174 = getelementptr inbounds %struct.rt2x00_dev, %struct.rt2x00_dev* %173, i32 0, i32 0
  %175 = load %struct.TYPE_8__*, %struct.TYPE_8__** %174, align 8
  %176 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %175, i64 0
  %177 = getelementptr inbounds %struct.TYPE_8__, %struct.TYPE_8__* %176, i32 0, i32 0
  %178 = load i64, i64* %177, align 8
  %179 = sub nsw i64 %178, 1
  %180 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %171, i32 %172, i64 %179)
  %181 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %182 = load i32, i32* @RX_DRX_IDX, align 4
  %183 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %181, i32 %182, i64 0)
  %184 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %185 = call i32 @rt2800_disable_wpdma(%struct.rt2x00_dev* %184)
  %186 = load %struct.rt2x00_dev*, %struct.rt2x00_dev** %2, align 8
  %187 = load i32, i32* @DELAY_INT_CFG, align 4
  %188 = call i32 @rt2x00mmio_register_write(%struct.rt2x00_dev* %186, i32 %187, i64 0)
  ret i32 0
}

declare dso_local i32 @rt2x00mmio_register_write(%struct.rt2x00_dev*, i32, i64) #1

declare dso_local i32 @rt2800_disable_wpdma(%struct.rt2x00_dev*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
