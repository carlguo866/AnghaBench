; ModuleID = '/home/carl/AnghaBench/linux/drivers/net/ethernet/atheros/atlx/extr_atl2.c_atl2_configure.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/net/ethernet/atheros/atlx/extr_atl2.c_atl2_configure.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.atl2_adapter = type { i32, i32, i32, i32, i32, %struct.atl2_hw, i64, i64, %struct.TYPE_2__*, i32, i32, i64, i64 }
%struct.atl2_hw = type { i32, i32, i64, i64, i64, i64, i64, i64, i64, i64* }
%struct.TYPE_2__ = type { i32 }

@REG_ISR = common dso_local global i64 0, align 8
@REG_MAC_STA_ADDR = common dso_local global i64 0, align 8
@REG_DESC_BASE_ADDR_HI = common dso_local global i64 0, align 8
@REG_TXD_BASE_ADDR_LO = common dso_local global i64 0, align 8
@REG_TXS_BASE_ADDR_LO = common dso_local global i64 0, align 8
@REG_RXD_BASE_ADDR_LO = common dso_local global i64 0, align 8
@REG_TXD_MEM_SIZE = common dso_local global i32 0, align 4
@REG_TXS_MEM_SIZE = common dso_local global i32 0, align 4
@REG_RXD_BUF_NUM = common dso_local global i32 0, align 4
@MAC_IPG_IFG_IPGT_MASK = common dso_local global i32 0, align 4
@MAC_IPG_IFG_IPGT_SHIFT = common dso_local global i32 0, align 4
@MAC_IPG_IFG_MIFG_MASK = common dso_local global i32 0, align 4
@MAC_IPG_IFG_MIFG_SHIFT = common dso_local global i32 0, align 4
@MAC_IPG_IFG_IPGR1_MASK = common dso_local global i32 0, align 4
@MAC_IPG_IFG_IPGR1_SHIFT = common dso_local global i32 0, align 4
@MAC_IPG_IFG_IPGR2_MASK = common dso_local global i32 0, align 4
@MAC_IPG_IFG_IPGR2_SHIFT = common dso_local global i32 0, align 4
@REG_MAC_IPG_IFG = common dso_local global i64 0, align 8
@MAC_HALF_DUPLX_CTRL_LCOL_MASK = common dso_local global i32 0, align 4
@MAC_HALF_DUPLX_CTRL_RETRY_MASK = common dso_local global i32 0, align 4
@MAC_HALF_DUPLX_CTRL_RETRY_SHIFT = common dso_local global i32 0, align 4
@MAC_HALF_DUPLX_CTRL_EXC_DEF_EN = common dso_local global i32 0, align 4
@MAC_HALF_DUPLX_CTRL_ABEBT_SHIFT = common dso_local global i32 0, align 4
@MAC_HALF_DUPLX_CTRL_JAMIPG_MASK = common dso_local global i32 0, align 4
@MAC_HALF_DUPLX_CTRL_JAMIPG_SHIFT = common dso_local global i32 0, align 4
@REG_MAC_HALF_DUPLX_CTRL = common dso_local global i64 0, align 8
@REG_IRQ_MODU_TIMER_INIT = common dso_local global i32 0, align 4
@REG_MASTER_CTRL = common dso_local global i64 0, align 8
@MASTER_CTRL_ITIMER_EN = common dso_local global i32 0, align 4
@REG_CMBDISDMA_TIMER = common dso_local global i32 0, align 4
@REG_MTU = common dso_local global i64 0, align 8
@ETH_HLEN = common dso_local global i32 0, align 4
@VLAN_HLEN = common dso_local global i32 0, align 4
@ETH_FCS_LEN = common dso_local global i32 0, align 4
@REG_TX_CUT_THRESH = common dso_local global i64 0, align 8
@REG_PAUSE_ON_TH = common dso_local global i32 0, align 4
@REG_PAUSE_OFF_TH = common dso_local global i32 0, align 4
@REG_MB_TXD_WR_IDX = common dso_local global i32 0, align 4
@REG_MB_RXD_RD_IDX = common dso_local global i32 0, align 4
@REG_DMAR = common dso_local global i32 0, align 4
@DMAR_EN = common dso_local global i32 0, align 4
@REG_DMAW = common dso_local global i32 0, align 4
@DMAW_EN = common dso_local global i32 0, align 4
@ISR_PHY_LINKDOWN = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.atl2_adapter*)* @atl2_configure to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @atl2_configure(%struct.atl2_adapter* %0) #0 {
  %2 = alloca %struct.atl2_adapter*, align 8
  %3 = alloca %struct.atl2_hw*, align 8
  %4 = alloca i32, align 4
  store %struct.atl2_adapter* %0, %struct.atl2_adapter** %2, align 8
  %5 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %6 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %5, i32 0, i32 5
  store %struct.atl2_hw* %6, %struct.atl2_hw** %3, align 8
  %7 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %8 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %7, i32 0, i32 5
  %9 = load i64, i64* @REG_ISR, align 8
  %10 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %8, i64 %9, i32 -1)
  %11 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %12 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %11, i32 0, i32 9
  %13 = load i64*, i64** %12, align 8
  %14 = getelementptr inbounds i64, i64* %13, i64 2
  %15 = load i64, i64* %14, align 8
  %16 = trunc i64 %15 to i32
  %17 = shl i32 %16, 24
  %18 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %19 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %18, i32 0, i32 9
  %20 = load i64*, i64** %19, align 8
  %21 = getelementptr inbounds i64, i64* %20, i64 3
  %22 = load i64, i64* %21, align 8
  %23 = trunc i64 %22 to i32
  %24 = shl i32 %23, 16
  %25 = or i32 %17, %24
  %26 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %27 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %26, i32 0, i32 9
  %28 = load i64*, i64** %27, align 8
  %29 = getelementptr inbounds i64, i64* %28, i64 4
  %30 = load i64, i64* %29, align 8
  %31 = trunc i64 %30 to i32
  %32 = shl i32 %31, 8
  %33 = or i32 %25, %32
  %34 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %35 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %34, i32 0, i32 9
  %36 = load i64*, i64** %35, align 8
  %37 = getelementptr inbounds i64, i64* %36, i64 5
  %38 = load i64, i64* %37, align 8
  %39 = trunc i64 %38 to i32
  %40 = or i32 %33, %39
  store i32 %40, i32* %4, align 4
  %41 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %42 = load i64, i64* @REG_MAC_STA_ADDR, align 8
  %43 = load i32, i32* %4, align 4
  %44 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %41, i64 %42, i32 %43)
  %45 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %46 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %45, i32 0, i32 9
  %47 = load i64*, i64** %46, align 8
  %48 = getelementptr inbounds i64, i64* %47, i64 0
  %49 = load i64, i64* %48, align 8
  %50 = trunc i64 %49 to i32
  %51 = shl i32 %50, 8
  %52 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %53 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %52, i32 0, i32 9
  %54 = load i64*, i64** %53, align 8
  %55 = getelementptr inbounds i64, i64* %54, i64 1
  %56 = load i64, i64* %55, align 8
  %57 = trunc i64 %56 to i32
  %58 = or i32 %51, %57
  store i32 %58, i32* %4, align 4
  %59 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %60 = load i64, i64* @REG_MAC_STA_ADDR, align 8
  %61 = add nsw i64 %60, 4
  %62 = load i32, i32* %4, align 4
  %63 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %59, i64 %61, i32 %62)
  %64 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %65 = load i64, i64* @REG_DESC_BASE_ADDR_HI, align 8
  %66 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %67 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %66, i32 0, i32 0
  %68 = load i32, i32* %67, align 8
  %69 = sext i32 %68 to i64
  %70 = and i64 %69, -4294967296
  %71 = lshr i64 %70, 32
  %72 = trunc i64 %71 to i32
  %73 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %64, i64 %65, i32 %72)
  %74 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %75 = load i64, i64* @REG_TXD_BASE_ADDR_LO, align 8
  %76 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %77 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %76, i32 0, i32 1
  %78 = load i32, i32* %77, align 4
  %79 = sext i32 %78 to i64
  %80 = and i64 %79, 4294967295
  %81 = trunc i64 %80 to i32
  %82 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %74, i64 %75, i32 %81)
  %83 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %84 = load i64, i64* @REG_TXS_BASE_ADDR_LO, align 8
  %85 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %86 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %85, i32 0, i32 2
  %87 = load i32, i32* %86, align 8
  %88 = sext i32 %87 to i64
  %89 = and i64 %88, 4294967295
  %90 = trunc i64 %89 to i32
  %91 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %83, i64 %84, i32 %90)
  %92 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %93 = load i64, i64* @REG_RXD_BASE_ADDR_LO, align 8
  %94 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %95 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %94, i32 0, i32 3
  %96 = load i32, i32* %95, align 4
  %97 = sext i32 %96 to i64
  %98 = and i64 %97, 4294967295
  %99 = trunc i64 %98 to i32
  %100 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %92, i64 %93, i32 %99)
  %101 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %102 = load i32, i32* @REG_TXD_MEM_SIZE, align 4
  %103 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %104 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %103, i32 0, i32 4
  %105 = load i32, i32* %104, align 8
  %106 = sdiv i32 %105, 4
  %107 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %101, i32 %102, i32 %106)
  %108 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %109 = load i32, i32* @REG_TXS_MEM_SIZE, align 4
  %110 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %111 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %110, i32 0, i32 12
  %112 = load i64, i64* %111, align 8
  %113 = trunc i64 %112 to i32
  %114 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %108, i32 %109, i32 %113)
  %115 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %116 = load i32, i32* @REG_RXD_BUF_NUM, align 4
  %117 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %118 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %117, i32 0, i32 11
  %119 = load i64, i64* %118, align 8
  %120 = trunc i64 %119 to i32
  %121 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %115, i32 %116, i32 %120)
  %122 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %123 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %122, i32 0, i32 8
  %124 = load i64, i64* %123, align 8
  %125 = trunc i64 %124 to i32
  %126 = load i32, i32* @MAC_IPG_IFG_IPGT_MASK, align 4
  %127 = and i32 %125, %126
  %128 = load i32, i32* @MAC_IPG_IFG_IPGT_SHIFT, align 4
  %129 = shl i32 %127, %128
  %130 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %131 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %130, i32 0, i32 7
  %132 = load i64, i64* %131, align 8
  %133 = trunc i64 %132 to i32
  %134 = load i32, i32* @MAC_IPG_IFG_MIFG_MASK, align 4
  %135 = and i32 %133, %134
  %136 = load i32, i32* @MAC_IPG_IFG_MIFG_SHIFT, align 4
  %137 = shl i32 %135, %136
  %138 = or i32 %129, %137
  %139 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %140 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %139, i32 0, i32 6
  %141 = load i64, i64* %140, align 8
  %142 = trunc i64 %141 to i32
  %143 = load i32, i32* @MAC_IPG_IFG_IPGR1_MASK, align 4
  %144 = and i32 %142, %143
  %145 = load i32, i32* @MAC_IPG_IFG_IPGR1_SHIFT, align 4
  %146 = shl i32 %144, %145
  %147 = or i32 %138, %146
  %148 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %149 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %148, i32 0, i32 5
  %150 = load i64, i64* %149, align 8
  %151 = trunc i64 %150 to i32
  %152 = load i32, i32* @MAC_IPG_IFG_IPGR2_MASK, align 4
  %153 = and i32 %151, %152
  %154 = load i32, i32* @MAC_IPG_IFG_IPGR2_SHIFT, align 4
  %155 = shl i32 %153, %154
  %156 = or i32 %147, %155
  store i32 %156, i32* %4, align 4
  %157 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %158 = load i64, i64* @REG_MAC_IPG_IFG, align 8
  %159 = load i32, i32* %4, align 4
  %160 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %157, i64 %158, i32 %159)
  %161 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %162 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %161, i32 0, i32 4
  %163 = load i64, i64* %162, align 8
  %164 = trunc i64 %163 to i32
  %165 = load i32, i32* @MAC_HALF_DUPLX_CTRL_LCOL_MASK, align 4
  %166 = and i32 %164, %165
  %167 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %168 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %167, i32 0, i32 3
  %169 = load i64, i64* %168, align 8
  %170 = trunc i64 %169 to i32
  %171 = load i32, i32* @MAC_HALF_DUPLX_CTRL_RETRY_MASK, align 4
  %172 = and i32 %170, %171
  %173 = load i32, i32* @MAC_HALF_DUPLX_CTRL_RETRY_SHIFT, align 4
  %174 = shl i32 %172, %173
  %175 = or i32 %166, %174
  %176 = load i32, i32* @MAC_HALF_DUPLX_CTRL_EXC_DEF_EN, align 4
  %177 = or i32 %175, %176
  %178 = load i32, i32* @MAC_HALF_DUPLX_CTRL_ABEBT_SHIFT, align 4
  %179 = shl i32 10, %178
  %180 = or i32 %177, %179
  %181 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %182 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %181, i32 0, i32 2
  %183 = load i64, i64* %182, align 8
  %184 = trunc i64 %183 to i32
  %185 = load i32, i32* @MAC_HALF_DUPLX_CTRL_JAMIPG_MASK, align 4
  %186 = and i32 %184, %185
  %187 = load i32, i32* @MAC_HALF_DUPLX_CTRL_JAMIPG_SHIFT, align 4
  %188 = shl i32 %186, %187
  %189 = or i32 %180, %188
  store i32 %189, i32* %4, align 4
  %190 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %191 = load i64, i64* @REG_MAC_HALF_DUPLX_CTRL, align 8
  %192 = load i32, i32* %4, align 4
  %193 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %190, i64 %191, i32 %192)
  %194 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %195 = load i32, i32* @REG_IRQ_MODU_TIMER_INIT, align 4
  %196 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %197 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %196, i32 0, i32 10
  %198 = load i32, i32* %197, align 4
  %199 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %194, i32 %195, i32 %198)
  %200 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %201 = load i64, i64* @REG_MASTER_CTRL, align 8
  %202 = load i32, i32* @MASTER_CTRL_ITIMER_EN, align 4
  %203 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %200, i64 %201, i32 %202)
  %204 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %205 = load i32, i32* @REG_CMBDISDMA_TIMER, align 4
  %206 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %207 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %206, i32 0, i32 9
  %208 = load i32, i32* %207, align 8
  %209 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %204, i32 %205, i32 %208)
  %210 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %211 = load i64, i64* @REG_MTU, align 8
  %212 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %213 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %212, i32 0, i32 8
  %214 = load %struct.TYPE_2__*, %struct.TYPE_2__** %213, align 8
  %215 = getelementptr inbounds %struct.TYPE_2__, %struct.TYPE_2__* %214, i32 0, i32 0
  %216 = load i32, i32* %215, align 4
  %217 = load i32, i32* @ETH_HLEN, align 4
  %218 = add nsw i32 %216, %217
  %219 = load i32, i32* @VLAN_HLEN, align 4
  %220 = add nsw i32 %218, %219
  %221 = load i32, i32* @ETH_FCS_LEN, align 4
  %222 = add nsw i32 %220, %221
  %223 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %210, i64 %211, i32 %222)
  %224 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %225 = load i64, i64* @REG_TX_CUT_THRESH, align 8
  %226 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %224, i64 %225, i32 375)
  %227 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %228 = load i32, i32* @REG_PAUSE_ON_TH, align 4
  %229 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %230 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %229, i32 0, i32 1
  %231 = load i32, i32* %230, align 4
  %232 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %227, i32 %228, i32 %231)
  %233 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %234 = load i32, i32* @REG_PAUSE_OFF_TH, align 4
  %235 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %236 = getelementptr inbounds %struct.atl2_hw, %struct.atl2_hw* %235, i32 0, i32 0
  %237 = load i32, i32* %236, align 8
  %238 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %233, i32 %234, i32 %237)
  %239 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %240 = load i32, i32* @REG_MB_TXD_WR_IDX, align 4
  %241 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %242 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %241, i32 0, i32 7
  %243 = load i64, i64* %242, align 8
  %244 = trunc i64 %243 to i32
  %245 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %239, i32 %240, i32 %244)
  %246 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %247 = load i32, i32* @REG_MB_RXD_RD_IDX, align 4
  %248 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %249 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %248, i32 0, i32 6
  %250 = load i64, i64* %249, align 8
  %251 = trunc i64 %250 to i32
  %252 = call i32 @ATL2_WRITE_REGW(%struct.atl2_hw* %246, i32 %247, i32 %251)
  %253 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %254 = load i32, i32* @REG_DMAR, align 4
  %255 = load i32, i32* @DMAR_EN, align 4
  %256 = call i32 @ATL2_WRITE_REGB(%struct.atl2_hw* %253, i32 %254, i32 %255)
  %257 = load %struct.atl2_hw*, %struct.atl2_hw** %3, align 8
  %258 = load i32, i32* @REG_DMAW, align 4
  %259 = load i32, i32* @DMAW_EN, align 4
  %260 = call i32 @ATL2_WRITE_REGB(%struct.atl2_hw* %257, i32 %258, i32 %259)
  %261 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %262 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %261, i32 0, i32 5
  %263 = load i64, i64* @REG_ISR, align 8
  %264 = call i32 @ATL2_READ_REG(%struct.atl2_hw* %262, i64 %263)
  store i32 %264, i32* %4, align 4
  %265 = load i32, i32* %4, align 4
  %266 = load i32, i32* @ISR_PHY_LINKDOWN, align 4
  %267 = and i32 %265, %266
  %268 = icmp ne i32 %267, 0
  br i1 %268, label %269, label %270

269:                                              ; preds = %1
  store i32 1, i32* %4, align 4
  br label %271

270:                                              ; preds = %1
  store i32 0, i32* %4, align 4
  br label %271

271:                                              ; preds = %270, %269
  %272 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %273 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %272, i32 0, i32 5
  %274 = load i64, i64* @REG_ISR, align 8
  %275 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %273, i64 %274, i32 1073741823)
  %276 = load %struct.atl2_adapter*, %struct.atl2_adapter** %2, align 8
  %277 = getelementptr inbounds %struct.atl2_adapter, %struct.atl2_adapter* %276, i32 0, i32 5
  %278 = load i64, i64* @REG_ISR, align 8
  %279 = call i32 @ATL2_WRITE_REG(%struct.atl2_hw* %277, i64 %278, i32 0)
  %280 = load i32, i32* %4, align 4
  ret i32 %280
}

declare dso_local i32 @ATL2_WRITE_REG(%struct.atl2_hw*, i64, i32) #1

declare dso_local i32 @ATL2_WRITE_REGW(%struct.atl2_hw*, i32, i32) #1

declare dso_local i32 @ATL2_WRITE_REGB(%struct.atl2_hw*, i32, i32) #1

declare dso_local i32 @ATL2_READ_REG(%struct.atl2_hw*, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
