; ModuleID = '/home/carl/AnghaBench/linux/drivers/net/ethernet/hisilicon/hns3/hns3pf/extr_hclge_debugfs.c_hclge_dbg_dump_rst_info.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/net/ethernet/hisilicon/hns3/hns3pf/extr_hclge_debugfs.c_hclge_dbg_dump_rst_info.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hclge_dev = type { i32, %struct.TYPE_4__*, %struct.TYPE_3__ }
%struct.TYPE_4__ = type { i32 }
%struct.TYPE_3__ = type { i32, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [20 x i8] c"PF reset count: %u\0A\00", align 1
@.str.1 = private unnamed_addr constant [21 x i8] c"FLR reset count: %u\0A\00", align 1
@.str.2 = private unnamed_addr constant [24 x i8] c"GLOBAL reset count: %u\0A\00", align 1
@.str.3 = private unnamed_addr constant [21 x i8] c"IMP reset count: %u\0A\00", align 1
@.str.4 = private unnamed_addr constant [22 x i8] c"reset done count: %u\0A\00", align 1
@.str.5 = private unnamed_addr constant [25 x i8] c"HW reset done count: %u\0A\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"reset count: %u\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c"reset fail count: %u\0A\00", align 1
@.str.8 = private unnamed_addr constant [39 x i8] c"vector0 interrupt enable status: 0x%x\0A\00", align 1
@HCLGE_MISC_VECTOR_REG_BASE = common dso_local global i32 0, align 4
@.str.9 = private unnamed_addr constant [30 x i8] c"reset interrupt source: 0x%x\0A\00", align 1
@HCLGE_MISC_RESET_STS_REG = common dso_local global i32 0, align 4
@.str.10 = private unnamed_addr constant [30 x i8] c"reset interrupt status: 0x%x\0A\00", align 1
@HCLGE_MISC_VECTOR_INT_STS = common dso_local global i32 0, align 4
@.str.11 = private unnamed_addr constant [29 x i8] c"hardware reset status: 0x%x\0A\00", align 1
@HCLGE_GLOBAL_RESET_REG = common dso_local global i32 0, align 4
@.str.12 = private unnamed_addr constant [24 x i8] c"handshake status: 0x%x\0A\00", align 1
@HCLGE_NIC_CSQ_DEPTH_REG = common dso_local global i32 0, align 4
@.str.13 = private unnamed_addr constant [29 x i8] c"function reset status: 0x%x\0A\00", align 1
@HCLGE_FUN_RST_ING = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.hclge_dev*)* @hclge_dbg_dump_rst_info to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @hclge_dbg_dump_rst_info(%struct.hclge_dev* %0) #0 {
  %2 = alloca %struct.hclge_dev*, align 8
  store %struct.hclge_dev* %0, %struct.hclge_dev** %2, align 8
  %3 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %4 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %3, i32 0, i32 1
  %5 = load %struct.TYPE_4__*, %struct.TYPE_4__** %4, align 8
  %6 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %5, i32 0, i32 0
  %7 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %8 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %7, i32 0, i32 2
  %9 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %8, i32 0, i32 7
  %10 = load i32, i32* %9, align 4
  %11 = call i32 @dev_info(i32* %6, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str, i64 0, i64 0), i32 %10)
  %12 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %13 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %12, i32 0, i32 1
  %14 = load %struct.TYPE_4__*, %struct.TYPE_4__** %13, align 8
  %15 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %14, i32 0, i32 0
  %16 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %17 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %16, i32 0, i32 2
  %18 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %17, i32 0, i32 6
  %19 = load i32, i32* %18, align 8
  %20 = call i32 @dev_info(i32* %15, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.1, i64 0, i64 0), i32 %19)
  %21 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %22 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %21, i32 0, i32 1
  %23 = load %struct.TYPE_4__*, %struct.TYPE_4__** %22, align 8
  %24 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %23, i32 0, i32 0
  %25 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %26 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %25, i32 0, i32 2
  %27 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %26, i32 0, i32 5
  %28 = load i32, i32* %27, align 4
  %29 = call i32 @dev_info(i32* %24, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.2, i64 0, i64 0), i32 %28)
  %30 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %31 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %30, i32 0, i32 1
  %32 = load %struct.TYPE_4__*, %struct.TYPE_4__** %31, align 8
  %33 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %32, i32 0, i32 0
  %34 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %35 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %34, i32 0, i32 2
  %36 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %35, i32 0, i32 4
  %37 = load i32, i32* %36, align 8
  %38 = call i32 @dev_info(i32* %33, i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.3, i64 0, i64 0), i32 %37)
  %39 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %40 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %39, i32 0, i32 1
  %41 = load %struct.TYPE_4__*, %struct.TYPE_4__** %40, align 8
  %42 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %41, i32 0, i32 0
  %43 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %44 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %43, i32 0, i32 2
  %45 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %44, i32 0, i32 3
  %46 = load i32, i32* %45, align 4
  %47 = call i32 @dev_info(i32* %42, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.4, i64 0, i64 0), i32 %46)
  %48 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %49 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %48, i32 0, i32 1
  %50 = load %struct.TYPE_4__*, %struct.TYPE_4__** %49, align 8
  %51 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %50, i32 0, i32 0
  %52 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %53 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %52, i32 0, i32 2
  %54 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %53, i32 0, i32 2
  %55 = load i32, i32* %54, align 8
  %56 = call i32 @dev_info(i32* %51, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.5, i64 0, i64 0), i32 %55)
  %57 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %58 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %57, i32 0, i32 1
  %59 = load %struct.TYPE_4__*, %struct.TYPE_4__** %58, align 8
  %60 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %59, i32 0, i32 0
  %61 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %62 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %61, i32 0, i32 2
  %63 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %62, i32 0, i32 1
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @dev_info(i32* %60, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i32 %64)
  %66 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %67 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %66, i32 0, i32 1
  %68 = load %struct.TYPE_4__*, %struct.TYPE_4__** %67, align 8
  %69 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %68, i32 0, i32 0
  %70 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %71 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %70, i32 0, i32 2
  %72 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %71, i32 0, i32 1
  %73 = load i32, i32* %72, align 4
  %74 = call i32 @dev_info(i32* %69, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i64 0, i64 0), i32 %73)
  %75 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %76 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %75, i32 0, i32 1
  %77 = load %struct.TYPE_4__*, %struct.TYPE_4__** %76, align 8
  %78 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %77, i32 0, i32 0
  %79 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %80 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %79, i32 0, i32 2
  %81 = getelementptr inbounds %struct.TYPE_3__, %struct.TYPE_3__* %80, i32 0, i32 0
  %82 = load i32, i32* %81, align 8
  %83 = call i32 @dev_info(i32* %78, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i64 0, i64 0), i32 %82)
  %84 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %85 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %84, i32 0, i32 1
  %86 = load %struct.TYPE_4__*, %struct.TYPE_4__** %85, align 8
  %87 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %86, i32 0, i32 0
  %88 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %89 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %88, i32 0, i32 0
  %90 = load i32, i32* @HCLGE_MISC_VECTOR_REG_BASE, align 4
  %91 = call i32 @hclge_read_dev(i32* %89, i32 %90)
  %92 = call i32 @dev_info(i32* %87, i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.8, i64 0, i64 0), i32 %91)
  %93 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %94 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %93, i32 0, i32 1
  %95 = load %struct.TYPE_4__*, %struct.TYPE_4__** %94, align 8
  %96 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %95, i32 0, i32 0
  %97 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %98 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %97, i32 0, i32 0
  %99 = load i32, i32* @HCLGE_MISC_RESET_STS_REG, align 4
  %100 = call i32 @hclge_read_dev(i32* %98, i32 %99)
  %101 = call i32 @dev_info(i32* %96, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.9, i64 0, i64 0), i32 %100)
  %102 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %103 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %102, i32 0, i32 1
  %104 = load %struct.TYPE_4__*, %struct.TYPE_4__** %103, align 8
  %105 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %104, i32 0, i32 0
  %106 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %107 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %106, i32 0, i32 0
  %108 = load i32, i32* @HCLGE_MISC_VECTOR_INT_STS, align 4
  %109 = call i32 @hclge_read_dev(i32* %107, i32 %108)
  %110 = call i32 @dev_info(i32* %105, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.10, i64 0, i64 0), i32 %109)
  %111 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %112 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %111, i32 0, i32 1
  %113 = load %struct.TYPE_4__*, %struct.TYPE_4__** %112, align 8
  %114 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %113, i32 0, i32 0
  %115 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %116 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %115, i32 0, i32 0
  %117 = load i32, i32* @HCLGE_GLOBAL_RESET_REG, align 4
  %118 = call i32 @hclge_read_dev(i32* %116, i32 %117)
  %119 = call i32 @dev_info(i32* %114, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.11, i64 0, i64 0), i32 %118)
  %120 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %121 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %120, i32 0, i32 1
  %122 = load %struct.TYPE_4__*, %struct.TYPE_4__** %121, align 8
  %123 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %122, i32 0, i32 0
  %124 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %125 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %124, i32 0, i32 0
  %126 = load i32, i32* @HCLGE_NIC_CSQ_DEPTH_REG, align 4
  %127 = call i32 @hclge_read_dev(i32* %125, i32 %126)
  %128 = call i32 @dev_info(i32* %123, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.12, i64 0, i64 0), i32 %127)
  %129 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %130 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %129, i32 0, i32 1
  %131 = load %struct.TYPE_4__*, %struct.TYPE_4__** %130, align 8
  %132 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %131, i32 0, i32 0
  %133 = load %struct.hclge_dev*, %struct.hclge_dev** %2, align 8
  %134 = getelementptr inbounds %struct.hclge_dev, %struct.hclge_dev* %133, i32 0, i32 0
  %135 = load i32, i32* @HCLGE_FUN_RST_ING, align 4
  %136 = call i32 @hclge_read_dev(i32* %134, i32 %135)
  %137 = call i32 @dev_info(i32* %132, i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.13, i64 0, i64 0), i32 %136)
  ret void
}

declare dso_local i32 @dev_info(i32*, i8*, i32) #1

declare dso_local i32 @hclge_read_dev(i32*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
