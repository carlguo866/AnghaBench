; ModuleID = '/home/carl/AnghaBench/linux/drivers/net/ethernet/qlogic/netxen/extr_netxen_nic_init.c_crb_addr_transform_setup.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/net/ethernet/qlogic/netxen/extr_netxen_nic_init.c_crb_addr_transform_setup.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@XDMA = common dso_local global i32 0, align 4
@TIMR = common dso_local global i32 0, align 4
@SRE = common dso_local global i32 0, align 4
@SQN3 = common dso_local global i32 0, align 4
@SQN2 = common dso_local global i32 0, align 4
@SQN1 = common dso_local global i32 0, align 4
@SQN0 = common dso_local global i32 0, align 4
@SQS3 = common dso_local global i32 0, align 4
@SQS2 = common dso_local global i32 0, align 4
@SQS1 = common dso_local global i32 0, align 4
@SQS0 = common dso_local global i32 0, align 4
@RPMX7 = common dso_local global i32 0, align 4
@RPMX6 = common dso_local global i32 0, align 4
@RPMX5 = common dso_local global i32 0, align 4
@RPMX4 = common dso_local global i32 0, align 4
@RPMX3 = common dso_local global i32 0, align 4
@RPMX2 = common dso_local global i32 0, align 4
@RPMX1 = common dso_local global i32 0, align 4
@RPMX0 = common dso_local global i32 0, align 4
@ROMUSB = common dso_local global i32 0, align 4
@SN = common dso_local global i32 0, align 4
@QMN = common dso_local global i32 0, align 4
@QMS = common dso_local global i32 0, align 4
@PGNI = common dso_local global i32 0, align 4
@PGND = common dso_local global i32 0, align 4
@PGN3 = common dso_local global i32 0, align 4
@PGN2 = common dso_local global i32 0, align 4
@PGN1 = common dso_local global i32 0, align 4
@PGN0 = common dso_local global i32 0, align 4
@PGSI = common dso_local global i32 0, align 4
@PGSD = common dso_local global i32 0, align 4
@PGS3 = common dso_local global i32 0, align 4
@PGS2 = common dso_local global i32 0, align 4
@PGS1 = common dso_local global i32 0, align 4
@PGS0 = common dso_local global i32 0, align 4
@PS = common dso_local global i32 0, align 4
@PH = common dso_local global i32 0, align 4
@NIU = common dso_local global i32 0, align 4
@I2Q = common dso_local global i32 0, align 4
@EG = common dso_local global i32 0, align 4
@MN = common dso_local global i32 0, align 4
@MS = common dso_local global i32 0, align 4
@CAS2 = common dso_local global i32 0, align 4
@CAS1 = common dso_local global i32 0, align 4
@CAS0 = common dso_local global i32 0, align 4
@CAM = common dso_local global i32 0, align 4
@C2C1 = common dso_local global i32 0, align 4
@C2C0 = common dso_local global i32 0, align 4
@SMB = common dso_local global i32 0, align 4
@OCM0 = common dso_local global i32 0, align 4
@I2C0 = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @crb_addr_transform_setup to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @crb_addr_transform_setup() #0 {
  %1 = load i32, i32* @XDMA, align 4
  %2 = call i32 @crb_addr_transform(i32 %1)
  %3 = load i32, i32* @TIMR, align 4
  %4 = call i32 @crb_addr_transform(i32 %3)
  %5 = load i32, i32* @SRE, align 4
  %6 = call i32 @crb_addr_transform(i32 %5)
  %7 = load i32, i32* @SQN3, align 4
  %8 = call i32 @crb_addr_transform(i32 %7)
  %9 = load i32, i32* @SQN2, align 4
  %10 = call i32 @crb_addr_transform(i32 %9)
  %11 = load i32, i32* @SQN1, align 4
  %12 = call i32 @crb_addr_transform(i32 %11)
  %13 = load i32, i32* @SQN0, align 4
  %14 = call i32 @crb_addr_transform(i32 %13)
  %15 = load i32, i32* @SQS3, align 4
  %16 = call i32 @crb_addr_transform(i32 %15)
  %17 = load i32, i32* @SQS2, align 4
  %18 = call i32 @crb_addr_transform(i32 %17)
  %19 = load i32, i32* @SQS1, align 4
  %20 = call i32 @crb_addr_transform(i32 %19)
  %21 = load i32, i32* @SQS0, align 4
  %22 = call i32 @crb_addr_transform(i32 %21)
  %23 = load i32, i32* @RPMX7, align 4
  %24 = call i32 @crb_addr_transform(i32 %23)
  %25 = load i32, i32* @RPMX6, align 4
  %26 = call i32 @crb_addr_transform(i32 %25)
  %27 = load i32, i32* @RPMX5, align 4
  %28 = call i32 @crb_addr_transform(i32 %27)
  %29 = load i32, i32* @RPMX4, align 4
  %30 = call i32 @crb_addr_transform(i32 %29)
  %31 = load i32, i32* @RPMX3, align 4
  %32 = call i32 @crb_addr_transform(i32 %31)
  %33 = load i32, i32* @RPMX2, align 4
  %34 = call i32 @crb_addr_transform(i32 %33)
  %35 = load i32, i32* @RPMX1, align 4
  %36 = call i32 @crb_addr_transform(i32 %35)
  %37 = load i32, i32* @RPMX0, align 4
  %38 = call i32 @crb_addr_transform(i32 %37)
  %39 = load i32, i32* @ROMUSB, align 4
  %40 = call i32 @crb_addr_transform(i32 %39)
  %41 = load i32, i32* @SN, align 4
  %42 = call i32 @crb_addr_transform(i32 %41)
  %43 = load i32, i32* @QMN, align 4
  %44 = call i32 @crb_addr_transform(i32 %43)
  %45 = load i32, i32* @QMS, align 4
  %46 = call i32 @crb_addr_transform(i32 %45)
  %47 = load i32, i32* @PGNI, align 4
  %48 = call i32 @crb_addr_transform(i32 %47)
  %49 = load i32, i32* @PGND, align 4
  %50 = call i32 @crb_addr_transform(i32 %49)
  %51 = load i32, i32* @PGN3, align 4
  %52 = call i32 @crb_addr_transform(i32 %51)
  %53 = load i32, i32* @PGN2, align 4
  %54 = call i32 @crb_addr_transform(i32 %53)
  %55 = load i32, i32* @PGN1, align 4
  %56 = call i32 @crb_addr_transform(i32 %55)
  %57 = load i32, i32* @PGN0, align 4
  %58 = call i32 @crb_addr_transform(i32 %57)
  %59 = load i32, i32* @PGSI, align 4
  %60 = call i32 @crb_addr_transform(i32 %59)
  %61 = load i32, i32* @PGSD, align 4
  %62 = call i32 @crb_addr_transform(i32 %61)
  %63 = load i32, i32* @PGS3, align 4
  %64 = call i32 @crb_addr_transform(i32 %63)
  %65 = load i32, i32* @PGS2, align 4
  %66 = call i32 @crb_addr_transform(i32 %65)
  %67 = load i32, i32* @PGS1, align 4
  %68 = call i32 @crb_addr_transform(i32 %67)
  %69 = load i32, i32* @PGS0, align 4
  %70 = call i32 @crb_addr_transform(i32 %69)
  %71 = load i32, i32* @PS, align 4
  %72 = call i32 @crb_addr_transform(i32 %71)
  %73 = load i32, i32* @PH, align 4
  %74 = call i32 @crb_addr_transform(i32 %73)
  %75 = load i32, i32* @NIU, align 4
  %76 = call i32 @crb_addr_transform(i32 %75)
  %77 = load i32, i32* @I2Q, align 4
  %78 = call i32 @crb_addr_transform(i32 %77)
  %79 = load i32, i32* @EG, align 4
  %80 = call i32 @crb_addr_transform(i32 %79)
  %81 = load i32, i32* @MN, align 4
  %82 = call i32 @crb_addr_transform(i32 %81)
  %83 = load i32, i32* @MS, align 4
  %84 = call i32 @crb_addr_transform(i32 %83)
  %85 = load i32, i32* @CAS2, align 4
  %86 = call i32 @crb_addr_transform(i32 %85)
  %87 = load i32, i32* @CAS1, align 4
  %88 = call i32 @crb_addr_transform(i32 %87)
  %89 = load i32, i32* @CAS0, align 4
  %90 = call i32 @crb_addr_transform(i32 %89)
  %91 = load i32, i32* @CAM, align 4
  %92 = call i32 @crb_addr_transform(i32 %91)
  %93 = load i32, i32* @C2C1, align 4
  %94 = call i32 @crb_addr_transform(i32 %93)
  %95 = load i32, i32* @C2C0, align 4
  %96 = call i32 @crb_addr_transform(i32 %95)
  %97 = load i32, i32* @SMB, align 4
  %98 = call i32 @crb_addr_transform(i32 %97)
  %99 = load i32, i32* @OCM0, align 4
  %100 = call i32 @crb_addr_transform(i32 %99)
  %101 = load i32, i32* @I2C0, align 4
  %102 = call i32 @crb_addr_transform(i32 %101)
  ret void
}

declare dso_local i32 @crb_addr_transform(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
