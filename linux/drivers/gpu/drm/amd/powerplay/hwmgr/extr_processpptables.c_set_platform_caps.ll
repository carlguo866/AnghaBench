; ModuleID = '/home/carl/AnghaBench/linux/drivers/gpu/drm/amd/powerplay/hwmgr/extr_processpptables.c_set_platform_caps.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/gpu/drm/amd/powerplay/hwmgr/extr_processpptables.c_set_platform_caps.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.pp_hwmgr = type { i32 }

@ATOM_PP_PLATFORM_CAP_POWERPLAY = common dso_local global i64 0, align 8
@PHM_PlatformCaps_PowerPlaySupport = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_SBIOSPOWERSOURCE = common dso_local global i64 0, align 8
@PHM_PlatformCaps_BiosPowerSourceControl = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_ASPM_L0s = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EnableASPML0s = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_ASPM_L1 = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EnableASPML1 = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_BACKBIAS = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EnableBackbias = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_HARDWAREDC = common dso_local global i64 0, align 8
@PHM_PlatformCaps_AutomaticDCTransition = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_GEMINIPRIMARY = common dso_local global i64 0, align 8
@PHM_PlatformCaps_GeminiPrimary = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_STEPVDDC = common dso_local global i64 0, align 8
@PHM_PlatformCaps_StepVddc = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_VOLTAGECONTROL = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EnableVoltageControl = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_SIDEPORTCONTROL = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EnableSideportControl = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_TURNOFFPLL_ASPML1 = common dso_local global i64 0, align 8
@PHM_PlatformCaps_TurnOffPll_ASPML1 = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_HTLINKCONTROL = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EnableHTLinkControl = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_MVDDCONTROL = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EnableMVDDControl = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_VDDCI_CONTROL = common dso_local global i64 0, align 8
@PHM_PlatformCaps_ControlVDDCI = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_REGULATOR_HOT = common dso_local global i64 0, align 8
@PHM_PlatformCaps_RegulatorHot = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_GOTO_BOOT_ON_ALERT = common dso_local global i64 0, align 8
@PHM_PlatformCaps_BootStateOnAlert = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_DONT_WAIT_FOR_VBLANK_ON_ALERT = common dso_local global i64 0, align 8
@PHM_PlatformCaps_DontWaitForVBlankOnAlert = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_BACO = common dso_local global i64 0, align 8
@PHM_PlatformCaps_BACO = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_NEW_CAC_VOLTAGE = common dso_local global i64 0, align 8
@PHM_PlatformCaps_NewCACVoltage = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_REVERT_GPIO5_POLARITY = common dso_local global i64 0, align 8
@PHM_PlatformCaps_RevertGPIO5Polarity = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_OUTPUT_THERMAL2GPIO17 = common dso_local global i64 0, align 8
@PHM_PlatformCaps_Thermal2GPIO17 = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_VRHOT_GPIO_CONFIGURABLE = common dso_local global i64 0, align 8
@PHM_PlatformCaps_VRHotGPIOConfigurable = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_TEMP_INVERSION = common dso_local global i64 0, align 8
@PHM_PlatformCaps_TempInversion = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_EVV = common dso_local global i64 0, align 8
@PHM_PlatformCaps_EVV = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_COMBINE_PCC_WITH_THERMAL_SIGNAL = common dso_local global i64 0, align 8
@PHM_PlatformCaps_CombinePCCWithThermalSignal = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_LOAD_POST_PRODUCTION_FIRMWARE = common dso_local global i64 0, align 8
@PHM_PlatformCaps_LoadPostProductionFirmware = common dso_local global i32 0, align 4
@ATOM_PP_PLATFORM_CAP_DISABLE_USING_ACTUAL_TEMPERATURE_FOR_POWER_CALC = common dso_local global i64 0, align 8
@PHM_PlatformCaps_DisableUsingActualTemperatureForPowerCalc = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.pp_hwmgr*, i64)* @set_platform_caps to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @set_platform_caps(%struct.pp_hwmgr* %0, i64 %1) #0 {
  %3 = alloca %struct.pp_hwmgr*, align 8
  %4 = alloca i64, align 8
  store %struct.pp_hwmgr* %0, %struct.pp_hwmgr** %3, align 8
  store i64 %1, i64* %4, align 8
  %5 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %6 = load i64, i64* %4, align 8
  %7 = load i64, i64* @ATOM_PP_PLATFORM_CAP_POWERPLAY, align 8
  %8 = and i64 %6, %7
  %9 = icmp ne i64 0, %8
  %10 = zext i1 %9 to i32
  %11 = load i32, i32* @PHM_PlatformCaps_PowerPlaySupport, align 4
  %12 = call i32 @set_hw_cap(%struct.pp_hwmgr* %5, i32 %10, i32 %11)
  %13 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %14 = load i64, i64* %4, align 8
  %15 = load i64, i64* @ATOM_PP_PLATFORM_CAP_SBIOSPOWERSOURCE, align 8
  %16 = and i64 %14, %15
  %17 = icmp ne i64 0, %16
  %18 = zext i1 %17 to i32
  %19 = load i32, i32* @PHM_PlatformCaps_BiosPowerSourceControl, align 4
  %20 = call i32 @set_hw_cap(%struct.pp_hwmgr* %13, i32 %18, i32 %19)
  %21 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %22 = load i64, i64* %4, align 8
  %23 = load i64, i64* @ATOM_PP_PLATFORM_CAP_ASPM_L0s, align 8
  %24 = and i64 %22, %23
  %25 = icmp ne i64 0, %24
  %26 = zext i1 %25 to i32
  %27 = load i32, i32* @PHM_PlatformCaps_EnableASPML0s, align 4
  %28 = call i32 @set_hw_cap(%struct.pp_hwmgr* %21, i32 %26, i32 %27)
  %29 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %30 = load i64, i64* %4, align 8
  %31 = load i64, i64* @ATOM_PP_PLATFORM_CAP_ASPM_L1, align 8
  %32 = and i64 %30, %31
  %33 = icmp ne i64 0, %32
  %34 = zext i1 %33 to i32
  %35 = load i32, i32* @PHM_PlatformCaps_EnableASPML1, align 4
  %36 = call i32 @set_hw_cap(%struct.pp_hwmgr* %29, i32 %34, i32 %35)
  %37 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %38 = load i64, i64* %4, align 8
  %39 = load i64, i64* @ATOM_PP_PLATFORM_CAP_BACKBIAS, align 8
  %40 = and i64 %38, %39
  %41 = icmp ne i64 0, %40
  %42 = zext i1 %41 to i32
  %43 = load i32, i32* @PHM_PlatformCaps_EnableBackbias, align 4
  %44 = call i32 @set_hw_cap(%struct.pp_hwmgr* %37, i32 %42, i32 %43)
  %45 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %46 = load i64, i64* %4, align 8
  %47 = load i64, i64* @ATOM_PP_PLATFORM_CAP_HARDWAREDC, align 8
  %48 = and i64 %46, %47
  %49 = icmp ne i64 0, %48
  %50 = zext i1 %49 to i32
  %51 = load i32, i32* @PHM_PlatformCaps_AutomaticDCTransition, align 4
  %52 = call i32 @set_hw_cap(%struct.pp_hwmgr* %45, i32 %50, i32 %51)
  %53 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %54 = load i64, i64* %4, align 8
  %55 = load i64, i64* @ATOM_PP_PLATFORM_CAP_GEMINIPRIMARY, align 8
  %56 = and i64 %54, %55
  %57 = icmp ne i64 0, %56
  %58 = zext i1 %57 to i32
  %59 = load i32, i32* @PHM_PlatformCaps_GeminiPrimary, align 4
  %60 = call i32 @set_hw_cap(%struct.pp_hwmgr* %53, i32 %58, i32 %59)
  %61 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %62 = load i64, i64* %4, align 8
  %63 = load i64, i64* @ATOM_PP_PLATFORM_CAP_STEPVDDC, align 8
  %64 = and i64 %62, %63
  %65 = icmp ne i64 0, %64
  %66 = zext i1 %65 to i32
  %67 = load i32, i32* @PHM_PlatformCaps_StepVddc, align 4
  %68 = call i32 @set_hw_cap(%struct.pp_hwmgr* %61, i32 %66, i32 %67)
  %69 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %70 = load i64, i64* %4, align 8
  %71 = load i64, i64* @ATOM_PP_PLATFORM_CAP_VOLTAGECONTROL, align 8
  %72 = and i64 %70, %71
  %73 = icmp ne i64 0, %72
  %74 = zext i1 %73 to i32
  %75 = load i32, i32* @PHM_PlatformCaps_EnableVoltageControl, align 4
  %76 = call i32 @set_hw_cap(%struct.pp_hwmgr* %69, i32 %74, i32 %75)
  %77 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %78 = load i64, i64* %4, align 8
  %79 = load i64, i64* @ATOM_PP_PLATFORM_CAP_SIDEPORTCONTROL, align 8
  %80 = and i64 %78, %79
  %81 = icmp ne i64 0, %80
  %82 = zext i1 %81 to i32
  %83 = load i32, i32* @PHM_PlatformCaps_EnableSideportControl, align 4
  %84 = call i32 @set_hw_cap(%struct.pp_hwmgr* %77, i32 %82, i32 %83)
  %85 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %86 = load i64, i64* %4, align 8
  %87 = load i64, i64* @ATOM_PP_PLATFORM_CAP_TURNOFFPLL_ASPML1, align 8
  %88 = and i64 %86, %87
  %89 = icmp ne i64 0, %88
  %90 = zext i1 %89 to i32
  %91 = load i32, i32* @PHM_PlatformCaps_TurnOffPll_ASPML1, align 4
  %92 = call i32 @set_hw_cap(%struct.pp_hwmgr* %85, i32 %90, i32 %91)
  %93 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %94 = load i64, i64* %4, align 8
  %95 = load i64, i64* @ATOM_PP_PLATFORM_CAP_HTLINKCONTROL, align 8
  %96 = and i64 %94, %95
  %97 = icmp ne i64 0, %96
  %98 = zext i1 %97 to i32
  %99 = load i32, i32* @PHM_PlatformCaps_EnableHTLinkControl, align 4
  %100 = call i32 @set_hw_cap(%struct.pp_hwmgr* %93, i32 %98, i32 %99)
  %101 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %102 = load i64, i64* %4, align 8
  %103 = load i64, i64* @ATOM_PP_PLATFORM_CAP_MVDDCONTROL, align 8
  %104 = and i64 %102, %103
  %105 = icmp ne i64 0, %104
  %106 = zext i1 %105 to i32
  %107 = load i32, i32* @PHM_PlatformCaps_EnableMVDDControl, align 4
  %108 = call i32 @set_hw_cap(%struct.pp_hwmgr* %101, i32 %106, i32 %107)
  %109 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %110 = load i64, i64* %4, align 8
  %111 = load i64, i64* @ATOM_PP_PLATFORM_CAP_VDDCI_CONTROL, align 8
  %112 = and i64 %110, %111
  %113 = icmp ne i64 0, %112
  %114 = zext i1 %113 to i32
  %115 = load i32, i32* @PHM_PlatformCaps_ControlVDDCI, align 4
  %116 = call i32 @set_hw_cap(%struct.pp_hwmgr* %109, i32 %114, i32 %115)
  %117 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %118 = load i64, i64* %4, align 8
  %119 = load i64, i64* @ATOM_PP_PLATFORM_CAP_REGULATOR_HOT, align 8
  %120 = and i64 %118, %119
  %121 = icmp ne i64 0, %120
  %122 = zext i1 %121 to i32
  %123 = load i32, i32* @PHM_PlatformCaps_RegulatorHot, align 4
  %124 = call i32 @set_hw_cap(%struct.pp_hwmgr* %117, i32 %122, i32 %123)
  %125 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %126 = load i64, i64* %4, align 8
  %127 = load i64, i64* @ATOM_PP_PLATFORM_CAP_GOTO_BOOT_ON_ALERT, align 8
  %128 = and i64 %126, %127
  %129 = icmp ne i64 0, %128
  %130 = zext i1 %129 to i32
  %131 = load i32, i32* @PHM_PlatformCaps_BootStateOnAlert, align 4
  %132 = call i32 @set_hw_cap(%struct.pp_hwmgr* %125, i32 %130, i32 %131)
  %133 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %134 = load i64, i64* %4, align 8
  %135 = load i64, i64* @ATOM_PP_PLATFORM_CAP_DONT_WAIT_FOR_VBLANK_ON_ALERT, align 8
  %136 = and i64 %134, %135
  %137 = icmp ne i64 0, %136
  %138 = zext i1 %137 to i32
  %139 = load i32, i32* @PHM_PlatformCaps_DontWaitForVBlankOnAlert, align 4
  %140 = call i32 @set_hw_cap(%struct.pp_hwmgr* %133, i32 %138, i32 %139)
  %141 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %142 = load i64, i64* %4, align 8
  %143 = load i64, i64* @ATOM_PP_PLATFORM_CAP_BACO, align 8
  %144 = and i64 %142, %143
  %145 = icmp ne i64 0, %144
  %146 = zext i1 %145 to i32
  %147 = load i32, i32* @PHM_PlatformCaps_BACO, align 4
  %148 = call i32 @set_hw_cap(%struct.pp_hwmgr* %141, i32 %146, i32 %147)
  %149 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %150 = load i64, i64* %4, align 8
  %151 = load i64, i64* @ATOM_PP_PLATFORM_CAP_NEW_CAC_VOLTAGE, align 8
  %152 = and i64 %150, %151
  %153 = icmp ne i64 0, %152
  %154 = zext i1 %153 to i32
  %155 = load i32, i32* @PHM_PlatformCaps_NewCACVoltage, align 4
  %156 = call i32 @set_hw_cap(%struct.pp_hwmgr* %149, i32 %154, i32 %155)
  %157 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %158 = load i64, i64* %4, align 8
  %159 = load i64, i64* @ATOM_PP_PLATFORM_CAP_REVERT_GPIO5_POLARITY, align 8
  %160 = and i64 %158, %159
  %161 = icmp ne i64 0, %160
  %162 = zext i1 %161 to i32
  %163 = load i32, i32* @PHM_PlatformCaps_RevertGPIO5Polarity, align 4
  %164 = call i32 @set_hw_cap(%struct.pp_hwmgr* %157, i32 %162, i32 %163)
  %165 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %166 = load i64, i64* %4, align 8
  %167 = load i64, i64* @ATOM_PP_PLATFORM_CAP_OUTPUT_THERMAL2GPIO17, align 8
  %168 = and i64 %166, %167
  %169 = icmp ne i64 0, %168
  %170 = zext i1 %169 to i32
  %171 = load i32, i32* @PHM_PlatformCaps_Thermal2GPIO17, align 4
  %172 = call i32 @set_hw_cap(%struct.pp_hwmgr* %165, i32 %170, i32 %171)
  %173 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %174 = load i64, i64* %4, align 8
  %175 = load i64, i64* @ATOM_PP_PLATFORM_CAP_VRHOT_GPIO_CONFIGURABLE, align 8
  %176 = and i64 %174, %175
  %177 = icmp ne i64 0, %176
  %178 = zext i1 %177 to i32
  %179 = load i32, i32* @PHM_PlatformCaps_VRHotGPIOConfigurable, align 4
  %180 = call i32 @set_hw_cap(%struct.pp_hwmgr* %173, i32 %178, i32 %179)
  %181 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %182 = load i64, i64* %4, align 8
  %183 = load i64, i64* @ATOM_PP_PLATFORM_CAP_TEMP_INVERSION, align 8
  %184 = and i64 %182, %183
  %185 = icmp ne i64 0, %184
  %186 = zext i1 %185 to i32
  %187 = load i32, i32* @PHM_PlatformCaps_TempInversion, align 4
  %188 = call i32 @set_hw_cap(%struct.pp_hwmgr* %181, i32 %186, i32 %187)
  %189 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %190 = load i64, i64* %4, align 8
  %191 = load i64, i64* @ATOM_PP_PLATFORM_CAP_EVV, align 8
  %192 = and i64 %190, %191
  %193 = icmp ne i64 0, %192
  %194 = zext i1 %193 to i32
  %195 = load i32, i32* @PHM_PlatformCaps_EVV, align 4
  %196 = call i32 @set_hw_cap(%struct.pp_hwmgr* %189, i32 %194, i32 %195)
  %197 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %198 = load i64, i64* %4, align 8
  %199 = load i64, i64* @ATOM_PP_PLATFORM_COMBINE_PCC_WITH_THERMAL_SIGNAL, align 8
  %200 = and i64 %198, %199
  %201 = icmp ne i64 0, %200
  %202 = zext i1 %201 to i32
  %203 = load i32, i32* @PHM_PlatformCaps_CombinePCCWithThermalSignal, align 4
  %204 = call i32 @set_hw_cap(%struct.pp_hwmgr* %197, i32 %202, i32 %203)
  %205 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %206 = load i64, i64* %4, align 8
  %207 = load i64, i64* @ATOM_PP_PLATFORM_LOAD_POST_PRODUCTION_FIRMWARE, align 8
  %208 = and i64 %206, %207
  %209 = icmp ne i64 0, %208
  %210 = zext i1 %209 to i32
  %211 = load i32, i32* @PHM_PlatformCaps_LoadPostProductionFirmware, align 4
  %212 = call i32 @set_hw_cap(%struct.pp_hwmgr* %205, i32 %210, i32 %211)
  %213 = load %struct.pp_hwmgr*, %struct.pp_hwmgr** %3, align 8
  %214 = load i64, i64* %4, align 8
  %215 = load i64, i64* @ATOM_PP_PLATFORM_CAP_DISABLE_USING_ACTUAL_TEMPERATURE_FOR_POWER_CALC, align 8
  %216 = and i64 %214, %215
  %217 = icmp ne i64 0, %216
  %218 = zext i1 %217 to i32
  %219 = load i32, i32* @PHM_PlatformCaps_DisableUsingActualTemperatureForPowerCalc, align 4
  %220 = call i32 @set_hw_cap(%struct.pp_hwmgr* %213, i32 %218, i32 %219)
  ret i32 0
}

declare dso_local i32 @set_hw_cap(%struct.pp_hwmgr*, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
