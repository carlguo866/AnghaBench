; ModuleID = '/home/carl/AnghaBench/linux/drivers/gpu/drm/amd/display/dc/calcs/extr_calcs_logger.h_print_bw_calcs_vbios.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/gpu/drm/amd/display/dc/calcs/extr_calcs_logger.h_print_bw_calcs_vbios.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dc_context = type { i32 }
%struct.bw_calcs_vbios = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [70 x i8] c"#####################################################################\00", align 1
@.str.1 = private unnamed_addr constant [28 x i8] c"struct bw_calcs_vbios vbios\00", align 1
@.str.2 = private unnamed_addr constant [35 x i8] c"\09[enum] bw_defines memory_type: %d\00", align 1
@.str.3 = private unnamed_addr constant [43 x i8] c"\09[uint32_t] dram_channel_width_in_bits: %d\00", align 1
@.str.4 = private unnamed_addr constant [40 x i8] c"\09[uint32_t] number_of_dram_channels: %d\00", align 1
@.str.5 = private unnamed_addr constant [37 x i8] c"\09[uint32_t] number_of_dram_banks: %d\00", align 1
@.str.6 = private unnamed_addr constant [25 x i8] c"\09[bw_fixed] low_yclk: %d\00", align 1
@.str.7 = private unnamed_addr constant [25 x i8] c"\09[bw_fixed] mid_yclk: %d\00", align 1
@.str.8 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] high_yclk: %d\00", align 1
@.str.9 = private unnamed_addr constant [25 x i8] c"\09[bw_fixed] low_sclk: %d\00", align 1
@.str.10 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] mid1_sclk: %d\00", align 1
@.str.11 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] mid2_sclk: %d\00", align 1
@.str.12 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] mid3_sclk: %d\00", align 1
@.str.13 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] mid4_sclk: %d\00", align 1
@.str.14 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] mid5_sclk: %d\00", align 1
@.str.15 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] mid6_sclk: %d\00", align 1
@.str.16 = private unnamed_addr constant [26 x i8] c"\09[bw_fixed] high_sclk: %d\00", align 1
@.str.17 = private unnamed_addr constant [40 x i8] c"\09[bw_fixed] low_voltage_max_dispclk: %d\00", align 1
@.str.18 = private unnamed_addr constant [41 x i8] c"\09[bw_fixed] mid_voltage_max_dispclk;: %d\00", align 1
@.str.19 = private unnamed_addr constant [42 x i8] c"\09[bw_fixed] high_voltage_max_dispclk;: %d\00", align 1
@.str.20 = private unnamed_addr constant [39 x i8] c"\09[bw_fixed] low_voltage_max_phyclk: %d\00", align 1
@.str.21 = private unnamed_addr constant [39 x i8] c"\09[bw_fixed] mid_voltage_max_phyclk: %d\00", align 1
@.str.22 = private unnamed_addr constant [40 x i8] c"\09[bw_fixed] high_voltage_max_phyclk: %d\00", align 1
@.str.23 = private unnamed_addr constant [38 x i8] c"\09[bw_fixed] data_return_bus_width: %d\00", align 1
@.str.24 = private unnamed_addr constant [20 x i8] c"\09[bw_fixed] trc: %d\00", align 1
@.str.25 = private unnamed_addr constant [38 x i8] c"\09[bw_fixed] dmifmc_urgent_latency: %d\00", align 1
@.str.26 = private unnamed_addr constant [50 x i8] c"\09[bw_fixed] stutter_self_refresh_exit_latency: %d\00", align 1
@.str.27 = private unnamed_addr constant [51 x i8] c"\09[bw_fixed] stutter_self_refresh_entry_latency: %d\00", align 1
@.str.28 = private unnamed_addr constant [41 x i8] c"\09[bw_fixed] nbp_state_change_latency: %d\00", align 1
@.str.29 = private unnamed_addr constant [40 x i8] c"\09[bw_fixed] mcifwrmc_urgent_latency: %d\00", align 1
@.str.30 = private unnamed_addr constant [34 x i8] c"\09[bool] scatter_gather_enable: %d\00", align 1
@.str.31 = private unnamed_addr constant [39 x i8] c"\09[bw_fixed] down_spread_percentage: %d\00", align 1
@.str.32 = private unnamed_addr constant [29 x i8] c"\09[uint32_t] cursor_width: %d\00", align 1
@.str.33 = private unnamed_addr constant [41 x i8] c"\09[uint32_t] average_compression_rate: %d\00", align 1
@.str.34 = private unnamed_addr constant [74 x i8] c"\09[uint32_t] number_of_request_slots_gmc_reserves_for_dmif_per_channel: %d\00", align 1
@.str.35 = private unnamed_addr constant [34 x i8] c"\09[bw_fixed] blackout_duration: %d\00", align 1
@.str.36 = private unnamed_addr constant [47 x i8] c"\09[bw_fixed] maximum_blackout_recovery_time: %d\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.dc_context*, %struct.bw_calcs_vbios*)* @print_bw_calcs_vbios to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @print_bw_calcs_vbios(%struct.dc_context* %0, %struct.bw_calcs_vbios* %1) #0 {
  %3 = alloca %struct.dc_context*, align 8
  %4 = alloca %struct.bw_calcs_vbios*, align 8
  store %struct.dc_context* %0, %struct.dc_context** %3, align 8
  store %struct.bw_calcs_vbios* %1, %struct.bw_calcs_vbios** %4, align 8
  %5 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 0))
  %6 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.1, i64 0, i64 0))
  %7 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str, i64 0, i64 0))
  %8 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %9 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %8, i32 0, i32 34
  %10 = load i32, i32* %9, align 4
  %11 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i32 %10)
  %12 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %13 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %12, i32 0, i32 34
  %14 = load i32, i32* %13, align 4
  %15 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.2, i64 0, i64 0), i32 %14)
  %16 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %17 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %16, i32 0, i32 33
  %18 = load i32, i32* %17, align 4
  %19 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str.3, i64 0, i64 0), i32 %18)
  %20 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %21 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %20, i32 0, i32 32
  %22 = load i32, i32* %21, align 4
  %23 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.4, i64 0, i64 0), i32 %22)
  %24 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %25 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %24, i32 0, i32 31
  %26 = load i32, i32* %25, align 4
  %27 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.5, i64 0, i64 0), i32 %26)
  %28 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %29 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %28, i32 0, i32 30
  %30 = load i32, i32* %29, align 4
  %31 = call i32 @bw_fixed_to_int(i32 %30)
  %32 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.6, i64 0, i64 0), i32 %31)
  %33 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %34 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %33, i32 0, i32 29
  %35 = load i32, i32* %34, align 4
  %36 = call i32 @bw_fixed_to_int(i32 %35)
  %37 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.7, i64 0, i64 0), i32 %36)
  %38 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %39 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %38, i32 0, i32 28
  %40 = load i32, i32* %39, align 4
  %41 = call i32 @bw_fixed_to_int(i32 %40)
  %42 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8, i64 0, i64 0), i32 %41)
  %43 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %44 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %43, i32 0, i32 27
  %45 = load i32, i32* %44, align 4
  %46 = call i32 @bw_fixed_to_int(i32 %45)
  %47 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9, i64 0, i64 0), i32 %46)
  %48 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %49 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %48, i32 0, i32 26
  %50 = load i32, i32* %49, align 4
  %51 = call i32 @bw_fixed_to_int(i32 %50)
  %52 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.10, i64 0, i64 0), i32 %51)
  %53 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %54 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %53, i32 0, i32 25
  %55 = load i32, i32* %54, align 4
  %56 = call i32 @bw_fixed_to_int(i32 %55)
  %57 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.11, i64 0, i64 0), i32 %56)
  %58 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %59 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %58, i32 0, i32 24
  %60 = load i32, i32* %59, align 4
  %61 = call i32 @bw_fixed_to_int(i32 %60)
  %62 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.12, i64 0, i64 0), i32 %61)
  %63 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %64 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %63, i32 0, i32 23
  %65 = load i32, i32* %64, align 4
  %66 = call i32 @bw_fixed_to_int(i32 %65)
  %67 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.13, i64 0, i64 0), i32 %66)
  %68 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %69 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %68, i32 0, i32 22
  %70 = load i32, i32* %69, align 4
  %71 = call i32 @bw_fixed_to_int(i32 %70)
  %72 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.14, i64 0, i64 0), i32 %71)
  %73 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %74 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %73, i32 0, i32 21
  %75 = load i32, i32* %74, align 4
  %76 = call i32 @bw_fixed_to_int(i32 %75)
  %77 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.15, i64 0, i64 0), i32 %76)
  %78 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %79 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %78, i32 0, i32 20
  %80 = load i32, i32* %79, align 4
  %81 = call i32 @bw_fixed_to_int(i32 %80)
  %82 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.16, i64 0, i64 0), i32 %81)
  %83 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %84 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %83, i32 0, i32 19
  %85 = load i32, i32* %84, align 4
  %86 = call i32 @bw_fixed_to_int(i32 %85)
  %87 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.17, i64 0, i64 0), i32 %86)
  %88 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %89 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %88, i32 0, i32 18
  %90 = load i32, i32* %89, align 4
  %91 = call i32 @bw_fixed_to_int(i32 %90)
  %92 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.18, i64 0, i64 0), i32 %91)
  %93 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %94 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %93, i32 0, i32 17
  %95 = load i32, i32* %94, align 4
  %96 = call i32 @bw_fixed_to_int(i32 %95)
  %97 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.19, i64 0, i64 0), i32 %96)
  %98 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %99 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %98, i32 0, i32 16
  %100 = load i32, i32* %99, align 4
  %101 = call i32 @bw_fixed_to_int(i32 %100)
  %102 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.20, i64 0, i64 0), i32 %101)
  %103 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %104 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %103, i32 0, i32 15
  %105 = load i32, i32* %104, align 4
  %106 = call i32 @bw_fixed_to_int(i32 %105)
  %107 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.21, i64 0, i64 0), i32 %106)
  %108 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %109 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %108, i32 0, i32 14
  %110 = load i32, i32* %109, align 4
  %111 = call i32 @bw_fixed_to_int(i32 %110)
  %112 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.22, i64 0, i64 0), i32 %111)
  %113 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %114 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %113, i32 0, i32 13
  %115 = load i32, i32* %114, align 4
  %116 = call i32 @bw_fixed_to_int(i32 %115)
  %117 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.23, i64 0, i64 0), i32 %116)
  %118 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %119 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %118, i32 0, i32 12
  %120 = load i32, i32* %119, align 4
  %121 = call i32 @bw_fixed_to_int(i32 %120)
  %122 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.24, i64 0, i64 0), i32 %121)
  %123 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %124 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %123, i32 0, i32 11
  %125 = load i32, i32* %124, align 4
  %126 = call i32 @bw_fixed_to_int(i32 %125)
  %127 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.25, i64 0, i64 0), i32 %126)
  %128 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %129 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %128, i32 0, i32 10
  %130 = load i32, i32* %129, align 4
  %131 = call i32 @bw_fixed_to_int(i32 %130)
  %132 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.26, i64 0, i64 0), i32 %131)
  %133 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %134 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %133, i32 0, i32 9
  %135 = load i32, i32* %134, align 4
  %136 = call i32 @bw_fixed_to_int(i32 %135)
  %137 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.27, i64 0, i64 0), i32 %136)
  %138 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %139 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %138, i32 0, i32 8
  %140 = load i32, i32* %139, align 4
  %141 = call i32 @bw_fixed_to_int(i32 %140)
  %142 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.28, i64 0, i64 0), i32 %141)
  %143 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %144 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %143, i32 0, i32 7
  %145 = load i32, i32* %144, align 4
  %146 = call i32 @bw_fixed_to_int(i32 %145)
  %147 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.29, i64 0, i64 0), i32 %146)
  %148 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %149 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %148, i32 0, i32 6
  %150 = load i32, i32* %149, align 4
  %151 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.30, i64 0, i64 0), i32 %150)
  %152 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %153 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %152, i32 0, i32 5
  %154 = load i32, i32* %153, align 4
  %155 = call i32 @bw_fixed_to_int(i32 %154)
  %156 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.31, i64 0, i64 0), i32 %155)
  %157 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %158 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %157, i32 0, i32 4
  %159 = load i32, i32* %158, align 4
  %160 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.32, i64 0, i64 0), i32 %159)
  %161 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %162 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %161, i32 0, i32 3
  %163 = load i32, i32* %162, align 4
  %164 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.33, i64 0, i64 0), i32 %163)
  %165 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %166 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %165, i32 0, i32 2
  %167 = load i32, i32* %166, align 4
  %168 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([74 x i8], [74 x i8]* @.str.34, i64 0, i64 0), i32 %167)
  %169 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %170 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %169, i32 0, i32 1
  %171 = load i32, i32* %170, align 4
  %172 = call i32 @bw_fixed_to_int(i32 %171)
  %173 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.35, i64 0, i64 0), i32 %172)
  %174 = load %struct.bw_calcs_vbios*, %struct.bw_calcs_vbios** %4, align 8
  %175 = getelementptr inbounds %struct.bw_calcs_vbios, %struct.bw_calcs_vbios* %174, i32 0, i32 0
  %176 = load i32, i32* %175, align 4
  %177 = call i32 @bw_fixed_to_int(i32 %176)
  %178 = call i32 (i8*, ...) @DC_LOG_BANDWIDTH_CALCS(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.36, i64 0, i64 0), i32 %177)
  ret void
}

declare dso_local i32 @DC_LOG_BANDWIDTH_CALCS(i8*, ...) #1

declare dso_local i32 @bw_fixed_to_int(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
