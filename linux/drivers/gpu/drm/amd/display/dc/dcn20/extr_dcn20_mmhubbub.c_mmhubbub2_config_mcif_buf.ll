; ModuleID = '/home/carl/AnghaBench/linux/drivers/gpu/drm/amd/display/dc/dcn20/extr_dcn20_mmhubbub.c_mmhubbub2_config_mcif_buf.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/gpu/drm/amd/display/dc/dcn20/extr_dcn20_mmhubbub.c_mmhubbub2_config_mcif_buf.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.mcif_wb = type { i32 }
%struct.mcif_buf_params = type { i32, i32, i32, i32, i32*, i32* }
%struct.dcn20_mmhubbub = type { i32 }

@MCIF_WB_BUFMGR_SW_CONTROL = common dso_local global i32 0, align 4
@MCIF_WB_BUFMGR_SW_LOCK = common dso_local global i32 0, align 4
@MCIF_WB_BUF_1_ADDR_Y = common dso_local global i32 0, align 4
@MCIF_WB_BUF_1_ADDR_Y_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_1_ADDR_Y_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_1_ADDR_C = common dso_local global i32 0, align 4
@MCIF_WB_BUF_1_ADDR_C_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_1_ADDR_C_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_2_ADDR_Y = common dso_local global i32 0, align 4
@MCIF_WB_BUF_2_ADDR_Y_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_2_ADDR_Y_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_2_ADDR_C = common dso_local global i32 0, align 4
@MCIF_WB_BUF_2_ADDR_C_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_2_ADDR_C_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_3_ADDR_Y = common dso_local global i32 0, align 4
@MCIF_WB_BUF_3_ADDR_Y_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_3_ADDR_Y_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_3_ADDR_C = common dso_local global i32 0, align 4
@MCIF_WB_BUF_3_ADDR_C_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_3_ADDR_C_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_4_ADDR_Y = common dso_local global i32 0, align 4
@MCIF_WB_BUF_4_ADDR_Y_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_4_ADDR_Y_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_4_ADDR_C = common dso_local global i32 0, align 4
@MCIF_WB_BUF_4_ADDR_C_HIGH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_4_ADDR_C_OFFSET = common dso_local global i32 0, align 4
@MCIF_WB_BUF_LUMA_SIZE = common dso_local global i32 0, align 4
@MCIF_WB_BUF_CHROMA_SIZE = common dso_local global i32 0, align 4
@MCIF_WB_BUF_ADDR_FENCE_EN = common dso_local global i32 0, align 4
@MCIF_WB_BUF_PITCH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_LUMA_PITCH = common dso_local global i32 0, align 4
@MCIF_WB_BUF_CHROMA_PITCH = common dso_local global i32 0, align 4
@MCIF_WB_WARM_UP_CNTL = common dso_local global i32 0, align 4
@MCIF_WB_PITCH_SIZE_WARMUP = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.mcif_wb*, %struct.mcif_buf_params*, i32)* @mmhubbub2_config_mcif_buf to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @mmhubbub2_config_mcif_buf(%struct.mcif_wb* %0, %struct.mcif_buf_params* %1, i32 %2) #0 {
  %4 = alloca %struct.mcif_wb*, align 8
  %5 = alloca %struct.mcif_buf_params*, align 8
  %6 = alloca i32, align 4
  %7 = alloca %struct.dcn20_mmhubbub*, align 8
  store %struct.mcif_wb* %0, %struct.mcif_wb** %4, align 8
  store %struct.mcif_buf_params* %1, %struct.mcif_buf_params** %5, align 8
  store i32 %2, i32* %6, align 4
  %8 = load %struct.mcif_wb*, %struct.mcif_wb** %4, align 8
  %9 = call %struct.dcn20_mmhubbub* @TO_DCN20_MMHUBBUB(%struct.mcif_wb* %8)
  store %struct.dcn20_mmhubbub* %9, %struct.dcn20_mmhubbub** %7, align 8
  %10 = load i32, i32* @MCIF_WB_BUFMGR_SW_CONTROL, align 4
  %11 = load i32, i32* @MCIF_WB_BUFMGR_SW_LOCK, align 4
  %12 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %13 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %12, i32 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = call i32 @REG_UPDATE(i32 %10, i32 %11, i32 %14)
  %16 = load i32, i32* @MCIF_WB_BUF_1_ADDR_Y, align 4
  %17 = load i32, i32* @MCIF_WB_BUF_1_ADDR_Y, align 4
  %18 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %19 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %18, i32 0, i32 5
  %20 = load i32*, i32** %19, align 8
  %21 = getelementptr inbounds i32, i32* %20, i64 0
  %22 = load i32, i32* %21, align 4
  %23 = call i32 @MCIF_ADDR(i32 %22)
  %24 = call i32 @REG_UPDATE(i32 %16, i32 %17, i32 %23)
  %25 = load i32, i32* @MCIF_WB_BUF_1_ADDR_Y_HIGH, align 4
  %26 = load i32, i32* @MCIF_WB_BUF_1_ADDR_Y_HIGH, align 4
  %27 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %28 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %27, i32 0, i32 5
  %29 = load i32*, i32** %28, align 8
  %30 = getelementptr inbounds i32, i32* %29, i64 0
  %31 = load i32, i32* %30, align 4
  %32 = call i32 @MCIF_ADDR_HIGH(i32 %31)
  %33 = call i32 @REG_UPDATE(i32 %25, i32 %26, i32 %32)
  %34 = load i32, i32* @MCIF_WB_BUF_1_ADDR_Y_OFFSET, align 4
  %35 = load i32, i32* @MCIF_WB_BUF_1_ADDR_Y_OFFSET, align 4
  %36 = call i32 @REG_UPDATE(i32 %34, i32 %35, i32 0)
  %37 = load i32, i32* @MCIF_WB_BUF_1_ADDR_C, align 4
  %38 = load i32, i32* @MCIF_WB_BUF_1_ADDR_C, align 4
  %39 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %40 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %39, i32 0, i32 4
  %41 = load i32*, i32** %40, align 8
  %42 = getelementptr inbounds i32, i32* %41, i64 0
  %43 = load i32, i32* %42, align 4
  %44 = call i32 @MCIF_ADDR(i32 %43)
  %45 = call i32 @REG_UPDATE(i32 %37, i32 %38, i32 %44)
  %46 = load i32, i32* @MCIF_WB_BUF_1_ADDR_C_HIGH, align 4
  %47 = load i32, i32* @MCIF_WB_BUF_1_ADDR_C_HIGH, align 4
  %48 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %49 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %48, i32 0, i32 4
  %50 = load i32*, i32** %49, align 8
  %51 = getelementptr inbounds i32, i32* %50, i64 0
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @MCIF_ADDR_HIGH(i32 %52)
  %54 = call i32 @REG_UPDATE(i32 %46, i32 %47, i32 %53)
  %55 = load i32, i32* @MCIF_WB_BUF_1_ADDR_C_OFFSET, align 4
  %56 = load i32, i32* @MCIF_WB_BUF_1_ADDR_C_OFFSET, align 4
  %57 = call i32 @REG_UPDATE(i32 %55, i32 %56, i32 0)
  %58 = load i32, i32* @MCIF_WB_BUF_2_ADDR_Y, align 4
  %59 = load i32, i32* @MCIF_WB_BUF_2_ADDR_Y, align 4
  %60 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %61 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %60, i32 0, i32 5
  %62 = load i32*, i32** %61, align 8
  %63 = getelementptr inbounds i32, i32* %62, i64 1
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @MCIF_ADDR(i32 %64)
  %66 = call i32 @REG_UPDATE(i32 %58, i32 %59, i32 %65)
  %67 = load i32, i32* @MCIF_WB_BUF_2_ADDR_Y_HIGH, align 4
  %68 = load i32, i32* @MCIF_WB_BUF_2_ADDR_Y_HIGH, align 4
  %69 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %70 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %69, i32 0, i32 5
  %71 = load i32*, i32** %70, align 8
  %72 = getelementptr inbounds i32, i32* %71, i64 1
  %73 = load i32, i32* %72, align 4
  %74 = call i32 @MCIF_ADDR_HIGH(i32 %73)
  %75 = call i32 @REG_UPDATE(i32 %67, i32 %68, i32 %74)
  %76 = load i32, i32* @MCIF_WB_BUF_2_ADDR_Y_OFFSET, align 4
  %77 = load i32, i32* @MCIF_WB_BUF_2_ADDR_Y_OFFSET, align 4
  %78 = call i32 @REG_UPDATE(i32 %76, i32 %77, i32 0)
  %79 = load i32, i32* @MCIF_WB_BUF_2_ADDR_C, align 4
  %80 = load i32, i32* @MCIF_WB_BUF_2_ADDR_C, align 4
  %81 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %82 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %81, i32 0, i32 4
  %83 = load i32*, i32** %82, align 8
  %84 = getelementptr inbounds i32, i32* %83, i64 1
  %85 = load i32, i32* %84, align 4
  %86 = call i32 @MCIF_ADDR(i32 %85)
  %87 = call i32 @REG_UPDATE(i32 %79, i32 %80, i32 %86)
  %88 = load i32, i32* @MCIF_WB_BUF_2_ADDR_C_HIGH, align 4
  %89 = load i32, i32* @MCIF_WB_BUF_2_ADDR_C_HIGH, align 4
  %90 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %91 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %90, i32 0, i32 4
  %92 = load i32*, i32** %91, align 8
  %93 = getelementptr inbounds i32, i32* %92, i64 1
  %94 = load i32, i32* %93, align 4
  %95 = call i32 @MCIF_ADDR_HIGH(i32 %94)
  %96 = call i32 @REG_UPDATE(i32 %88, i32 %89, i32 %95)
  %97 = load i32, i32* @MCIF_WB_BUF_2_ADDR_C_OFFSET, align 4
  %98 = load i32, i32* @MCIF_WB_BUF_2_ADDR_C_OFFSET, align 4
  %99 = call i32 @REG_UPDATE(i32 %97, i32 %98, i32 0)
  %100 = load i32, i32* @MCIF_WB_BUF_3_ADDR_Y, align 4
  %101 = load i32, i32* @MCIF_WB_BUF_3_ADDR_Y, align 4
  %102 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %103 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %102, i32 0, i32 5
  %104 = load i32*, i32** %103, align 8
  %105 = getelementptr inbounds i32, i32* %104, i64 2
  %106 = load i32, i32* %105, align 4
  %107 = call i32 @MCIF_ADDR(i32 %106)
  %108 = call i32 @REG_UPDATE(i32 %100, i32 %101, i32 %107)
  %109 = load i32, i32* @MCIF_WB_BUF_3_ADDR_Y_HIGH, align 4
  %110 = load i32, i32* @MCIF_WB_BUF_3_ADDR_Y_HIGH, align 4
  %111 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %112 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %111, i32 0, i32 5
  %113 = load i32*, i32** %112, align 8
  %114 = getelementptr inbounds i32, i32* %113, i64 2
  %115 = load i32, i32* %114, align 4
  %116 = call i32 @MCIF_ADDR_HIGH(i32 %115)
  %117 = call i32 @REG_UPDATE(i32 %109, i32 %110, i32 %116)
  %118 = load i32, i32* @MCIF_WB_BUF_3_ADDR_Y_OFFSET, align 4
  %119 = load i32, i32* @MCIF_WB_BUF_3_ADDR_Y_OFFSET, align 4
  %120 = call i32 @REG_UPDATE(i32 %118, i32 %119, i32 0)
  %121 = load i32, i32* @MCIF_WB_BUF_3_ADDR_C, align 4
  %122 = load i32, i32* @MCIF_WB_BUF_3_ADDR_C, align 4
  %123 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %124 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %123, i32 0, i32 4
  %125 = load i32*, i32** %124, align 8
  %126 = getelementptr inbounds i32, i32* %125, i64 2
  %127 = load i32, i32* %126, align 4
  %128 = call i32 @MCIF_ADDR(i32 %127)
  %129 = call i32 @REG_UPDATE(i32 %121, i32 %122, i32 %128)
  %130 = load i32, i32* @MCIF_WB_BUF_3_ADDR_C_HIGH, align 4
  %131 = load i32, i32* @MCIF_WB_BUF_3_ADDR_C_HIGH, align 4
  %132 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %133 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %132, i32 0, i32 4
  %134 = load i32*, i32** %133, align 8
  %135 = getelementptr inbounds i32, i32* %134, i64 2
  %136 = load i32, i32* %135, align 4
  %137 = call i32 @MCIF_ADDR_HIGH(i32 %136)
  %138 = call i32 @REG_UPDATE(i32 %130, i32 %131, i32 %137)
  %139 = load i32, i32* @MCIF_WB_BUF_3_ADDR_C_OFFSET, align 4
  %140 = load i32, i32* @MCIF_WB_BUF_3_ADDR_C_OFFSET, align 4
  %141 = call i32 @REG_UPDATE(i32 %139, i32 %140, i32 0)
  %142 = load i32, i32* @MCIF_WB_BUF_4_ADDR_Y, align 4
  %143 = load i32, i32* @MCIF_WB_BUF_4_ADDR_Y, align 4
  %144 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %145 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %144, i32 0, i32 5
  %146 = load i32*, i32** %145, align 8
  %147 = getelementptr inbounds i32, i32* %146, i64 3
  %148 = load i32, i32* %147, align 4
  %149 = call i32 @MCIF_ADDR(i32 %148)
  %150 = call i32 @REG_UPDATE(i32 %142, i32 %143, i32 %149)
  %151 = load i32, i32* @MCIF_WB_BUF_4_ADDR_Y_HIGH, align 4
  %152 = load i32, i32* @MCIF_WB_BUF_4_ADDR_Y_HIGH, align 4
  %153 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %154 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %153, i32 0, i32 5
  %155 = load i32*, i32** %154, align 8
  %156 = getelementptr inbounds i32, i32* %155, i64 3
  %157 = load i32, i32* %156, align 4
  %158 = call i32 @MCIF_ADDR_HIGH(i32 %157)
  %159 = call i32 @REG_UPDATE(i32 %151, i32 %152, i32 %158)
  %160 = load i32, i32* @MCIF_WB_BUF_4_ADDR_Y_OFFSET, align 4
  %161 = load i32, i32* @MCIF_WB_BUF_4_ADDR_Y_OFFSET, align 4
  %162 = call i32 @REG_UPDATE(i32 %160, i32 %161, i32 0)
  %163 = load i32, i32* @MCIF_WB_BUF_4_ADDR_C, align 4
  %164 = load i32, i32* @MCIF_WB_BUF_4_ADDR_C, align 4
  %165 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %166 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %165, i32 0, i32 4
  %167 = load i32*, i32** %166, align 8
  %168 = getelementptr inbounds i32, i32* %167, i64 3
  %169 = load i32, i32* %168, align 4
  %170 = call i32 @MCIF_ADDR(i32 %169)
  %171 = call i32 @REG_UPDATE(i32 %163, i32 %164, i32 %170)
  %172 = load i32, i32* @MCIF_WB_BUF_4_ADDR_C_HIGH, align 4
  %173 = load i32, i32* @MCIF_WB_BUF_4_ADDR_C_HIGH, align 4
  %174 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %175 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %174, i32 0, i32 4
  %176 = load i32*, i32** %175, align 8
  %177 = getelementptr inbounds i32, i32* %176, i64 3
  %178 = load i32, i32* %177, align 4
  %179 = call i32 @MCIF_ADDR_HIGH(i32 %178)
  %180 = call i32 @REG_UPDATE(i32 %172, i32 %173, i32 %179)
  %181 = load i32, i32* @MCIF_WB_BUF_4_ADDR_C_OFFSET, align 4
  %182 = load i32, i32* @MCIF_WB_BUF_4_ADDR_C_OFFSET, align 4
  %183 = call i32 @REG_UPDATE(i32 %181, i32 %182, i32 0)
  %184 = load i32, i32* @MCIF_WB_BUF_LUMA_SIZE, align 4
  %185 = load i32, i32* @MCIF_WB_BUF_LUMA_SIZE, align 4
  %186 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %187 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %186, i32 0, i32 1
  %188 = load i32, i32* %187, align 4
  %189 = ashr i32 %188, 8
  %190 = load i32, i32* %6, align 4
  %191 = mul i32 %189, %190
  %192 = call i32 @REG_UPDATE(i32 %184, i32 %185, i32 %191)
  %193 = load i32, i32* @MCIF_WB_BUF_CHROMA_SIZE, align 4
  %194 = load i32, i32* @MCIF_WB_BUF_CHROMA_SIZE, align 4
  %195 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %196 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %195, i32 0, i32 2
  %197 = load i32, i32* %196, align 8
  %198 = ashr i32 %197, 8
  %199 = load i32, i32* %6, align 4
  %200 = mul i32 %198, %199
  %201 = call i32 @REG_UPDATE(i32 %193, i32 %194, i32 %200)
  %202 = load i32, i32* @MCIF_WB_BUFMGR_SW_CONTROL, align 4
  %203 = load i32, i32* @MCIF_WB_BUF_ADDR_FENCE_EN, align 4
  %204 = call i32 @REG_UPDATE(i32 %202, i32 %203, i32 1)
  %205 = load i32, i32* @MCIF_WB_BUF_PITCH, align 4
  %206 = load i32, i32* @MCIF_WB_BUF_LUMA_PITCH, align 4
  %207 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %208 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %207, i32 0, i32 1
  %209 = load i32, i32* %208, align 4
  %210 = ashr i32 %209, 8
  %211 = load i32, i32* @MCIF_WB_BUF_CHROMA_PITCH, align 4
  %212 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %213 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %212, i32 0, i32 2
  %214 = load i32, i32* %213, align 8
  %215 = ashr i32 %214, 8
  %216 = call i32 @REG_UPDATE_2(i32 %205, i32 %206, i32 %210, i32 %211, i32 %215)
  %217 = load i32, i32* @MCIF_WB_WARM_UP_CNTL, align 4
  %218 = load i32, i32* @MCIF_WB_PITCH_SIZE_WARMUP, align 4
  %219 = load %struct.mcif_buf_params*, %struct.mcif_buf_params** %5, align 8
  %220 = getelementptr inbounds %struct.mcif_buf_params, %struct.mcif_buf_params* %219, i32 0, i32 3
  %221 = load i32, i32* %220, align 4
  %222 = call i32 @REG_UPDATE(i32 %217, i32 %218, i32 %221)
  ret void
}

declare dso_local %struct.dcn20_mmhubbub* @TO_DCN20_MMHUBBUB(%struct.mcif_wb*) #1

declare dso_local i32 @REG_UPDATE(i32, i32, i32) #1

declare dso_local i32 @MCIF_ADDR(i32) #1

declare dso_local i32 @MCIF_ADDR_HIGH(i32) #1

declare dso_local i32 @REG_UPDATE_2(i32, i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
