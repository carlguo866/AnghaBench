; ModuleID = '/home/carl/AnghaBench/linux/drivers/gpu/drm/omapdrm/dss/extr_venc.c_venc_write_config.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/gpu/drm/omapdrm/dss/extr_venc.c_venc_write_config.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.venc_device = type { i32 }
%struct.venc_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [17 x i8] c"write venc conf\0A\00", align 1
@VENC_LLEN = common dso_local global i32 0, align 4
@VENC_FLENS = common dso_local global i32 0, align 4
@VENC_CC_CARR_WSS_CARR = common dso_local global i32 0, align 4
@VENC_C_PHASE = common dso_local global i32 0, align 4
@VENC_GAIN_U = common dso_local global i32 0, align 4
@VENC_GAIN_V = common dso_local global i32 0, align 4
@VENC_GAIN_Y = common dso_local global i32 0, align 4
@VENC_BLACK_LEVEL = common dso_local global i32 0, align 4
@VENC_BLANK_LEVEL = common dso_local global i32 0, align 4
@VENC_M_CONTROL = common dso_local global i32 0, align 4
@VENC_BSTAMP_WSS_DATA = common dso_local global i32 0, align 4
@VENC_S_CARR = common dso_local global i32 0, align 4
@VENC_L21__WC_CTL = common dso_local global i32 0, align 4
@VENC_SAVID__EAVID = common dso_local global i32 0, align 4
@VENC_FLEN__FAL = common dso_local global i32 0, align 4
@VENC_LAL__PHASE_RESET = common dso_local global i32 0, align 4
@VENC_HS_INT_START_STOP_X = common dso_local global i32 0, align 4
@VENC_HS_EXT_START_STOP_X = common dso_local global i32 0, align 4
@VENC_VS_INT_START_X = common dso_local global i32 0, align 4
@VENC_VS_INT_STOP_X__VS_INT_START_Y = common dso_local global i32 0, align 4
@VENC_VS_INT_STOP_Y__VS_EXT_START_X = common dso_local global i32 0, align 4
@VENC_VS_EXT_STOP_X__VS_EXT_START_Y = common dso_local global i32 0, align 4
@VENC_VS_EXT_STOP_Y = common dso_local global i32 0, align 4
@VENC_AVID_START_STOP_X = common dso_local global i32 0, align 4
@VENC_AVID_START_STOP_Y = common dso_local global i32 0, align 4
@VENC_FID_INT_START_X__FID_INT_START_Y = common dso_local global i32 0, align 4
@VENC_FID_INT_OFFSET_Y__FID_EXT_START_X = common dso_local global i32 0, align 4
@VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y = common dso_local global i32 0, align 4
@VENC_DAC_B__DAC_C = common dso_local global i32 0, align 4
@VENC_VIDOUT_CTRL = common dso_local global i32 0, align 4
@VENC_HFLTR_CTRL = common dso_local global i32 0, align 4
@VENC_X_COLOR = common dso_local global i32 0, align 4
@VENC_LINE21 = common dso_local global i32 0, align 4
@VENC_LN_SEL = common dso_local global i32 0, align 4
@VENC_HTRIGGER_VTRIGGER = common dso_local global i32 0, align 4
@VENC_TVDETGP_INT_START_STOP_X = common dso_local global i32 0, align 4
@VENC_TVDETGP_INT_START_STOP_Y = common dso_local global i32 0, align 4
@VENC_GEN_CTRL = common dso_local global i32 0, align 4
@VENC_F_CONTROL = common dso_local global i32 0, align 4
@VENC_SYNC_CTRL = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.venc_device*, %struct.venc_config*)* @venc_write_config to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @venc_write_config(%struct.venc_device* %0, %struct.venc_config* %1) #0 {
  %3 = alloca %struct.venc_device*, align 8
  %4 = alloca %struct.venc_config*, align 8
  store %struct.venc_device* %0, %struct.venc_device** %3, align 8
  store %struct.venc_config* %1, %struct.venc_config** %4, align 8
  %5 = call i32 @DSSDBG(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %6 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %7 = load i32, i32* @VENC_LLEN, align 4
  %8 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %9 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %8, i32 0, i32 38
  %10 = load i32, i32* %9, align 4
  %11 = call i32 @venc_write_reg(%struct.venc_device* %6, i32 %7, i32 %10)
  %12 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %13 = load i32, i32* @VENC_FLENS, align 4
  %14 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %15 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %14, i32 0, i32 37
  %16 = load i32, i32* %15, align 4
  %17 = call i32 @venc_write_reg(%struct.venc_device* %12, i32 %13, i32 %16)
  %18 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %19 = load i32, i32* @VENC_CC_CARR_WSS_CARR, align 4
  %20 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %21 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %20, i32 0, i32 36
  %22 = load i32, i32* %21, align 4
  %23 = call i32 @venc_write_reg(%struct.venc_device* %18, i32 %19, i32 %22)
  %24 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %25 = load i32, i32* @VENC_C_PHASE, align 4
  %26 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %27 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %26, i32 0, i32 35
  %28 = load i32, i32* %27, align 4
  %29 = call i32 @venc_write_reg(%struct.venc_device* %24, i32 %25, i32 %28)
  %30 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %31 = load i32, i32* @VENC_GAIN_U, align 4
  %32 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %33 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %32, i32 0, i32 34
  %34 = load i32, i32* %33, align 4
  %35 = call i32 @venc_write_reg(%struct.venc_device* %30, i32 %31, i32 %34)
  %36 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %37 = load i32, i32* @VENC_GAIN_V, align 4
  %38 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %39 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %38, i32 0, i32 33
  %40 = load i32, i32* %39, align 4
  %41 = call i32 @venc_write_reg(%struct.venc_device* %36, i32 %37, i32 %40)
  %42 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %43 = load i32, i32* @VENC_GAIN_Y, align 4
  %44 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %45 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %44, i32 0, i32 32
  %46 = load i32, i32* %45, align 4
  %47 = call i32 @venc_write_reg(%struct.venc_device* %42, i32 %43, i32 %46)
  %48 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %49 = load i32, i32* @VENC_BLACK_LEVEL, align 4
  %50 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %51 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %50, i32 0, i32 31
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @venc_write_reg(%struct.venc_device* %48, i32 %49, i32 %52)
  %54 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %55 = load i32, i32* @VENC_BLANK_LEVEL, align 4
  %56 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %57 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %56, i32 0, i32 30
  %58 = load i32, i32* %57, align 4
  %59 = call i32 @venc_write_reg(%struct.venc_device* %54, i32 %55, i32 %58)
  %60 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %61 = load i32, i32* @VENC_M_CONTROL, align 4
  %62 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %63 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %62, i32 0, i32 29
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @venc_write_reg(%struct.venc_device* %60, i32 %61, i32 %64)
  %66 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %67 = load i32, i32* @VENC_BSTAMP_WSS_DATA, align 4
  %68 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %69 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %68, i32 0, i32 28
  %70 = load i32, i32* %69, align 4
  %71 = call i32 @venc_write_reg(%struct.venc_device* %66, i32 %67, i32 %70)
  %72 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %73 = load i32, i32* @VENC_S_CARR, align 4
  %74 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %75 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %74, i32 0, i32 27
  %76 = load i32, i32* %75, align 4
  %77 = call i32 @venc_write_reg(%struct.venc_device* %72, i32 %73, i32 %76)
  %78 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %79 = load i32, i32* @VENC_L21__WC_CTL, align 4
  %80 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %81 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %80, i32 0, i32 26
  %82 = load i32, i32* %81, align 4
  %83 = call i32 @venc_write_reg(%struct.venc_device* %78, i32 %79, i32 %82)
  %84 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %85 = load i32, i32* @VENC_SAVID__EAVID, align 4
  %86 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %87 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %86, i32 0, i32 25
  %88 = load i32, i32* %87, align 4
  %89 = call i32 @venc_write_reg(%struct.venc_device* %84, i32 %85, i32 %88)
  %90 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %91 = load i32, i32* @VENC_FLEN__FAL, align 4
  %92 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %93 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %92, i32 0, i32 24
  %94 = load i32, i32* %93, align 4
  %95 = call i32 @venc_write_reg(%struct.venc_device* %90, i32 %91, i32 %94)
  %96 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %97 = load i32, i32* @VENC_LAL__PHASE_RESET, align 4
  %98 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %99 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %98, i32 0, i32 23
  %100 = load i32, i32* %99, align 4
  %101 = call i32 @venc_write_reg(%struct.venc_device* %96, i32 %97, i32 %100)
  %102 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %103 = load i32, i32* @VENC_HS_INT_START_STOP_X, align 4
  %104 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %105 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %104, i32 0, i32 22
  %106 = load i32, i32* %105, align 4
  %107 = call i32 @venc_write_reg(%struct.venc_device* %102, i32 %103, i32 %106)
  %108 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %109 = load i32, i32* @VENC_HS_EXT_START_STOP_X, align 4
  %110 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %111 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %110, i32 0, i32 21
  %112 = load i32, i32* %111, align 4
  %113 = call i32 @venc_write_reg(%struct.venc_device* %108, i32 %109, i32 %112)
  %114 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %115 = load i32, i32* @VENC_VS_INT_START_X, align 4
  %116 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %117 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %116, i32 0, i32 20
  %118 = load i32, i32* %117, align 4
  %119 = call i32 @venc_write_reg(%struct.venc_device* %114, i32 %115, i32 %118)
  %120 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %121 = load i32, i32* @VENC_VS_INT_STOP_X__VS_INT_START_Y, align 4
  %122 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %123 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %122, i32 0, i32 19
  %124 = load i32, i32* %123, align 4
  %125 = call i32 @venc_write_reg(%struct.venc_device* %120, i32 %121, i32 %124)
  %126 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %127 = load i32, i32* @VENC_VS_INT_STOP_Y__VS_EXT_START_X, align 4
  %128 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %129 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %128, i32 0, i32 18
  %130 = load i32, i32* %129, align 4
  %131 = call i32 @venc_write_reg(%struct.venc_device* %126, i32 %127, i32 %130)
  %132 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %133 = load i32, i32* @VENC_VS_EXT_STOP_X__VS_EXT_START_Y, align 4
  %134 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %135 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %134, i32 0, i32 17
  %136 = load i32, i32* %135, align 4
  %137 = call i32 @venc_write_reg(%struct.venc_device* %132, i32 %133, i32 %136)
  %138 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %139 = load i32, i32* @VENC_VS_EXT_STOP_Y, align 4
  %140 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %141 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %140, i32 0, i32 16
  %142 = load i32, i32* %141, align 4
  %143 = call i32 @venc_write_reg(%struct.venc_device* %138, i32 %139, i32 %142)
  %144 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %145 = load i32, i32* @VENC_AVID_START_STOP_X, align 4
  %146 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %147 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %146, i32 0, i32 15
  %148 = load i32, i32* %147, align 4
  %149 = call i32 @venc_write_reg(%struct.venc_device* %144, i32 %145, i32 %148)
  %150 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %151 = load i32, i32* @VENC_AVID_START_STOP_Y, align 4
  %152 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %153 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %152, i32 0, i32 14
  %154 = load i32, i32* %153, align 4
  %155 = call i32 @venc_write_reg(%struct.venc_device* %150, i32 %151, i32 %154)
  %156 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %157 = load i32, i32* @VENC_FID_INT_START_X__FID_INT_START_Y, align 4
  %158 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %159 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %158, i32 0, i32 13
  %160 = load i32, i32* %159, align 4
  %161 = call i32 @venc_write_reg(%struct.venc_device* %156, i32 %157, i32 %160)
  %162 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %163 = load i32, i32* @VENC_FID_INT_OFFSET_Y__FID_EXT_START_X, align 4
  %164 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %165 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %164, i32 0, i32 12
  %166 = load i32, i32* %165, align 4
  %167 = call i32 @venc_write_reg(%struct.venc_device* %162, i32 %163, i32 %166)
  %168 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %169 = load i32, i32* @VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y, align 4
  %170 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %171 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %170, i32 0, i32 11
  %172 = load i32, i32* %171, align 4
  %173 = call i32 @venc_write_reg(%struct.venc_device* %168, i32 %169, i32 %172)
  %174 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %175 = load i32, i32* @VENC_DAC_B__DAC_C, align 4
  %176 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %177 = load i32, i32* @VENC_DAC_B__DAC_C, align 4
  %178 = call i32 @venc_read_reg(%struct.venc_device* %176, i32 %177)
  %179 = call i32 @venc_write_reg(%struct.venc_device* %174, i32 %175, i32 %178)
  %180 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %181 = load i32, i32* @VENC_VIDOUT_CTRL, align 4
  %182 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %183 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %182, i32 0, i32 10
  %184 = load i32, i32* %183, align 4
  %185 = call i32 @venc_write_reg(%struct.venc_device* %180, i32 %181, i32 %184)
  %186 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %187 = load i32, i32* @VENC_HFLTR_CTRL, align 4
  %188 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %189 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %188, i32 0, i32 9
  %190 = load i32, i32* %189, align 4
  %191 = call i32 @venc_write_reg(%struct.venc_device* %186, i32 %187, i32 %190)
  %192 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %193 = load i32, i32* @VENC_X_COLOR, align 4
  %194 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %195 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %194, i32 0, i32 8
  %196 = load i32, i32* %195, align 4
  %197 = call i32 @venc_write_reg(%struct.venc_device* %192, i32 %193, i32 %196)
  %198 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %199 = load i32, i32* @VENC_LINE21, align 4
  %200 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %201 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %200, i32 0, i32 7
  %202 = load i32, i32* %201, align 4
  %203 = call i32 @venc_write_reg(%struct.venc_device* %198, i32 %199, i32 %202)
  %204 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %205 = load i32, i32* @VENC_LN_SEL, align 4
  %206 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %207 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %206, i32 0, i32 6
  %208 = load i32, i32* %207, align 4
  %209 = call i32 @venc_write_reg(%struct.venc_device* %204, i32 %205, i32 %208)
  %210 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %211 = load i32, i32* @VENC_HTRIGGER_VTRIGGER, align 4
  %212 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %213 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %212, i32 0, i32 5
  %214 = load i32, i32* %213, align 4
  %215 = call i32 @venc_write_reg(%struct.venc_device* %210, i32 %211, i32 %214)
  %216 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %217 = load i32, i32* @VENC_TVDETGP_INT_START_STOP_X, align 4
  %218 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %219 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %218, i32 0, i32 4
  %220 = load i32, i32* %219, align 4
  %221 = call i32 @venc_write_reg(%struct.venc_device* %216, i32 %217, i32 %220)
  %222 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %223 = load i32, i32* @VENC_TVDETGP_INT_START_STOP_Y, align 4
  %224 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %225 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %224, i32 0, i32 3
  %226 = load i32, i32* %225, align 4
  %227 = call i32 @venc_write_reg(%struct.venc_device* %222, i32 %223, i32 %226)
  %228 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %229 = load i32, i32* @VENC_GEN_CTRL, align 4
  %230 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %231 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %230, i32 0, i32 2
  %232 = load i32, i32* %231, align 4
  %233 = call i32 @venc_write_reg(%struct.venc_device* %228, i32 %229, i32 %232)
  %234 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %235 = load i32, i32* @VENC_F_CONTROL, align 4
  %236 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %237 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %236, i32 0, i32 1
  %238 = load i32, i32* %237, align 4
  %239 = call i32 @venc_write_reg(%struct.venc_device* %234, i32 %235, i32 %238)
  %240 = load %struct.venc_device*, %struct.venc_device** %3, align 8
  %241 = load i32, i32* @VENC_SYNC_CTRL, align 4
  %242 = load %struct.venc_config*, %struct.venc_config** %4, align 8
  %243 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %242, i32 0, i32 0
  %244 = load i32, i32* %243, align 4
  %245 = call i32 @venc_write_reg(%struct.venc_device* %240, i32 %241, i32 %244)
  ret void
}

declare dso_local i32 @DSSDBG(i8*) #1

declare dso_local i32 @venc_write_reg(%struct.venc_device*, i32, i32) #1

declare dso_local i32 @venc_read_reg(%struct.venc_device*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
