; ModuleID = '/home/carl/AnghaBench/linux/drivers/video/fbdev/omap2/omapfb/dss/extr_venc.c_venc_write_config.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/video/fbdev/omap2/omapfb/dss/extr_venc.c_venc_write_config.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.TYPE_2__ = type { i32 }
%struct.venc_config = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [17 x i8] c"write venc conf\0A\00", align 1
@VENC_LLEN = common dso_local global i32 0, align 4
@VENC_FLENS = common dso_local global i32 0, align 4
@VENC_CC_CARR_WSS_CARR = common dso_local global i32 0, align 4
@VENC_C_PHASE = common dso_local global i32 0, align 4
@VENC_GAIN_U = common dso_local global i32 0, align 4
@VENC_GAIN_V = common dso_local global i32 0, align 4
@VENC_GAIN_Y = common dso_local global i32 0, align 4
@VENC_BLACK_LEVEL = common dso_local global i32 0, align 4
@VENC_BLANK_LEVEL = common dso_local global i32 0, align 4
@VENC_M_CONTROL = common dso_local global i32 0, align 4
@VENC_BSTAMP_WSS_DATA = common dso_local global i32 0, align 4
@venc = common dso_local global %struct.TYPE_2__ zeroinitializer, align 4
@VENC_S_CARR = common dso_local global i32 0, align 4
@VENC_L21__WC_CTL = common dso_local global i32 0, align 4
@VENC_SAVID__EAVID = common dso_local global i32 0, align 4
@VENC_FLEN__FAL = common dso_local global i32 0, align 4
@VENC_LAL__PHASE_RESET = common dso_local global i32 0, align 4
@VENC_HS_INT_START_STOP_X = common dso_local global i32 0, align 4
@VENC_HS_EXT_START_STOP_X = common dso_local global i32 0, align 4
@VENC_VS_INT_START_X = common dso_local global i32 0, align 4
@VENC_VS_INT_STOP_X__VS_INT_START_Y = common dso_local global i32 0, align 4
@VENC_VS_INT_STOP_Y__VS_EXT_START_X = common dso_local global i32 0, align 4
@VENC_VS_EXT_STOP_X__VS_EXT_START_Y = common dso_local global i32 0, align 4
@VENC_VS_EXT_STOP_Y = common dso_local global i32 0, align 4
@VENC_AVID_START_STOP_X = common dso_local global i32 0, align 4
@VENC_AVID_START_STOP_Y = common dso_local global i32 0, align 4
@VENC_FID_INT_START_X__FID_INT_START_Y = common dso_local global i32 0, align 4
@VENC_FID_INT_OFFSET_Y__FID_EXT_START_X = common dso_local global i32 0, align 4
@VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y = common dso_local global i32 0, align 4
@VENC_DAC_B__DAC_C = common dso_local global i32 0, align 4
@VENC_VIDOUT_CTRL = common dso_local global i32 0, align 4
@VENC_HFLTR_CTRL = common dso_local global i32 0, align 4
@VENC_X_COLOR = common dso_local global i32 0, align 4
@VENC_LINE21 = common dso_local global i32 0, align 4
@VENC_LN_SEL = common dso_local global i32 0, align 4
@VENC_HTRIGGER_VTRIGGER = common dso_local global i32 0, align 4
@VENC_TVDETGP_INT_START_STOP_X = common dso_local global i32 0, align 4
@VENC_TVDETGP_INT_START_STOP_Y = common dso_local global i32 0, align 4
@VENC_GEN_CTRL = common dso_local global i32 0, align 4
@VENC_F_CONTROL = common dso_local global i32 0, align 4
@VENC_SYNC_CTRL = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.venc_config*)* @venc_write_config to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @venc_write_config(%struct.venc_config* %0) #0 {
  %2 = alloca %struct.venc_config*, align 8
  store %struct.venc_config* %0, %struct.venc_config** %2, align 8
  %3 = call i32 @DSSDBG(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str, i64 0, i64 0))
  %4 = load i32, i32* @VENC_LLEN, align 4
  %5 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %6 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = call i32 @venc_write_reg(i32 %4, i32 %7)
  %9 = load i32, i32* @VENC_FLENS, align 4
  %10 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %11 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %10, i32 0, i32 1
  %12 = load i32, i32* %11, align 4
  %13 = call i32 @venc_write_reg(i32 %9, i32 %12)
  %14 = load i32, i32* @VENC_CC_CARR_WSS_CARR, align 4
  %15 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %16 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %15, i32 0, i32 2
  %17 = load i32, i32* %16, align 4
  %18 = call i32 @venc_write_reg(i32 %14, i32 %17)
  %19 = load i32, i32* @VENC_C_PHASE, align 4
  %20 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %21 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %20, i32 0, i32 3
  %22 = load i32, i32* %21, align 4
  %23 = call i32 @venc_write_reg(i32 %19, i32 %22)
  %24 = load i32, i32* @VENC_GAIN_U, align 4
  %25 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %26 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %25, i32 0, i32 4
  %27 = load i32, i32* %26, align 4
  %28 = call i32 @venc_write_reg(i32 %24, i32 %27)
  %29 = load i32, i32* @VENC_GAIN_V, align 4
  %30 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %31 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %30, i32 0, i32 5
  %32 = load i32, i32* %31, align 4
  %33 = call i32 @venc_write_reg(i32 %29, i32 %32)
  %34 = load i32, i32* @VENC_GAIN_Y, align 4
  %35 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %36 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %35, i32 0, i32 6
  %37 = load i32, i32* %36, align 4
  %38 = call i32 @venc_write_reg(i32 %34, i32 %37)
  %39 = load i32, i32* @VENC_BLACK_LEVEL, align 4
  %40 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %41 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %40, i32 0, i32 7
  %42 = load i32, i32* %41, align 4
  %43 = call i32 @venc_write_reg(i32 %39, i32 %42)
  %44 = load i32, i32* @VENC_BLANK_LEVEL, align 4
  %45 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %46 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %45, i32 0, i32 8
  %47 = load i32, i32* %46, align 4
  %48 = call i32 @venc_write_reg(i32 %44, i32 %47)
  %49 = load i32, i32* @VENC_M_CONTROL, align 4
  %50 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %51 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %50, i32 0, i32 9
  %52 = load i32, i32* %51, align 4
  %53 = call i32 @venc_write_reg(i32 %49, i32 %52)
  %54 = load i32, i32* @VENC_BSTAMP_WSS_DATA, align 4
  %55 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %56 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %55, i32 0, i32 10
  %57 = load i32, i32* %56, align 4
  %58 = load i32, i32* getelementptr inbounds (%struct.TYPE_2__, %struct.TYPE_2__* @venc, i32 0, i32 0), align 4
  %59 = or i32 %57, %58
  %60 = call i32 @venc_write_reg(i32 %54, i32 %59)
  %61 = load i32, i32* @VENC_S_CARR, align 4
  %62 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %63 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %62, i32 0, i32 11
  %64 = load i32, i32* %63, align 4
  %65 = call i32 @venc_write_reg(i32 %61, i32 %64)
  %66 = load i32, i32* @VENC_L21__WC_CTL, align 4
  %67 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %68 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %67, i32 0, i32 12
  %69 = load i32, i32* %68, align 4
  %70 = call i32 @venc_write_reg(i32 %66, i32 %69)
  %71 = load i32, i32* @VENC_SAVID__EAVID, align 4
  %72 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %73 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %72, i32 0, i32 13
  %74 = load i32, i32* %73, align 4
  %75 = call i32 @venc_write_reg(i32 %71, i32 %74)
  %76 = load i32, i32* @VENC_FLEN__FAL, align 4
  %77 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %78 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %77, i32 0, i32 14
  %79 = load i32, i32* %78, align 4
  %80 = call i32 @venc_write_reg(i32 %76, i32 %79)
  %81 = load i32, i32* @VENC_LAL__PHASE_RESET, align 4
  %82 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %83 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %82, i32 0, i32 15
  %84 = load i32, i32* %83, align 4
  %85 = call i32 @venc_write_reg(i32 %81, i32 %84)
  %86 = load i32, i32* @VENC_HS_INT_START_STOP_X, align 4
  %87 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %88 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %87, i32 0, i32 16
  %89 = load i32, i32* %88, align 4
  %90 = call i32 @venc_write_reg(i32 %86, i32 %89)
  %91 = load i32, i32* @VENC_HS_EXT_START_STOP_X, align 4
  %92 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %93 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %92, i32 0, i32 17
  %94 = load i32, i32* %93, align 4
  %95 = call i32 @venc_write_reg(i32 %91, i32 %94)
  %96 = load i32, i32* @VENC_VS_INT_START_X, align 4
  %97 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %98 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %97, i32 0, i32 18
  %99 = load i32, i32* %98, align 4
  %100 = call i32 @venc_write_reg(i32 %96, i32 %99)
  %101 = load i32, i32* @VENC_VS_INT_STOP_X__VS_INT_START_Y, align 4
  %102 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %103 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %102, i32 0, i32 19
  %104 = load i32, i32* %103, align 4
  %105 = call i32 @venc_write_reg(i32 %101, i32 %104)
  %106 = load i32, i32* @VENC_VS_INT_STOP_Y__VS_EXT_START_X, align 4
  %107 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %108 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %107, i32 0, i32 20
  %109 = load i32, i32* %108, align 4
  %110 = call i32 @venc_write_reg(i32 %106, i32 %109)
  %111 = load i32, i32* @VENC_VS_EXT_STOP_X__VS_EXT_START_Y, align 4
  %112 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %113 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %112, i32 0, i32 21
  %114 = load i32, i32* %113, align 4
  %115 = call i32 @venc_write_reg(i32 %111, i32 %114)
  %116 = load i32, i32* @VENC_VS_EXT_STOP_Y, align 4
  %117 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %118 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %117, i32 0, i32 22
  %119 = load i32, i32* %118, align 4
  %120 = call i32 @venc_write_reg(i32 %116, i32 %119)
  %121 = load i32, i32* @VENC_AVID_START_STOP_X, align 4
  %122 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %123 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %122, i32 0, i32 23
  %124 = load i32, i32* %123, align 4
  %125 = call i32 @venc_write_reg(i32 %121, i32 %124)
  %126 = load i32, i32* @VENC_AVID_START_STOP_Y, align 4
  %127 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %128 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %127, i32 0, i32 24
  %129 = load i32, i32* %128, align 4
  %130 = call i32 @venc_write_reg(i32 %126, i32 %129)
  %131 = load i32, i32* @VENC_FID_INT_START_X__FID_INT_START_Y, align 4
  %132 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %133 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %132, i32 0, i32 25
  %134 = load i32, i32* %133, align 4
  %135 = call i32 @venc_write_reg(i32 %131, i32 %134)
  %136 = load i32, i32* @VENC_FID_INT_OFFSET_Y__FID_EXT_START_X, align 4
  %137 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %138 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %137, i32 0, i32 26
  %139 = load i32, i32* %138, align 4
  %140 = call i32 @venc_write_reg(i32 %136, i32 %139)
  %141 = load i32, i32* @VENC_FID_EXT_START_Y__FID_EXT_OFFSET_Y, align 4
  %142 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %143 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %142, i32 0, i32 27
  %144 = load i32, i32* %143, align 4
  %145 = call i32 @venc_write_reg(i32 %141, i32 %144)
  %146 = load i32, i32* @VENC_DAC_B__DAC_C, align 4
  %147 = load i32, i32* @VENC_DAC_B__DAC_C, align 4
  %148 = call i32 @venc_read_reg(i32 %147)
  %149 = call i32 @venc_write_reg(i32 %146, i32 %148)
  %150 = load i32, i32* @VENC_VIDOUT_CTRL, align 4
  %151 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %152 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %151, i32 0, i32 28
  %153 = load i32, i32* %152, align 4
  %154 = call i32 @venc_write_reg(i32 %150, i32 %153)
  %155 = load i32, i32* @VENC_HFLTR_CTRL, align 4
  %156 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %157 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %156, i32 0, i32 29
  %158 = load i32, i32* %157, align 4
  %159 = call i32 @venc_write_reg(i32 %155, i32 %158)
  %160 = load i32, i32* @VENC_X_COLOR, align 4
  %161 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %162 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %161, i32 0, i32 30
  %163 = load i32, i32* %162, align 4
  %164 = call i32 @venc_write_reg(i32 %160, i32 %163)
  %165 = load i32, i32* @VENC_LINE21, align 4
  %166 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %167 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %166, i32 0, i32 31
  %168 = load i32, i32* %167, align 4
  %169 = call i32 @venc_write_reg(i32 %165, i32 %168)
  %170 = load i32, i32* @VENC_LN_SEL, align 4
  %171 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %172 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %171, i32 0, i32 32
  %173 = load i32, i32* %172, align 4
  %174 = call i32 @venc_write_reg(i32 %170, i32 %173)
  %175 = load i32, i32* @VENC_HTRIGGER_VTRIGGER, align 4
  %176 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %177 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %176, i32 0, i32 33
  %178 = load i32, i32* %177, align 4
  %179 = call i32 @venc_write_reg(i32 %175, i32 %178)
  %180 = load i32, i32* @VENC_TVDETGP_INT_START_STOP_X, align 4
  %181 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %182 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %181, i32 0, i32 34
  %183 = load i32, i32* %182, align 4
  %184 = call i32 @venc_write_reg(i32 %180, i32 %183)
  %185 = load i32, i32* @VENC_TVDETGP_INT_START_STOP_Y, align 4
  %186 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %187 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %186, i32 0, i32 35
  %188 = load i32, i32* %187, align 4
  %189 = call i32 @venc_write_reg(i32 %185, i32 %188)
  %190 = load i32, i32* @VENC_GEN_CTRL, align 4
  %191 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %192 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %191, i32 0, i32 36
  %193 = load i32, i32* %192, align 4
  %194 = call i32 @venc_write_reg(i32 %190, i32 %193)
  %195 = load i32, i32* @VENC_F_CONTROL, align 4
  %196 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %197 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %196, i32 0, i32 37
  %198 = load i32, i32* %197, align 4
  %199 = call i32 @venc_write_reg(i32 %195, i32 %198)
  %200 = load i32, i32* @VENC_SYNC_CTRL, align 4
  %201 = load %struct.venc_config*, %struct.venc_config** %2, align 8
  %202 = getelementptr inbounds %struct.venc_config, %struct.venc_config* %201, i32 0, i32 38
  %203 = load i32, i32* %202, align 4
  %204 = call i32 @venc_write_reg(i32 %200, i32 %203)
  ret void
}

declare dso_local i32 @DSSDBG(i8*) #1

declare dso_local i32 @venc_write_reg(i32, i32) #1

declare dso_local i32 @venc_read_reg(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
