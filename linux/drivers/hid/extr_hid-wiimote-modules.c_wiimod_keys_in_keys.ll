; ModuleID = '/home/carl/AnghaBench/linux/drivers/hid/extr_hid-wiimote-modules.c_wiimod_keys_in_keys.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/hid/extr_hid-wiimote-modules.c_wiimod_keys_in_keys.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.wiimote_data = type { i32 }

@wiimod_keys_map = common dso_local global i32* null, align 8
@WIIPROTO_KEY_LEFT = common dso_local global i64 0, align 8
@WIIPROTO_KEY_RIGHT = common dso_local global i64 0, align 8
@WIIPROTO_KEY_DOWN = common dso_local global i64 0, align 8
@WIIPROTO_KEY_UP = common dso_local global i64 0, align 8
@WIIPROTO_KEY_PLUS = common dso_local global i64 0, align 8
@WIIPROTO_KEY_TWO = common dso_local global i64 0, align 8
@WIIPROTO_KEY_ONE = common dso_local global i64 0, align 8
@WIIPROTO_KEY_B = common dso_local global i64 0, align 8
@WIIPROTO_KEY_A = common dso_local global i64 0, align 8
@WIIPROTO_KEY_MINUS = common dso_local global i64 0, align 8
@WIIPROTO_KEY_HOME = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.wiimote_data*, i32*)* @wiimod_keys_in_keys to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @wiimod_keys_in_keys(%struct.wiimote_data* %0, i32* %1) #0 {
  %3 = alloca %struct.wiimote_data*, align 8
  %4 = alloca i32*, align 8
  store %struct.wiimote_data* %0, %struct.wiimote_data** %3, align 8
  store i32* %1, i32** %4, align 8
  %5 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %6 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %5, i32 0, i32 0
  %7 = load i32, i32* %6, align 4
  %8 = load i32*, i32** @wiimod_keys_map, align 8
  %9 = load i64, i64* @WIIPROTO_KEY_LEFT, align 8
  %10 = getelementptr inbounds i32, i32* %8, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = load i32*, i32** %4, align 8
  %13 = getelementptr inbounds i32, i32* %12, i64 0
  %14 = load i32, i32* %13, align 4
  %15 = and i32 %14, 1
  %16 = icmp ne i32 %15, 0
  %17 = xor i1 %16, true
  %18 = xor i1 %17, true
  %19 = zext i1 %18 to i32
  %20 = call i32 @input_report_key(i32 %7, i32 %11, i32 %19)
  %21 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %22 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %21, i32 0, i32 0
  %23 = load i32, i32* %22, align 4
  %24 = load i32*, i32** @wiimod_keys_map, align 8
  %25 = load i64, i64* @WIIPROTO_KEY_RIGHT, align 8
  %26 = getelementptr inbounds i32, i32* %24, i64 %25
  %27 = load i32, i32* %26, align 4
  %28 = load i32*, i32** %4, align 8
  %29 = getelementptr inbounds i32, i32* %28, i64 0
  %30 = load i32, i32* %29, align 4
  %31 = and i32 %30, 2
  %32 = icmp ne i32 %31, 0
  %33 = xor i1 %32, true
  %34 = xor i1 %33, true
  %35 = zext i1 %34 to i32
  %36 = call i32 @input_report_key(i32 %23, i32 %27, i32 %35)
  %37 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %38 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %37, i32 0, i32 0
  %39 = load i32, i32* %38, align 4
  %40 = load i32*, i32** @wiimod_keys_map, align 8
  %41 = load i64, i64* @WIIPROTO_KEY_DOWN, align 8
  %42 = getelementptr inbounds i32, i32* %40, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = load i32*, i32** %4, align 8
  %45 = getelementptr inbounds i32, i32* %44, i64 0
  %46 = load i32, i32* %45, align 4
  %47 = and i32 %46, 4
  %48 = icmp ne i32 %47, 0
  %49 = xor i1 %48, true
  %50 = xor i1 %49, true
  %51 = zext i1 %50 to i32
  %52 = call i32 @input_report_key(i32 %39, i32 %43, i32 %51)
  %53 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %54 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %53, i32 0, i32 0
  %55 = load i32, i32* %54, align 4
  %56 = load i32*, i32** @wiimod_keys_map, align 8
  %57 = load i64, i64* @WIIPROTO_KEY_UP, align 8
  %58 = getelementptr inbounds i32, i32* %56, i64 %57
  %59 = load i32, i32* %58, align 4
  %60 = load i32*, i32** %4, align 8
  %61 = getelementptr inbounds i32, i32* %60, i64 0
  %62 = load i32, i32* %61, align 4
  %63 = and i32 %62, 8
  %64 = icmp ne i32 %63, 0
  %65 = xor i1 %64, true
  %66 = xor i1 %65, true
  %67 = zext i1 %66 to i32
  %68 = call i32 @input_report_key(i32 %55, i32 %59, i32 %67)
  %69 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %70 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %69, i32 0, i32 0
  %71 = load i32, i32* %70, align 4
  %72 = load i32*, i32** @wiimod_keys_map, align 8
  %73 = load i64, i64* @WIIPROTO_KEY_PLUS, align 8
  %74 = getelementptr inbounds i32, i32* %72, i64 %73
  %75 = load i32, i32* %74, align 4
  %76 = load i32*, i32** %4, align 8
  %77 = getelementptr inbounds i32, i32* %76, i64 0
  %78 = load i32, i32* %77, align 4
  %79 = and i32 %78, 16
  %80 = icmp ne i32 %79, 0
  %81 = xor i1 %80, true
  %82 = xor i1 %81, true
  %83 = zext i1 %82 to i32
  %84 = call i32 @input_report_key(i32 %71, i32 %75, i32 %83)
  %85 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %86 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %85, i32 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = load i32*, i32** @wiimod_keys_map, align 8
  %89 = load i64, i64* @WIIPROTO_KEY_TWO, align 8
  %90 = getelementptr inbounds i32, i32* %88, i64 %89
  %91 = load i32, i32* %90, align 4
  %92 = load i32*, i32** %4, align 8
  %93 = getelementptr inbounds i32, i32* %92, i64 1
  %94 = load i32, i32* %93, align 4
  %95 = and i32 %94, 1
  %96 = icmp ne i32 %95, 0
  %97 = xor i1 %96, true
  %98 = xor i1 %97, true
  %99 = zext i1 %98 to i32
  %100 = call i32 @input_report_key(i32 %87, i32 %91, i32 %99)
  %101 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %102 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %101, i32 0, i32 0
  %103 = load i32, i32* %102, align 4
  %104 = load i32*, i32** @wiimod_keys_map, align 8
  %105 = load i64, i64* @WIIPROTO_KEY_ONE, align 8
  %106 = getelementptr inbounds i32, i32* %104, i64 %105
  %107 = load i32, i32* %106, align 4
  %108 = load i32*, i32** %4, align 8
  %109 = getelementptr inbounds i32, i32* %108, i64 1
  %110 = load i32, i32* %109, align 4
  %111 = and i32 %110, 2
  %112 = icmp ne i32 %111, 0
  %113 = xor i1 %112, true
  %114 = xor i1 %113, true
  %115 = zext i1 %114 to i32
  %116 = call i32 @input_report_key(i32 %103, i32 %107, i32 %115)
  %117 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %118 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %117, i32 0, i32 0
  %119 = load i32, i32* %118, align 4
  %120 = load i32*, i32** @wiimod_keys_map, align 8
  %121 = load i64, i64* @WIIPROTO_KEY_B, align 8
  %122 = getelementptr inbounds i32, i32* %120, i64 %121
  %123 = load i32, i32* %122, align 4
  %124 = load i32*, i32** %4, align 8
  %125 = getelementptr inbounds i32, i32* %124, i64 1
  %126 = load i32, i32* %125, align 4
  %127 = and i32 %126, 4
  %128 = icmp ne i32 %127, 0
  %129 = xor i1 %128, true
  %130 = xor i1 %129, true
  %131 = zext i1 %130 to i32
  %132 = call i32 @input_report_key(i32 %119, i32 %123, i32 %131)
  %133 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %134 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %133, i32 0, i32 0
  %135 = load i32, i32* %134, align 4
  %136 = load i32*, i32** @wiimod_keys_map, align 8
  %137 = load i64, i64* @WIIPROTO_KEY_A, align 8
  %138 = getelementptr inbounds i32, i32* %136, i64 %137
  %139 = load i32, i32* %138, align 4
  %140 = load i32*, i32** %4, align 8
  %141 = getelementptr inbounds i32, i32* %140, i64 1
  %142 = load i32, i32* %141, align 4
  %143 = and i32 %142, 8
  %144 = icmp ne i32 %143, 0
  %145 = xor i1 %144, true
  %146 = xor i1 %145, true
  %147 = zext i1 %146 to i32
  %148 = call i32 @input_report_key(i32 %135, i32 %139, i32 %147)
  %149 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %150 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %149, i32 0, i32 0
  %151 = load i32, i32* %150, align 4
  %152 = load i32*, i32** @wiimod_keys_map, align 8
  %153 = load i64, i64* @WIIPROTO_KEY_MINUS, align 8
  %154 = getelementptr inbounds i32, i32* %152, i64 %153
  %155 = load i32, i32* %154, align 4
  %156 = load i32*, i32** %4, align 8
  %157 = getelementptr inbounds i32, i32* %156, i64 1
  %158 = load i32, i32* %157, align 4
  %159 = and i32 %158, 16
  %160 = icmp ne i32 %159, 0
  %161 = xor i1 %160, true
  %162 = xor i1 %161, true
  %163 = zext i1 %162 to i32
  %164 = call i32 @input_report_key(i32 %151, i32 %155, i32 %163)
  %165 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %166 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %165, i32 0, i32 0
  %167 = load i32, i32* %166, align 4
  %168 = load i32*, i32** @wiimod_keys_map, align 8
  %169 = load i64, i64* @WIIPROTO_KEY_HOME, align 8
  %170 = getelementptr inbounds i32, i32* %168, i64 %169
  %171 = load i32, i32* %170, align 4
  %172 = load i32*, i32** %4, align 8
  %173 = getelementptr inbounds i32, i32* %172, i64 1
  %174 = load i32, i32* %173, align 4
  %175 = and i32 %174, 128
  %176 = icmp ne i32 %175, 0
  %177 = xor i1 %176, true
  %178 = xor i1 %177, true
  %179 = zext i1 %178 to i32
  %180 = call i32 @input_report_key(i32 %167, i32 %171, i32 %179)
  %181 = load %struct.wiimote_data*, %struct.wiimote_data** %3, align 8
  %182 = getelementptr inbounds %struct.wiimote_data, %struct.wiimote_data* %181, i32 0, i32 0
  %183 = load i32, i32* %182, align 4
  %184 = call i32 @input_sync(i32 %183)
  ret void
}

declare dso_local i32 @input_report_key(i32, i32, i32) #1

declare dso_local i32 @input_sync(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
