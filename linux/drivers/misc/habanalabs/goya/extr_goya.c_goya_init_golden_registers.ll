; ModuleID = '/home/carl/AnghaBench/linux/drivers/misc/habanalabs/goya/extr_goya.c_goya_init_golden_registers.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/misc/habanalabs/goya/extr_goya.c_goya_init_golden_registers.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.hl_device = type { %struct.goya_device* }
%struct.goya_device = type { i32 }

@HW_CAP_GOLDEN = common dso_local global i32 0, align 4
@mmSRAM_Y0_X0_RTR_HBW_RD_RQ_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X1_RTR_HBW_RD_RQ_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X2_RTR_HBW_RD_RQ_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X3_RTR_HBW_RD_RQ_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X4_RTR_HBW_RD_RQ_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X0_RTR_HBW_DATA_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X1_RTR_HBW_DATA_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X2_RTR_HBW_DATA_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X3_RTR_HBW_DATA_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X4_RTR_HBW_DATA_L_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X0_RTR_HBW_DATA_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X1_RTR_HBW_DATA_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X2_RTR_HBW_DATA_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X3_RTR_HBW_DATA_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X4_RTR_HBW_DATA_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X0_RTR_HBW_DATA_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X1_RTR_HBW_DATA_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X2_RTR_HBW_DATA_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X3_RTR_HBW_DATA_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X4_RTR_HBW_DATA_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X0_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X1_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X2_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X3_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X4_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X0_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X1_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X2_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X3_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmSRAM_Y0_X4_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME_STORE_MAX_CREDIT = common dso_local global i32 0, align 4
@mmMME_AGU = common dso_local global i32 0, align 4
@mmMME_SEI_MASK = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_RD_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_RD_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_RD_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_RD_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_RD_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_RD_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_WR_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_WR_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_WR_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_WR_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_WR_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_WR_RQ_W_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_RD_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_RD_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_RD_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_RD_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_RD_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_RD_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_WR_RS_E_ARB = common dso_local global i32 0, align 4
@mmMME6_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME5_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME4_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME3_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME2_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_RD_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_WR_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC1_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_RD_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_WR_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC2_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_RD_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_WR_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC3_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_RD_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_WR_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC4_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_RD_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_WR_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC5_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_RD_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_RD_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_RD_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_WR_RQ_N_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_WR_RQ_S_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_WR_RQ_E_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_RD_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_RD_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_RD_RS_W_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_WR_RS_N_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_WR_RS_S_ARB = common dso_local global i32 0, align 4
@mmTPC6_RTR_HBW_WR_RS_W_ARB = common dso_local global i32 0, align 4
@mmMME1_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmMME2_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmMME3_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmMME4_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmMME5_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmMME6_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC0_NRTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC1_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC2_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC3_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC4_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC5_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC6_RTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmTPC7_NRTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmPCI_NRTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmDMA_NRTR_SPLIT_COEF_0 = common dso_local global i32 0, align 4
@mmMME1_RTR_SCRAMB_EN = common dso_local global i32 0, align 4
@MME1_RTR_SCRAMB_EN_VAL_SHIFT = common dso_local global i32 0, align 4
@mmMME1_RTR_NON_LIN_SCRAMB = common dso_local global i32 0, align 4
@MME1_RTR_NON_LIN_SCRAMB_EN_SHIFT = common dso_local global i32 0, align 4
@mmTPC0_CFG_TPC_INTR_MASK = common dso_local global i32 0, align 4
@mmTPC0_NRTR_SCRAMB_EN = common dso_local global i32 0, align 4
@TPC0_NRTR_SCRAMB_EN_VAL_SHIFT = common dso_local global i32 0, align 4
@mmTPC0_NRTR_NON_LIN_SCRAMB = common dso_local global i32 0, align 4
@TPC0_NRTR_NON_LIN_SCRAMB_EN_SHIFT = common dso_local global i32 0, align 4
@mmDMA_NRTR_SCRAMB_EN = common dso_local global i32 0, align 4
@DMA_NRTR_SCRAMB_EN_VAL_SHIFT = common dso_local global i32 0, align 4
@mmDMA_NRTR_NON_LIN_SCRAMB = common dso_local global i32 0, align 4
@DMA_NRTR_NON_LIN_SCRAMB_EN_SHIFT = common dso_local global i32 0, align 4
@mmPCI_NRTR_SCRAMB_EN = common dso_local global i32 0, align 4
@PCI_NRTR_SCRAMB_EN_VAL_SHIFT = common dso_local global i32 0, align 4
@mmPCI_NRTR_NON_LIN_SCRAMB = common dso_local global i32 0, align 4
@PCI_NRTR_NON_LIN_SCRAMB_EN_SHIFT = common dso_local global i32 0, align 4
@mmDMA_CH_1_CFG0 = common dso_local global i32 0, align 4
@mmTPC_PLL_CLK_RLX_0 = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.hl_device*)* @goya_init_golden_registers to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @goya_init_golden_registers(%struct.hl_device* %0) #0 {
  %2 = alloca %struct.hl_device*, align 8
  %3 = alloca %struct.goya_device*, align 8
  %4 = alloca [10 x i32], align 16
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store %struct.hl_device* %0, %struct.hl_device** %2, align 8
  %8 = load %struct.hl_device*, %struct.hl_device** %2, align 8
  %9 = getelementptr inbounds %struct.hl_device, %struct.hl_device* %8, i32 0, i32 0
  %10 = load %struct.goya_device*, %struct.goya_device** %9, align 8
  store %struct.goya_device* %10, %struct.goya_device** %3, align 8
  %11 = load %struct.goya_device*, %struct.goya_device** %3, align 8
  %12 = getelementptr inbounds %struct.goya_device, %struct.goya_device* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = load i32, i32* @HW_CAP_GOLDEN, align 4
  %15 = and i32 %13, %14
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %17, label %18

17:                                               ; preds = %1
  br label %705

18:                                               ; preds = %1
  %19 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 0
  store i32 131200, i32* %19, align 16
  %20 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 1
  store i32 4198400, i32* %20, align 4
  %21 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 2
  store i32 2099200, i32* %21, align 8
  %22 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 3
  store i32 8192, i32* %22, align 4
  %23 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 4
  store i32 524800, i32* %23, align 16
  %24 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 5
  store i32 262400, i32* %24, align 4
  %25 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 6
  store i32 1049600, i32* %25, align 8
  %26 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 7
  store i32 16384, i32* %26, align 4
  %27 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 8
  store i32 65536, i32* %27, align 16
  %28 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 9
  store i32 32768, i32* %28, align 4
  store i32 32767, i32* %5, align 4
  store i32 0, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %29

29:                                               ; preds = %153, %18
  %30 = load i32, i32* %7, align 4
  %31 = icmp slt i32 %30, 6
  br i1 %31, label %32, label %158

32:                                               ; preds = %29
  %33 = load i32, i32* @mmSRAM_Y0_X0_RTR_HBW_RD_RQ_L_ARB, align 4
  %34 = load i32, i32* %6, align 4
  %35 = add nsw i32 %33, %34
  %36 = call i32 @WREG32(i32 %35, i32 770)
  %37 = load i32, i32* @mmSRAM_Y0_X1_RTR_HBW_RD_RQ_L_ARB, align 4
  %38 = load i32, i32* %6, align 4
  %39 = add nsw i32 %37, %38
  %40 = call i32 @WREG32(i32 %39, i32 770)
  %41 = load i32, i32* @mmSRAM_Y0_X2_RTR_HBW_RD_RQ_L_ARB, align 4
  %42 = load i32, i32* %6, align 4
  %43 = add nsw i32 %41, %42
  %44 = call i32 @WREG32(i32 %43, i32 770)
  %45 = load i32, i32* @mmSRAM_Y0_X3_RTR_HBW_RD_RQ_L_ARB, align 4
  %46 = load i32, i32* %6, align 4
  %47 = add nsw i32 %45, %46
  %48 = call i32 @WREG32(i32 %47, i32 770)
  %49 = load i32, i32* @mmSRAM_Y0_X4_RTR_HBW_RD_RQ_L_ARB, align 4
  %50 = load i32, i32* %6, align 4
  %51 = add nsw i32 %49, %50
  %52 = call i32 @WREG32(i32 %51, i32 770)
  %53 = load i32, i32* @mmSRAM_Y0_X0_RTR_HBW_DATA_L_ARB, align 4
  %54 = load i32, i32* %6, align 4
  %55 = add nsw i32 %53, %54
  %56 = call i32 @WREG32(i32 %55, i32 516)
  %57 = load i32, i32* @mmSRAM_Y0_X1_RTR_HBW_DATA_L_ARB, align 4
  %58 = load i32, i32* %6, align 4
  %59 = add nsw i32 %57, %58
  %60 = call i32 @WREG32(i32 %59, i32 516)
  %61 = load i32, i32* @mmSRAM_Y0_X2_RTR_HBW_DATA_L_ARB, align 4
  %62 = load i32, i32* %6, align 4
  %63 = add nsw i32 %61, %62
  %64 = call i32 @WREG32(i32 %63, i32 516)
  %65 = load i32, i32* @mmSRAM_Y0_X3_RTR_HBW_DATA_L_ARB, align 4
  %66 = load i32, i32* %6, align 4
  %67 = add nsw i32 %65, %66
  %68 = call i32 @WREG32(i32 %67, i32 516)
  %69 = load i32, i32* @mmSRAM_Y0_X4_RTR_HBW_DATA_L_ARB, align 4
  %70 = load i32, i32* %6, align 4
  %71 = add nsw i32 %69, %70
  %72 = call i32 @WREG32(i32 %71, i32 516)
  %73 = load i32, i32* @mmSRAM_Y0_X0_RTR_HBW_DATA_E_ARB, align 4
  %74 = load i32, i32* %6, align 4
  %75 = add nsw i32 %73, %74
  %76 = call i32 @WREG32(i32 %75, i32 518)
  %77 = load i32, i32* @mmSRAM_Y0_X1_RTR_HBW_DATA_E_ARB, align 4
  %78 = load i32, i32* %6, align 4
  %79 = add nsw i32 %77, %78
  %80 = call i32 @WREG32(i32 %79, i32 518)
  %81 = load i32, i32* @mmSRAM_Y0_X2_RTR_HBW_DATA_E_ARB, align 4
  %82 = load i32, i32* %6, align 4
  %83 = add nsw i32 %81, %82
  %84 = call i32 @WREG32(i32 %83, i32 518)
  %85 = load i32, i32* @mmSRAM_Y0_X3_RTR_HBW_DATA_E_ARB, align 4
  %86 = load i32, i32* %6, align 4
  %87 = add nsw i32 %85, %86
  %88 = call i32 @WREG32(i32 %87, i32 519)
  %89 = load i32, i32* @mmSRAM_Y0_X4_RTR_HBW_DATA_E_ARB, align 4
  %90 = load i32, i32* %6, align 4
  %91 = add nsw i32 %89, %90
  %92 = call i32 @WREG32(i32 %91, i32 519)
  %93 = load i32, i32* @mmSRAM_Y0_X0_RTR_HBW_DATA_W_ARB, align 4
  %94 = load i32, i32* %6, align 4
  %95 = add nsw i32 %93, %94
  %96 = call i32 @WREG32(i32 %95, i32 519)
  %97 = load i32, i32* @mmSRAM_Y0_X1_RTR_HBW_DATA_W_ARB, align 4
  %98 = load i32, i32* %6, align 4
  %99 = add nsw i32 %97, %98
  %100 = call i32 @WREG32(i32 %99, i32 519)
  %101 = load i32, i32* @mmSRAM_Y0_X2_RTR_HBW_DATA_W_ARB, align 4
  %102 = load i32, i32* %6, align 4
  %103 = add nsw i32 %101, %102
  %104 = call i32 @WREG32(i32 %103, i32 518)
  %105 = load i32, i32* @mmSRAM_Y0_X3_RTR_HBW_DATA_W_ARB, align 4
  %106 = load i32, i32* %6, align 4
  %107 = add nsw i32 %105, %106
  %108 = call i32 @WREG32(i32 %107, i32 518)
  %109 = load i32, i32* @mmSRAM_Y0_X4_RTR_HBW_DATA_W_ARB, align 4
  %110 = load i32, i32* %6, align 4
  %111 = add nsw i32 %109, %110
  %112 = call i32 @WREG32(i32 %111, i32 518)
  %113 = load i32, i32* @mmSRAM_Y0_X0_RTR_HBW_WR_RS_E_ARB, align 4
  %114 = load i32, i32* %6, align 4
  %115 = add nsw i32 %113, %114
  %116 = call i32 @WREG32(i32 %115, i32 257)
  %117 = load i32, i32* @mmSRAM_Y0_X1_RTR_HBW_WR_RS_E_ARB, align 4
  %118 = load i32, i32* %6, align 4
  %119 = add nsw i32 %117, %118
  %120 = call i32 @WREG32(i32 %119, i32 258)
  %121 = load i32, i32* @mmSRAM_Y0_X2_RTR_HBW_WR_RS_E_ARB, align 4
  %122 = load i32, i32* %6, align 4
  %123 = add nsw i32 %121, %122
  %124 = call i32 @WREG32(i32 %123, i32 259)
  %125 = load i32, i32* @mmSRAM_Y0_X3_RTR_HBW_WR_RS_E_ARB, align 4
  %126 = load i32, i32* %6, align 4
  %127 = add nsw i32 %125, %126
  %128 = call i32 @WREG32(i32 %127, i32 260)
  %129 = load i32, i32* @mmSRAM_Y0_X4_RTR_HBW_WR_RS_E_ARB, align 4
  %130 = load i32, i32* %6, align 4
  %131 = add nsw i32 %129, %130
  %132 = call i32 @WREG32(i32 %131, i32 261)
  %133 = load i32, i32* @mmSRAM_Y0_X0_RTR_HBW_WR_RS_W_ARB, align 4
  %134 = load i32, i32* %6, align 4
  %135 = add nsw i32 %133, %134
  %136 = call i32 @WREG32(i32 %135, i32 261)
  %137 = load i32, i32* @mmSRAM_Y0_X1_RTR_HBW_WR_RS_W_ARB, align 4
  %138 = load i32, i32* %6, align 4
  %139 = add nsw i32 %137, %138
  %140 = call i32 @WREG32(i32 %139, i32 260)
  %141 = load i32, i32* @mmSRAM_Y0_X2_RTR_HBW_WR_RS_W_ARB, align 4
  %142 = load i32, i32* %6, align 4
  %143 = add nsw i32 %141, %142
  %144 = call i32 @WREG32(i32 %143, i32 259)
  %145 = load i32, i32* @mmSRAM_Y0_X3_RTR_HBW_WR_RS_W_ARB, align 4
  %146 = load i32, i32* %6, align 4
  %147 = add nsw i32 %145, %146
  %148 = call i32 @WREG32(i32 %147, i32 258)
  %149 = load i32, i32* @mmSRAM_Y0_X4_RTR_HBW_WR_RS_W_ARB, align 4
  %150 = load i32, i32* %6, align 4
  %151 = add nsw i32 %149, %150
  %152 = call i32 @WREG32(i32 %151, i32 257)
  br label %153

153:                                              ; preds = %32
  %154 = load i32, i32* %7, align 4
  %155 = add nsw i32 %154, 1
  store i32 %155, i32* %7, align 4
  %156 = load i32, i32* %6, align 4
  %157 = add nsw i32 %156, 131072
  store i32 %157, i32* %6, align 4
  br label %29

158:                                              ; preds = %29
  %159 = load i32, i32* @mmMME_STORE_MAX_CREDIT, align 4
  %160 = call i32 @WREG32(i32 %159, i32 33)
  %161 = load i32, i32* @mmMME_AGU, align 4
  %162 = call i32 @WREG32(i32 %161, i32 252645136)
  %163 = load i32, i32* @mmMME_SEI_MASK, align 4
  %164 = call i32 @WREG32(i32 %163, i32 -1)
  %165 = load i32, i32* @mmMME6_RTR_HBW_RD_RQ_N_ARB, align 4
  %166 = call i32 @WREG32(i32 %165, i32 16843009)
  %167 = load i32, i32* @mmMME5_RTR_HBW_RD_RQ_N_ARB, align 4
  %168 = call i32 @WREG32(i32 %167, i32 17039617)
  %169 = load i32, i32* @mmMME4_RTR_HBW_RD_RQ_N_ARB, align 4
  %170 = call i32 @WREG32(i32 %169, i32 16974081)
  %171 = load i32, i32* @mmMME3_RTR_HBW_RD_RQ_N_ARB, align 4
  %172 = call i32 @WREG32(i32 %171, i32 16908545)
  %173 = load i32, i32* @mmMME2_RTR_HBW_RD_RQ_N_ARB, align 4
  %174 = call i32 @WREG32(i32 %173, i32 16843009)
  %175 = load i32, i32* @mmMME1_RTR_HBW_RD_RQ_N_ARB, align 4
  %176 = call i32 @WREG32(i32 %175, i32 117507841)
  %177 = load i32, i32* @mmMME6_RTR_HBW_RD_RQ_S_ARB, align 4
  %178 = call i32 @WREG32(i32 %177, i32 67175425)
  %179 = load i32, i32* @mmMME5_RTR_HBW_RD_RQ_S_ARB, align 4
  %180 = call i32 @WREG32(i32 %179, i32 67437569)
  %181 = load i32, i32* @mmMME4_RTR_HBW_RD_RQ_S_ARB, align 4
  %182 = call i32 @WREG32(i32 %181, i32 50791169)
  %183 = load i32, i32* @mmMME3_RTR_HBW_RD_RQ_S_ARB, align 4
  %184 = call i32 @WREG32(i32 %183, i32 16974081)
  %185 = load i32, i32* @mmMME2_RTR_HBW_RD_RQ_S_ARB, align 4
  %186 = call i32 @WREG32(i32 %185, i32 17039617)
  %187 = load i32, i32* @mmMME1_RTR_HBW_RD_RQ_S_ARB, align 4
  %188 = call i32 @WREG32(i32 %187, i32 17105157)
  %189 = load i32, i32* @mmMME6_RTR_HBW_RD_RQ_W_ARB, align 4
  %190 = call i32 @WREG32(i32 %189, i32 16844033)
  %191 = load i32, i32* @mmMME5_RTR_HBW_RD_RQ_W_ARB, align 4
  %192 = call i32 @WREG32(i32 %191, i32 16844033)
  %193 = load i32, i32* @mmMME4_RTR_HBW_RD_RQ_W_ARB, align 4
  %194 = call i32 @WREG32(i32 %193, i32 17040129)
  %195 = load i32, i32* @mmMME3_RTR_HBW_RD_RQ_W_ARB, align 4
  %196 = call i32 @WREG32(i32 %195, i32 16974849)
  %197 = load i32, i32* @mmMME2_RTR_HBW_RD_RQ_W_ARB, align 4
  %198 = call i32 @WREG32(i32 %197, i32 17039617)
  %199 = load i32, i32* @mmMME1_RTR_HBW_RD_RQ_W_ARB, align 4
  %200 = call i32 @WREG32(i32 %199, i32 17105153)
  %201 = load i32, i32* @mmMME6_RTR_HBW_WR_RQ_N_ARB, align 4
  %202 = call i32 @WREG32(i32 %201, i32 33686018)
  %203 = load i32, i32* @mmMME5_RTR_HBW_WR_RQ_N_ARB, align 4
  %204 = call i32 @WREG32(i32 %203, i32 17236225)
  %205 = load i32, i32* @mmMME4_RTR_HBW_WR_RQ_N_ARB, align 4
  %206 = call i32 @WREG32(i32 %205, i32 33686017)
  %207 = load i32, i32* @mmMME3_RTR_HBW_WR_RQ_N_ARB, align 4
  %208 = call i32 @WREG32(i32 %207, i32 117573377)
  %209 = load i32, i32* @mmMME2_RTR_HBW_WR_RQ_N_ARB, align 4
  %210 = call i32 @WREG32(i32 %209, i32 16908545)
  %211 = load i32, i32* @mmMME1_RTR_HBW_WR_RQ_S_ARB, align 4
  %212 = call i32 @WREG32(i32 %211, i32 16843009)
  %213 = load i32, i32* @mmMME6_RTR_HBW_WR_RQ_S_ARB, align 4
  %214 = call i32 @WREG32(i32 %213, i32 17236225)
  %215 = load i32, i32* @mmMME5_RTR_HBW_WR_RQ_S_ARB, align 4
  %216 = call i32 @WREG32(i32 %215, i32 17236225)
  %217 = load i32, i32* @mmMME4_RTR_HBW_WR_RQ_S_ARB, align 4
  %218 = call i32 @WREG32(i32 %217, i32 117573377)
  %219 = load i32, i32* @mmMME3_RTR_HBW_WR_RQ_S_ARB, align 4
  %220 = call i32 @WREG32(i32 %219, i32 33686017)
  %221 = load i32, i32* @mmMME2_RTR_HBW_WR_RQ_S_ARB, align 4
  %222 = call i32 @WREG32(i32 %221, i32 17236225)
  %223 = load i32, i32* @mmMME1_RTR_HBW_WR_RQ_S_ARB, align 4
  %224 = call i32 @WREG32(i32 %223, i32 16908546)
  %225 = load i32, i32* @mmMME6_RTR_HBW_WR_RQ_W_ARB, align 4
  %226 = call i32 @WREG32(i32 %225, i32 16910081)
  %227 = load i32, i32* @mmMME5_RTR_HBW_WR_RQ_W_ARB, align 4
  %228 = call i32 @WREG32(i32 %227, i32 16910081)
  %229 = load i32, i32* @mmMME4_RTR_HBW_WR_RQ_W_ARB, align 4
  %230 = call i32 @WREG32(i32 %229, i32 117573383)
  %231 = load i32, i32* @mmMME3_RTR_HBW_WR_RQ_W_ARB, align 4
  %232 = call i32 @WREG32(i32 %231, i32 16908801)
  %233 = load i32, i32* @mmMME2_RTR_HBW_WR_RQ_W_ARB, align 4
  %234 = call i32 @WREG32(i32 %233, i32 17236481)
  %235 = load i32, i32* @mmMME1_RTR_HBW_WR_RQ_W_ARB, align 4
  %236 = call i32 @WREG32(i32 %235, i32 17236481)
  %237 = load i32, i32* @mmMME6_RTR_HBW_RD_RS_N_ARB, align 4
  %238 = call i32 @WREG32(i32 %237, i32 17236226)
  %239 = load i32, i32* @mmMME5_RTR_HBW_RD_RS_N_ARB, align 4
  %240 = call i32 @WREG32(i32 %239, i32 17236226)
  %241 = load i32, i32* @mmMME4_RTR_HBW_RD_RS_N_ARB, align 4
  %242 = call i32 @WREG32(i32 %241, i32 17170690)
  %243 = load i32, i32* @mmMME3_RTR_HBW_RD_RS_N_ARB, align 4
  %244 = call i32 @WREG32(i32 %243, i32 17039618)
  %245 = load i32, i32* @mmMME2_RTR_HBW_RD_RS_N_ARB, align 4
  %246 = call i32 @WREG32(i32 %245, i32 16908546)
  %247 = load i32, i32* @mmMME1_RTR_HBW_RD_RS_N_ARB, align 4
  %248 = call i32 @WREG32(i32 %247, i32 16908551)
  %249 = load i32, i32* @mmMME6_RTR_HBW_RD_RS_S_ARB, align 4
  %250 = call i32 @WREG32(i32 %249, i32 16908550)
  %251 = load i32, i32* @mmMME5_RTR_HBW_RD_RS_S_ARB, align 4
  %252 = call i32 @WREG32(i32 %251, i32 16908546)
  %253 = load i32, i32* @mmMME4_RTR_HBW_RD_RS_S_ARB, align 4
  %254 = call i32 @WREG32(i32 %253, i32 17039618)
  %255 = load i32, i32* @mmMME3_RTR_HBW_RD_RS_S_ARB, align 4
  %256 = call i32 @WREG32(i32 %255, i32 17170690)
  %257 = load i32, i32* @mmMME2_RTR_HBW_RD_RS_S_ARB, align 4
  %258 = call i32 @WREG32(i32 %257, i32 17236226)
  %259 = load i32, i32* @mmMME1_RTR_HBW_RD_RS_S_ARB, align 4
  %260 = call i32 @WREG32(i32 %259, i32 17236226)
  %261 = load i32, i32* @mmMME6_RTR_HBW_RD_RS_E_ARB, align 4
  %262 = call i32 @WREG32(i32 %261, i32 16910082)
  %263 = load i32, i32* @mmMME5_RTR_HBW_RD_RS_E_ARB, align 4
  %264 = call i32 @WREG32(i32 %263, i32 16910082)
  %265 = load i32, i32* @mmMME4_RTR_HBW_RD_RS_E_ARB, align 4
  %266 = call i32 @WREG32(i32 %265, i32 17040898)
  %267 = load i32, i32* @mmMME3_RTR_HBW_RD_RS_E_ARB, align 4
  %268 = call i32 @WREG32(i32 %267, i32 17171458)
  %269 = load i32, i32* @mmMME2_RTR_HBW_RD_RS_E_ARB, align 4
  %270 = call i32 @WREG32(i32 %269, i32 17236482)
  %271 = load i32, i32* @mmMME1_RTR_HBW_RD_RS_E_ARB, align 4
  %272 = call i32 @WREG32(i32 %271, i32 17236226)
  %273 = load i32, i32* @mmMME6_RTR_HBW_RD_RS_W_ARB, align 4
  %274 = call i32 @WREG32(i32 %273, i32 17171457)
  %275 = load i32, i32* @mmMME5_RTR_HBW_RD_RS_W_ARB, align 4
  %276 = call i32 @WREG32(i32 %275, i32 17171457)
  %277 = load i32, i32* @mmMME4_RTR_HBW_RD_RS_W_ARB, align 4
  %278 = call i32 @WREG32(i32 %277, i32 17171457)
  %279 = load i32, i32* @mmMME3_RTR_HBW_RD_RS_W_ARB, align 4
  %280 = call i32 @WREG32(i32 %279, i32 17171457)
  %281 = load i32, i32* @mmMME2_RTR_HBW_RD_RS_W_ARB, align 4
  %282 = call i32 @WREG32(i32 %281, i32 17171457)
  %283 = load i32, i32* @mmMME1_RTR_HBW_RD_RS_W_ARB, align 4
  %284 = call i32 @WREG32(i32 %283, i32 17171457)
  %285 = load i32, i32* @mmMME6_RTR_HBW_WR_RS_N_ARB, align 4
  %286 = call i32 @WREG32(i32 %285, i32 17105153)
  %287 = load i32, i32* @mmMME5_RTR_HBW_WR_RS_N_ARB, align 4
  %288 = call i32 @WREG32(i32 %287, i32 17039617)
  %289 = load i32, i32* @mmMME4_RTR_HBW_WR_RS_N_ARB, align 4
  %290 = call i32 @WREG32(i32 %289, i32 16974081)
  %291 = load i32, i32* @mmMME3_RTR_HBW_WR_RS_N_ARB, align 4
  %292 = call i32 @WREG32(i32 %291, i32 16908545)
  %293 = load i32, i32* @mmMME2_RTR_HBW_WR_RS_N_ARB, align 4
  %294 = call i32 @WREG32(i32 %293, i32 16843009)
  %295 = load i32, i32* @mmMME1_RTR_HBW_WR_RS_N_ARB, align 4
  %296 = call i32 @WREG32(i32 %295, i32 16843015)
  %297 = load i32, i32* @mmMME6_RTR_HBW_WR_RS_S_ARB, align 4
  %298 = call i32 @WREG32(i32 %297, i32 16843015)
  %299 = load i32, i32* @mmMME5_RTR_HBW_WR_RS_S_ARB, align 4
  %300 = call i32 @WREG32(i32 %299, i32 16843009)
  %301 = load i32, i32* @mmMME4_RTR_HBW_WR_RS_S_ARB, align 4
  %302 = call i32 @WREG32(i32 %301, i32 16908545)
  %303 = load i32, i32* @mmMME3_RTR_HBW_WR_RS_S_ARB, align 4
  %304 = call i32 @WREG32(i32 %303, i32 16974081)
  %305 = load i32, i32* @mmMME2_RTR_HBW_WR_RS_S_ARB, align 4
  %306 = call i32 @WREG32(i32 %305, i32 17039617)
  %307 = load i32, i32* @mmMME1_RTR_HBW_WR_RS_S_ARB, align 4
  %308 = call i32 @WREG32(i32 %307, i32 17105153)
  %309 = load i32, i32* @mmMME6_RTR_HBW_WR_RS_E_ARB, align 4
  %310 = call i32 @WREG32(i32 %309, i32 16844033)
  %311 = load i32, i32* @mmMME5_RTR_HBW_WR_RS_E_ARB, align 4
  %312 = call i32 @WREG32(i32 %311, i32 16844033)
  %313 = load i32, i32* @mmMME4_RTR_HBW_WR_RS_E_ARB, align 4
  %314 = call i32 @WREG32(i32 %313, i32 17040129)
  %315 = load i32, i32* @mmMME3_RTR_HBW_WR_RS_E_ARB, align 4
  %316 = call i32 @WREG32(i32 %315, i32 16974849)
  %317 = load i32, i32* @mmMME2_RTR_HBW_WR_RS_E_ARB, align 4
  %318 = call i32 @WREG32(i32 %317, i32 17039617)
  %319 = load i32, i32* @mmMME1_RTR_HBW_WR_RS_E_ARB, align 4
  %320 = call i32 @WREG32(i32 %319, i32 17105153)
  %321 = load i32, i32* @mmMME6_RTR_HBW_WR_RS_W_ARB, align 4
  %322 = call i32 @WREG32(i32 %321, i32 16843009)
  %323 = load i32, i32* @mmMME5_RTR_HBW_WR_RS_W_ARB, align 4
  %324 = call i32 @WREG32(i32 %323, i32 16843009)
  %325 = load i32, i32* @mmMME4_RTR_HBW_WR_RS_W_ARB, align 4
  %326 = call i32 @WREG32(i32 %325, i32 16843009)
  %327 = load i32, i32* @mmMME3_RTR_HBW_WR_RS_W_ARB, align 4
  %328 = call i32 @WREG32(i32 %327, i32 16843009)
  %329 = load i32, i32* @mmMME2_RTR_HBW_WR_RS_W_ARB, align 4
  %330 = call i32 @WREG32(i32 %329, i32 16843009)
  %331 = load i32, i32* @mmMME1_RTR_HBW_WR_RS_W_ARB, align 4
  %332 = call i32 @WREG32(i32 %331, i32 16843009)
  %333 = load i32, i32* @mmTPC1_RTR_HBW_RD_RQ_N_ARB, align 4
  %334 = call i32 @WREG32(i32 %333, i32 16843009)
  %335 = load i32, i32* @mmTPC1_RTR_HBW_RD_RQ_S_ARB, align 4
  %336 = call i32 @WREG32(i32 %335, i32 16843009)
  %337 = load i32, i32* @mmTPC1_RTR_HBW_RD_RQ_E_ARB, align 4
  %338 = call i32 @WREG32(i32 %337, i32 17170689)
  %339 = load i32, i32* @mmTPC1_RTR_HBW_WR_RQ_N_ARB, align 4
  %340 = call i32 @WREG32(i32 %339, i32 33685762)
  %341 = load i32, i32* @mmTPC1_RTR_HBW_WR_RQ_S_ARB, align 4
  %342 = call i32 @WREG32(i32 %341, i32 16843009)
  %343 = load i32, i32* @mmTPC1_RTR_HBW_WR_RQ_E_ARB, align 4
  %344 = call i32 @WREG32(i32 %343, i32 34013698)
  %345 = load i32, i32* @mmTPC1_RTR_HBW_RD_RS_N_ARB, align 4
  %346 = call i32 @WREG32(i32 %345, i32 16908801)
  %347 = load i32, i32* @mmTPC1_RTR_HBW_RD_RS_S_ARB, align 4
  %348 = call i32 @WREG32(i32 %347, i32 17236481)
  %349 = load i32, i32* @mmTPC1_RTR_HBW_RD_RS_W_ARB, align 4
  %350 = call i32 @WREG32(i32 %349, i32 17236482)
  %351 = load i32, i32* @mmTPC1_RTR_HBW_WR_RS_N_ARB, align 4
  %352 = call i32 @WREG32(i32 %351, i32 16843009)
  %353 = load i32, i32* @mmTPC1_RTR_HBW_WR_RS_S_ARB, align 4
  %354 = call i32 @WREG32(i32 %353, i32 17105153)
  %355 = load i32, i32* @mmTPC1_RTR_HBW_WR_RS_W_ARB, align 4
  %356 = call i32 @WREG32(i32 %355, i32 17105153)
  %357 = load i32, i32* @mmTPC2_RTR_HBW_RD_RQ_N_ARB, align 4
  %358 = call i32 @WREG32(i32 %357, i32 16908545)
  %359 = load i32, i32* @mmTPC2_RTR_HBW_RD_RQ_S_ARB, align 4
  %360 = call i32 @WREG32(i32 %359, i32 17105153)
  %361 = load i32, i32* @mmTPC2_RTR_HBW_RD_RQ_E_ARB, align 4
  %362 = call i32 @WREG32(i32 %361, i32 16843265)
  %363 = load i32, i32* @mmTPC2_RTR_HBW_WR_RQ_N_ARB, align 4
  %364 = call i32 @WREG32(i32 %363, i32 33816834)
  %365 = load i32, i32* @mmTPC2_RTR_HBW_WR_RQ_S_ARB, align 4
  %366 = call i32 @WREG32(i32 %365, i32 17105153)
  %367 = load i32, i32* @mmTPC2_RTR_HBW_WR_RQ_E_ARB, align 4
  %368 = call i32 @WREG32(i32 %367, i32 33948162)
  %369 = load i32, i32* @mmTPC2_RTR_HBW_RD_RS_N_ARB, align 4
  %370 = call i32 @WREG32(i32 %369, i32 16908801)
  %371 = load i32, i32* @mmTPC2_RTR_HBW_RD_RS_S_ARB, align 4
  %372 = call i32 @WREG32(i32 %371, i32 17236481)
  %373 = load i32, i32* @mmTPC2_RTR_HBW_RD_RS_W_ARB, align 4
  %374 = call i32 @WREG32(i32 %373, i32 17236482)
  %375 = load i32, i32* @mmTPC2_RTR_HBW_WR_RS_N_ARB, align 4
  %376 = call i32 @WREG32(i32 %375, i32 16843009)
  %377 = load i32, i32* @mmTPC2_RTR_HBW_WR_RS_S_ARB, align 4
  %378 = call i32 @WREG32(i32 %377, i32 17039617)
  %379 = load i32, i32* @mmTPC2_RTR_HBW_WR_RS_W_ARB, align 4
  %380 = call i32 @WREG32(i32 %379, i32 17039617)
  %381 = load i32, i32* @mmTPC3_RTR_HBW_RD_RQ_N_ARB, align 4
  %382 = call i32 @WREG32(i32 %381, i32 16974081)
  %383 = load i32, i32* @mmTPC3_RTR_HBW_RD_RQ_S_ARB, align 4
  %384 = call i32 @WREG32(i32 %383, i32 17039617)
  %385 = load i32, i32* @mmTPC3_RTR_HBW_RD_RQ_E_ARB, align 4
  %386 = call i32 @WREG32(i32 %385, i32 17040129)
  %387 = load i32, i32* @mmTPC3_RTR_HBW_WR_RQ_N_ARB, align 4
  %388 = call i32 @WREG32(i32 %387, i32 33947906)
  %389 = load i32, i32* @mmTPC3_RTR_HBW_WR_RQ_S_ARB, align 4
  %390 = call i32 @WREG32(i32 %389, i32 17039617)
  %391 = load i32, i32* @mmTPC3_RTR_HBW_WR_RQ_E_ARB, align 4
  %392 = call i32 @WREG32(i32 %391, i32 17040129)
  %393 = load i32, i32* @mmTPC3_RTR_HBW_RD_RS_N_ARB, align 4
  %394 = call i32 @WREG32(i32 %393, i32 17039873)
  %395 = load i32, i32* @mmTPC3_RTR_HBW_RD_RS_S_ARB, align 4
  %396 = call i32 @WREG32(i32 %395, i32 17170945)
  %397 = load i32, i32* @mmTPC3_RTR_HBW_RD_RS_W_ARB, align 4
  %398 = call i32 @WREG32(i32 %397, i32 17171458)
  %399 = load i32, i32* @mmTPC3_RTR_HBW_WR_RS_N_ARB, align 4
  %400 = call i32 @WREG32(i32 %399, i32 16908545)
  %401 = load i32, i32* @mmTPC3_RTR_HBW_WR_RS_S_ARB, align 4
  %402 = call i32 @WREG32(i32 %401, i32 16974081)
  %403 = load i32, i32* @mmTPC3_RTR_HBW_WR_RS_W_ARB, align 4
  %404 = call i32 @WREG32(i32 %403, i32 16974849)
  %405 = load i32, i32* @mmTPC4_RTR_HBW_RD_RQ_N_ARB, align 4
  %406 = call i32 @WREG32(i32 %405, i32 17039617)
  %407 = load i32, i32* @mmTPC4_RTR_HBW_RD_RQ_S_ARB, align 4
  %408 = call i32 @WREG32(i32 %407, i32 16974081)
  %409 = load i32, i32* @mmTPC4_RTR_HBW_RD_RQ_E_ARB, align 4
  %410 = call i32 @WREG32(i32 %409, i32 16974849)
  %411 = load i32, i32* @mmTPC4_RTR_HBW_WR_RQ_N_ARB, align 4
  %412 = call i32 @WREG32(i32 %411, i32 34013442)
  %413 = load i32, i32* @mmTPC4_RTR_HBW_WR_RQ_S_ARB, align 4
  %414 = call i32 @WREG32(i32 %413, i32 16974081)
  %415 = load i32, i32* @mmTPC4_RTR_HBW_WR_RQ_E_ARB, align 4
  %416 = call i32 @WREG32(i32 %415, i32 33949442)
  %417 = load i32, i32* @mmTPC4_RTR_HBW_RD_RS_N_ARB, align 4
  %418 = call i32 @WREG32(i32 %417, i32 17170945)
  %419 = load i32, i32* @mmTPC4_RTR_HBW_RD_RS_S_ARB, align 4
  %420 = call i32 @WREG32(i32 %419, i32 17039873)
  %421 = load i32, i32* @mmTPC4_RTR_HBW_RD_RS_W_ARB, align 4
  %422 = call i32 @WREG32(i32 %421, i32 17040898)
  %423 = load i32, i32* @mmTPC4_RTR_HBW_WR_RS_N_ARB, align 4
  %424 = call i32 @WREG32(i32 %423, i32 16974081)
  %425 = load i32, i32* @mmTPC4_RTR_HBW_WR_RS_S_ARB, align 4
  %426 = call i32 @WREG32(i32 %425, i32 16908545)
  %427 = load i32, i32* @mmTPC4_RTR_HBW_WR_RS_W_ARB, align 4
  %428 = call i32 @WREG32(i32 %427, i32 17040129)
  %429 = load i32, i32* @mmTPC5_RTR_HBW_RD_RQ_N_ARB, align 4
  %430 = call i32 @WREG32(i32 %429, i32 17105153)
  %431 = load i32, i32* @mmTPC5_RTR_HBW_RD_RQ_S_ARB, align 4
  %432 = call i32 @WREG32(i32 %431, i32 16908545)
  %433 = load i32, i32* @mmTPC5_RTR_HBW_RD_RQ_E_ARB, align 4
  %434 = call i32 @WREG32(i32 %433, i32 18875649)
  %435 = load i32, i32* @mmTPC5_RTR_HBW_WR_RQ_N_ARB, align 4
  %436 = call i32 @WREG32(i32 %435, i32 34013442)
  %437 = load i32, i32* @mmTPC5_RTR_HBW_WR_RQ_S_ARB, align 4
  %438 = call i32 @WREG32(i32 %437, i32 16908545)
  %439 = load i32, i32* @mmTPC5_RTR_HBW_WR_RQ_E_ARB, align 4
  %440 = call i32 @WREG32(i32 %439, i32 33687042)
  %441 = load i32, i32* @mmTPC5_RTR_HBW_RD_RS_N_ARB, align 4
  %442 = call i32 @WREG32(i32 %441, i32 17236481)
  %443 = load i32, i32* @mmTPC5_RTR_HBW_RD_RS_S_ARB, align 4
  %444 = call i32 @WREG32(i32 %443, i32 16908801)
  %445 = load i32, i32* @mmTPC5_RTR_HBW_RD_RS_W_ARB, align 4
  %446 = call i32 @WREG32(i32 %445, i32 16910082)
  %447 = load i32, i32* @mmTPC5_RTR_HBW_WR_RS_N_ARB, align 4
  %448 = call i32 @WREG32(i32 %447, i32 17039617)
  %449 = load i32, i32* @mmTPC5_RTR_HBW_WR_RS_S_ARB, align 4
  %450 = call i32 @WREG32(i32 %449, i32 16843009)
  %451 = load i32, i32* @mmTPC5_RTR_HBW_WR_RS_W_ARB, align 4
  %452 = call i32 @WREG32(i32 %451, i32 16844033)
  %453 = load i32, i32* @mmTPC6_RTR_HBW_RD_RQ_N_ARB, align 4
  %454 = call i32 @WREG32(i32 %453, i32 16843009)
  %455 = load i32, i32* @mmTPC6_RTR_HBW_RD_RQ_S_ARB, align 4
  %456 = call i32 @WREG32(i32 %455, i32 16843009)
  %457 = load i32, i32* @mmTPC6_RTR_HBW_RD_RQ_E_ARB, align 4
  %458 = call i32 @WREG32(i32 %457, i32 16844289)
  %459 = load i32, i32* @mmTPC6_RTR_HBW_WR_RQ_N_ARB, align 4
  %460 = call i32 @WREG32(i32 %459, i32 16843009)
  %461 = load i32, i32* @mmTPC6_RTR_HBW_WR_RQ_S_ARB, align 4
  %462 = call i32 @WREG32(i32 %461, i32 16843009)
  %463 = load i32, i32* @mmTPC6_RTR_HBW_WR_RQ_E_ARB, align 4
  %464 = call i32 @WREG32(i32 %463, i32 33687298)
  %465 = load i32, i32* @mmTPC6_RTR_HBW_RD_RS_N_ARB, align 4
  %466 = call i32 @WREG32(i32 %465, i32 16843009)
  %467 = load i32, i32* @mmTPC6_RTR_HBW_RD_RS_S_ARB, align 4
  %468 = call i32 @WREG32(i32 %467, i32 16843009)
  %469 = load i32, i32* @mmTPC6_RTR_HBW_RD_RS_W_ARB, align 4
  %470 = call i32 @WREG32(i32 %469, i32 16910082)
  %471 = load i32, i32* @mmTPC6_RTR_HBW_WR_RS_N_ARB, align 4
  %472 = call i32 @WREG32(i32 %471, i32 17105153)
  %473 = load i32, i32* @mmTPC6_RTR_HBW_WR_RS_S_ARB, align 4
  %474 = call i32 @WREG32(i32 %473, i32 16843009)
  %475 = load i32, i32* @mmTPC6_RTR_HBW_WR_RS_W_ARB, align 4
  %476 = call i32 @WREG32(i32 %475, i32 16844033)
  store i32 0, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %477

477:                                              ; preds = %625, %158
  %478 = load i32, i32* %7, align 4
  %479 = icmp slt i32 %478, 10
  br i1 %479, label %480, label %630

480:                                              ; preds = %477
  %481 = load i32, i32* @mmMME1_RTR_SPLIT_COEF_0, align 4
  %482 = load i32, i32* %6, align 4
  %483 = add nsw i32 %481, %482
  %484 = load i32, i32* %7, align 4
  %485 = sext i32 %484 to i64
  %486 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %485
  %487 = load i32, i32* %486, align 4
  %488 = ashr i32 %487, 7
  %489 = call i32 @WREG32(i32 %483, i32 %488)
  %490 = load i32, i32* @mmMME2_RTR_SPLIT_COEF_0, align 4
  %491 = load i32, i32* %6, align 4
  %492 = add nsw i32 %490, %491
  %493 = load i32, i32* %7, align 4
  %494 = sext i32 %493 to i64
  %495 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %494
  %496 = load i32, i32* %495, align 4
  %497 = ashr i32 %496, 7
  %498 = call i32 @WREG32(i32 %492, i32 %497)
  %499 = load i32, i32* @mmMME3_RTR_SPLIT_COEF_0, align 4
  %500 = load i32, i32* %6, align 4
  %501 = add nsw i32 %499, %500
  %502 = load i32, i32* %7, align 4
  %503 = sext i32 %502 to i64
  %504 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %503
  %505 = load i32, i32* %504, align 4
  %506 = ashr i32 %505, 7
  %507 = call i32 @WREG32(i32 %501, i32 %506)
  %508 = load i32, i32* @mmMME4_RTR_SPLIT_COEF_0, align 4
  %509 = load i32, i32* %6, align 4
  %510 = add nsw i32 %508, %509
  %511 = load i32, i32* %7, align 4
  %512 = sext i32 %511 to i64
  %513 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %512
  %514 = load i32, i32* %513, align 4
  %515 = ashr i32 %514, 7
  %516 = call i32 @WREG32(i32 %510, i32 %515)
  %517 = load i32, i32* @mmMME5_RTR_SPLIT_COEF_0, align 4
  %518 = load i32, i32* %6, align 4
  %519 = add nsw i32 %517, %518
  %520 = load i32, i32* %7, align 4
  %521 = sext i32 %520 to i64
  %522 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %521
  %523 = load i32, i32* %522, align 4
  %524 = ashr i32 %523, 7
  %525 = call i32 @WREG32(i32 %519, i32 %524)
  %526 = load i32, i32* @mmMME6_RTR_SPLIT_COEF_0, align 4
  %527 = load i32, i32* %6, align 4
  %528 = add nsw i32 %526, %527
  %529 = load i32, i32* %7, align 4
  %530 = sext i32 %529 to i64
  %531 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %530
  %532 = load i32, i32* %531, align 4
  %533 = ashr i32 %532, 7
  %534 = call i32 @WREG32(i32 %528, i32 %533)
  %535 = load i32, i32* @mmTPC0_NRTR_SPLIT_COEF_0, align 4
  %536 = load i32, i32* %6, align 4
  %537 = add nsw i32 %535, %536
  %538 = load i32, i32* %7, align 4
  %539 = sext i32 %538 to i64
  %540 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %539
  %541 = load i32, i32* %540, align 4
  %542 = ashr i32 %541, 7
  %543 = call i32 @WREG32(i32 %537, i32 %542)
  %544 = load i32, i32* @mmTPC1_RTR_SPLIT_COEF_0, align 4
  %545 = load i32, i32* %6, align 4
  %546 = add nsw i32 %544, %545
  %547 = load i32, i32* %7, align 4
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %548
  %550 = load i32, i32* %549, align 4
  %551 = ashr i32 %550, 7
  %552 = call i32 @WREG32(i32 %546, i32 %551)
  %553 = load i32, i32* @mmTPC2_RTR_SPLIT_COEF_0, align 4
  %554 = load i32, i32* %6, align 4
  %555 = add nsw i32 %553, %554
  %556 = load i32, i32* %7, align 4
  %557 = sext i32 %556 to i64
  %558 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %557
  %559 = load i32, i32* %558, align 4
  %560 = ashr i32 %559, 7
  %561 = call i32 @WREG32(i32 %555, i32 %560)
  %562 = load i32, i32* @mmTPC3_RTR_SPLIT_COEF_0, align 4
  %563 = load i32, i32* %6, align 4
  %564 = add nsw i32 %562, %563
  %565 = load i32, i32* %7, align 4
  %566 = sext i32 %565 to i64
  %567 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %566
  %568 = load i32, i32* %567, align 4
  %569 = ashr i32 %568, 7
  %570 = call i32 @WREG32(i32 %564, i32 %569)
  %571 = load i32, i32* @mmTPC4_RTR_SPLIT_COEF_0, align 4
  %572 = load i32, i32* %6, align 4
  %573 = add nsw i32 %571, %572
  %574 = load i32, i32* %7, align 4
  %575 = sext i32 %574 to i64
  %576 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %575
  %577 = load i32, i32* %576, align 4
  %578 = ashr i32 %577, 7
  %579 = call i32 @WREG32(i32 %573, i32 %578)
  %580 = load i32, i32* @mmTPC5_RTR_SPLIT_COEF_0, align 4
  %581 = load i32, i32* %6, align 4
  %582 = add nsw i32 %580, %581
  %583 = load i32, i32* %7, align 4
  %584 = sext i32 %583 to i64
  %585 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %584
  %586 = load i32, i32* %585, align 4
  %587 = ashr i32 %586, 7
  %588 = call i32 @WREG32(i32 %582, i32 %587)
  %589 = load i32, i32* @mmTPC6_RTR_SPLIT_COEF_0, align 4
  %590 = load i32, i32* %6, align 4
  %591 = add nsw i32 %589, %590
  %592 = load i32, i32* %7, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %593
  %595 = load i32, i32* %594, align 4
  %596 = ashr i32 %595, 7
  %597 = call i32 @WREG32(i32 %591, i32 %596)
  %598 = load i32, i32* @mmTPC7_NRTR_SPLIT_COEF_0, align 4
  %599 = load i32, i32* %6, align 4
  %600 = add nsw i32 %598, %599
  %601 = load i32, i32* %7, align 4
  %602 = sext i32 %601 to i64
  %603 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %602
  %604 = load i32, i32* %603, align 4
  %605 = ashr i32 %604, 7
  %606 = call i32 @WREG32(i32 %600, i32 %605)
  %607 = load i32, i32* @mmPCI_NRTR_SPLIT_COEF_0, align 4
  %608 = load i32, i32* %6, align 4
  %609 = add nsw i32 %607, %608
  %610 = load i32, i32* %7, align 4
  %611 = sext i32 %610 to i64
  %612 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %611
  %613 = load i32, i32* %612, align 4
  %614 = ashr i32 %613, 7
  %615 = call i32 @WREG32(i32 %609, i32 %614)
  %616 = load i32, i32* @mmDMA_NRTR_SPLIT_COEF_0, align 4
  %617 = load i32, i32* %6, align 4
  %618 = add nsw i32 %616, %617
  %619 = load i32, i32* %7, align 4
  %620 = sext i32 %619 to i64
  %621 = getelementptr inbounds [10 x i32], [10 x i32]* %4, i64 0, i64 %620
  %622 = load i32, i32* %621, align 4
  %623 = ashr i32 %622, 7
  %624 = call i32 @WREG32(i32 %618, i32 %623)
  br label %625

625:                                              ; preds = %480
  %626 = load i32, i32* %7, align 4
  %627 = add nsw i32 %626, 1
  store i32 %627, i32* %7, align 4
  %628 = load i32, i32* %6, align 4
  %629 = add nsw i32 %628, 4
  store i32 %629, i32* %6, align 4
  br label %477

630:                                              ; preds = %477
  store i32 0, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %631

631:                                              ; preds = %647, %630
  %632 = load i32, i32* %7, align 4
  %633 = icmp slt i32 %632, 6
  br i1 %633, label %634, label %652

634:                                              ; preds = %631
  %635 = load i32, i32* @mmMME1_RTR_SCRAMB_EN, align 4
  %636 = load i32, i32* %6, align 4
  %637 = add nsw i32 %635, %636
  %638 = load i32, i32* @MME1_RTR_SCRAMB_EN_VAL_SHIFT, align 4
  %639 = shl i32 1, %638
  %640 = call i32 @WREG32(i32 %637, i32 %639)
  %641 = load i32, i32* @mmMME1_RTR_NON_LIN_SCRAMB, align 4
  %642 = load i32, i32* %6, align 4
  %643 = add nsw i32 %641, %642
  %644 = load i32, i32* @MME1_RTR_NON_LIN_SCRAMB_EN_SHIFT, align 4
  %645 = shl i32 1, %644
  %646 = call i32 @WREG32(i32 %643, i32 %645)
  br label %647

647:                                              ; preds = %634
  %648 = load i32, i32* %7, align 4
  %649 = add nsw i32 %648, 1
  store i32 %649, i32* %7, align 4
  %650 = load i32, i32* %6, align 4
  %651 = add nsw i32 %650, 262144
  store i32 %651, i32* %6, align 4
  br label %631

652:                                              ; preds = %631
  store i32 0, i32* %7, align 4
  store i32 0, i32* %6, align 4
  br label %653

653:                                              ; preds = %674, %652
  %654 = load i32, i32* %7, align 4
  %655 = icmp slt i32 %654, 8
  br i1 %655, label %656, label %679

656:                                              ; preds = %653
  %657 = load i32, i32* @mmTPC0_CFG_TPC_INTR_MASK, align 4
  %658 = load i32, i32* %6, align 4
  %659 = add nsw i32 %657, %658
  %660 = load i32, i32* %5, align 4
  %661 = call i32 @WREG32(i32 %659, i32 %660)
  %662 = load i32, i32* @mmTPC0_NRTR_SCRAMB_EN, align 4
  %663 = load i32, i32* %6, align 4
  %664 = add nsw i32 %662, %663
  %665 = load i32, i32* @TPC0_NRTR_SCRAMB_EN_VAL_SHIFT, align 4
  %666 = shl i32 1, %665
  %667 = call i32 @WREG32(i32 %664, i32 %666)
  %668 = load i32, i32* @mmTPC0_NRTR_NON_LIN_SCRAMB, align 4
  %669 = load i32, i32* %6, align 4
  %670 = add nsw i32 %668, %669
  %671 = load i32, i32* @TPC0_NRTR_NON_LIN_SCRAMB_EN_SHIFT, align 4
  %672 = shl i32 1, %671
  %673 = call i32 @WREG32(i32 %670, i32 %672)
  br label %674

674:                                              ; preds = %656
  %675 = load i32, i32* %7, align 4
  %676 = add nsw i32 %675, 1
  store i32 %676, i32* %7, align 4
  %677 = load i32, i32* %6, align 4
  %678 = add nsw i32 %677, 262144
  store i32 %678, i32* %6, align 4
  br label %653

679:                                              ; preds = %653
  %680 = load i32, i32* @mmDMA_NRTR_SCRAMB_EN, align 4
  %681 = load i32, i32* @DMA_NRTR_SCRAMB_EN_VAL_SHIFT, align 4
  %682 = shl i32 1, %681
  %683 = call i32 @WREG32(i32 %680, i32 %682)
  %684 = load i32, i32* @mmDMA_NRTR_NON_LIN_SCRAMB, align 4
  %685 = load i32, i32* @DMA_NRTR_NON_LIN_SCRAMB_EN_SHIFT, align 4
  %686 = shl i32 1, %685
  %687 = call i32 @WREG32(i32 %684, i32 %686)
  %688 = load i32, i32* @mmPCI_NRTR_SCRAMB_EN, align 4
  %689 = load i32, i32* @PCI_NRTR_SCRAMB_EN_VAL_SHIFT, align 4
  %690 = shl i32 1, %689
  %691 = call i32 @WREG32(i32 %688, i32 %690)
  %692 = load i32, i32* @mmPCI_NRTR_NON_LIN_SCRAMB, align 4
  %693 = load i32, i32* @PCI_NRTR_NON_LIN_SCRAMB_EN_SHIFT, align 4
  %694 = shl i32 1, %693
  %695 = call i32 @WREG32(i32 %692, i32 %694)
  %696 = load i32, i32* @mmDMA_CH_1_CFG0, align 4
  %697 = call i32 @WREG32(i32 %696, i32 268370160)
  %698 = load i32, i32* @mmTPC_PLL_CLK_RLX_0, align 4
  %699 = call i32 @WREG32(i32 %698, i32 2097184)
  %700 = load i32, i32* @HW_CAP_GOLDEN, align 4
  %701 = load %struct.goya_device*, %struct.goya_device** %3, align 8
  %702 = getelementptr inbounds %struct.goya_device, %struct.goya_device* %701, i32 0, i32 0
  %703 = load i32, i32* %702, align 4
  %704 = or i32 %703, %700
  store i32 %704, i32* %702, align 4
  br label %705

705:                                              ; preds = %679, %17
  ret void
}

declare dso_local i32 @WREG32(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
