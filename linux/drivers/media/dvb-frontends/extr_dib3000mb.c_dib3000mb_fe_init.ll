; ModuleID = '/home/carl/AnghaBench/linux/drivers/media/dvb-frontends/extr_dib3000mb.c_dib3000mb_fe_init.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/media/dvb-frontends/extr_dib3000mb.c_dib3000mb_fe_init.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.dvb_frontend = type { %struct.dib3000_state* }
%struct.dib3000_state = type { i32 }

@.str = private unnamed_addr constant [26 x i8] c"dib3000mb is getting up.\0A\00", align 1
@DIB3000MB_REG_POWER_CONTROL = common dso_local global i32 0, align 4
@DIB3000MB_POWER_UP = common dso_local global i32 0, align 4
@DIB3000MB_REG_RESTART = common dso_local global i32 0, align 4
@DIB3000MB_RESTART_AGC = common dso_local global i32 0, align 4
@DIB3000MB_REG_RESET_DEVICE = common dso_local global i32 0, align 4
@DIB3000MB_RESET_DEVICE = common dso_local global i32 0, align 4
@DIB3000MB_RESET_DEVICE_RST = common dso_local global i32 0, align 4
@DIB3000MB_REG_CLOCK = common dso_local global i32 0, align 4
@DIB3000MB_CLOCK_DEFAULT = common dso_local global i32 0, align 4
@DIB3000MB_REG_ELECT_OUT_MODE = common dso_local global i32 0, align 4
@DIB3000MB_ELECT_OUT_MODE_ON = common dso_local global i32 0, align 4
@DIB3000MB_REG_DDS_FREQ_MSB = common dso_local global i32 0, align 4
@DIB3000MB_DDS_FREQ_MSB = common dso_local global i32 0, align 4
@DIB3000MB_REG_DDS_FREQ_LSB = common dso_local global i32 0, align 4
@DIB3000MB_DDS_FREQ_LSB = common dso_local global i32 0, align 4
@dib3000mb_reg_timing_freq = common dso_local global i32 0, align 4
@dib3000mb_timing_freq = common dso_local global i32* null, align 8
@dib3000mb_reg_impulse_noise = common dso_local global i32 0, align 4
@dib3000mb_impulse_noise_values = common dso_local global i32* null, align 8
@DIB3000MB_IMPNOISE_OFF = common dso_local global i64 0, align 8
@dib3000mb_reg_agc_gain = common dso_local global i32 0, align 4
@dib3000mb_default_agc_gain = common dso_local global i32 0, align 4
@DIB3000MB_REG_PHASE_NOISE = common dso_local global i32 0, align 4
@DIB3000MB_PHASE_NOISE_DEFAULT = common dso_local global i32 0, align 4
@dib3000mb_reg_phase_noise = common dso_local global i32 0, align 4
@dib3000mb_default_noise_phase = common dso_local global i32 0, align 4
@dib3000mb_reg_lock_duration = common dso_local global i32 0, align 4
@dib3000mb_default_lock_duration = common dso_local global i32 0, align 4
@dib3000mb_reg_agc_bandwidth = common dso_local global i32 0, align 4
@dib3000mb_agc_bandwidth_low = common dso_local global i32 0, align 4
@DIB3000MB_REG_LOCK0_MASK = common dso_local global i32 0, align 4
@DIB3000MB_LOCK0_DEFAULT = common dso_local global i32 0, align 4
@DIB3000MB_REG_LOCK1_MASK = common dso_local global i32 0, align 4
@DIB3000MB_LOCK1_SEARCH_4 = common dso_local global i32 0, align 4
@DIB3000MB_REG_LOCK2_MASK = common dso_local global i32 0, align 4
@DIB3000MB_LOCK2_DEFAULT = common dso_local global i32 0, align 4
@DIB3000MB_REG_SEQ = common dso_local global i32 0, align 4
@dib3000_seq = common dso_local global i32*** null, align 8
@dib3000mb_reg_bandwidth = common dso_local global i32 0, align 4
@dib3000mb_bandwidth_8mhz = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_68 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_68 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_69 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_69 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_71 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_71 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_77 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_77 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_78 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_78 = common dso_local global i32 0, align 4
@DIB3000MB_REG_ISI = common dso_local global i32 0, align 4
@DIB3000MB_ISI_INHIBIT = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_92 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_92 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_96 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_96 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_97 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_97 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_106 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_106 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_107 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_107 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_108 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_108 = common dso_local global i32 0, align 4
@DIB3000MB_REG_UNK_122 = common dso_local global i32 0, align 4
@DIB3000MB_UNK_122 = common dso_local global i32 0, align 4
@DIB3000MB_REG_MOBILE_MODE_QAM = common dso_local global i32 0, align 4
@DIB3000MB_MOBILE_MODE_QAM_OFF = common dso_local global i32 0, align 4
@DIB3000MB_REG_BERLEN = common dso_local global i32 0, align 4
@DIB3000MB_BERLEN_DEFAULT = common dso_local global i32 0, align 4
@dib3000mb_reg_filter_coeffs = common dso_local global i32 0, align 4
@dib3000mb_filter_coeffs = common dso_local global i32 0, align 4
@DIB3000MB_REG_MOBILE_ALGO = common dso_local global i32 0, align 4
@DIB3000MB_MOBILE_ALGO_ON = common dso_local global i32 0, align 4
@DIB3000MB_REG_MULTI_DEMOD_MSB = common dso_local global i32 0, align 4
@DIB3000MB_MULTI_DEMOD_MSB = common dso_local global i32 0, align 4
@DIB3000MB_REG_MULTI_DEMOD_LSB = common dso_local global i32 0, align 4
@DIB3000MB_MULTI_DEMOD_LSB = common dso_local global i32 0, align 4
@DIB3000MB_REG_OUTPUT_MODE = common dso_local global i32 0, align 4
@DIB3000MB_OUTPUT_MODE_SLAVE = common dso_local global i32 0, align 4
@DIB3000MB_REG_FIFO_142 = common dso_local global i32 0, align 4
@DIB3000MB_FIFO_142 = common dso_local global i32 0, align 4
@DIB3000MB_REG_MPEG2_OUT_MODE = common dso_local global i32 0, align 4
@DIB3000MB_MPEG2_OUT_MODE_188 = common dso_local global i32 0, align 4
@DIB3000MB_REG_PID_PARSE = common dso_local global i32 0, align 4
@DIB3000MB_PID_PARSE_ACTIVATE = common dso_local global i32 0, align 4
@DIB3000MB_REG_FIFO = common dso_local global i32 0, align 4
@DIB3000MB_FIFO_INHIBIT = common dso_local global i32 0, align 4
@DIB3000MB_REG_FIFO_146 = common dso_local global i32 0, align 4
@DIB3000MB_FIFO_146 = common dso_local global i32 0, align 4
@DIB3000MB_REG_FIFO_147 = common dso_local global i32 0, align 4
@DIB3000MB_FIFO_147 = common dso_local global i32 0, align 4
@DIB3000MB_REG_DATA_IN_DIVERSITY = common dso_local global i32 0, align 4
@DIB3000MB_DATA_DIVERSITY_IN_OFF = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.dvb_frontend*, i32)* @dib3000mb_fe_init to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @dib3000mb_fe_init(%struct.dvb_frontend* %0, i32 %1) #0 {
  %3 = alloca %struct.dvb_frontend*, align 8
  %4 = alloca i32, align 4
  %5 = alloca %struct.dib3000_state*, align 8
  store %struct.dvb_frontend* %0, %struct.dvb_frontend** %3, align 8
  store i32 %1, i32* %4, align 4
  %6 = load %struct.dvb_frontend*, %struct.dvb_frontend** %3, align 8
  %7 = getelementptr inbounds %struct.dvb_frontend, %struct.dvb_frontend* %6, i32 0, i32 0
  %8 = load %struct.dib3000_state*, %struct.dib3000_state** %7, align 8
  store %struct.dib3000_state* %8, %struct.dib3000_state** %5, align 8
  %9 = call i32 @deb_info(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str, i64 0, i64 0))
  %10 = load i32, i32* @DIB3000MB_REG_POWER_CONTROL, align 4
  %11 = load i32, i32* @DIB3000MB_POWER_UP, align 4
  %12 = call i32 @wr(i32 %10, i32 %11)
  %13 = load i32, i32* @DIB3000MB_REG_RESTART, align 4
  %14 = load i32, i32* @DIB3000MB_RESTART_AGC, align 4
  %15 = call i32 @wr(i32 %13, i32 %14)
  %16 = load i32, i32* @DIB3000MB_REG_RESET_DEVICE, align 4
  %17 = load i32, i32* @DIB3000MB_RESET_DEVICE, align 4
  %18 = call i32 @wr(i32 %16, i32 %17)
  %19 = load i32, i32* @DIB3000MB_REG_RESET_DEVICE, align 4
  %20 = load i32, i32* @DIB3000MB_RESET_DEVICE_RST, align 4
  %21 = call i32 @wr(i32 %19, i32 %20)
  %22 = load i32, i32* @DIB3000MB_REG_CLOCK, align 4
  %23 = load i32, i32* @DIB3000MB_CLOCK_DEFAULT, align 4
  %24 = call i32 @wr(i32 %22, i32 %23)
  %25 = load i32, i32* @DIB3000MB_REG_ELECT_OUT_MODE, align 4
  %26 = load i32, i32* @DIB3000MB_ELECT_OUT_MODE_ON, align 4
  %27 = call i32 @wr(i32 %25, i32 %26)
  %28 = load i32, i32* @DIB3000MB_REG_DDS_FREQ_MSB, align 4
  %29 = load i32, i32* @DIB3000MB_DDS_FREQ_MSB, align 4
  %30 = call i32 @wr(i32 %28, i32 %29)
  %31 = load i32, i32* @DIB3000MB_REG_DDS_FREQ_LSB, align 4
  %32 = load i32, i32* @DIB3000MB_DDS_FREQ_LSB, align 4
  %33 = call i32 @wr(i32 %31, i32 %32)
  %34 = load i32, i32* @dib3000mb_reg_timing_freq, align 4
  %35 = load i32*, i32** @dib3000mb_timing_freq, align 8
  %36 = getelementptr inbounds i32, i32* %35, i64 2
  %37 = load i32, i32* %36, align 4
  %38 = call i32 @wr_foreach(i32 %34, i32 %37)
  %39 = load i32, i32* @dib3000mb_reg_impulse_noise, align 4
  %40 = load i32*, i32** @dib3000mb_impulse_noise_values, align 8
  %41 = load i64, i64* @DIB3000MB_IMPNOISE_OFF, align 8
  %42 = getelementptr inbounds i32, i32* %40, i64 %41
  %43 = load i32, i32* %42, align 4
  %44 = call i32 @wr_foreach(i32 %39, i32 %43)
  %45 = load i32, i32* @dib3000mb_reg_agc_gain, align 4
  %46 = load i32, i32* @dib3000mb_default_agc_gain, align 4
  %47 = call i32 @wr_foreach(i32 %45, i32 %46)
  %48 = load i32, i32* @DIB3000MB_REG_PHASE_NOISE, align 4
  %49 = load i32, i32* @DIB3000MB_PHASE_NOISE_DEFAULT, align 4
  %50 = call i32 @wr(i32 %48, i32 %49)
  %51 = load i32, i32* @dib3000mb_reg_phase_noise, align 4
  %52 = load i32, i32* @dib3000mb_default_noise_phase, align 4
  %53 = call i32 @wr_foreach(i32 %51, i32 %52)
  %54 = load i32, i32* @dib3000mb_reg_lock_duration, align 4
  %55 = load i32, i32* @dib3000mb_default_lock_duration, align 4
  %56 = call i32 @wr_foreach(i32 %54, i32 %55)
  %57 = load i32, i32* @dib3000mb_reg_agc_bandwidth, align 4
  %58 = load i32, i32* @dib3000mb_agc_bandwidth_low, align 4
  %59 = call i32 @wr_foreach(i32 %57, i32 %58)
  %60 = load i32, i32* @DIB3000MB_REG_LOCK0_MASK, align 4
  %61 = load i32, i32* @DIB3000MB_LOCK0_DEFAULT, align 4
  %62 = call i32 @wr(i32 %60, i32 %61)
  %63 = load i32, i32* @DIB3000MB_REG_LOCK1_MASK, align 4
  %64 = load i32, i32* @DIB3000MB_LOCK1_SEARCH_4, align 4
  %65 = call i32 @wr(i32 %63, i32 %64)
  %66 = load i32, i32* @DIB3000MB_REG_LOCK2_MASK, align 4
  %67 = load i32, i32* @DIB3000MB_LOCK2_DEFAULT, align 4
  %68 = call i32 @wr(i32 %66, i32 %67)
  %69 = load i32, i32* @DIB3000MB_REG_SEQ, align 4
  %70 = load i32***, i32**** @dib3000_seq, align 8
  %71 = getelementptr inbounds i32**, i32*** %70, i64 1
  %72 = load i32**, i32*** %71, align 8
  %73 = getelementptr inbounds i32*, i32** %72, i64 1
  %74 = load i32*, i32** %73, align 8
  %75 = getelementptr inbounds i32, i32* %74, i64 1
  %76 = load i32, i32* %75, align 4
  %77 = call i32 @wr(i32 %69, i32 %76)
  %78 = load i32, i32* @dib3000mb_reg_bandwidth, align 4
  %79 = load i32, i32* @dib3000mb_bandwidth_8mhz, align 4
  %80 = call i32 @wr_foreach(i32 %78, i32 %79)
  %81 = load i32, i32* @DIB3000MB_REG_UNK_68, align 4
  %82 = load i32, i32* @DIB3000MB_UNK_68, align 4
  %83 = call i32 @wr(i32 %81, i32 %82)
  %84 = load i32, i32* @DIB3000MB_REG_UNK_69, align 4
  %85 = load i32, i32* @DIB3000MB_UNK_69, align 4
  %86 = call i32 @wr(i32 %84, i32 %85)
  %87 = load i32, i32* @DIB3000MB_REG_UNK_71, align 4
  %88 = load i32, i32* @DIB3000MB_UNK_71, align 4
  %89 = call i32 @wr(i32 %87, i32 %88)
  %90 = load i32, i32* @DIB3000MB_REG_UNK_77, align 4
  %91 = load i32, i32* @DIB3000MB_UNK_77, align 4
  %92 = call i32 @wr(i32 %90, i32 %91)
  %93 = load i32, i32* @DIB3000MB_REG_UNK_78, align 4
  %94 = load i32, i32* @DIB3000MB_UNK_78, align 4
  %95 = call i32 @wr(i32 %93, i32 %94)
  %96 = load i32, i32* @DIB3000MB_REG_ISI, align 4
  %97 = load i32, i32* @DIB3000MB_ISI_INHIBIT, align 4
  %98 = call i32 @wr(i32 %96, i32 %97)
  %99 = load i32, i32* @DIB3000MB_REG_UNK_92, align 4
  %100 = load i32, i32* @DIB3000MB_UNK_92, align 4
  %101 = call i32 @wr(i32 %99, i32 %100)
  %102 = load i32, i32* @DIB3000MB_REG_UNK_96, align 4
  %103 = load i32, i32* @DIB3000MB_UNK_96, align 4
  %104 = call i32 @wr(i32 %102, i32 %103)
  %105 = load i32, i32* @DIB3000MB_REG_UNK_97, align 4
  %106 = load i32, i32* @DIB3000MB_UNK_97, align 4
  %107 = call i32 @wr(i32 %105, i32 %106)
  %108 = load i32, i32* @DIB3000MB_REG_UNK_106, align 4
  %109 = load i32, i32* @DIB3000MB_UNK_106, align 4
  %110 = call i32 @wr(i32 %108, i32 %109)
  %111 = load i32, i32* @DIB3000MB_REG_UNK_107, align 4
  %112 = load i32, i32* @DIB3000MB_UNK_107, align 4
  %113 = call i32 @wr(i32 %111, i32 %112)
  %114 = load i32, i32* @DIB3000MB_REG_UNK_108, align 4
  %115 = load i32, i32* @DIB3000MB_UNK_108, align 4
  %116 = call i32 @wr(i32 %114, i32 %115)
  %117 = load i32, i32* @DIB3000MB_REG_UNK_122, align 4
  %118 = load i32, i32* @DIB3000MB_UNK_122, align 4
  %119 = call i32 @wr(i32 %117, i32 %118)
  %120 = load i32, i32* @DIB3000MB_REG_MOBILE_MODE_QAM, align 4
  %121 = load i32, i32* @DIB3000MB_MOBILE_MODE_QAM_OFF, align 4
  %122 = call i32 @wr(i32 %120, i32 %121)
  %123 = load i32, i32* @DIB3000MB_REG_BERLEN, align 4
  %124 = load i32, i32* @DIB3000MB_BERLEN_DEFAULT, align 4
  %125 = call i32 @wr(i32 %123, i32 %124)
  %126 = load i32, i32* @dib3000mb_reg_filter_coeffs, align 4
  %127 = load i32, i32* @dib3000mb_filter_coeffs, align 4
  %128 = call i32 @wr_foreach(i32 %126, i32 %127)
  %129 = load i32, i32* @DIB3000MB_REG_MOBILE_ALGO, align 4
  %130 = load i32, i32* @DIB3000MB_MOBILE_ALGO_ON, align 4
  %131 = call i32 @wr(i32 %129, i32 %130)
  %132 = load i32, i32* @DIB3000MB_REG_MULTI_DEMOD_MSB, align 4
  %133 = load i32, i32* @DIB3000MB_MULTI_DEMOD_MSB, align 4
  %134 = call i32 @wr(i32 %132, i32 %133)
  %135 = load i32, i32* @DIB3000MB_REG_MULTI_DEMOD_LSB, align 4
  %136 = load i32, i32* @DIB3000MB_MULTI_DEMOD_LSB, align 4
  %137 = call i32 @wr(i32 %135, i32 %136)
  %138 = load i32, i32* @DIB3000MB_REG_OUTPUT_MODE, align 4
  %139 = load i32, i32* @DIB3000MB_OUTPUT_MODE_SLAVE, align 4
  %140 = call i32 @wr(i32 %138, i32 %139)
  %141 = load i32, i32* @DIB3000MB_REG_FIFO_142, align 4
  %142 = load i32, i32* @DIB3000MB_FIFO_142, align 4
  %143 = call i32 @wr(i32 %141, i32 %142)
  %144 = load i32, i32* @DIB3000MB_REG_MPEG2_OUT_MODE, align 4
  %145 = load i32, i32* @DIB3000MB_MPEG2_OUT_MODE_188, align 4
  %146 = call i32 @wr(i32 %144, i32 %145)
  %147 = load i32, i32* @DIB3000MB_REG_PID_PARSE, align 4
  %148 = load i32, i32* @DIB3000MB_PID_PARSE_ACTIVATE, align 4
  %149 = call i32 @wr(i32 %147, i32 %148)
  %150 = load i32, i32* @DIB3000MB_REG_FIFO, align 4
  %151 = load i32, i32* @DIB3000MB_FIFO_INHIBIT, align 4
  %152 = call i32 @wr(i32 %150, i32 %151)
  %153 = load i32, i32* @DIB3000MB_REG_FIFO_146, align 4
  %154 = load i32, i32* @DIB3000MB_FIFO_146, align 4
  %155 = call i32 @wr(i32 %153, i32 %154)
  %156 = load i32, i32* @DIB3000MB_REG_FIFO_147, align 4
  %157 = load i32, i32* @DIB3000MB_FIFO_147, align 4
  %158 = call i32 @wr(i32 %156, i32 %157)
  %159 = load i32, i32* @DIB3000MB_REG_DATA_IN_DIVERSITY, align 4
  %160 = load i32, i32* @DIB3000MB_DATA_DIVERSITY_IN_OFF, align 4
  %161 = call i32 @wr(i32 %159, i32 %160)
  ret i32 0
}

declare dso_local i32 @deb_info(i8*) #1

declare dso_local i32 @wr(i32, i32) #1

declare dso_local i32 @wr_foreach(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
