; ModuleID = '/home/carl/AnghaBench/linux/drivers/media/platform/davinci/extr_dm644x_ccdc.c_ccdc_restore_context.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/media/platform/davinci/extr_dm644x_ccdc.c_ccdc_restore_context.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@ccdc_ctx = common dso_local global i32* null, align 8
@CCDC_SYN_MODE = common dso_local global i32 0, align 4
@CCDC_HD_VD_WID = common dso_local global i32 0, align 4
@CCDC_PIX_LINES = common dso_local global i32 0, align 4
@CCDC_HORZ_INFO = common dso_local global i32 0, align 4
@CCDC_VERT_START = common dso_local global i32 0, align 4
@CCDC_VERT_LINES = common dso_local global i32 0, align 4
@CCDC_CULLING = common dso_local global i32 0, align 4
@CCDC_HSIZE_OFF = common dso_local global i32 0, align 4
@CCDC_SDOFST = common dso_local global i32 0, align 4
@CCDC_SDR_ADDR = common dso_local global i32 0, align 4
@CCDC_CLAMP = common dso_local global i32 0, align 4
@CCDC_DCSUB = common dso_local global i32 0, align 4
@CCDC_COLPTN = common dso_local global i32 0, align 4
@CCDC_BLKCMP = common dso_local global i32 0, align 4
@CCDC_FPC = common dso_local global i32 0, align 4
@CCDC_FPC_ADDR = common dso_local global i32 0, align 4
@CCDC_VDINT = common dso_local global i32 0, align 4
@CCDC_ALAW = common dso_local global i32 0, align 4
@CCDC_REC656IF = common dso_local global i32 0, align 4
@CCDC_CCDCFG = common dso_local global i32 0, align 4
@CCDC_FMTCFG = common dso_local global i32 0, align 4
@CCDC_FMT_HORZ = common dso_local global i32 0, align 4
@CCDC_FMT_VERT = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR0 = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR1 = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR2 = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR3 = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR4 = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR5 = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR6 = common dso_local global i32 0, align 4
@CCDC_FMT_ADDR7 = common dso_local global i32 0, align 4
@CCDC_PRGEVEN_0 = common dso_local global i32 0, align 4
@CCDC_PRGEVEN_1 = common dso_local global i32 0, align 4
@CCDC_PRGODD_0 = common dso_local global i32 0, align 4
@CCDC_PRGODD_1 = common dso_local global i32 0, align 4
@CCDC_VP_OUT = common dso_local global i32 0, align 4
@CCDC_PCR = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void ()* @ccdc_restore_context to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @ccdc_restore_context() #0 {
  %1 = load i32*, i32** @ccdc_ctx, align 8
  %2 = load i32, i32* @CCDC_SYN_MODE, align 4
  %3 = ashr i32 %2, 2
  %4 = sext i32 %3 to i64
  %5 = getelementptr inbounds i32, i32* %1, i64 %4
  %6 = load i32, i32* %5, align 4
  %7 = load i32, i32* @CCDC_SYN_MODE, align 4
  %8 = call i32 @regw(i32 %6, i32 %7)
  %9 = load i32*, i32** @ccdc_ctx, align 8
  %10 = load i32, i32* @CCDC_HD_VD_WID, align 4
  %11 = ashr i32 %10, 2
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds i32, i32* %9, i64 %12
  %14 = load i32, i32* %13, align 4
  %15 = load i32, i32* @CCDC_HD_VD_WID, align 4
  %16 = call i32 @regw(i32 %14, i32 %15)
  %17 = load i32*, i32** @ccdc_ctx, align 8
  %18 = load i32, i32* @CCDC_PIX_LINES, align 4
  %19 = ashr i32 %18, 2
  %20 = sext i32 %19 to i64
  %21 = getelementptr inbounds i32, i32* %17, i64 %20
  %22 = load i32, i32* %21, align 4
  %23 = load i32, i32* @CCDC_PIX_LINES, align 4
  %24 = call i32 @regw(i32 %22, i32 %23)
  %25 = load i32*, i32** @ccdc_ctx, align 8
  %26 = load i32, i32* @CCDC_HORZ_INFO, align 4
  %27 = ashr i32 %26, 2
  %28 = sext i32 %27 to i64
  %29 = getelementptr inbounds i32, i32* %25, i64 %28
  %30 = load i32, i32* %29, align 4
  %31 = load i32, i32* @CCDC_HORZ_INFO, align 4
  %32 = call i32 @regw(i32 %30, i32 %31)
  %33 = load i32*, i32** @ccdc_ctx, align 8
  %34 = load i32, i32* @CCDC_VERT_START, align 4
  %35 = ashr i32 %34, 2
  %36 = sext i32 %35 to i64
  %37 = getelementptr inbounds i32, i32* %33, i64 %36
  %38 = load i32, i32* %37, align 4
  %39 = load i32, i32* @CCDC_VERT_START, align 4
  %40 = call i32 @regw(i32 %38, i32 %39)
  %41 = load i32*, i32** @ccdc_ctx, align 8
  %42 = load i32, i32* @CCDC_VERT_LINES, align 4
  %43 = ashr i32 %42, 2
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds i32, i32* %41, i64 %44
  %46 = load i32, i32* %45, align 4
  %47 = load i32, i32* @CCDC_VERT_LINES, align 4
  %48 = call i32 @regw(i32 %46, i32 %47)
  %49 = load i32*, i32** @ccdc_ctx, align 8
  %50 = load i32, i32* @CCDC_CULLING, align 4
  %51 = ashr i32 %50, 2
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds i32, i32* %49, i64 %52
  %54 = load i32, i32* %53, align 4
  %55 = load i32, i32* @CCDC_CULLING, align 4
  %56 = call i32 @regw(i32 %54, i32 %55)
  %57 = load i32*, i32** @ccdc_ctx, align 8
  %58 = load i32, i32* @CCDC_HSIZE_OFF, align 4
  %59 = ashr i32 %58, 2
  %60 = sext i32 %59 to i64
  %61 = getelementptr inbounds i32, i32* %57, i64 %60
  %62 = load i32, i32* %61, align 4
  %63 = load i32, i32* @CCDC_HSIZE_OFF, align 4
  %64 = call i32 @regw(i32 %62, i32 %63)
  %65 = load i32*, i32** @ccdc_ctx, align 8
  %66 = load i32, i32* @CCDC_SDOFST, align 4
  %67 = ashr i32 %66, 2
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds i32, i32* %65, i64 %68
  %70 = load i32, i32* %69, align 4
  %71 = load i32, i32* @CCDC_SDOFST, align 4
  %72 = call i32 @regw(i32 %70, i32 %71)
  %73 = load i32*, i32** @ccdc_ctx, align 8
  %74 = load i32, i32* @CCDC_SDR_ADDR, align 4
  %75 = ashr i32 %74, 2
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds i32, i32* %73, i64 %76
  %78 = load i32, i32* %77, align 4
  %79 = load i32, i32* @CCDC_SDR_ADDR, align 4
  %80 = call i32 @regw(i32 %78, i32 %79)
  %81 = load i32*, i32** @ccdc_ctx, align 8
  %82 = load i32, i32* @CCDC_CLAMP, align 4
  %83 = ashr i32 %82, 2
  %84 = sext i32 %83 to i64
  %85 = getelementptr inbounds i32, i32* %81, i64 %84
  %86 = load i32, i32* %85, align 4
  %87 = load i32, i32* @CCDC_CLAMP, align 4
  %88 = call i32 @regw(i32 %86, i32 %87)
  %89 = load i32*, i32** @ccdc_ctx, align 8
  %90 = load i32, i32* @CCDC_DCSUB, align 4
  %91 = ashr i32 %90, 2
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds i32, i32* %89, i64 %92
  %94 = load i32, i32* %93, align 4
  %95 = load i32, i32* @CCDC_DCSUB, align 4
  %96 = call i32 @regw(i32 %94, i32 %95)
  %97 = load i32*, i32** @ccdc_ctx, align 8
  %98 = load i32, i32* @CCDC_COLPTN, align 4
  %99 = ashr i32 %98, 2
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds i32, i32* %97, i64 %100
  %102 = load i32, i32* %101, align 4
  %103 = load i32, i32* @CCDC_COLPTN, align 4
  %104 = call i32 @regw(i32 %102, i32 %103)
  %105 = load i32*, i32** @ccdc_ctx, align 8
  %106 = load i32, i32* @CCDC_BLKCMP, align 4
  %107 = ashr i32 %106, 2
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds i32, i32* %105, i64 %108
  %110 = load i32, i32* %109, align 4
  %111 = load i32, i32* @CCDC_BLKCMP, align 4
  %112 = call i32 @regw(i32 %110, i32 %111)
  %113 = load i32*, i32** @ccdc_ctx, align 8
  %114 = load i32, i32* @CCDC_FPC, align 4
  %115 = ashr i32 %114, 2
  %116 = sext i32 %115 to i64
  %117 = getelementptr inbounds i32, i32* %113, i64 %116
  %118 = load i32, i32* %117, align 4
  %119 = load i32, i32* @CCDC_FPC, align 4
  %120 = call i32 @regw(i32 %118, i32 %119)
  %121 = load i32*, i32** @ccdc_ctx, align 8
  %122 = load i32, i32* @CCDC_FPC_ADDR, align 4
  %123 = ashr i32 %122, 2
  %124 = sext i32 %123 to i64
  %125 = getelementptr inbounds i32, i32* %121, i64 %124
  %126 = load i32, i32* %125, align 4
  %127 = load i32, i32* @CCDC_FPC_ADDR, align 4
  %128 = call i32 @regw(i32 %126, i32 %127)
  %129 = load i32*, i32** @ccdc_ctx, align 8
  %130 = load i32, i32* @CCDC_VDINT, align 4
  %131 = ashr i32 %130, 2
  %132 = sext i32 %131 to i64
  %133 = getelementptr inbounds i32, i32* %129, i64 %132
  %134 = load i32, i32* %133, align 4
  %135 = load i32, i32* @CCDC_VDINT, align 4
  %136 = call i32 @regw(i32 %134, i32 %135)
  %137 = load i32*, i32** @ccdc_ctx, align 8
  %138 = load i32, i32* @CCDC_ALAW, align 4
  %139 = ashr i32 %138, 2
  %140 = sext i32 %139 to i64
  %141 = getelementptr inbounds i32, i32* %137, i64 %140
  %142 = load i32, i32* %141, align 4
  %143 = load i32, i32* @CCDC_ALAW, align 4
  %144 = call i32 @regw(i32 %142, i32 %143)
  %145 = load i32*, i32** @ccdc_ctx, align 8
  %146 = load i32, i32* @CCDC_REC656IF, align 4
  %147 = ashr i32 %146, 2
  %148 = sext i32 %147 to i64
  %149 = getelementptr inbounds i32, i32* %145, i64 %148
  %150 = load i32, i32* %149, align 4
  %151 = load i32, i32* @CCDC_REC656IF, align 4
  %152 = call i32 @regw(i32 %150, i32 %151)
  %153 = load i32*, i32** @ccdc_ctx, align 8
  %154 = load i32, i32* @CCDC_CCDCFG, align 4
  %155 = ashr i32 %154, 2
  %156 = sext i32 %155 to i64
  %157 = getelementptr inbounds i32, i32* %153, i64 %156
  %158 = load i32, i32* %157, align 4
  %159 = load i32, i32* @CCDC_CCDCFG, align 4
  %160 = call i32 @regw(i32 %158, i32 %159)
  %161 = load i32*, i32** @ccdc_ctx, align 8
  %162 = load i32, i32* @CCDC_FMTCFG, align 4
  %163 = ashr i32 %162, 2
  %164 = sext i32 %163 to i64
  %165 = getelementptr inbounds i32, i32* %161, i64 %164
  %166 = load i32, i32* %165, align 4
  %167 = load i32, i32* @CCDC_FMTCFG, align 4
  %168 = call i32 @regw(i32 %166, i32 %167)
  %169 = load i32*, i32** @ccdc_ctx, align 8
  %170 = load i32, i32* @CCDC_FMT_HORZ, align 4
  %171 = ashr i32 %170, 2
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds i32, i32* %169, i64 %172
  %174 = load i32, i32* %173, align 4
  %175 = load i32, i32* @CCDC_FMT_HORZ, align 4
  %176 = call i32 @regw(i32 %174, i32 %175)
  %177 = load i32*, i32** @ccdc_ctx, align 8
  %178 = load i32, i32* @CCDC_FMT_VERT, align 4
  %179 = ashr i32 %178, 2
  %180 = sext i32 %179 to i64
  %181 = getelementptr inbounds i32, i32* %177, i64 %180
  %182 = load i32, i32* %181, align 4
  %183 = load i32, i32* @CCDC_FMT_VERT, align 4
  %184 = call i32 @regw(i32 %182, i32 %183)
  %185 = load i32*, i32** @ccdc_ctx, align 8
  %186 = load i32, i32* @CCDC_FMT_ADDR0, align 4
  %187 = ashr i32 %186, 2
  %188 = sext i32 %187 to i64
  %189 = getelementptr inbounds i32, i32* %185, i64 %188
  %190 = load i32, i32* %189, align 4
  %191 = load i32, i32* @CCDC_FMT_ADDR0, align 4
  %192 = call i32 @regw(i32 %190, i32 %191)
  %193 = load i32*, i32** @ccdc_ctx, align 8
  %194 = load i32, i32* @CCDC_FMT_ADDR1, align 4
  %195 = ashr i32 %194, 2
  %196 = sext i32 %195 to i64
  %197 = getelementptr inbounds i32, i32* %193, i64 %196
  %198 = load i32, i32* %197, align 4
  %199 = load i32, i32* @CCDC_FMT_ADDR1, align 4
  %200 = call i32 @regw(i32 %198, i32 %199)
  %201 = load i32*, i32** @ccdc_ctx, align 8
  %202 = load i32, i32* @CCDC_FMT_ADDR2, align 4
  %203 = ashr i32 %202, 2
  %204 = sext i32 %203 to i64
  %205 = getelementptr inbounds i32, i32* %201, i64 %204
  %206 = load i32, i32* %205, align 4
  %207 = load i32, i32* @CCDC_FMT_ADDR2, align 4
  %208 = call i32 @regw(i32 %206, i32 %207)
  %209 = load i32*, i32** @ccdc_ctx, align 8
  %210 = load i32, i32* @CCDC_FMT_ADDR3, align 4
  %211 = ashr i32 %210, 2
  %212 = sext i32 %211 to i64
  %213 = getelementptr inbounds i32, i32* %209, i64 %212
  %214 = load i32, i32* %213, align 4
  %215 = load i32, i32* @CCDC_FMT_ADDR3, align 4
  %216 = call i32 @regw(i32 %214, i32 %215)
  %217 = load i32*, i32** @ccdc_ctx, align 8
  %218 = load i32, i32* @CCDC_FMT_ADDR4, align 4
  %219 = ashr i32 %218, 2
  %220 = sext i32 %219 to i64
  %221 = getelementptr inbounds i32, i32* %217, i64 %220
  %222 = load i32, i32* %221, align 4
  %223 = load i32, i32* @CCDC_FMT_ADDR4, align 4
  %224 = call i32 @regw(i32 %222, i32 %223)
  %225 = load i32*, i32** @ccdc_ctx, align 8
  %226 = load i32, i32* @CCDC_FMT_ADDR5, align 4
  %227 = ashr i32 %226, 2
  %228 = sext i32 %227 to i64
  %229 = getelementptr inbounds i32, i32* %225, i64 %228
  %230 = load i32, i32* %229, align 4
  %231 = load i32, i32* @CCDC_FMT_ADDR5, align 4
  %232 = call i32 @regw(i32 %230, i32 %231)
  %233 = load i32*, i32** @ccdc_ctx, align 8
  %234 = load i32, i32* @CCDC_FMT_ADDR6, align 4
  %235 = ashr i32 %234, 2
  %236 = sext i32 %235 to i64
  %237 = getelementptr inbounds i32, i32* %233, i64 %236
  %238 = load i32, i32* %237, align 4
  %239 = load i32, i32* @CCDC_FMT_ADDR6, align 4
  %240 = call i32 @regw(i32 %238, i32 %239)
  %241 = load i32*, i32** @ccdc_ctx, align 8
  %242 = load i32, i32* @CCDC_FMT_ADDR7, align 4
  %243 = ashr i32 %242, 2
  %244 = sext i32 %243 to i64
  %245 = getelementptr inbounds i32, i32* %241, i64 %244
  %246 = load i32, i32* %245, align 4
  %247 = load i32, i32* @CCDC_FMT_ADDR7, align 4
  %248 = call i32 @regw(i32 %246, i32 %247)
  %249 = load i32*, i32** @ccdc_ctx, align 8
  %250 = load i32, i32* @CCDC_PRGEVEN_0, align 4
  %251 = ashr i32 %250, 2
  %252 = sext i32 %251 to i64
  %253 = getelementptr inbounds i32, i32* %249, i64 %252
  %254 = load i32, i32* %253, align 4
  %255 = load i32, i32* @CCDC_PRGEVEN_0, align 4
  %256 = call i32 @regw(i32 %254, i32 %255)
  %257 = load i32*, i32** @ccdc_ctx, align 8
  %258 = load i32, i32* @CCDC_PRGEVEN_1, align 4
  %259 = ashr i32 %258, 2
  %260 = sext i32 %259 to i64
  %261 = getelementptr inbounds i32, i32* %257, i64 %260
  %262 = load i32, i32* %261, align 4
  %263 = load i32, i32* @CCDC_PRGEVEN_1, align 4
  %264 = call i32 @regw(i32 %262, i32 %263)
  %265 = load i32*, i32** @ccdc_ctx, align 8
  %266 = load i32, i32* @CCDC_PRGODD_0, align 4
  %267 = ashr i32 %266, 2
  %268 = sext i32 %267 to i64
  %269 = getelementptr inbounds i32, i32* %265, i64 %268
  %270 = load i32, i32* %269, align 4
  %271 = load i32, i32* @CCDC_PRGODD_0, align 4
  %272 = call i32 @regw(i32 %270, i32 %271)
  %273 = load i32*, i32** @ccdc_ctx, align 8
  %274 = load i32, i32* @CCDC_PRGODD_1, align 4
  %275 = ashr i32 %274, 2
  %276 = sext i32 %275 to i64
  %277 = getelementptr inbounds i32, i32* %273, i64 %276
  %278 = load i32, i32* %277, align 4
  %279 = load i32, i32* @CCDC_PRGODD_1, align 4
  %280 = call i32 @regw(i32 %278, i32 %279)
  %281 = load i32*, i32** @ccdc_ctx, align 8
  %282 = load i32, i32* @CCDC_VP_OUT, align 4
  %283 = ashr i32 %282, 2
  %284 = sext i32 %283 to i64
  %285 = getelementptr inbounds i32, i32* %281, i64 %284
  %286 = load i32, i32* %285, align 4
  %287 = load i32, i32* @CCDC_VP_OUT, align 4
  %288 = call i32 @regw(i32 %286, i32 %287)
  %289 = load i32*, i32** @ccdc_ctx, align 8
  %290 = load i32, i32* @CCDC_PCR, align 4
  %291 = ashr i32 %290, 2
  %292 = sext i32 %291 to i64
  %293 = getelementptr inbounds i32, i32* %289, i64 %292
  %294 = load i32, i32* %293, align 4
  %295 = load i32, i32* @CCDC_PCR, align 4
  %296 = call i32 @regw(i32 %294, i32 %295)
  ret void
}

declare dso_local i32 @regw(i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
