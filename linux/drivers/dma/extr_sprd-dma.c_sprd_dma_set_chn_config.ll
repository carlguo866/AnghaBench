; ModuleID = '/home/carl/AnghaBench/linux/drivers/dma/extr_sprd-dma.c_sprd_dma_set_chn_config.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/dma/extr_sprd-dma.c_sprd_dma_set_chn_config.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.sprd_dma_chn = type { i64 }
%struct.sprd_dma_desc = type { %struct.sprd_dma_chn_hw }
%struct.sprd_dma_chn_hw = type { i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }

@SPRD_DMA_CHN_PAUSE = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_CFG = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_INTC = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_SRC_ADDR = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_DES_ADDR = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_FRG_LEN = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_BLK_LEN = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_TRSC_LEN = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_TRSF_STEP = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_WARP_PTR = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_WARP_TO = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_LLIST_PTR = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_FRAG_STEP = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_SRC_BLK_STEP = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_DES_BLK_STEP = common dso_local global i64 0, align 8
@SPRD_DMA_CHN_REQ = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.sprd_dma_chn*, %struct.sprd_dma_desc*)* @sprd_dma_set_chn_config to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @sprd_dma_set_chn_config(%struct.sprd_dma_chn* %0, %struct.sprd_dma_desc* %1) #0 {
  %3 = alloca %struct.sprd_dma_chn*, align 8
  %4 = alloca %struct.sprd_dma_desc*, align 8
  %5 = alloca %struct.sprd_dma_chn_hw*, align 8
  store %struct.sprd_dma_chn* %0, %struct.sprd_dma_chn** %3, align 8
  store %struct.sprd_dma_desc* %1, %struct.sprd_dma_desc** %4, align 8
  %6 = load %struct.sprd_dma_desc*, %struct.sprd_dma_desc** %4, align 8
  %7 = getelementptr inbounds %struct.sprd_dma_desc, %struct.sprd_dma_desc* %6, i32 0, i32 0
  store %struct.sprd_dma_chn_hw* %7, %struct.sprd_dma_chn_hw** %5, align 8
  %8 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %9 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %8, i32 0, i32 15
  %10 = load i32, i32* %9, align 4
  %11 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %12 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %11, i32 0, i32 0
  %13 = load i64, i64* %12, align 8
  %14 = load i64, i64* @SPRD_DMA_CHN_PAUSE, align 8
  %15 = add nsw i64 %13, %14
  %16 = call i32 @writel(i32 %10, i64 %15)
  %17 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %18 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %17, i32 0, i32 14
  %19 = load i32, i32* %18, align 4
  %20 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %21 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %20, i32 0, i32 0
  %22 = load i64, i64* %21, align 8
  %23 = load i64, i64* @SPRD_DMA_CHN_CFG, align 8
  %24 = add nsw i64 %22, %23
  %25 = call i32 @writel(i32 %19, i64 %24)
  %26 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %27 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %26, i32 0, i32 13
  %28 = load i32, i32* %27, align 4
  %29 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %30 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %29, i32 0, i32 0
  %31 = load i64, i64* %30, align 8
  %32 = load i64, i64* @SPRD_DMA_CHN_INTC, align 8
  %33 = add nsw i64 %31, %32
  %34 = call i32 @writel(i32 %28, i64 %33)
  %35 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %36 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %35, i32 0, i32 12
  %37 = load i32, i32* %36, align 4
  %38 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %39 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %38, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = load i64, i64* @SPRD_DMA_CHN_SRC_ADDR, align 8
  %42 = add nsw i64 %40, %41
  %43 = call i32 @writel(i32 %37, i64 %42)
  %44 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %45 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %44, i32 0, i32 11
  %46 = load i32, i32* %45, align 4
  %47 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %48 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %47, i32 0, i32 0
  %49 = load i64, i64* %48, align 8
  %50 = load i64, i64* @SPRD_DMA_CHN_DES_ADDR, align 8
  %51 = add nsw i64 %49, %50
  %52 = call i32 @writel(i32 %46, i64 %51)
  %53 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %54 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %53, i32 0, i32 10
  %55 = load i32, i32* %54, align 4
  %56 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %57 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %56, i32 0, i32 0
  %58 = load i64, i64* %57, align 8
  %59 = load i64, i64* @SPRD_DMA_CHN_FRG_LEN, align 8
  %60 = add nsw i64 %58, %59
  %61 = call i32 @writel(i32 %55, i64 %60)
  %62 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %63 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %62, i32 0, i32 9
  %64 = load i32, i32* %63, align 4
  %65 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %66 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %65, i32 0, i32 0
  %67 = load i64, i64* %66, align 8
  %68 = load i64, i64* @SPRD_DMA_CHN_BLK_LEN, align 8
  %69 = add nsw i64 %67, %68
  %70 = call i32 @writel(i32 %64, i64 %69)
  %71 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %72 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %71, i32 0, i32 8
  %73 = load i32, i32* %72, align 4
  %74 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %75 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %74, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = load i64, i64* @SPRD_DMA_CHN_TRSC_LEN, align 8
  %78 = add nsw i64 %76, %77
  %79 = call i32 @writel(i32 %73, i64 %78)
  %80 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %81 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %80, i32 0, i32 7
  %82 = load i32, i32* %81, align 4
  %83 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %84 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %83, i32 0, i32 0
  %85 = load i64, i64* %84, align 8
  %86 = load i64, i64* @SPRD_DMA_CHN_TRSF_STEP, align 8
  %87 = add nsw i64 %85, %86
  %88 = call i32 @writel(i32 %82, i64 %87)
  %89 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %90 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %89, i32 0, i32 6
  %91 = load i32, i32* %90, align 4
  %92 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %93 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %92, i32 0, i32 0
  %94 = load i64, i64* %93, align 8
  %95 = load i64, i64* @SPRD_DMA_CHN_WARP_PTR, align 8
  %96 = add nsw i64 %94, %95
  %97 = call i32 @writel(i32 %91, i64 %96)
  %98 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %99 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %98, i32 0, i32 5
  %100 = load i32, i32* %99, align 4
  %101 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %102 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %101, i32 0, i32 0
  %103 = load i64, i64* %102, align 8
  %104 = load i64, i64* @SPRD_DMA_CHN_WARP_TO, align 8
  %105 = add nsw i64 %103, %104
  %106 = call i32 @writel(i32 %100, i64 %105)
  %107 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %108 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %107, i32 0, i32 4
  %109 = load i32, i32* %108, align 4
  %110 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %111 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %110, i32 0, i32 0
  %112 = load i64, i64* %111, align 8
  %113 = load i64, i64* @SPRD_DMA_CHN_LLIST_PTR, align 8
  %114 = add nsw i64 %112, %113
  %115 = call i32 @writel(i32 %109, i64 %114)
  %116 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %117 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %116, i32 0, i32 3
  %118 = load i32, i32* %117, align 4
  %119 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %120 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %119, i32 0, i32 0
  %121 = load i64, i64* %120, align 8
  %122 = load i64, i64* @SPRD_DMA_CHN_FRAG_STEP, align 8
  %123 = add nsw i64 %121, %122
  %124 = call i32 @writel(i32 %118, i64 %123)
  %125 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %126 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %125, i32 0, i32 2
  %127 = load i32, i32* %126, align 4
  %128 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %129 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %128, i32 0, i32 0
  %130 = load i64, i64* %129, align 8
  %131 = load i64, i64* @SPRD_DMA_CHN_SRC_BLK_STEP, align 8
  %132 = add nsw i64 %130, %131
  %133 = call i32 @writel(i32 %127, i64 %132)
  %134 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %135 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %134, i32 0, i32 1
  %136 = load i32, i32* %135, align 4
  %137 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %138 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %137, i32 0, i32 0
  %139 = load i64, i64* %138, align 8
  %140 = load i64, i64* @SPRD_DMA_CHN_DES_BLK_STEP, align 8
  %141 = add nsw i64 %139, %140
  %142 = call i32 @writel(i32 %136, i64 %141)
  %143 = load %struct.sprd_dma_chn_hw*, %struct.sprd_dma_chn_hw** %5, align 8
  %144 = getelementptr inbounds %struct.sprd_dma_chn_hw, %struct.sprd_dma_chn_hw* %143, i32 0, i32 0
  %145 = load i32, i32* %144, align 4
  %146 = load %struct.sprd_dma_chn*, %struct.sprd_dma_chn** %3, align 8
  %147 = getelementptr inbounds %struct.sprd_dma_chn, %struct.sprd_dma_chn* %146, i32 0, i32 0
  %148 = load i64, i64* %147, align 8
  %149 = load i64, i64* @SPRD_DMA_CHN_REQ, align 8
  %150 = add nsw i64 %148, %149
  %151 = call i32 @writel(i32 %145, i64 %150)
  ret void
}

declare dso_local i32 @writel(i32, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
