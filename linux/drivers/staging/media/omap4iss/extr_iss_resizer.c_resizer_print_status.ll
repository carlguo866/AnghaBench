; ModuleID = '/home/carl/AnghaBench/linux/drivers/staging/media/omap4iss/extr_iss_resizer.c_resizer_print_status.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/staging/media/omap4iss/extr_iss_resizer.c_resizer_print_status.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.iss_resizer_device = type { i32 }
%struct.iss_device = type { i32 }

@.str = private unnamed_addr constant [49 x i8] c"-------------RESIZER Register dump-------------\0A\00", align 1
@SYSCONFIG = common dso_local global i32 0, align 4
@IN_FIFO_CTRL = common dso_local global i32 0, align 4
@FRACDIV = common dso_local global i32 0, align 4
@SRC_EN = common dso_local global i32 0, align 4
@SRC_MODE = common dso_local global i32 0, align 4
@SRC_FMT0 = common dso_local global i32 0, align 4
@SRC_FMT1 = common dso_local global i32 0, align 4
@SRC_VPS = common dso_local global i32 0, align 4
@SRC_VSZ = common dso_local global i32 0, align 4
@SRC_HPS = common dso_local global i32 0, align 4
@SRC_HSZ = common dso_local global i32 0, align 4
@DMA_RZA = common dso_local global i32 0, align 4
@DMA_RZB = common dso_local global i32 0, align 4
@DMA_STA = common dso_local global i32 0, align 4
@GCK_MMR = common dso_local global i32 0, align 4
@GCK_SDR = common dso_local global i32 0, align 4
@IRQ_RZA = common dso_local global i32 0, align 4
@IRQ_RZB = common dso_local global i32 0, align 4
@YUV_Y_MIN = common dso_local global i32 0, align 4
@YUV_Y_MAX = common dso_local global i32 0, align 4
@YUV_C_MIN = common dso_local global i32 0, align 4
@YUV_C_MAX = common dso_local global i32 0, align 4
@SEQ = common dso_local global i32 0, align 4
@EN = common dso_local global i32 0, align 4
@MODE = common dso_local global i32 0, align 4
@I_VPS = common dso_local global i32 0, align 4
@I_HPS = common dso_local global i32 0, align 4
@O_VSZ = common dso_local global i32 0, align 4
@O_HSZ = common dso_local global i32 0, align 4
@V_PHS_Y = common dso_local global i32 0, align 4
@V_PHS_C = common dso_local global i32 0, align 4
@V_DIF = common dso_local global i32 0, align 4
@V_TYP = common dso_local global i32 0, align 4
@V_LPF = common dso_local global i32 0, align 4
@H_PHS = common dso_local global i32 0, align 4
@H_DIF = common dso_local global i32 0, align 4
@H_TYP = common dso_local global i32 0, align 4
@H_LPF = common dso_local global i32 0, align 4
@DWN_EN = common dso_local global i32 0, align 4
@SDR_Y_BAD_H = common dso_local global i32 0, align 4
@SDR_Y_BAD_L = common dso_local global i32 0, align 4
@SDR_Y_SAD_H = common dso_local global i32 0, align 4
@SDR_Y_SAD_L = common dso_local global i32 0, align 4
@SDR_Y_OFT = common dso_local global i32 0, align 4
@SDR_Y_PTR_S = common dso_local global i32 0, align 4
@SDR_Y_PTR_E = common dso_local global i32 0, align 4
@SDR_C_BAD_H = common dso_local global i32 0, align 4
@SDR_C_BAD_L = common dso_local global i32 0, align 4
@SDR_C_SAD_H = common dso_local global i32 0, align 4
@SDR_C_SAD_L = common dso_local global i32 0, align 4
@SDR_C_OFT = common dso_local global i32 0, align 4
@SDR_C_PTR_S = common dso_local global i32 0, align 4
@SDR_C_PTR_E = common dso_local global i32 0, align 4
@.str.1 = private unnamed_addr constant [49 x i8] c"-----------------------------------------------\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.iss_resizer_device*)* @resizer_print_status to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @resizer_print_status(%struct.iss_resizer_device* %0) #0 {
  %2 = alloca %struct.iss_resizer_device*, align 8
  %3 = alloca %struct.iss_device*, align 8
  store %struct.iss_resizer_device* %0, %struct.iss_resizer_device** %2, align 8
  %4 = load %struct.iss_resizer_device*, %struct.iss_resizer_device** %2, align 8
  %5 = call %struct.iss_device* @to_iss_device(%struct.iss_resizer_device* %4)
  store %struct.iss_device* %5, %struct.iss_device** %3, align 8
  %6 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %7 = getelementptr inbounds %struct.iss_device, %struct.iss_device* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = call i32 @dev_dbg(i32 %8, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str, i64 0, i64 0))
  %10 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %11 = load i32, i32* @SYSCONFIG, align 4
  %12 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %10, i32 %11)
  %13 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %14 = load i32, i32* @IN_FIFO_CTRL, align 4
  %15 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %13, i32 %14)
  %16 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %17 = load i32, i32* @FRACDIV, align 4
  %18 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %16, i32 %17)
  %19 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %20 = load i32, i32* @SRC_EN, align 4
  %21 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %19, i32 %20)
  %22 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %23 = load i32, i32* @SRC_MODE, align 4
  %24 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %22, i32 %23)
  %25 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %26 = load i32, i32* @SRC_FMT0, align 4
  %27 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %25, i32 %26)
  %28 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %29 = load i32, i32* @SRC_FMT1, align 4
  %30 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %28, i32 %29)
  %31 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %32 = load i32, i32* @SRC_VPS, align 4
  %33 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %31, i32 %32)
  %34 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %35 = load i32, i32* @SRC_VSZ, align 4
  %36 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %34, i32 %35)
  %37 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %38 = load i32, i32* @SRC_HPS, align 4
  %39 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %37, i32 %38)
  %40 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %41 = load i32, i32* @SRC_HSZ, align 4
  %42 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %40, i32 %41)
  %43 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %44 = load i32, i32* @DMA_RZA, align 4
  %45 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %43, i32 %44)
  %46 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %47 = load i32, i32* @DMA_RZB, align 4
  %48 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %46, i32 %47)
  %49 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %50 = load i32, i32* @DMA_STA, align 4
  %51 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %49, i32 %50)
  %52 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %53 = load i32, i32* @GCK_MMR, align 4
  %54 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %52, i32 %53)
  %55 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %56 = load i32, i32* @GCK_SDR, align 4
  %57 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %55, i32 %56)
  %58 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %59 = load i32, i32* @IRQ_RZA, align 4
  %60 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %58, i32 %59)
  %61 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %62 = load i32, i32* @IRQ_RZB, align 4
  %63 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %61, i32 %62)
  %64 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %65 = load i32, i32* @YUV_Y_MIN, align 4
  %66 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %64, i32 %65)
  %67 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %68 = load i32, i32* @YUV_Y_MAX, align 4
  %69 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %67, i32 %68)
  %70 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %71 = load i32, i32* @YUV_C_MIN, align 4
  %72 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %70, i32 %71)
  %73 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %74 = load i32, i32* @YUV_C_MAX, align 4
  %75 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %73, i32 %74)
  %76 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %77 = load i32, i32* @SEQ, align 4
  %78 = call i32 @RSZ_PRINT_REGISTER(%struct.iss_device* %76, i32 %77)
  %79 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %80 = load i32, i32* @EN, align 4
  %81 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %79, i32 %80)
  %82 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %83 = load i32, i32* @MODE, align 4
  %84 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %82, i32 %83)
  %85 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %86 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %85, i32 420)
  %87 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %88 = load i32, i32* @I_VPS, align 4
  %89 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %87, i32 %88)
  %90 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %91 = load i32, i32* @I_HPS, align 4
  %92 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %90, i32 %91)
  %93 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %94 = load i32, i32* @O_VSZ, align 4
  %95 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %93, i32 %94)
  %96 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %97 = load i32, i32* @O_HSZ, align 4
  %98 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %96, i32 %97)
  %99 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %100 = load i32, i32* @V_PHS_Y, align 4
  %101 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %99, i32 %100)
  %102 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %103 = load i32, i32* @V_PHS_C, align 4
  %104 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %102, i32 %103)
  %105 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %106 = load i32, i32* @V_DIF, align 4
  %107 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %105, i32 %106)
  %108 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %109 = load i32, i32* @V_TYP, align 4
  %110 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %108, i32 %109)
  %111 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %112 = load i32, i32* @V_LPF, align 4
  %113 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %111, i32 %112)
  %114 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %115 = load i32, i32* @H_PHS, align 4
  %116 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %114, i32 %115)
  %117 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %118 = load i32, i32* @H_DIF, align 4
  %119 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %117, i32 %118)
  %120 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %121 = load i32, i32* @H_TYP, align 4
  %122 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %120, i32 %121)
  %123 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %124 = load i32, i32* @H_LPF, align 4
  %125 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %123, i32 %124)
  %126 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %127 = load i32, i32* @DWN_EN, align 4
  %128 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %126, i32 %127)
  %129 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %130 = load i32, i32* @SDR_Y_BAD_H, align 4
  %131 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %129, i32 %130)
  %132 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %133 = load i32, i32* @SDR_Y_BAD_L, align 4
  %134 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %132, i32 %133)
  %135 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %136 = load i32, i32* @SDR_Y_SAD_H, align 4
  %137 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %135, i32 %136)
  %138 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %139 = load i32, i32* @SDR_Y_SAD_L, align 4
  %140 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %138, i32 %139)
  %141 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %142 = load i32, i32* @SDR_Y_OFT, align 4
  %143 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %141, i32 %142)
  %144 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %145 = load i32, i32* @SDR_Y_PTR_S, align 4
  %146 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %144, i32 %145)
  %147 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %148 = load i32, i32* @SDR_Y_PTR_E, align 4
  %149 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %147, i32 %148)
  %150 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %151 = load i32, i32* @SDR_C_BAD_H, align 4
  %152 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %150, i32 %151)
  %153 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %154 = load i32, i32* @SDR_C_BAD_L, align 4
  %155 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %153, i32 %154)
  %156 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %157 = load i32, i32* @SDR_C_SAD_H, align 4
  %158 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %156, i32 %157)
  %159 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %160 = load i32, i32* @SDR_C_SAD_L, align 4
  %161 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %159, i32 %160)
  %162 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %163 = load i32, i32* @SDR_C_OFT, align 4
  %164 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %162, i32 %163)
  %165 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %166 = load i32, i32* @SDR_C_PTR_S, align 4
  %167 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %165, i32 %166)
  %168 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %169 = load i32, i32* @SDR_C_PTR_E, align 4
  %170 = call i32 @RZA_PRINT_REGISTER(%struct.iss_device* %168, i32 %169)
  %171 = load %struct.iss_device*, %struct.iss_device** %3, align 8
  %172 = getelementptr inbounds %struct.iss_device, %struct.iss_device* %171, i32 0, i32 0
  %173 = load i32, i32* %172, align 4
  %174 = call i32 @dev_dbg(i32 %173, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.1, i64 0, i64 0))
  ret void
}

declare dso_local %struct.iss_device* @to_iss_device(%struct.iss_resizer_device*) #1

declare dso_local i32 @dev_dbg(i32, i8*) #1

declare dso_local i32 @RSZ_PRINT_REGISTER(%struct.iss_device*, i32) #1

declare dso_local i32 @RZA_PRINT_REGISTER(%struct.iss_device*, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
