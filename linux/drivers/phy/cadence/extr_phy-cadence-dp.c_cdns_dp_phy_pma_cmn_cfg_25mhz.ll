; ModuleID = '/home/carl/AnghaBench/linux/drivers/phy/cadence/extr_phy-cadence-dp.c_cdns_dp_phy_pma_cmn_cfg_25mhz.c'
source_filename = "/home/carl/AnghaBench/linux/drivers/phy/cadence/extr_phy-cadence-dp.c_cdns_dp_phy_pma_cmn_cfg_25mhz.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cdns_dp_phy = type { i64 }

@CMN_SSM_BIAS_TMR = common dso_local global i64 0, align 8
@CMN_PLLSM0_PLLPRE_TMR = common dso_local global i64 0, align 8
@CMN_PLLSM0_PLLLOCK_TMR = common dso_local global i64 0, align 8
@CMN_PLLSM1_PLLPRE_TMR = common dso_local global i64 0, align 8
@CMN_PLLSM1_PLLLOCK_TMR = common dso_local global i64 0, align 8
@CMN_BGCAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_BGCAL_ITER_TMR = common dso_local global i64 0, align 8
@CMN_IBCAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_TXPUCAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_TXPUCAL_ITER_TMR = common dso_local global i64 0, align 8
@CMN_TXPDCAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_TXPDCAL_ITER_TMR = common dso_local global i64 0, align 8
@CMN_RXCAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_RXCAL_ITER_TMR = common dso_local global i64 0, align 8
@CMN_SD_CAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_SD_CAL_ITER_TMR = common dso_local global i64 0, align 8
@CMN_SD_CAL_REFTIM_START = common dso_local global i64 0, align 8
@CMN_SD_CAL_PLLCNT_START = common dso_local global i64 0, align 8
@CMN_PDIAG_PLL0_CP_PADJ_M0 = common dso_local global i64 0, align 8
@CMN_PDIAG_PLL0_CP_IADJ_M0 = common dso_local global i64 0, align 8
@CMN_PDIAG_PLL0_FILT_PADJ_M0 = common dso_local global i64 0, align 8
@CMN_PLL0_DSM_DIAG_M0 = common dso_local global i64 0, align 8
@CMN_PLL0_VCOCAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_PLL0_VCOCAL_ITER_TMR = common dso_local global i64 0, align 8
@CMN_PLL1_VCOCAL_INIT_TMR = common dso_local global i64 0, align 8
@CMN_PLL1_VCOCAL_ITER_TMR = common dso_local global i64 0, align 8
@CMN_PLL0_VCOCAL_REFTIM_START = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.cdns_dp_phy*)* @cdns_dp_phy_pma_cmn_cfg_25mhz to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cdns_dp_phy_pma_cmn_cfg_25mhz(%struct.cdns_dp_phy* %0) #0 {
  %2 = alloca %struct.cdns_dp_phy*, align 8
  store %struct.cdns_dp_phy* %0, %struct.cdns_dp_phy** %2, align 8
  %3 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %4 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %3, i32 0, i32 0
  %5 = load i64, i64* %4, align 8
  %6 = load i64, i64* @CMN_SSM_BIAS_TMR, align 8
  %7 = add nsw i64 %5, %6
  %8 = call i32 @writel(i32 25, i64 %7)
  %9 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %10 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %9, i32 0, i32 0
  %11 = load i64, i64* %10, align 8
  %12 = load i64, i64* @CMN_PLLSM0_PLLPRE_TMR, align 8
  %13 = add nsw i64 %11, %12
  %14 = call i32 @writel(i32 50, i64 %13)
  %15 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %16 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %15, i32 0, i32 0
  %17 = load i64, i64* %16, align 8
  %18 = load i64, i64* @CMN_PLLSM0_PLLLOCK_TMR, align 8
  %19 = add nsw i64 %17, %18
  %20 = call i32 @writel(i32 209, i64 %19)
  %21 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %22 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %21, i32 0, i32 0
  %23 = load i64, i64* %22, align 8
  %24 = load i64, i64* @CMN_PLLSM1_PLLPRE_TMR, align 8
  %25 = add nsw i64 %23, %24
  %26 = call i32 @writel(i32 50, i64 %25)
  %27 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %28 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %27, i32 0, i32 0
  %29 = load i64, i64* %28, align 8
  %30 = load i64, i64* @CMN_PLLSM1_PLLLOCK_TMR, align 8
  %31 = add nsw i64 %29, %30
  %32 = call i32 @writel(i32 209, i64 %31)
  %33 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %34 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %33, i32 0, i32 0
  %35 = load i64, i64* %34, align 8
  %36 = load i64, i64* @CMN_BGCAL_INIT_TMR, align 8
  %37 = add nsw i64 %35, %36
  %38 = call i32 @writel(i32 125, i64 %37)
  %39 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %40 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %39, i32 0, i32 0
  %41 = load i64, i64* %40, align 8
  %42 = load i64, i64* @CMN_BGCAL_ITER_TMR, align 8
  %43 = add nsw i64 %41, %42
  %44 = call i32 @writel(i32 125, i64 %43)
  %45 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %46 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %45, i32 0, i32 0
  %47 = load i64, i64* %46, align 8
  %48 = load i64, i64* @CMN_IBCAL_INIT_TMR, align 8
  %49 = add nsw i64 %47, %48
  %50 = call i32 @writel(i32 25, i64 %49)
  %51 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %52 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %51, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = load i64, i64* @CMN_TXPUCAL_INIT_TMR, align 8
  %55 = add nsw i64 %53, %54
  %56 = call i32 @writel(i32 30, i64 %55)
  %57 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %58 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %57, i32 0, i32 0
  %59 = load i64, i64* %58, align 8
  %60 = load i64, i64* @CMN_TXPUCAL_ITER_TMR, align 8
  %61 = add nsw i64 %59, %60
  %62 = call i32 @writel(i32 6, i64 %61)
  %63 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %64 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %63, i32 0, i32 0
  %65 = load i64, i64* %64, align 8
  %66 = load i64, i64* @CMN_TXPDCAL_INIT_TMR, align 8
  %67 = add nsw i64 %65, %66
  %68 = call i32 @writel(i32 30, i64 %67)
  %69 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %70 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %69, i32 0, i32 0
  %71 = load i64, i64* %70, align 8
  %72 = load i64, i64* @CMN_TXPDCAL_ITER_TMR, align 8
  %73 = add nsw i64 %71, %72
  %74 = call i32 @writel(i32 6, i64 %73)
  %75 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %76 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %75, i32 0, i32 0
  %77 = load i64, i64* %76, align 8
  %78 = load i64, i64* @CMN_RXCAL_INIT_TMR, align 8
  %79 = add nsw i64 %77, %78
  %80 = call i32 @writel(i32 750, i64 %79)
  %81 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %82 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %81, i32 0, i32 0
  %83 = load i64, i64* %82, align 8
  %84 = load i64, i64* @CMN_RXCAL_ITER_TMR, align 8
  %85 = add nsw i64 %83, %84
  %86 = call i32 @writel(i32 6, i64 %85)
  %87 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %88 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %87, i32 0, i32 0
  %89 = load i64, i64* %88, align 8
  %90 = load i64, i64* @CMN_SD_CAL_INIT_TMR, align 8
  %91 = add nsw i64 %89, %90
  %92 = call i32 @writel(i32 2, i64 %91)
  %93 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %94 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %93, i32 0, i32 0
  %95 = load i64, i64* %94, align 8
  %96 = load i64, i64* @CMN_SD_CAL_ITER_TMR, align 8
  %97 = add nsw i64 %95, %96
  %98 = call i32 @writel(i32 2, i64 %97)
  %99 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %100 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %99, i32 0, i32 0
  %101 = load i64, i64* %100, align 8
  %102 = load i64, i64* @CMN_SD_CAL_REFTIM_START, align 8
  %103 = add nsw i64 %101, %102
  %104 = call i32 @writel(i32 14, i64 %103)
  %105 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %106 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %105, i32 0, i32 0
  %107 = load i64, i64* %106, align 8
  %108 = load i64, i64* @CMN_SD_CAL_PLLCNT_START, align 8
  %109 = add nsw i64 %107, %108
  %110 = call i32 @writel(i32 299, i64 %109)
  %111 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %112 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %111, i32 0, i32 0
  %113 = load i64, i64* %112, align 8
  %114 = load i64, i64* @CMN_PDIAG_PLL0_CP_PADJ_M0, align 8
  %115 = add nsw i64 %113, %114
  %116 = call i32 @writel(i32 1033, i64 %115)
  %117 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %118 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %117, i32 0, i32 0
  %119 = load i64, i64* %118, align 8
  %120 = load i64, i64* @CMN_PDIAG_PLL0_CP_IADJ_M0, align 8
  %121 = add nsw i64 %119, %120
  %122 = call i32 @writel(i32 4097, i64 %121)
  %123 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %124 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %123, i32 0, i32 0
  %125 = load i64, i64* %124, align 8
  %126 = load i64, i64* @CMN_PDIAG_PLL0_FILT_PADJ_M0, align 8
  %127 = add nsw i64 %125, %126
  %128 = call i32 @writel(i32 3848, i64 %127)
  %129 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %130 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %129, i32 0, i32 0
  %131 = load i64, i64* %130, align 8
  %132 = load i64, i64* @CMN_PLL0_DSM_DIAG_M0, align 8
  %133 = add nsw i64 %131, %132
  %134 = call i32 @writel(i32 4, i64 %133)
  %135 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %136 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %135, i32 0, i32 0
  %137 = load i64, i64* %136, align 8
  %138 = load i64, i64* @CMN_PLL0_VCOCAL_INIT_TMR, align 8
  %139 = add nsw i64 %137, %138
  %140 = call i32 @writel(i32 250, i64 %139)
  %141 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %142 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %141, i32 0, i32 0
  %143 = load i64, i64* %142, align 8
  %144 = load i64, i64* @CMN_PLL0_VCOCAL_ITER_TMR, align 8
  %145 = add nsw i64 %143, %144
  %146 = call i32 @writel(i32 4, i64 %145)
  %147 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %148 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %147, i32 0, i32 0
  %149 = load i64, i64* %148, align 8
  %150 = load i64, i64* @CMN_PLL1_VCOCAL_INIT_TMR, align 8
  %151 = add nsw i64 %149, %150
  %152 = call i32 @writel(i32 250, i64 %151)
  %153 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %154 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %153, i32 0, i32 0
  %155 = load i64, i64* %154, align 8
  %156 = load i64, i64* @CMN_PLL1_VCOCAL_ITER_TMR, align 8
  %157 = add nsw i64 %155, %156
  %158 = call i32 @writel(i32 4, i64 %157)
  %159 = load %struct.cdns_dp_phy*, %struct.cdns_dp_phy** %2, align 8
  %160 = getelementptr inbounds %struct.cdns_dp_phy, %struct.cdns_dp_phy* %159, i32 0, i32 0
  %161 = load i64, i64* %160, align 8
  %162 = load i64, i64* @CMN_PLL0_VCOCAL_REFTIM_START, align 8
  %163 = add nsw i64 %161, %162
  %164 = call i32 @writel(i32 792, i64 %163)
  ret void
}

declare dso_local i32 @writel(i32, i64) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
