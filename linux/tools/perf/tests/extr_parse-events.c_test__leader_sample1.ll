; ModuleID = '/home/carl/AnghaBench/linux/tools/perf/tests/extr_parse-events.c_test__leader_sample1.c'
source_filename = "/home/carl/AnghaBench/linux/tools/perf/tests/extr_parse-events.c_test__leader_sample1.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.evlist = type { %struct.TYPE_4__ }
%struct.TYPE_4__ = type { i32 }
%struct.evsel = type { i32, %struct.evsel*, i32, %struct.TYPE_6__ }
%struct.TYPE_6__ = type { %struct.TYPE_5__ }
%struct.TYPE_5__ = type { i64, i64, i32, i32, i32, i32, i32, i32 }

@.str = private unnamed_addr constant [24 x i8] c"wrong number of entries\00", align 1
@.str.1 = private unnamed_addr constant [11 x i8] c"wrong type\00", align 1
@PERF_TYPE_HARDWARE = common dso_local global i64 0, align 8
@.str.2 = private unnamed_addr constant [13 x i8] c"wrong config\00", align 1
@PERF_COUNT_HW_CPU_CYCLES = common dso_local global i64 0, align 8
@.str.3 = private unnamed_addr constant [19 x i8] c"wrong exclude_user\00", align 1
@.str.4 = private unnamed_addr constant [21 x i8] c"wrong exclude_kernel\00", align 1
@.str.5 = private unnamed_addr constant [17 x i8] c"wrong exclude_hv\00", align 1
@.str.6 = private unnamed_addr constant [20 x i8] c"wrong exclude guest\00", align 1
@.str.7 = private unnamed_addr constant [19 x i8] c"wrong exclude host\00", align 1
@.str.8 = private unnamed_addr constant [17 x i8] c"wrong precise_ip\00", align 1
@.str.9 = private unnamed_addr constant [17 x i8] c"wrong group name\00", align 1
@.str.10 = private unnamed_addr constant [13 x i8] c"wrong leader\00", align 1
@.str.11 = private unnamed_addr constant [18 x i8] c"wrong sample_read\00", align 1
@PERF_COUNT_HW_CACHE_MISSES = common dso_local global i64 0, align 8
@PERF_COUNT_HW_BRANCH_MISSES = common dso_local global i64 0, align 8
@llvm.used = appending global [1 x i8*] [i8* bitcast (i32 (%struct.evlist*)* @test__leader_sample1 to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal i32 @test__leader_sample1(%struct.evlist* %0) #0 {
  %2 = alloca %struct.evlist*, align 8
  %3 = alloca %struct.evsel*, align 8
  %4 = alloca %struct.evsel*, align 8
  store %struct.evlist* %0, %struct.evlist** %2, align 8
  %5 = load %struct.evlist*, %struct.evlist** %2, align 8
  %6 = getelementptr inbounds %struct.evlist, %struct.evlist* %5, i32 0, i32 0
  %7 = getelementptr inbounds %struct.TYPE_4__, %struct.TYPE_4__* %6, i32 0, i32 0
  %8 = load i32, i32* %7, align 4
  %9 = icmp eq i32 3, %8
  %10 = zext i1 %9 to i32
  %11 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str, i64 0, i64 0), i32 %10)
  %12 = load %struct.evlist*, %struct.evlist** %2, align 8
  %13 = call %struct.evsel* @evlist__first(%struct.evlist* %12)
  store %struct.evsel* %13, %struct.evsel** %4, align 8
  store %struct.evsel* %13, %struct.evsel** %3, align 8
  %14 = load i64, i64* @PERF_TYPE_HARDWARE, align 8
  %15 = load %struct.evsel*, %struct.evsel** %3, align 8
  %16 = getelementptr inbounds %struct.evsel, %struct.evsel* %15, i32 0, i32 3
  %17 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %16, i32 0, i32 0
  %18 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %17, i32 0, i32 0
  %19 = load i64, i64* %18, align 8
  %20 = icmp eq i64 %14, %19
  %21 = zext i1 %20 to i32
  %22 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 %21)
  %23 = load i64, i64* @PERF_COUNT_HW_CPU_CYCLES, align 8
  %24 = load %struct.evsel*, %struct.evsel** %3, align 8
  %25 = getelementptr inbounds %struct.evsel, %struct.evsel* %24, i32 0, i32 3
  %26 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %25, i32 0, i32 0
  %27 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %26, i32 0, i32 1
  %28 = load i64, i64* %27, align 8
  %29 = icmp eq i64 %23, %28
  %30 = zext i1 %29 to i32
  %31 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 %30)
  %32 = load %struct.evsel*, %struct.evsel** %3, align 8
  %33 = getelementptr inbounds %struct.evsel, %struct.evsel* %32, i32 0, i32 3
  %34 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %33, i32 0, i32 0
  %35 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %34, i32 0, i32 7
  %36 = load i32, i32* %35, align 4
  %37 = icmp ne i32 %36, 0
  %38 = xor i1 %37, true
  %39 = zext i1 %38 to i32
  %40 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 %39)
  %41 = load %struct.evsel*, %struct.evsel** %3, align 8
  %42 = getelementptr inbounds %struct.evsel, %struct.evsel* %41, i32 0, i32 3
  %43 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %42, i32 0, i32 0
  %44 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %43, i32 0, i32 6
  %45 = load i32, i32* %44, align 8
  %46 = icmp ne i32 %45, 0
  %47 = xor i1 %46, true
  %48 = zext i1 %47 to i32
  %49 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 %48)
  %50 = load %struct.evsel*, %struct.evsel** %3, align 8
  %51 = getelementptr inbounds %struct.evsel, %struct.evsel* %50, i32 0, i32 3
  %52 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %51, i32 0, i32 0
  %53 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %52, i32 0, i32 5
  %54 = load i32, i32* %53, align 4
  %55 = icmp ne i32 %54, 0
  %56 = xor i1 %55, true
  %57 = zext i1 %56 to i32
  %58 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32 %57)
  %59 = load %struct.evsel*, %struct.evsel** %3, align 8
  %60 = getelementptr inbounds %struct.evsel, %struct.evsel* %59, i32 0, i32 3
  %61 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %60, i32 0, i32 0
  %62 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %61, i32 0, i32 2
  %63 = load i32, i32* %62, align 8
  %64 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %63)
  %65 = load %struct.evsel*, %struct.evsel** %3, align 8
  %66 = getelementptr inbounds %struct.evsel, %struct.evsel* %65, i32 0, i32 3
  %67 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %66, i32 0, i32 0
  %68 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %67, i32 0, i32 4
  %69 = load i32, i32* %68, align 8
  %70 = icmp ne i32 %69, 0
  %71 = xor i1 %70, true
  %72 = zext i1 %71 to i32
  %73 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i32 %72)
  %74 = load %struct.evsel*, %struct.evsel** %3, align 8
  %75 = getelementptr inbounds %struct.evsel, %struct.evsel* %74, i32 0, i32 3
  %76 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %75, i32 0, i32 0
  %77 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %76, i32 0, i32 3
  %78 = load i32, i32* %77, align 4
  %79 = icmp ne i32 %78, 0
  %80 = xor i1 %79, true
  %81 = zext i1 %80 to i32
  %82 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 %81)
  %83 = load %struct.evsel*, %struct.evsel** %3, align 8
  %84 = getelementptr inbounds %struct.evsel, %struct.evsel* %83, i32 0, i32 2
  %85 = load i32, i32* %84, align 8
  %86 = icmp ne i32 %85, 0
  %87 = xor i1 %86, true
  %88 = zext i1 %87 to i32
  %89 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i32 %88)
  %90 = load %struct.evsel*, %struct.evsel** %3, align 8
  %91 = getelementptr inbounds %struct.evsel, %struct.evsel* %90, i32 0, i32 1
  %92 = load %struct.evsel*, %struct.evsel** %91, align 8
  %93 = load %struct.evsel*, %struct.evsel** %4, align 8
  %94 = icmp eq %struct.evsel* %92, %93
  %95 = zext i1 %94 to i32
  %96 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i32 %95)
  %97 = load %struct.evsel*, %struct.evsel** %3, align 8
  %98 = getelementptr inbounds %struct.evsel, %struct.evsel* %97, i32 0, i32 0
  %99 = load i32, i32* %98, align 8
  %100 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i32 %99)
  %101 = load %struct.evsel*, %struct.evsel** %3, align 8
  %102 = call %struct.evsel* @perf_evsel__next(%struct.evsel* %101)
  store %struct.evsel* %102, %struct.evsel** %3, align 8
  %103 = load i64, i64* @PERF_TYPE_HARDWARE, align 8
  %104 = load %struct.evsel*, %struct.evsel** %3, align 8
  %105 = getelementptr inbounds %struct.evsel, %struct.evsel* %104, i32 0, i32 3
  %106 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %105, i32 0, i32 0
  %107 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %106, i32 0, i32 0
  %108 = load i64, i64* %107, align 8
  %109 = icmp eq i64 %103, %108
  %110 = zext i1 %109 to i32
  %111 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 %110)
  %112 = load i64, i64* @PERF_COUNT_HW_CACHE_MISSES, align 8
  %113 = load %struct.evsel*, %struct.evsel** %3, align 8
  %114 = getelementptr inbounds %struct.evsel, %struct.evsel* %113, i32 0, i32 3
  %115 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %114, i32 0, i32 0
  %116 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %115, i32 0, i32 1
  %117 = load i64, i64* %116, align 8
  %118 = icmp eq i64 %112, %117
  %119 = zext i1 %118 to i32
  %120 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 %119)
  %121 = load %struct.evsel*, %struct.evsel** %3, align 8
  %122 = getelementptr inbounds %struct.evsel, %struct.evsel* %121, i32 0, i32 3
  %123 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %122, i32 0, i32 0
  %124 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %123, i32 0, i32 7
  %125 = load i32, i32* %124, align 4
  %126 = icmp ne i32 %125, 0
  %127 = xor i1 %126, true
  %128 = zext i1 %127 to i32
  %129 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 %128)
  %130 = load %struct.evsel*, %struct.evsel** %3, align 8
  %131 = getelementptr inbounds %struct.evsel, %struct.evsel* %130, i32 0, i32 3
  %132 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %131, i32 0, i32 0
  %133 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %132, i32 0, i32 6
  %134 = load i32, i32* %133, align 8
  %135 = icmp ne i32 %134, 0
  %136 = xor i1 %135, true
  %137 = zext i1 %136 to i32
  %138 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 %137)
  %139 = load %struct.evsel*, %struct.evsel** %3, align 8
  %140 = getelementptr inbounds %struct.evsel, %struct.evsel* %139, i32 0, i32 3
  %141 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %140, i32 0, i32 0
  %142 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %141, i32 0, i32 5
  %143 = load i32, i32* %142, align 4
  %144 = icmp ne i32 %143, 0
  %145 = xor i1 %144, true
  %146 = zext i1 %145 to i32
  %147 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32 %146)
  %148 = load %struct.evsel*, %struct.evsel** %3, align 8
  %149 = getelementptr inbounds %struct.evsel, %struct.evsel* %148, i32 0, i32 3
  %150 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %149, i32 0, i32 0
  %151 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %150, i32 0, i32 2
  %152 = load i32, i32* %151, align 8
  %153 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %152)
  %154 = load %struct.evsel*, %struct.evsel** %3, align 8
  %155 = getelementptr inbounds %struct.evsel, %struct.evsel* %154, i32 0, i32 3
  %156 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %155, i32 0, i32 0
  %157 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %156, i32 0, i32 4
  %158 = load i32, i32* %157, align 8
  %159 = icmp ne i32 %158, 0
  %160 = xor i1 %159, true
  %161 = zext i1 %160 to i32
  %162 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i32 %161)
  %163 = load %struct.evsel*, %struct.evsel** %3, align 8
  %164 = getelementptr inbounds %struct.evsel, %struct.evsel* %163, i32 0, i32 3
  %165 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %164, i32 0, i32 0
  %166 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %165, i32 0, i32 3
  %167 = load i32, i32* %166, align 4
  %168 = icmp ne i32 %167, 0
  %169 = xor i1 %168, true
  %170 = zext i1 %169 to i32
  %171 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 %170)
  %172 = load %struct.evsel*, %struct.evsel** %3, align 8
  %173 = getelementptr inbounds %struct.evsel, %struct.evsel* %172, i32 0, i32 1
  %174 = load %struct.evsel*, %struct.evsel** %173, align 8
  %175 = load %struct.evsel*, %struct.evsel** %4, align 8
  %176 = icmp eq %struct.evsel* %174, %175
  %177 = zext i1 %176 to i32
  %178 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i32 %177)
  %179 = load %struct.evsel*, %struct.evsel** %3, align 8
  %180 = getelementptr inbounds %struct.evsel, %struct.evsel* %179, i32 0, i32 0
  %181 = load i32, i32* %180, align 8
  %182 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i32 %181)
  %183 = load %struct.evsel*, %struct.evsel** %3, align 8
  %184 = call %struct.evsel* @perf_evsel__next(%struct.evsel* %183)
  store %struct.evsel* %184, %struct.evsel** %3, align 8
  %185 = load i64, i64* @PERF_TYPE_HARDWARE, align 8
  %186 = load %struct.evsel*, %struct.evsel** %3, align 8
  %187 = getelementptr inbounds %struct.evsel, %struct.evsel* %186, i32 0, i32 3
  %188 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %187, i32 0, i32 0
  %189 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %188, i32 0, i32 0
  %190 = load i64, i64* %189, align 8
  %191 = icmp eq i64 %185, %190
  %192 = zext i1 %191 to i32
  %193 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.1, i64 0, i64 0), i32 %192)
  %194 = load i64, i64* @PERF_COUNT_HW_BRANCH_MISSES, align 8
  %195 = load %struct.evsel*, %struct.evsel** %3, align 8
  %196 = getelementptr inbounds %struct.evsel, %struct.evsel* %195, i32 0, i32 3
  %197 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %196, i32 0, i32 0
  %198 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %197, i32 0, i32 1
  %199 = load i64, i64* %198, align 8
  %200 = icmp eq i64 %194, %199
  %201 = zext i1 %200 to i32
  %202 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i64 0, i64 0), i32 %201)
  %203 = load %struct.evsel*, %struct.evsel** %3, align 8
  %204 = getelementptr inbounds %struct.evsel, %struct.evsel* %203, i32 0, i32 3
  %205 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %204, i32 0, i32 0
  %206 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %205, i32 0, i32 7
  %207 = load i32, i32* %206, align 4
  %208 = icmp ne i32 %207, 0
  %209 = xor i1 %208, true
  %210 = zext i1 %209 to i32
  %211 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.3, i64 0, i64 0), i32 %210)
  %212 = load %struct.evsel*, %struct.evsel** %3, align 8
  %213 = getelementptr inbounds %struct.evsel, %struct.evsel* %212, i32 0, i32 3
  %214 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %213, i32 0, i32 0
  %215 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %214, i32 0, i32 6
  %216 = load i32, i32* %215, align 8
  %217 = icmp ne i32 %216, 0
  %218 = xor i1 %217, true
  %219 = zext i1 %218 to i32
  %220 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4, i64 0, i64 0), i32 %219)
  %221 = load %struct.evsel*, %struct.evsel** %3, align 8
  %222 = getelementptr inbounds %struct.evsel, %struct.evsel* %221, i32 0, i32 3
  %223 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %222, i32 0, i32 0
  %224 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %223, i32 0, i32 5
  %225 = load i32, i32* %224, align 4
  %226 = icmp ne i32 %225, 0
  %227 = xor i1 %226, true
  %228 = zext i1 %227 to i32
  %229 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.5, i64 0, i64 0), i32 %228)
  %230 = load %struct.evsel*, %struct.evsel** %3, align 8
  %231 = getelementptr inbounds %struct.evsel, %struct.evsel* %230, i32 0, i32 3
  %232 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %231, i32 0, i32 0
  %233 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %232, i32 0, i32 2
  %234 = load i32, i32* %233, align 8
  %235 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.6, i64 0, i64 0), i32 %234)
  %236 = load %struct.evsel*, %struct.evsel** %3, align 8
  %237 = getelementptr inbounds %struct.evsel, %struct.evsel* %236, i32 0, i32 3
  %238 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %237, i32 0, i32 0
  %239 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %238, i32 0, i32 4
  %240 = load i32, i32* %239, align 8
  %241 = icmp ne i32 %240, 0
  %242 = xor i1 %241, true
  %243 = zext i1 %242 to i32
  %244 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.7, i64 0, i64 0), i32 %243)
  %245 = load %struct.evsel*, %struct.evsel** %3, align 8
  %246 = getelementptr inbounds %struct.evsel, %struct.evsel* %245, i32 0, i32 3
  %247 = getelementptr inbounds %struct.TYPE_6__, %struct.TYPE_6__* %246, i32 0, i32 0
  %248 = getelementptr inbounds %struct.TYPE_5__, %struct.TYPE_5__* %247, i32 0, i32 3
  %249 = load i32, i32* %248, align 4
  %250 = icmp ne i32 %249, 0
  %251 = xor i1 %250, true
  %252 = zext i1 %251 to i32
  %253 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.8, i64 0, i64 0), i32 %252)
  %254 = load %struct.evsel*, %struct.evsel** %3, align 8
  %255 = getelementptr inbounds %struct.evsel, %struct.evsel* %254, i32 0, i32 2
  %256 = load i32, i32* %255, align 8
  %257 = icmp ne i32 %256, 0
  %258 = xor i1 %257, true
  %259 = zext i1 %258 to i32
  %260 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.9, i64 0, i64 0), i32 %259)
  %261 = load %struct.evsel*, %struct.evsel** %3, align 8
  %262 = getelementptr inbounds %struct.evsel, %struct.evsel* %261, i32 0, i32 1
  %263 = load %struct.evsel*, %struct.evsel** %262, align 8
  %264 = load %struct.evsel*, %struct.evsel** %4, align 8
  %265 = icmp eq %struct.evsel* %263, %264
  %266 = zext i1 %265 to i32
  %267 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.10, i64 0, i64 0), i32 %266)
  %268 = load %struct.evsel*, %struct.evsel** %3, align 8
  %269 = getelementptr inbounds %struct.evsel, %struct.evsel* %268, i32 0, i32 0
  %270 = load i32, i32* %269, align 8
  %271 = call i32 @TEST_ASSERT_VAL(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.11, i64 0, i64 0), i32 %270)
  ret i32 0
}

declare dso_local i32 @TEST_ASSERT_VAL(i8*, i32) #1

declare dso_local %struct.evsel* @evlist__first(%struct.evlist*) #1

declare dso_local %struct.evsel* @perf_evsel__next(%struct.evsel*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
