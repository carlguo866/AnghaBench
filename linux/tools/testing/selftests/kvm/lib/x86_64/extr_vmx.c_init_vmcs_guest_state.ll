; ModuleID = '/home/carl/AnghaBench/linux/tools/testing/selftests/kvm/lib/x86_64/extr_vmx.c_init_vmcs_guest_state.c'
source_filename = "/home/carl/AnghaBench/linux/tools/testing/selftests/kvm/lib/x86_64/extr_vmx.c_init_vmcs_guest_state.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@GUEST_ES_SELECTOR = common dso_local global i32 0, align 4
@HOST_ES_SELECTOR = common dso_local global i32 0, align 4
@GUEST_CS_SELECTOR = common dso_local global i32 0, align 4
@HOST_CS_SELECTOR = common dso_local global i32 0, align 4
@GUEST_SS_SELECTOR = common dso_local global i32 0, align 4
@HOST_SS_SELECTOR = common dso_local global i32 0, align 4
@GUEST_DS_SELECTOR = common dso_local global i32 0, align 4
@HOST_DS_SELECTOR = common dso_local global i32 0, align 4
@GUEST_FS_SELECTOR = common dso_local global i32 0, align 4
@HOST_FS_SELECTOR = common dso_local global i32 0, align 4
@GUEST_GS_SELECTOR = common dso_local global i32 0, align 4
@HOST_GS_SELECTOR = common dso_local global i32 0, align 4
@GUEST_LDTR_SELECTOR = common dso_local global i32 0, align 4
@GUEST_TR_SELECTOR = common dso_local global i32 0, align 4
@HOST_TR_SELECTOR = common dso_local global i32 0, align 4
@GUEST_INTR_STATUS = common dso_local global i32 0, align 4
@GUEST_PML_INDEX = common dso_local global i32 0, align 4
@VMCS_LINK_POINTER = common dso_local global i32 0, align 4
@GUEST_IA32_DEBUGCTL = common dso_local global i32 0, align 4
@GUEST_IA32_PAT = common dso_local global i32 0, align 4
@HOST_IA32_PAT = common dso_local global i32 0, align 4
@GUEST_IA32_EFER = common dso_local global i32 0, align 4
@HOST_IA32_EFER = common dso_local global i32 0, align 4
@GUEST_IA32_PERF_GLOBAL_CTRL = common dso_local global i32 0, align 4
@HOST_IA32_PERF_GLOBAL_CTRL = common dso_local global i32 0, align 4
@GUEST_ES_LIMIT = common dso_local global i32 0, align 4
@GUEST_CS_LIMIT = common dso_local global i32 0, align 4
@GUEST_SS_LIMIT = common dso_local global i32 0, align 4
@GUEST_DS_LIMIT = common dso_local global i32 0, align 4
@GUEST_FS_LIMIT = common dso_local global i32 0, align 4
@GUEST_GS_LIMIT = common dso_local global i32 0, align 4
@GUEST_LDTR_LIMIT = common dso_local global i32 0, align 4
@GUEST_TR_LIMIT = common dso_local global i32 0, align 4
@GUEST_GDTR_LIMIT = common dso_local global i32 0, align 4
@GUEST_IDTR_LIMIT = common dso_local global i32 0, align 4
@GUEST_ES_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_CS_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_SS_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_DS_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_FS_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_GS_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_LDTR_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_TR_AR_BYTES = common dso_local global i32 0, align 4
@GUEST_INTERRUPTIBILITY_INFO = common dso_local global i32 0, align 4
@GUEST_ACTIVITY_STATE = common dso_local global i32 0, align 4
@GUEST_SYSENTER_CS = common dso_local global i32 0, align 4
@HOST_IA32_SYSENTER_CS = common dso_local global i32 0, align 4
@VMX_PREEMPTION_TIMER_VALUE = common dso_local global i32 0, align 4
@GUEST_CR0 = common dso_local global i32 0, align 4
@HOST_CR0 = common dso_local global i32 0, align 4
@GUEST_CR3 = common dso_local global i32 0, align 4
@HOST_CR3 = common dso_local global i32 0, align 4
@GUEST_CR4 = common dso_local global i32 0, align 4
@HOST_CR4 = common dso_local global i32 0, align 4
@GUEST_ES_BASE = common dso_local global i32 0, align 4
@GUEST_CS_BASE = common dso_local global i32 0, align 4
@GUEST_SS_BASE = common dso_local global i32 0, align 4
@GUEST_DS_BASE = common dso_local global i32 0, align 4
@GUEST_FS_BASE = common dso_local global i32 0, align 4
@HOST_FS_BASE = common dso_local global i32 0, align 4
@GUEST_GS_BASE = common dso_local global i32 0, align 4
@HOST_GS_BASE = common dso_local global i32 0, align 4
@GUEST_LDTR_BASE = common dso_local global i32 0, align 4
@GUEST_TR_BASE = common dso_local global i32 0, align 4
@HOST_TR_BASE = common dso_local global i32 0, align 4
@GUEST_GDTR_BASE = common dso_local global i32 0, align 4
@HOST_GDTR_BASE = common dso_local global i32 0, align 4
@GUEST_IDTR_BASE = common dso_local global i32 0, align 4
@HOST_IDTR_BASE = common dso_local global i32 0, align 4
@GUEST_DR7 = common dso_local global i32 0, align 4
@GUEST_RSP = common dso_local global i32 0, align 4
@GUEST_RIP = common dso_local global i32 0, align 4
@GUEST_RFLAGS = common dso_local global i32 0, align 4
@GUEST_PENDING_DBG_EXCEPTIONS = common dso_local global i32 0, align 4
@GUEST_SYSENTER_ESP = common dso_local global i32 0, align 4
@HOST_IA32_SYSENTER_ESP = common dso_local global i32 0, align 4
@GUEST_SYSENTER_EIP = common dso_local global i32 0, align 4
@HOST_IA32_SYSENTER_EIP = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i8*, i8*)* @init_vmcs_guest_state to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @init_vmcs_guest_state(i8* %0, i8* %1) #0 {
  %3 = alloca i8*, align 8
  %4 = alloca i8*, align 8
  store i8* %0, i8** %3, align 8
  store i8* %1, i8** %4, align 8
  %5 = load i32, i32* @GUEST_ES_SELECTOR, align 4
  %6 = load i32, i32* @HOST_ES_SELECTOR, align 4
  %7 = call i32 @vmreadz(i32 %6)
  %8 = call i32 @vmwrite(i32 %5, i32 %7)
  %9 = load i32, i32* @GUEST_CS_SELECTOR, align 4
  %10 = load i32, i32* @HOST_CS_SELECTOR, align 4
  %11 = call i32 @vmreadz(i32 %10)
  %12 = call i32 @vmwrite(i32 %9, i32 %11)
  %13 = load i32, i32* @GUEST_SS_SELECTOR, align 4
  %14 = load i32, i32* @HOST_SS_SELECTOR, align 4
  %15 = call i32 @vmreadz(i32 %14)
  %16 = call i32 @vmwrite(i32 %13, i32 %15)
  %17 = load i32, i32* @GUEST_DS_SELECTOR, align 4
  %18 = load i32, i32* @HOST_DS_SELECTOR, align 4
  %19 = call i32 @vmreadz(i32 %18)
  %20 = call i32 @vmwrite(i32 %17, i32 %19)
  %21 = load i32, i32* @GUEST_FS_SELECTOR, align 4
  %22 = load i32, i32* @HOST_FS_SELECTOR, align 4
  %23 = call i32 @vmreadz(i32 %22)
  %24 = call i32 @vmwrite(i32 %21, i32 %23)
  %25 = load i32, i32* @GUEST_GS_SELECTOR, align 4
  %26 = load i32, i32* @HOST_GS_SELECTOR, align 4
  %27 = call i32 @vmreadz(i32 %26)
  %28 = call i32 @vmwrite(i32 %25, i32 %27)
  %29 = load i32, i32* @GUEST_LDTR_SELECTOR, align 4
  %30 = call i32 @vmwrite(i32 %29, i32 0)
  %31 = load i32, i32* @GUEST_TR_SELECTOR, align 4
  %32 = load i32, i32* @HOST_TR_SELECTOR, align 4
  %33 = call i32 @vmreadz(i32 %32)
  %34 = call i32 @vmwrite(i32 %31, i32 %33)
  %35 = load i32, i32* @GUEST_INTR_STATUS, align 4
  %36 = call i32 @vmwrite(i32 %35, i32 0)
  %37 = load i32, i32* @GUEST_PML_INDEX, align 4
  %38 = call i32 @vmwrite(i32 %37, i32 0)
  %39 = load i32, i32* @VMCS_LINK_POINTER, align 4
  %40 = call i32 @vmwrite(i32 %39, i32 -1)
  %41 = load i32, i32* @GUEST_IA32_DEBUGCTL, align 4
  %42 = call i32 @vmwrite(i32 %41, i32 0)
  %43 = load i32, i32* @GUEST_IA32_PAT, align 4
  %44 = load i32, i32* @HOST_IA32_PAT, align 4
  %45 = call i32 @vmreadz(i32 %44)
  %46 = call i32 @vmwrite(i32 %43, i32 %45)
  %47 = load i32, i32* @GUEST_IA32_EFER, align 4
  %48 = load i32, i32* @HOST_IA32_EFER, align 4
  %49 = call i32 @vmreadz(i32 %48)
  %50 = call i32 @vmwrite(i32 %47, i32 %49)
  %51 = load i32, i32* @GUEST_IA32_PERF_GLOBAL_CTRL, align 4
  %52 = load i32, i32* @HOST_IA32_PERF_GLOBAL_CTRL, align 4
  %53 = call i32 @vmreadz(i32 %52)
  %54 = call i32 @vmwrite(i32 %51, i32 %53)
  %55 = load i32, i32* @GUEST_ES_LIMIT, align 4
  %56 = call i32 @vmwrite(i32 %55, i32 -1)
  %57 = load i32, i32* @GUEST_CS_LIMIT, align 4
  %58 = call i32 @vmwrite(i32 %57, i32 -1)
  %59 = load i32, i32* @GUEST_SS_LIMIT, align 4
  %60 = call i32 @vmwrite(i32 %59, i32 -1)
  %61 = load i32, i32* @GUEST_DS_LIMIT, align 4
  %62 = call i32 @vmwrite(i32 %61, i32 -1)
  %63 = load i32, i32* @GUEST_FS_LIMIT, align 4
  %64 = call i32 @vmwrite(i32 %63, i32 -1)
  %65 = load i32, i32* @GUEST_GS_LIMIT, align 4
  %66 = call i32 @vmwrite(i32 %65, i32 -1)
  %67 = load i32, i32* @GUEST_LDTR_LIMIT, align 4
  %68 = call i32 @vmwrite(i32 %67, i32 -1)
  %69 = load i32, i32* @GUEST_TR_LIMIT, align 4
  %70 = call i32 @vmwrite(i32 %69, i32 103)
  %71 = load i32, i32* @GUEST_GDTR_LIMIT, align 4
  %72 = call i32 @vmwrite(i32 %71, i32 65535)
  %73 = load i32, i32* @GUEST_IDTR_LIMIT, align 4
  %74 = call i32 @vmwrite(i32 %73, i32 65535)
  %75 = load i32, i32* @GUEST_ES_AR_BYTES, align 4
  %76 = load i32, i32* @GUEST_ES_SELECTOR, align 4
  %77 = call i32 @vmreadz(i32 %76)
  %78 = icmp eq i32 %77, 0
  %79 = zext i1 %78 to i64
  %80 = select i1 %78, i32 65536, i32 49299
  %81 = call i32 @vmwrite(i32 %75, i32 %80)
  %82 = load i32, i32* @GUEST_CS_AR_BYTES, align 4
  %83 = call i32 @vmwrite(i32 %82, i32 41115)
  %84 = load i32, i32* @GUEST_SS_AR_BYTES, align 4
  %85 = call i32 @vmwrite(i32 %84, i32 49299)
  %86 = load i32, i32* @GUEST_DS_AR_BYTES, align 4
  %87 = load i32, i32* @GUEST_DS_SELECTOR, align 4
  %88 = call i32 @vmreadz(i32 %87)
  %89 = icmp eq i32 %88, 0
  %90 = zext i1 %89 to i64
  %91 = select i1 %89, i32 65536, i32 49299
  %92 = call i32 @vmwrite(i32 %86, i32 %91)
  %93 = load i32, i32* @GUEST_FS_AR_BYTES, align 4
  %94 = load i32, i32* @GUEST_FS_SELECTOR, align 4
  %95 = call i32 @vmreadz(i32 %94)
  %96 = icmp eq i32 %95, 0
  %97 = zext i1 %96 to i64
  %98 = select i1 %96, i32 65536, i32 49299
  %99 = call i32 @vmwrite(i32 %93, i32 %98)
  %100 = load i32, i32* @GUEST_GS_AR_BYTES, align 4
  %101 = load i32, i32* @GUEST_GS_SELECTOR, align 4
  %102 = call i32 @vmreadz(i32 %101)
  %103 = icmp eq i32 %102, 0
  %104 = zext i1 %103 to i64
  %105 = select i1 %103, i32 65536, i32 49299
  %106 = call i32 @vmwrite(i32 %100, i32 %105)
  %107 = load i32, i32* @GUEST_LDTR_AR_BYTES, align 4
  %108 = call i32 @vmwrite(i32 %107, i32 65536)
  %109 = load i32, i32* @GUEST_TR_AR_BYTES, align 4
  %110 = call i32 @vmwrite(i32 %109, i32 139)
  %111 = load i32, i32* @GUEST_INTERRUPTIBILITY_INFO, align 4
  %112 = call i32 @vmwrite(i32 %111, i32 0)
  %113 = load i32, i32* @GUEST_ACTIVITY_STATE, align 4
  %114 = call i32 @vmwrite(i32 %113, i32 0)
  %115 = load i32, i32* @GUEST_SYSENTER_CS, align 4
  %116 = load i32, i32* @HOST_IA32_SYSENTER_CS, align 4
  %117 = call i32 @vmreadz(i32 %116)
  %118 = call i32 @vmwrite(i32 %115, i32 %117)
  %119 = load i32, i32* @VMX_PREEMPTION_TIMER_VALUE, align 4
  %120 = call i32 @vmwrite(i32 %119, i32 0)
  %121 = load i32, i32* @GUEST_CR0, align 4
  %122 = load i32, i32* @HOST_CR0, align 4
  %123 = call i32 @vmreadz(i32 %122)
  %124 = call i32 @vmwrite(i32 %121, i32 %123)
  %125 = load i32, i32* @GUEST_CR3, align 4
  %126 = load i32, i32* @HOST_CR3, align 4
  %127 = call i32 @vmreadz(i32 %126)
  %128 = call i32 @vmwrite(i32 %125, i32 %127)
  %129 = load i32, i32* @GUEST_CR4, align 4
  %130 = load i32, i32* @HOST_CR4, align 4
  %131 = call i32 @vmreadz(i32 %130)
  %132 = call i32 @vmwrite(i32 %129, i32 %131)
  %133 = load i32, i32* @GUEST_ES_BASE, align 4
  %134 = call i32 @vmwrite(i32 %133, i32 0)
  %135 = load i32, i32* @GUEST_CS_BASE, align 4
  %136 = call i32 @vmwrite(i32 %135, i32 0)
  %137 = load i32, i32* @GUEST_SS_BASE, align 4
  %138 = call i32 @vmwrite(i32 %137, i32 0)
  %139 = load i32, i32* @GUEST_DS_BASE, align 4
  %140 = call i32 @vmwrite(i32 %139, i32 0)
  %141 = load i32, i32* @GUEST_FS_BASE, align 4
  %142 = load i32, i32* @HOST_FS_BASE, align 4
  %143 = call i32 @vmreadz(i32 %142)
  %144 = call i32 @vmwrite(i32 %141, i32 %143)
  %145 = load i32, i32* @GUEST_GS_BASE, align 4
  %146 = load i32, i32* @HOST_GS_BASE, align 4
  %147 = call i32 @vmreadz(i32 %146)
  %148 = call i32 @vmwrite(i32 %145, i32 %147)
  %149 = load i32, i32* @GUEST_LDTR_BASE, align 4
  %150 = call i32 @vmwrite(i32 %149, i32 0)
  %151 = load i32, i32* @GUEST_TR_BASE, align 4
  %152 = load i32, i32* @HOST_TR_BASE, align 4
  %153 = call i32 @vmreadz(i32 %152)
  %154 = call i32 @vmwrite(i32 %151, i32 %153)
  %155 = load i32, i32* @GUEST_GDTR_BASE, align 4
  %156 = load i32, i32* @HOST_GDTR_BASE, align 4
  %157 = call i32 @vmreadz(i32 %156)
  %158 = call i32 @vmwrite(i32 %155, i32 %157)
  %159 = load i32, i32* @GUEST_IDTR_BASE, align 4
  %160 = load i32, i32* @HOST_IDTR_BASE, align 4
  %161 = call i32 @vmreadz(i32 %160)
  %162 = call i32 @vmwrite(i32 %159, i32 %161)
  %163 = load i32, i32* @GUEST_DR7, align 4
  %164 = call i32 @vmwrite(i32 %163, i32 1024)
  %165 = load i32, i32* @GUEST_RSP, align 4
  %166 = load i8*, i8** %4, align 8
  %167 = ptrtoint i8* %166 to i32
  %168 = call i32 @vmwrite(i32 %165, i32 %167)
  %169 = load i32, i32* @GUEST_RIP, align 4
  %170 = load i8*, i8** %3, align 8
  %171 = ptrtoint i8* %170 to i32
  %172 = call i32 @vmwrite(i32 %169, i32 %171)
  %173 = load i32, i32* @GUEST_RFLAGS, align 4
  %174 = call i32 @vmwrite(i32 %173, i32 2)
  %175 = load i32, i32* @GUEST_PENDING_DBG_EXCEPTIONS, align 4
  %176 = call i32 @vmwrite(i32 %175, i32 0)
  %177 = load i32, i32* @GUEST_SYSENTER_ESP, align 4
  %178 = load i32, i32* @HOST_IA32_SYSENTER_ESP, align 4
  %179 = call i32 @vmreadz(i32 %178)
  %180 = call i32 @vmwrite(i32 %177, i32 %179)
  %181 = load i32, i32* @GUEST_SYSENTER_EIP, align 4
  %182 = load i32, i32* @HOST_IA32_SYSENTER_EIP, align 4
  %183 = call i32 @vmreadz(i32 %182)
  %184 = call i32 @vmwrite(i32 %181, i32 %183)
  ret void
}

declare dso_local i32 @vmwrite(i32, i32) #1

declare dso_local i32 @vmreadz(i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
