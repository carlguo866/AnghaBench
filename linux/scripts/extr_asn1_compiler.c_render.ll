; ModuleID = '/home/carl/AnghaBench/linux/scripts/extr_asn1_compiler.c_render.c'
source_filename = "/home/carl/AnghaBench/linux/scripts/extr_asn1_compiler.c_render.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.action = type { i32, i8*, %struct.action* }
%struct.type = type { i32 }
%struct.element = type { i32, %struct.element* }

@.str = private unnamed_addr constant [4 x i8] c"/*\0A\00", align 1
@.str.1 = private unnamed_addr constant [59 x i8] c" * Automatically generated by asn1_compiler.  Do not edit\0A\00", align 1
@.str.2 = private unnamed_addr constant [4 x i8] c" *\0A\00", align 1
@.str.3 = private unnamed_addr constant [24 x i8] c" * ASN.1 parser for %s\0A\00", align 1
@grammar_name = common dso_local global i8* null, align 8
@.str.4 = private unnamed_addr constant [5 x i8] c" */\0A\00", align 1
@.str.5 = private unnamed_addr constant [33 x i8] c"#include <linux/asn1_decoder.h>\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.7 = private unnamed_addr constant [46 x i8] c"extern const struct asn1_decoder %s_decoder;\0A\00", align 1
@headername = common dso_local global i32 0, align 4
@.str.8 = private unnamed_addr constant [38 x i8] c"#include <linux/asn1_ber_bytecode.h>\0A\00", align 1
@.str.9 = private unnamed_addr constant [22 x i8] c"#include \22%s.asn1.h\22\0A\00", align 1
@outputname = common dso_local global i32 0, align 4
@action_list = common dso_local global %struct.action* null, align 8
@.str.10 = private unnamed_addr constant [69 x i8] c"extern int %s(void *, size_t, unsigned char, const void *, size_t);\0A\00", align 1
@.str.11 = private unnamed_addr constant [19 x i8] c"enum %s_actions {\0A\00", align 1
@.str.12 = private unnamed_addr constant [15 x i8] c"\09ACT_%s = %u,\0A\00", align 1
@.str.13 = private unnamed_addr constant [22 x i8] c"\09NR__%s_actions = %u\0A\00", align 1
@nr_actions = common dso_local global i32 0, align 4
@.str.14 = private unnamed_addr constant [4 x i8] c"};\0A\00", align 1
@.str.15 = private unnamed_addr constant [64 x i8] c"static const asn1_action_t %s_action_table[NR__%s_actions] = {\0A\00", align 1
@.str.16 = private unnamed_addr constant [14 x i8] c"\09[%4u] = %s,\0A\00", align 1
@.str.17 = private unnamed_addr constant [8 x i8] c"Pass 1\0A\00", align 1
@nr_entries = common dso_local global i64 0, align 8
@type_list = common dso_local global %struct.type* null, align 8
@.str.18 = private unnamed_addr constant [19 x i8] c"ASN1_OP_COMPLETE,\0A\00", align 1
@element_list = common dso_local global %struct.element* null, align 8
@ELEMENT_RENDERED = common dso_local global i32 0, align 4
@.str.19 = private unnamed_addr constant [8 x i8] c"Pass 2\0A\00", align 1
@.str.20 = private unnamed_addr constant [45 x i8] c"static const unsigned char %s_machine[] = {\0A\00", align 1
@.str.21 = private unnamed_addr constant [42 x i8] c"const struct asn1_decoder %s_decoder = {\0A\00", align 1
@.str.22 = private unnamed_addr constant [25 x i8] c"\09.machine = %s_machine,\0A\00", align 1
@.str.23 = private unnamed_addr constant [33 x i8] c"\09.machlen = sizeof(%s_machine),\0A\00", align 1
@.str.24 = private unnamed_addr constant [30 x i8] c"\09.actions = %s_action_table,\0A\00", align 1
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (i32*, i32*)* @render to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @render(i32* %0, i32* %1) #0 {
  %3 = alloca i32*, align 8
  %4 = alloca i32*, align 8
  %5 = alloca %struct.element*, align 8
  %6 = alloca %struct.action*, align 8
  %7 = alloca %struct.type*, align 8
  %8 = alloca i32, align 4
  store i32* %0, i32** %3, align 8
  store i32* %1, i32** %4, align 8
  %9 = load i32*, i32** %4, align 8
  %10 = call i32 (i32*, i8*, ...) @fprintf(i32* %9, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %11 = load i32*, i32** %4, align 8
  %12 = call i32 (i32*, i8*, ...) @fprintf(i32* %11, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0))
  %13 = load i32*, i32** %4, align 8
  %14 = call i32 (i32*, i8*, ...) @fprintf(i32* %13, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %15 = load i32*, i32** %4, align 8
  %16 = load i8*, i8** @grammar_name, align 8
  %17 = call i32 (i32*, i8*, ...) @fprintf(i32* %15, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i8* %16)
  %18 = load i32*, i32** %4, align 8
  %19 = call i32 (i32*, i8*, ...) @fprintf(i32* %18, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %20 = load i32*, i32** %4, align 8
  %21 = call i32 (i32*, i8*, ...) @fprintf(i32* %20, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.5, i64 0, i64 0))
  %22 = load i32*, i32** %4, align 8
  %23 = call i32 (i32*, i8*, ...) @fprintf(i32* %22, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %24 = load i32*, i32** %4, align 8
  %25 = load i8*, i8** @grammar_name, align 8
  %26 = call i32 (i32*, i8*, ...) @fprintf(i32* %24, i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.7, i64 0, i64 0), i8* %25)
  %27 = load i32*, i32** %4, align 8
  %28 = call i64 @ferror(i32* %27)
  %29 = icmp ne i64 %28, 0
  br i1 %29, label %30, label %34

30:                                               ; preds = %2
  %31 = load i32, i32* @headername, align 4
  %32 = call i32 @perror(i32 %31)
  %33 = call i32 @exit(i32 1) #3
  unreachable

34:                                               ; preds = %2
  %35 = load i32*, i32** %3, align 8
  %36 = call i32 (i32*, i8*, ...) @fprintf(i32* %35, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0))
  %37 = load i32*, i32** %3, align 8
  %38 = call i32 (i32*, i8*, ...) @fprintf(i32* %37, i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.1, i64 0, i64 0))
  %39 = load i32*, i32** %3, align 8
  %40 = call i32 (i32*, i8*, ...) @fprintf(i32* %39, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i64 0, i64 0))
  %41 = load i32*, i32** %3, align 8
  %42 = load i8*, i8** @grammar_name, align 8
  %43 = call i32 (i32*, i8*, ...) @fprintf(i32* %41, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.3, i64 0, i64 0), i8* %42)
  %44 = load i32*, i32** %3, align 8
  %45 = call i32 (i32*, i8*, ...) @fprintf(i32* %44, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.4, i64 0, i64 0))
  %46 = load i32*, i32** %3, align 8
  %47 = call i32 (i32*, i8*, ...) @fprintf(i32* %46, i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.8, i64 0, i64 0))
  %48 = load i32*, i32** %3, align 8
  %49 = load i8*, i8** @grammar_name, align 8
  %50 = call i32 (i32*, i8*, ...) @fprintf(i32* %48, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.9, i64 0, i64 0), i8* %49)
  %51 = load i32*, i32** %3, align 8
  %52 = call i32 (i32*, i8*, ...) @fprintf(i32* %51, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %53 = load i32*, i32** %3, align 8
  %54 = call i64 @ferror(i32* %53)
  %55 = icmp ne i64 %54, 0
  br i1 %55, label %56, label %60

56:                                               ; preds = %34
  %57 = load i32, i32* @outputname, align 4
  %58 = call i32 @perror(i32 %57)
  %59 = call i32 @exit(i32 1) #3
  unreachable

60:                                               ; preds = %34
  %61 = load i32*, i32** %4, align 8
  %62 = call i32 (i32*, i8*, ...) @fprintf(i32* %61, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  store i32 0, i32* %8, align 4
  %63 = load %struct.action*, %struct.action** @action_list, align 8
  store %struct.action* %63, %struct.action** %6, align 8
  br label %64

64:                                               ; preds = %77, %60
  %65 = load %struct.action*, %struct.action** %6, align 8
  %66 = icmp ne %struct.action* %65, null
  br i1 %66, label %67, label %81

67:                                               ; preds = %64
  %68 = load i32, i32* %8, align 4
  %69 = add nsw i32 %68, 1
  store i32 %69, i32* %8, align 4
  %70 = load %struct.action*, %struct.action** %6, align 8
  %71 = getelementptr inbounds %struct.action, %struct.action* %70, i32 0, i32 0
  store i32 %68, i32* %71, align 8
  %72 = load i32*, i32** %4, align 8
  %73 = load %struct.action*, %struct.action** %6, align 8
  %74 = getelementptr inbounds %struct.action, %struct.action* %73, i32 0, i32 1
  %75 = load i8*, i8** %74, align 8
  %76 = call i32 (i32*, i8*, ...) @fprintf(i32* %72, i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.10, i64 0, i64 0), i8* %75)
  br label %77

77:                                               ; preds = %67
  %78 = load %struct.action*, %struct.action** %6, align 8
  %79 = getelementptr inbounds %struct.action, %struct.action* %78, i32 0, i32 2
  %80 = load %struct.action*, %struct.action** %79, align 8
  store %struct.action* %80, %struct.action** %6, align 8
  br label %64

81:                                               ; preds = %64
  %82 = load i32*, i32** %4, align 8
  %83 = call i32 (i32*, i8*, ...) @fprintf(i32* %82, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %84 = load i32*, i32** %3, align 8
  %85 = load i8*, i8** @grammar_name, align 8
  %86 = call i32 (i32*, i8*, ...) @fprintf(i32* %84, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11, i64 0, i64 0), i8* %85)
  %87 = load %struct.action*, %struct.action** @action_list, align 8
  store %struct.action* %87, %struct.action** %6, align 8
  br label %88

88:                                               ; preds = %100, %81
  %89 = load %struct.action*, %struct.action** %6, align 8
  %90 = icmp ne %struct.action* %89, null
  br i1 %90, label %91, label %104

91:                                               ; preds = %88
  %92 = load i32*, i32** %3, align 8
  %93 = load %struct.action*, %struct.action** %6, align 8
  %94 = getelementptr inbounds %struct.action, %struct.action* %93, i32 0, i32 1
  %95 = load i8*, i8** %94, align 8
  %96 = load %struct.action*, %struct.action** %6, align 8
  %97 = getelementptr inbounds %struct.action, %struct.action* %96, i32 0, i32 0
  %98 = load i32, i32* %97, align 8
  %99 = call i32 (i32*, i8*, ...) @fprintf(i32* %92, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.12, i64 0, i64 0), i8* %95, i32 %98)
  br label %100

100:                                              ; preds = %91
  %101 = load %struct.action*, %struct.action** %6, align 8
  %102 = getelementptr inbounds %struct.action, %struct.action* %101, i32 0, i32 2
  %103 = load %struct.action*, %struct.action** %102, align 8
  store %struct.action* %103, %struct.action** %6, align 8
  br label %88

104:                                              ; preds = %88
  %105 = load i32*, i32** %3, align 8
  %106 = load i8*, i8** @grammar_name, align 8
  %107 = load i32, i32* @nr_actions, align 4
  %108 = call i32 (i32*, i8*, ...) @fprintf(i32* %105, i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.13, i64 0, i64 0), i8* %106, i32 %107)
  %109 = load i32*, i32** %3, align 8
  %110 = call i32 (i32*, i8*, ...) @fprintf(i32* %109, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  %111 = load i32*, i32** %3, align 8
  %112 = call i32 (i32*, i8*, ...) @fprintf(i32* %111, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %113 = load i32*, i32** %3, align 8
  %114 = load i8*, i8** @grammar_name, align 8
  %115 = load i8*, i8** @grammar_name, align 8
  %116 = call i32 (i32*, i8*, ...) @fprintf(i32* %113, i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.15, i64 0, i64 0), i8* %114, i8* %115)
  %117 = load %struct.action*, %struct.action** @action_list, align 8
  store %struct.action* %117, %struct.action** %6, align 8
  br label %118

118:                                              ; preds = %130, %104
  %119 = load %struct.action*, %struct.action** %6, align 8
  %120 = icmp ne %struct.action* %119, null
  br i1 %120, label %121, label %134

121:                                              ; preds = %118
  %122 = load i32*, i32** %3, align 8
  %123 = load %struct.action*, %struct.action** %6, align 8
  %124 = getelementptr inbounds %struct.action, %struct.action* %123, i32 0, i32 0
  %125 = load i32, i32* %124, align 8
  %126 = load %struct.action*, %struct.action** %6, align 8
  %127 = getelementptr inbounds %struct.action, %struct.action* %126, i32 0, i32 1
  %128 = load i8*, i8** %127, align 8
  %129 = call i32 (i32*, i8*, ...) @fprintf(i32* %122, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.16, i64 0, i64 0), i32 %125, i8* %128)
  br label %130

130:                                              ; preds = %121
  %131 = load %struct.action*, %struct.action** %6, align 8
  %132 = getelementptr inbounds %struct.action, %struct.action* %131, i32 0, i32 2
  %133 = load %struct.action*, %struct.action** %132, align 8
  store %struct.action* %133, %struct.action** %6, align 8
  br label %118

134:                                              ; preds = %118
  %135 = load i32*, i32** %3, align 8
  %136 = call i32 (i32*, i8*, ...) @fprintf(i32* %135, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  %137 = load i32*, i32** %3, align 8
  %138 = call i64 @ferror(i32* %137)
  %139 = icmp ne i64 %138, 0
  br i1 %139, label %140, label %144

140:                                              ; preds = %134
  %141 = load i32, i32* @outputname, align 4
  %142 = call i32 @perror(i32 %141)
  %143 = call i32 @exit(i32 1) #3
  unreachable

144:                                              ; preds = %134
  %145 = call i32 @verbose(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17, i64 0, i64 0))
  store i64 0, i64* @nr_entries, align 8
  %146 = load %struct.type*, %struct.type** @type_list, align 8
  %147 = getelementptr inbounds %struct.type, %struct.type* %146, i64 0
  store %struct.type* %147, %struct.type** %7, align 8
  %148 = load %struct.type*, %struct.type** %7, align 8
  %149 = getelementptr inbounds %struct.type, %struct.type* %148, i32 0, i32 0
  %150 = load i32, i32* %149, align 4
  %151 = call i32 @render_element(i32* null, i32 %150, i32* null)
  %152 = call i32 @render_opcode(i32* null, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0))
  %153 = call i32 @render_out_of_line_list(i32* null)
  %154 = load %struct.element*, %struct.element** @element_list, align 8
  store %struct.element* %154, %struct.element** %5, align 8
  br label %155

155:                                              ; preds = %165, %144
  %156 = load %struct.element*, %struct.element** %5, align 8
  %157 = icmp ne %struct.element* %156, null
  br i1 %157, label %158, label %169

158:                                              ; preds = %155
  %159 = load i32, i32* @ELEMENT_RENDERED, align 4
  %160 = xor i32 %159, -1
  %161 = load %struct.element*, %struct.element** %5, align 8
  %162 = getelementptr inbounds %struct.element, %struct.element* %161, i32 0, i32 0
  %163 = load i32, i32* %162, align 8
  %164 = and i32 %163, %160
  store i32 %164, i32* %162, align 8
  br label %165

165:                                              ; preds = %158
  %166 = load %struct.element*, %struct.element** %5, align 8
  %167 = getelementptr inbounds %struct.element, %struct.element* %166, i32 0, i32 1
  %168 = load %struct.element*, %struct.element** %167, align 8
  store %struct.element* %168, %struct.element** %5, align 8
  br label %155

169:                                              ; preds = %155
  %170 = call i32 @verbose(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.19, i64 0, i64 0))
  %171 = load i32*, i32** %3, align 8
  %172 = call i32 (i32*, i8*, ...) @fprintf(i32* %171, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %173 = load i32*, i32** %3, align 8
  %174 = load i8*, i8** @grammar_name, align 8
  %175 = call i32 (i32*, i8*, ...) @fprintf(i32* %173, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.20, i64 0, i64 0), i8* %174)
  store i64 0, i64* @nr_entries, align 8
  %176 = load %struct.type*, %struct.type** @type_list, align 8
  %177 = getelementptr inbounds %struct.type, %struct.type* %176, i64 0
  store %struct.type* %177, %struct.type** %7, align 8
  %178 = load i32*, i32** %3, align 8
  %179 = load %struct.type*, %struct.type** %7, align 8
  %180 = getelementptr inbounds %struct.type, %struct.type* %179, i32 0, i32 0
  %181 = load i32, i32* %180, align 4
  %182 = call i32 @render_element(i32* %178, i32 %181, i32* null)
  %183 = load i32*, i32** %3, align 8
  %184 = call i32 @render_opcode(i32* %183, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.18, i64 0, i64 0))
  %185 = load i32*, i32** %3, align 8
  %186 = call i32 @render_out_of_line_list(i32* %185)
  %187 = load i32*, i32** %3, align 8
  %188 = call i32 (i32*, i8*, ...) @fprintf(i32* %187, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  %189 = load i32*, i32** %3, align 8
  %190 = call i32 (i32*, i8*, ...) @fprintf(i32* %189, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %191 = load i32*, i32** %3, align 8
  %192 = load i8*, i8** @grammar_name, align 8
  %193 = call i32 (i32*, i8*, ...) @fprintf(i32* %191, i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.21, i64 0, i64 0), i8* %192)
  %194 = load i32*, i32** %3, align 8
  %195 = load i8*, i8** @grammar_name, align 8
  %196 = call i32 (i32*, i8*, ...) @fprintf(i32* %194, i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.22, i64 0, i64 0), i8* %195)
  %197 = load i32*, i32** %3, align 8
  %198 = load i8*, i8** @grammar_name, align 8
  %199 = call i32 (i32*, i8*, ...) @fprintf(i32* %197, i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.23, i64 0, i64 0), i8* %198)
  %200 = load i32*, i32** %3, align 8
  %201 = load i8*, i8** @grammar_name, align 8
  %202 = call i32 (i32*, i8*, ...) @fprintf(i32* %200, i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.24, i64 0, i64 0), i8* %201)
  %203 = load i32*, i32** %3, align 8
  %204 = call i32 (i32*, i8*, ...) @fprintf(i32* %203, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.14, i64 0, i64 0))
  ret void
}

declare dso_local i32 @fprintf(i32*, i8*, ...) #1

declare dso_local i64 @ferror(i32*) #1

declare dso_local i32 @perror(i32) #1

; Function Attrs: noreturn
declare dso_local i32 @exit(i32) #2

declare dso_local i32 @verbose(i8*) #1

declare dso_local i32 @render_element(i32*, i32, i32*) #1

declare dso_local i32 @render_opcode(i32*, i8*) #1

declare dso_local i32 @render_out_of_line_list(i32*) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
