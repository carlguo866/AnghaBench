; ModuleID = '/home/carl/AnghaBench/linux/sound/soc/codecs/extr_cs42l42.c_cs42l42_set_interrupt_masks.c'
source_filename = "/home/carl/AnghaBench/linux/sound/soc/codecs/extr_cs42l42.c_cs42l42_set_interrupt_masks.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.cs42l42_private = type { i32 }

@CS42L42_ADC_OVFL_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_ADC_OVFL_MASK = common dso_local global i32 0, align 4
@CS42L42_ADC_OVFL_SHIFT = common dso_local global i32 0, align 4
@CS42L42_MIXER_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_MIX_CHB_OVFL_MASK = common dso_local global i32 0, align 4
@CS42L42_MIX_CHA_OVFL_MASK = common dso_local global i32 0, align 4
@CS42L42_EQ_OVFL_MASK = common dso_local global i32 0, align 4
@CS42L42_EQ_BIQUAD_OVFL_MASK = common dso_local global i32 0, align 4
@CS42L42_MIX_CHB_OVFL_SHIFT = common dso_local global i32 0, align 4
@CS42L42_MIX_CHA_OVFL_SHIFT = common dso_local global i32 0, align 4
@CS42L42_EQ_OVFL_SHIFT = common dso_local global i32 0, align 4
@CS42L42_EQ_BIQUAD_OVFL_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRC_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_SRC_ILK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRC_OLK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRC_IUNLK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRC_OUNLK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRC_ILK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRC_OLK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRC_IUNLK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRC_OUNLK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASP_RX_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPRX_NOLRCK_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPRX_EARLY_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPRX_LATE_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPRX_ERROR_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPRX_OVLD_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPRX_NOLRCK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASPRX_EARLY_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASPRX_LATE_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASPRX_ERROR_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASPRX_OVLD_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASP_TX_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPTX_NOLRCK_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPTX_EARLY_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPTX_LATE_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPTX_SMERROR_MASK = common dso_local global i32 0, align 4
@CS42L42_ASPTX_NOLRCK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASPTX_EARLY_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASPTX_LATE_SHIFT = common dso_local global i32 0, align 4
@CS42L42_ASPTX_SMERROR_SHIFT = common dso_local global i32 0, align 4
@CS42L42_CODEC_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_PDN_DONE_MASK = common dso_local global i32 0, align 4
@CS42L42_HSDET_AUTO_DONE_MASK = common dso_local global i32 0, align 4
@CS42L42_PDN_DONE_SHIFT = common dso_local global i32 0, align 4
@CS42L42_HSDET_AUTO_DONE_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRCPL_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_SRCPL_ADC_LK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRCPL_DAC_LK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRCPL_ADC_UNLK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRCPL_DAC_UNLK_MASK = common dso_local global i32 0, align 4
@CS42L42_SRCPL_ADC_LK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRCPL_DAC_LK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRCPL_ADC_UNLK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_SRCPL_DAC_UNLK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_DET_INT1_MASK = common dso_local global i32 0, align 4
@CS42L42_TIP_SENSE_UNPLUG_MASK = common dso_local global i32 0, align 4
@CS42L42_TIP_SENSE_PLUG_MASK = common dso_local global i32 0, align 4
@CS42L42_HSBIAS_SENSE_MASK = common dso_local global i32 0, align 4
@CS42L42_TIP_SENSE_UNPLUG_SHIFT = common dso_local global i32 0, align 4
@CS42L42_TIP_SENSE_PLUG_SHIFT = common dso_local global i32 0, align 4
@CS42L42_HSBIAS_SENSE_SHIFT = common dso_local global i32 0, align 4
@CS42L42_DET_INT2_MASK = common dso_local global i32 0, align 4
@CS42L42_M_DETECT_TF_MASK = common dso_local global i32 0, align 4
@CS42L42_M_DETECT_FT_MASK = common dso_local global i32 0, align 4
@CS42L42_M_HSBIAS_HIZ_MASK = common dso_local global i32 0, align 4
@CS42L42_M_SHORT_RLS_MASK = common dso_local global i32 0, align 4
@CS42L42_M_SHORT_DET_MASK = common dso_local global i32 0, align 4
@CS42L42_M_DETECT_TF_SHIFT = common dso_local global i32 0, align 4
@CS42L42_M_DETECT_FT_SHIFT = common dso_local global i32 0, align 4
@CS42L42_M_HSBIAS_HIZ_SHIFT = common dso_local global i32 0, align 4
@CS42L42_M_SHORT_RLS_SHIFT = common dso_local global i32 0, align 4
@CS42L42_M_SHORT_DET_SHIFT = common dso_local global i32 0, align 4
@CS42L42_VPMON_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_VPMON_MASK = common dso_local global i32 0, align 4
@CS42L42_VPMON_SHIFT = common dso_local global i32 0, align 4
@CS42L42_PLL_LOCK_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_PLL_LOCK_MASK = common dso_local global i32 0, align 4
@CS42L42_PLL_LOCK_SHIFT = common dso_local global i32 0, align 4
@CS42L42_TSRS_PLUG_INT_MASK = common dso_local global i32 0, align 4
@CS42L42_RS_PLUG_MASK = common dso_local global i32 0, align 4
@CS42L42_RS_UNPLUG_MASK = common dso_local global i32 0, align 4
@CS42L42_TS_PLUG_MASK = common dso_local global i32 0, align 4
@CS42L42_TS_UNPLUG_MASK = common dso_local global i32 0, align 4
@CS42L42_RS_PLUG_SHIFT = common dso_local global i32 0, align 4
@CS42L42_RS_UNPLUG_SHIFT = common dso_local global i32 0, align 4
@CS42L42_TS_PLUG_SHIFT = common dso_local global i32 0, align 4
@CS42L42_TS_UNPLUG_SHIFT = common dso_local global i32 0, align 4
@llvm.used = appending global [1 x i8*] [i8* bitcast (void (%struct.cs42l42_private*)* @cs42l42_set_interrupt_masks to i8*)], section "llvm.metadata"

; Function Attrs: noinline nounwind optnone uwtable
define internal void @cs42l42_set_interrupt_masks(%struct.cs42l42_private* %0) #0 {
  %2 = alloca %struct.cs42l42_private*, align 8
  store %struct.cs42l42_private* %0, %struct.cs42l42_private** %2, align 8
  %3 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %4 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %3, i32 0, i32 0
  %5 = load i32, i32* %4, align 4
  %6 = load i32, i32* @CS42L42_ADC_OVFL_INT_MASK, align 4
  %7 = load i32, i32* @CS42L42_ADC_OVFL_MASK, align 4
  %8 = load i32, i32* @CS42L42_ADC_OVFL_SHIFT, align 4
  %9 = shl i32 1, %8
  %10 = call i32 @regmap_update_bits(i32 %5, i32 %6, i32 %7, i32 %9)
  %11 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %12 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %11, i32 0, i32 0
  %13 = load i32, i32* %12, align 4
  %14 = load i32, i32* @CS42L42_MIXER_INT_MASK, align 4
  %15 = load i32, i32* @CS42L42_MIX_CHB_OVFL_MASK, align 4
  %16 = load i32, i32* @CS42L42_MIX_CHA_OVFL_MASK, align 4
  %17 = or i32 %15, %16
  %18 = load i32, i32* @CS42L42_EQ_OVFL_MASK, align 4
  %19 = or i32 %17, %18
  %20 = load i32, i32* @CS42L42_EQ_BIQUAD_OVFL_MASK, align 4
  %21 = or i32 %19, %20
  %22 = load i32, i32* @CS42L42_MIX_CHB_OVFL_SHIFT, align 4
  %23 = shl i32 1, %22
  %24 = load i32, i32* @CS42L42_MIX_CHA_OVFL_SHIFT, align 4
  %25 = shl i32 1, %24
  %26 = or i32 %23, %25
  %27 = load i32, i32* @CS42L42_EQ_OVFL_SHIFT, align 4
  %28 = shl i32 1, %27
  %29 = or i32 %26, %28
  %30 = load i32, i32* @CS42L42_EQ_BIQUAD_OVFL_SHIFT, align 4
  %31 = shl i32 1, %30
  %32 = or i32 %29, %31
  %33 = call i32 @regmap_update_bits(i32 %13, i32 %14, i32 %21, i32 %32)
  %34 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %35 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %34, i32 0, i32 0
  %36 = load i32, i32* %35, align 4
  %37 = load i32, i32* @CS42L42_SRC_INT_MASK, align 4
  %38 = load i32, i32* @CS42L42_SRC_ILK_MASK, align 4
  %39 = load i32, i32* @CS42L42_SRC_OLK_MASK, align 4
  %40 = or i32 %38, %39
  %41 = load i32, i32* @CS42L42_SRC_IUNLK_MASK, align 4
  %42 = or i32 %40, %41
  %43 = load i32, i32* @CS42L42_SRC_OUNLK_MASK, align 4
  %44 = or i32 %42, %43
  %45 = load i32, i32* @CS42L42_SRC_ILK_SHIFT, align 4
  %46 = shl i32 1, %45
  %47 = load i32, i32* @CS42L42_SRC_OLK_SHIFT, align 4
  %48 = shl i32 1, %47
  %49 = or i32 %46, %48
  %50 = load i32, i32* @CS42L42_SRC_IUNLK_SHIFT, align 4
  %51 = shl i32 1, %50
  %52 = or i32 %49, %51
  %53 = load i32, i32* @CS42L42_SRC_OUNLK_SHIFT, align 4
  %54 = shl i32 1, %53
  %55 = or i32 %52, %54
  %56 = call i32 @regmap_update_bits(i32 %36, i32 %37, i32 %44, i32 %55)
  %57 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %58 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %57, i32 0, i32 0
  %59 = load i32, i32* %58, align 4
  %60 = load i32, i32* @CS42L42_ASP_RX_INT_MASK, align 4
  %61 = load i32, i32* @CS42L42_ASPRX_NOLRCK_MASK, align 4
  %62 = load i32, i32* @CS42L42_ASPRX_EARLY_MASK, align 4
  %63 = or i32 %61, %62
  %64 = load i32, i32* @CS42L42_ASPRX_LATE_MASK, align 4
  %65 = or i32 %63, %64
  %66 = load i32, i32* @CS42L42_ASPRX_ERROR_MASK, align 4
  %67 = or i32 %65, %66
  %68 = load i32, i32* @CS42L42_ASPRX_OVLD_MASK, align 4
  %69 = or i32 %67, %68
  %70 = load i32, i32* @CS42L42_ASPRX_NOLRCK_SHIFT, align 4
  %71 = shl i32 1, %70
  %72 = load i32, i32* @CS42L42_ASPRX_EARLY_SHIFT, align 4
  %73 = shl i32 1, %72
  %74 = or i32 %71, %73
  %75 = load i32, i32* @CS42L42_ASPRX_LATE_SHIFT, align 4
  %76 = shl i32 1, %75
  %77 = or i32 %74, %76
  %78 = load i32, i32* @CS42L42_ASPRX_ERROR_SHIFT, align 4
  %79 = shl i32 1, %78
  %80 = or i32 %77, %79
  %81 = load i32, i32* @CS42L42_ASPRX_OVLD_SHIFT, align 4
  %82 = shl i32 1, %81
  %83 = or i32 %80, %82
  %84 = call i32 @regmap_update_bits(i32 %59, i32 %60, i32 %69, i32 %83)
  %85 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %86 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %85, i32 0, i32 0
  %87 = load i32, i32* %86, align 4
  %88 = load i32, i32* @CS42L42_ASP_TX_INT_MASK, align 4
  %89 = load i32, i32* @CS42L42_ASPTX_NOLRCK_MASK, align 4
  %90 = load i32, i32* @CS42L42_ASPTX_EARLY_MASK, align 4
  %91 = or i32 %89, %90
  %92 = load i32, i32* @CS42L42_ASPTX_LATE_MASK, align 4
  %93 = or i32 %91, %92
  %94 = load i32, i32* @CS42L42_ASPTX_SMERROR_MASK, align 4
  %95 = or i32 %93, %94
  %96 = load i32, i32* @CS42L42_ASPTX_NOLRCK_SHIFT, align 4
  %97 = shl i32 1, %96
  %98 = load i32, i32* @CS42L42_ASPTX_EARLY_SHIFT, align 4
  %99 = shl i32 1, %98
  %100 = or i32 %97, %99
  %101 = load i32, i32* @CS42L42_ASPTX_LATE_SHIFT, align 4
  %102 = shl i32 1, %101
  %103 = or i32 %100, %102
  %104 = load i32, i32* @CS42L42_ASPTX_SMERROR_SHIFT, align 4
  %105 = shl i32 1, %104
  %106 = or i32 %103, %105
  %107 = call i32 @regmap_update_bits(i32 %87, i32 %88, i32 %95, i32 %106)
  %108 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %109 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %108, i32 0, i32 0
  %110 = load i32, i32* %109, align 4
  %111 = load i32, i32* @CS42L42_CODEC_INT_MASK, align 4
  %112 = load i32, i32* @CS42L42_PDN_DONE_MASK, align 4
  %113 = load i32, i32* @CS42L42_HSDET_AUTO_DONE_MASK, align 4
  %114 = or i32 %112, %113
  %115 = load i32, i32* @CS42L42_PDN_DONE_SHIFT, align 4
  %116 = shl i32 1, %115
  %117 = load i32, i32* @CS42L42_HSDET_AUTO_DONE_SHIFT, align 4
  %118 = shl i32 1, %117
  %119 = or i32 %116, %118
  %120 = call i32 @regmap_update_bits(i32 %110, i32 %111, i32 %114, i32 %119)
  %121 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %122 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %121, i32 0, i32 0
  %123 = load i32, i32* %122, align 4
  %124 = load i32, i32* @CS42L42_SRCPL_INT_MASK, align 4
  %125 = load i32, i32* @CS42L42_SRCPL_ADC_LK_MASK, align 4
  %126 = load i32, i32* @CS42L42_SRCPL_DAC_LK_MASK, align 4
  %127 = or i32 %125, %126
  %128 = load i32, i32* @CS42L42_SRCPL_ADC_UNLK_MASK, align 4
  %129 = or i32 %127, %128
  %130 = load i32, i32* @CS42L42_SRCPL_DAC_UNLK_MASK, align 4
  %131 = or i32 %129, %130
  %132 = load i32, i32* @CS42L42_SRCPL_ADC_LK_SHIFT, align 4
  %133 = shl i32 1, %132
  %134 = load i32, i32* @CS42L42_SRCPL_DAC_LK_SHIFT, align 4
  %135 = shl i32 1, %134
  %136 = or i32 %133, %135
  %137 = load i32, i32* @CS42L42_SRCPL_ADC_UNLK_SHIFT, align 4
  %138 = shl i32 1, %137
  %139 = or i32 %136, %138
  %140 = load i32, i32* @CS42L42_SRCPL_DAC_UNLK_SHIFT, align 4
  %141 = shl i32 1, %140
  %142 = or i32 %139, %141
  %143 = call i32 @regmap_update_bits(i32 %123, i32 %124, i32 %131, i32 %142)
  %144 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %145 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %144, i32 0, i32 0
  %146 = load i32, i32* %145, align 4
  %147 = load i32, i32* @CS42L42_DET_INT1_MASK, align 4
  %148 = load i32, i32* @CS42L42_TIP_SENSE_UNPLUG_MASK, align 4
  %149 = load i32, i32* @CS42L42_TIP_SENSE_PLUG_MASK, align 4
  %150 = or i32 %148, %149
  %151 = load i32, i32* @CS42L42_HSBIAS_SENSE_MASK, align 4
  %152 = or i32 %150, %151
  %153 = load i32, i32* @CS42L42_TIP_SENSE_UNPLUG_SHIFT, align 4
  %154 = shl i32 1, %153
  %155 = load i32, i32* @CS42L42_TIP_SENSE_PLUG_SHIFT, align 4
  %156 = shl i32 1, %155
  %157 = or i32 %154, %156
  %158 = load i32, i32* @CS42L42_HSBIAS_SENSE_SHIFT, align 4
  %159 = shl i32 1, %158
  %160 = or i32 %157, %159
  %161 = call i32 @regmap_update_bits(i32 %146, i32 %147, i32 %152, i32 %160)
  %162 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %163 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %162, i32 0, i32 0
  %164 = load i32, i32* %163, align 4
  %165 = load i32, i32* @CS42L42_DET_INT2_MASK, align 4
  %166 = load i32, i32* @CS42L42_M_DETECT_TF_MASK, align 4
  %167 = load i32, i32* @CS42L42_M_DETECT_FT_MASK, align 4
  %168 = or i32 %166, %167
  %169 = load i32, i32* @CS42L42_M_HSBIAS_HIZ_MASK, align 4
  %170 = or i32 %168, %169
  %171 = load i32, i32* @CS42L42_M_SHORT_RLS_MASK, align 4
  %172 = or i32 %170, %171
  %173 = load i32, i32* @CS42L42_M_SHORT_DET_MASK, align 4
  %174 = or i32 %172, %173
  %175 = load i32, i32* @CS42L42_M_DETECT_TF_SHIFT, align 4
  %176 = shl i32 1, %175
  %177 = load i32, i32* @CS42L42_M_DETECT_FT_SHIFT, align 4
  %178 = shl i32 1, %177
  %179 = or i32 %176, %178
  %180 = load i32, i32* @CS42L42_M_HSBIAS_HIZ_SHIFT, align 4
  %181 = shl i32 1, %180
  %182 = or i32 %179, %181
  %183 = load i32, i32* @CS42L42_M_SHORT_RLS_SHIFT, align 4
  %184 = shl i32 1, %183
  %185 = or i32 %182, %184
  %186 = load i32, i32* @CS42L42_M_SHORT_DET_SHIFT, align 4
  %187 = shl i32 1, %186
  %188 = or i32 %185, %187
  %189 = call i32 @regmap_update_bits(i32 %164, i32 %165, i32 %174, i32 %188)
  %190 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %191 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %190, i32 0, i32 0
  %192 = load i32, i32* %191, align 4
  %193 = load i32, i32* @CS42L42_VPMON_INT_MASK, align 4
  %194 = load i32, i32* @CS42L42_VPMON_MASK, align 4
  %195 = load i32, i32* @CS42L42_VPMON_SHIFT, align 4
  %196 = shl i32 1, %195
  %197 = call i32 @regmap_update_bits(i32 %192, i32 %193, i32 %194, i32 %196)
  %198 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %199 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %198, i32 0, i32 0
  %200 = load i32, i32* %199, align 4
  %201 = load i32, i32* @CS42L42_PLL_LOCK_INT_MASK, align 4
  %202 = load i32, i32* @CS42L42_PLL_LOCK_MASK, align 4
  %203 = load i32, i32* @CS42L42_PLL_LOCK_SHIFT, align 4
  %204 = shl i32 1, %203
  %205 = call i32 @regmap_update_bits(i32 %200, i32 %201, i32 %202, i32 %204)
  %206 = load %struct.cs42l42_private*, %struct.cs42l42_private** %2, align 8
  %207 = getelementptr inbounds %struct.cs42l42_private, %struct.cs42l42_private* %206, i32 0, i32 0
  %208 = load i32, i32* %207, align 4
  %209 = load i32, i32* @CS42L42_TSRS_PLUG_INT_MASK, align 4
  %210 = load i32, i32* @CS42L42_RS_PLUG_MASK, align 4
  %211 = load i32, i32* @CS42L42_RS_UNPLUG_MASK, align 4
  %212 = or i32 %210, %211
  %213 = load i32, i32* @CS42L42_TS_PLUG_MASK, align 4
  %214 = or i32 %212, %213
  %215 = load i32, i32* @CS42L42_TS_UNPLUG_MASK, align 4
  %216 = or i32 %214, %215
  %217 = load i32, i32* @CS42L42_RS_PLUG_SHIFT, align 4
  %218 = shl i32 1, %217
  %219 = load i32, i32* @CS42L42_RS_UNPLUG_SHIFT, align 4
  %220 = shl i32 1, %219
  %221 = or i32 %218, %220
  %222 = load i32, i32* @CS42L42_TS_PLUG_SHIFT, align 4
  %223 = shl i32 0, %222
  %224 = or i32 %221, %223
  %225 = load i32, i32* @CS42L42_TS_UNPLUG_SHIFT, align 4
  %226 = shl i32 0, %225
  %227 = or i32 %224, %226
  %228 = call i32 @regmap_update_bits(i32 %208, i32 %209, i32 %216, i32 %227)
  ret void
}

declare dso_local i32 @regmap_update_bits(i32, i32, i32, i32) #1

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.1 (https://github.com/wsmoses/llvm-project-tok c8e5003577614e72d6d18a216e6a09771e1fcce4)"}
